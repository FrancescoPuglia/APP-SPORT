{"version":3,"sources":["components/MotivationalQuotes.js","components/CalendarStreak.js","components/ExerciseTracker.js","components/SupplementStack.js","components/RecoveryProtocol.js","components/Dashboard.js","components/WorkoutTimer.js","components/TechniqueGuides.js","components/Workout.js","components/Nutrition.js","components/Supplements.js","components/Recovery.js","components/Progress.js","firebase/config.js","firebase/auth.js","firebase/firestore.js","firebase/migration.js","components/AuthProvider.js","validation/schemas.js","App.js","index.js"],"names":["MotivationalQuotes","legendaryQuotes","day","quote","author","context","additionalQuotes","getTodayQuote","today","Date","getDay","find","q","getRandomAdditionalQuote","Math","floor","random","length","CalendarStreak","currentDate","setCurrentDate","React","useState","streakData","setStreakData","monthlyStats","setMonthlyStats","calculateMonthlyStats","data","arguments","undefined","currentMonth","getMonth","currentYear","getFullYear","monthlyWorkouts","Object","keys","filter","dateKey","date","completed","currentStreak","calculateCurrentStreak","longestStreak","calculateLongestStreak","weeklyAverage","calculateWeeklyAverage","lastUpdated","streak","checkDate","toISOString","split","setDate","getDate","toDateString","maxStreak","sortedDates","key","sort","i","prevDate","max","fourWeeksAgo","toFixed","useEffect","loadStreakData","saved","localStorage","getItem","JSON","parse","markWorkoutCompleted","workoutType","exercises","updated","_objectSpread","timestamp","setItem","stringify","getDaysInMonth","year","month","firstDay","daysInMonth","startingDayOfWeek","days","push","currentDay","isCompleted","isToday","navigateMonth","direction","newDate","setMonth","getStreakColor","getWorkoutTypeEmoji","type","monthNames","dayNames","ExerciseTracker","exerciseData","setExerciseData","sessionProgress","setSessionProgress","personalRecords","setPersonalRecords","updatePersonalRecord","exerciseName","weight","reps","oneRepMax","calculateOneRepMax","currentPR","updatedPR","parseFloat","parseInt","previousRecord","round","updateSessionProgress","todayExercises","values","ex","prev","totalCompleted","getExerciseHistory","limit","a","b","slice","isExerciseCompletedToday","some","loadExerciseData","savedPR","markExerciseCompleted","sets","notes","rir","exerciseId","concat","exerciseEntry","id","getTodayProgress","workoutExercises","total","percentage","remaining","getWeeklyStats","oneWeekAgo","weeklyExercises","totalSets","reduce","sum","totalReps","totalVolume","uniqueExercises","Set","map","size","sessions","averageWeight","getMonthlyProgress","oneMonthAgo","monthlyExercises","workoutDays","totalExercises","averageVolume","getExerciseProgressColor","_history$","history","lastWeight","avgWeight","SupplementStack","supplementSchedule","setSupplementSchedule","takenToday","setTakenToday","evidenceBasedSupplements","creatine","name","dosage","timing","evidence","benefits","mechanism","color","icon","citrulline","betaAlanine","omega3","caffeine","vitaminD","isSupplementTakenToday","supplementKey","entryKey","taken","loadTodaysSupplements","todayData","forEach","includes","removedSupplements","hmb","forskolin","rAla","bcaa","glutamine","markSupplementTaken","supplement","getSupplementProgress","totalSupplements","takenCount","getWeeklySupplementStats","weeklyEntries","entry","consistency","supplementEntries","getOptimalTiming","currentTime","hour","getHours","recommendations","reason","workoutHour","createSupplementPlan","workoutSchedule","goals","core","performance","endurance","morning","preWorkout","postWorkout","evening","RecoveryProtocol","recoveryLog","setRecoveryLog","todayRecovery","setTodayRecovery","thermoTherapyProtocols","sauna","temperature","humidity","duration","protocol","precautions","scientificEvidence","steamRoom","iceBath","loadRecoveryData","todaySessions","s","totalTime","contrastTherapy","optimalTiming","immediate","after2h","after4h","nextMorning","restDays","competition","before","after","biohacking","breathwork","supplements","preSauna","preIceBath","postBoth","monitoring","heartRate","bodyTemp","subjective","markRecoverySession","therapy","effectiveness","sessionId","now","session","updatedLog","getRecoveryRecommendation","lastWorkout","workoutIntensity","stressLevel","hoursSinceWorkout","priority","getRecoveryStats","last7Days","sessionDate","weekAgo","stats","totalSessions","averageEffectiveness","therapyBreakdown","time","Dashboard","quotesHook","calendarHook","exerciseHook","supplementsHook","recoveryHook","dashboardData","setDashboardData","currentWeight","muscleGain","workoutSessions","totalWorkoutTime","weeklyTime","daysActive","todayWorkout","setTodayWorkout","goals12Week","setGoals12Week","startWeight","targetWeight","targetBench","targetSquat","targetDeadlift","startDate","weeksCompleted","loadDashboardData","_workoutSessions$","progressData","timeStats","latestProgress","firstProgress","getTime","muscleMass","focus","todayQuote","todayProgress","supplementProgress","weeklyStats","recoveryStats","_jsxs","className","children","_jsx","style","width","Link","to","index","min","WorkoutTimer","_ref","onSessionComplete","isActive","setIsActive","currentExercise","setCurrentExercise","sessionTime","setSessionTime","exerciseTime","setExerciseTime","setExercises","currentExerciseIndex","setCurrentExerciseIndex","interval","setInterval","clearInterval","nextExercise","calculateWeeklyTime","calculateMonthlyTime","formatTime","seconds","mins","secs","toString","padStart","placeholder","value","onChange","e","target","disabled","onClick","pauseSession","completeSession","sessionData","updatedSessions","updatedTimeStats","monthlyTime","sessionsCompleted","startSession","exercise","TechniqueGuides","masterTechniques","category","difficulty","muscles","setup","execution","breathing","commonMistakes","progressionTips","safetyNotes","getTechniqueCue","phase","getProgressionLevel","userLevel","beginner","approach","volume","intermediate","advanced","getInjuryPrevention","prevention","warmup","cooldown","redFlags","alternatives","getMindMuscleCues","getExerciseRating","safety","transferability","overall","Workout","selectedDay","setSelectedDay","completedWorkouts","setCompletedWorkouts","selectedExercise","setSelectedExercise","exerciseForm","setExerciseForm","showTechnique","setShowTechnique","workoutPlan","subtitle","rest","isWorkoutCompletedToday","workout","loadCompletedWorkouts","console","log","entries","_ref2","Nutrition","navigate","useNavigate","completedMeals","setCompletedMeals","setCurrentStreak","weeklyDiet","meals","food","proteins","calories","ingredients","updateStreak","todayMeals","meal","newStreak","isMealCompleted","mealId","getDayProgress","title","getTotalProteins","getTotalCalories","newCompleted","toggleMeal","ingredient","idx","removeItem","Supplements","selectedCategory","setSelectedCategory","currentStack","setCurrentStack","cost","description","instructions","categories","all","protein","health","recovery","timingLabels","isSupplementTaken","suppId","removeFromStack","newStack","getCompletionRate","stackSupplements","_supplements$suppId","replace","newTaken","toggleSupplement","supp","_ref3","inStack","benefit","addToStack","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref0","_ref1","Recovery","activeSession","setActiveSession","sessionHistory","setSessionHistory","currentTimer","setCurrentTimer","isTimerRunning","setIsTimerRunning","selectedProtocol","setSelectedProtocol","recoveryProtocols","equipment","contraindications","endSession","newHistory","quality","getSessionStats","thisWeek","totalDuration","avgDuration","totalHours","heat","cold","contrast","manual","movement","mental","_categories$protocol$","instruction","warning","protocolId","toLocaleDateString","toLocaleTimeString","minute","Progress","setProgressData","newEntry","setNewEntry","bodyFat","chest","arms","waist","thighs","setTimeStats","saveProgressData","minutes","hours","loadProgressData","savedTimeStats","addEntry","deleteEntry","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","db","getFirestore","getStorage","analytics","isSupported","then","supported","getAnalytics","process","REACT_APP_USE_FIREBASE_EMULATORS","logger","message","error","warn","googleProvider","GoogleAuthProvider","addScope","authService","constructor","this","currentUser","authStateListeners","initializeAuthListener","onAuthStateChanged","user","notifyAuthStateListeners","uid","email","displayName","updateUserLastSeen","onAuthStateChange","callback","cb","signInWithEmail","password","signInWithEmailAndPassword","success","handleAuthError","signUpWithEmail","createUserWithEmailAndPassword","updateProfile","createUserDocument","signInWithGoogle","signInWithPopup","photoURL","provider","signOutUser","signOut","resetPassword","sendPasswordResetEmail","updateUserPassword","currentPassword","newPassword","Error","credential","EmailAuthProvider","reauthenticateWithCredential","updatePassword","additionalData","userRef","doc","getDoc","exists","setDoc","lastSeen","serverTimestamp","merge","userData","createdAt","settings","units","language","notifications","darkMode","profile","age","height","activityLevel","experience","isOnline","code","originalError","isAuthenticated","getCurrentUser","deleteAccount","deleteUser","BaseRepository","collectionName","collectionRef","collection","cache","Map","listeners","getById","useCache","has","cached","get","fromCache","docRef","docSnap","set","create","customId","_authService$getCurre","userId","docData","updatedAt","addDoc","newId","invalidateCache","update","updateData","updateDoc","delete","deleteDoc","getWithQuery","queryConstraints","query","querySnapshot","getDocs","docs","count","subscribeToChanges","onSnapshot","clear","progressRepo","super","getUserProgress","_authService$getCurre2","endDate","constraints","where","orderBy","addMeasurement","measurementData","getPeriodStats","_authService$getCurre3","result","latest","oldest","totalEntries","weightChange","muscleMassChange","bodyFatChange","period","workoutRepo","workoutData","status","startTime","completionData","endTime","completedAt","getUserSessions","_authService$getCurre4","getWorkoutStats","recentSessions","_session$createdAt","_session$createdAt$to","toDate","call","averageDuration","exerciseStats","_session$exercises","exerciseRepo","logExercise","getPersonalRecords","_authService$getCurre5","unshift","prs","userRepo","getCurrentUserProfile","_authService$getCurre6","updateSettings","_authService$getCurre7","profileData","_authService$getCurre8","logMeal","mealData","updateMealStatus","getUserMeals","_authService$getCurre9","getDayMeals","_authService$getCurre0","getNutritionStats","_authService$getCurre1","m","totalMeals","adherenceRate","totalProteins","avgProteinsPerDay","calculateNutritionStreak","mealsByDay","reverse","dayMeals","logRecoverySession","recoveryData","getUserRecoverySessions","_authService$getCurre10","getDayRecoverySessions","_authService$getCurre11","_authService$getCurre12","activityBreakdown","activityType","weeklyFrequency","ceil","migrationKey","backupKey","isMigrationCompleted","markMigrationCompleted","migrationData","version","createBackup","backupData","safeGetLocalStorage","userSettings","backupString","backup","migrateAllData","migrationReport","steps","errors","totalItems","migratedItems","backupResult","progressResult","migrateProgressData","workoutResult","migrateWorkoutSessions","exerciseResult","migrateExerciseData","userResult","migrateUserSettings","verificationResult","verifyMigration","verificationPassed","details","report","item","cleanedData","cleanProgressData","createResult","sleep","cleanWorkoutSession","cleanExerciseData","fitnessStats","preferences","migratedFrom","migrationDate","updateResult","cleaned","validateNumber","validateString","workoutName","Array","isArray","Number","MAX_SAFE_INTEGER","num","isNaN","maxLength","trim","substring","_progressCheck$data","_workoutCheck$data","progressCheck","workoutCheck","userCheck","checks","progress","workouts","userProfile","allPassed","every","check","progressCount","workoutCount","hasUserProfile","rollbackMigration","ms","Promise","resolve","setTimeout","getMigrationStatus","hasBackup","AuthProvider","yup","mixed","default","required","notType","string","number","positive","integer","weightValidation","typeError","percentageValidation","measurementValidation","dateValidation","passwordValidation","matches","exerciseSchema","confirmPassword","oneOf","nullable","acceptTerms","rememberMe","confirmNewPassword","test","of","intensity","fitnessGoals","publicProfile","parent","abs","targetDate","workoutReminders","progressReminders","achievementAlerts","emailNotifications","pushNotifications","privacy","profileVisibility","shareProgress","shareWorkouts","allowFriendRequests","display","theme","dateFormat","timeFormat","distance","LazyAnalytics","lazy","LazyNutritionTracker","LazyRecoveryTimer","AppContent","Router","Routes","Route","path","element","Suspense","fallback","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.369e6ec7.chunk.js","sourcesContent":["import React from 'react';\n\nconst MotivationalQuotes = () => {\n    const legendaryQuotes = [\n        {\n            day: 1, // Lunedì\n            quote: \"Champions aren't made in the gyms. Champions are made from something deep inside them: a desire, a dream, a vision.\",\n            author: \"Muhammad Ali\",\n            context: \"Petto + Bicipiti - Inizia la settimana con la forza del campione\"\n        },\n        {\n            day: 2, // Martedì  \n            quote: \"The cave you fear to enter holds the treasure you seek.\",\n            author: \"Arnold Schwarzenegger\",\n            context: \"Dorso + Tricipiti - Affronta la paura, trova la forza\"\n        },\n        {\n            day: 3, // Mercoledì\n            quote: \"Strength does not come from physical capacity. It comes from an indomitable will.\",\n            author: \"Mahatma Gandhi (adattato da Kobe Bryant)\",\n            context: \"Gambe Complete - La vera forza viene dalla mente\"\n        },\n        {\n            day: 4, // Giovedì\n            quote: \"Recovery is not a sign of weakness, it's a strategy of champions.\",\n            author: \"LeBron James\",\n            context: \"Recupero Attivo - Il riposo è parte della vittoria\"\n        },\n        {\n            day: 5, // Venerdì\n            quote: \"Excellence is not a skill, it's an attitude.\",\n            author: \"Ralph Marston (filosofia Michael Jordan)\",\n            context: \"Spalle + Core - L'eccellenza è una scelta quotidiana\"\n        },\n        {\n            day: 6, // Sabato\n            quote: \"The body achieves what the mind believes.\",\n            author: \"Napoleon Hill (ispirato da Serena Williams)\",\n            context: \"Posteriori + Conditioning - Credi e raggiungerai\"\n        },\n        {\n            day: 0, // Domenica\n            quote: \"Rest when you're weary. Refresh and renew yourself, your body, your mind, your spirit. Then get back to work.\",\n            author: \"Ralph Marston\",\n            context: \"Riposo Completo - Rigenera per dominare\"\n        }\n    ];\n\n    const additionalQuotes = [\n        {\n            quote: \"I don't measure a man's success by how high he climbs but how high he bounces when he hits bottom.\",\n            author: \"George S. Patton\",\n            context: \"Per i giorni difficili\"\n        },\n        {\n            quote: \"The will to win, the desire to succeed, the urge to reach your full potential... these are the keys that will unlock the door to personal excellence.\",\n            author: \"Confucio (filosofia Kobe Bryant)\",\n            context: \"Quando manca la motivazione\"\n        },\n        {\n            quote: \"Pain is temporary. Quitting lasts forever.\",\n            author: \"Lance Armstrong\",\n            context: \"Durante l'allenamento intenso\"\n        },\n        {\n            quote: \"You have power over your mind - not outside events. Realize this, and you will find strength.\",\n            author: \"Marcus Aurelius (filosofia Tom Brady)\",\n            context: \"Controllo mentale\"\n        },\n        {\n            quote: \"The brick walls are there for a reason. The brick walls are not there to keep us out. The brick walls are there to give us a chance to show how badly we want something.\",\n            author: \"Randy Pausch (mentalità Cristiano Ronaldo)\",\n            context: \"Superare gli ostacoli\"\n        }\n    ];\n\n    const getTodayQuote = () => {\n        const today = new Date().getDay(); // 0 = Domenica, 1 = Lunedì, etc.\n        return legendaryQuotes.find(q => q.day === today) || legendaryQuotes[0];\n    };\n\n    const getRandomAdditionalQuote = () => {\n        return additionalQuotes[Math.floor(Math.random() * additionalQuotes.length)];\n    };\n\n    return {\n        getTodayQuote,\n        getRandomAdditionalQuote,\n        legendaryQuotes,\n        additionalQuotes\n    };\n};\n\nexport default MotivationalQuotes;","import React from 'react';\n\nconst CalendarStreak = () => {\n    const [currentDate, setCurrentDate] = React.useState(new Date());\n    const [streakData, setStreakData] = React.useState({});\n    const [monthlyStats, setMonthlyStats] = React.useState({});\n\n    const loadStreakData = () => {\n        const saved = localStorage.getItem('streakData');\n        if (saved) {\n            setStreakData(JSON.parse(saved));\n        }\n    };\n\n    const saveStreakData = (data) => {\n        localStorage.setItem('streakData', JSON.stringify(data));\n        setStreakData(data);\n    };\n\n    const markWorkoutCompleted = (date, workoutType, exercises = []) => {\n        const dateKey = date.toISOString().split('T')[0];\n        const updated = {\n            ...streakData,\n            [dateKey]: {\n                completed: true,\n                workoutType,\n                exercises,\n                timestamp: new Date().toISOString()\n            }\n        };\n        saveStreakData(updated);\n        calculateMonthlyStats(updated);\n    };\n\n    const calculateMonthlyStats = (data = streakData) => {\n        const currentMonth = currentDate.getMonth();\n        const currentYear = currentDate.getFullYear();\n        \n        const monthlyWorkouts = Object.keys(data).filter(dateKey => {\n            const date = new Date(dateKey);\n            return date.getMonth() === currentMonth && \n                   date.getFullYear() === currentYear &&\n                   data[dateKey].completed;\n        }).length;\n\n        const currentStreak = calculateCurrentStreak(data);\n        const longestStreak = calculateLongestStreak(data);\n        const weeklyAverage = calculateWeeklyAverage(data);\n\n        setMonthlyStats({\n            monthlyWorkouts,\n            currentStreak,\n            longestStreak,\n            weeklyAverage,\n            lastUpdated: new Date()\n        });\n    };\n\n    const calculateCurrentStreak = (data) => {\n        const today = new Date();\n        let streak = 0;\n        let checkDate = new Date(today);\n\n        while (checkDate) {\n            const dateKey = checkDate.toISOString().split('T')[0];\n            if (data[dateKey] && data[dateKey].completed) {\n                streak++;\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else if (streak === 0 && checkDate.toDateString() === today.toDateString()) {\n                // Se oggi non è completato, controlla ieri\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else {\n                break;\n            }\n            \n            // Evita loop infiniti\n            if (streak > 365) break;\n        }\n        \n        return streak;\n    };\n\n    const calculateLongestStreak = (data) => {\n        let maxStreak = 0;\n        let currentStreak = 0;\n        \n        const sortedDates = Object.keys(data)\n            .filter(key => data[key].completed)\n            .sort();\n        \n        for (let i = 0; i < sortedDates.length; i++) {\n            if (i === 0) {\n                currentStreak = 1;\n            } else {\n                const prevDate = new Date(sortedDates[i - 1]);\n                const currDate = new Date(sortedDates[i]);\n                const daysDiff = (currDate - prevDate) / (1000 * 60 * 60 * 24);\n                \n                if (daysDiff === 1) {\n                    currentStreak++;\n                } else {\n                    maxStreak = Math.max(maxStreak, currentStreak);\n                    currentStreak = 1;\n                }\n            }\n        }\n        \n        return Math.max(maxStreak, currentStreak);\n    };\n\n    const calculateWeeklyAverage = (data) => {\n        const fourWeeksAgo = new Date();\n        fourWeeksAgo.setDate(fourWeeksAgo.getDate() - 28);\n        \n        const recentWorkouts = Object.keys(data).filter(dateKey => {\n            const date = new Date(dateKey);\n            return date >= fourWeeksAgo && data[dateKey].completed;\n        }).length;\n        \n        return (recentWorkouts / 4).toFixed(1);\n    };\n\n    const getDaysInMonth = (date) => {\n        const year = date.getFullYear();\n        const month = date.getMonth();\n        const firstDay = new Date(year, month, 1);\n        const lastDay = new Date(year, month + 1, 0);\n        const daysInMonth = lastDay.getDate();\n        const startingDayOfWeek = firstDay.getDay();\n\n        const days = [];\n        \n        // Aggiungi giorni vuoti per allineare il calendario\n        for (let i = 0; i < startingDayOfWeek; i++) {\n            days.push(null);\n        }\n        \n        // Aggiungi tutti i giorni del mese\n        for (let day = 1; day <= daysInMonth; day++) {\n            const currentDay = new Date(year, month, day);\n            const dateKey = currentDay.toISOString().split('T')[0];\n            days.push({\n                date: currentDay,\n                day,\n                isCompleted: streakData[dateKey] && streakData[dateKey].completed,\n                workoutType: streakData[dateKey] ? streakData[dateKey].workoutType : null,\n                isToday: currentDay.toDateString() === new Date().toDateString()\n            });\n        }\n        \n        return days;\n    };\n\n    const navigateMonth = (direction) => {\n        const newDate = new Date(currentDate);\n        newDate.setMonth(newDate.getMonth() + direction);\n        setCurrentDate(newDate);\n    };\n\n    const getStreakColor = (streak) => {\n        if (streak >= 30) return '#ff006e'; // Rosa intenso\n        if (streak >= 21) return '#ff9500'; // Arancione \n        if (streak >= 14) return '#00ff88'; // Verde\n        if (streak >= 7) return '#00ffff';  // Cyan\n        return '#ffffff'; // Bianco\n    };\n\n    const getWorkoutTypeEmoji = (type) => {\n        const emojiMap = {\n            'Petto + Bicipiti': '💪',\n            'Dorso + Tricipiti + Collo (A)': '🏋️',\n            'Gambe Complete': '🦵',\n            'Recupero Attivo': '🧘',\n            'Spalle Complete + Collo (B)': '💫',\n            'Posteriori + Conditioning': '🔥',\n            'Riposo Completo': '😴'\n        };\n        return emojiMap[type] || '💪';\n    };\n\n    React.useEffect(() => {\n        loadStreakData();\n    }, []);\n\n    React.useEffect(() => {\n        calculateMonthlyStats();\n    }, [streakData, currentDate]);\n\n    const monthNames = [\n        'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n        'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n    ];\n\n    const dayNames = ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab'];\n\n    return {\n        currentDate,\n        streakData,\n        monthlyStats,\n        markWorkoutCompleted,\n        getDaysInMonth,\n        navigateMonth,\n        getStreakColor,\n        getWorkoutTypeEmoji,\n        monthNames,\n        dayNames,\n        calculateCurrentStreak: () => calculateCurrentStreak(streakData)\n    };\n};\n\nexport default CalendarStreak;","import React from 'react';\n\nconst ExerciseTracker = () => {\n    const [exerciseData, setExerciseData] = React.useState({});\n    const [sessionProgress, setSessionProgress] = React.useState({});\n    const [personalRecords, setPersonalRecords] = React.useState({});\n\n    const loadExerciseData = () => {\n        const saved = localStorage.getItem('exerciseData');\n        if (saved) {\n            setExerciseData(JSON.parse(saved));\n        }\n        \n        const savedPR = localStorage.getItem('personalRecords');\n        if (savedPR) {\n            setPersonalRecords(JSON.parse(savedPR));\n        }\n    };\n\n    const saveExerciseData = (data) => {\n        localStorage.setItem('exerciseData', JSON.stringify(data));\n        setExerciseData(data);\n    };\n\n    const savePersonalRecords = (data) => {\n        localStorage.setItem('personalRecords', JSON.stringify(data));\n        setPersonalRecords(data);\n    };\n\n    const markExerciseCompleted = (exerciseName, sets, reps, weight, notes = '', rir = null) => {\n        const today = new Date().toISOString().split('T')[0];\n        const exerciseId = `${exerciseName}_${today}`;\n        \n        const exerciseEntry = {\n            id: exerciseId,\n            exerciseName,\n            date: today,\n            sets: parseInt(sets),\n            reps: parseInt(reps),\n            weight: parseFloat(weight),\n            notes,\n            rir,\n            timestamp: new Date().toISOString(),\n            completed: true\n        };\n\n        const updated = {\n            ...exerciseData,\n            [exerciseId]: exerciseEntry\n        };\n        \n        saveExerciseData(updated);\n        \n        // Aggiorna record personali se necessario\n        updatePersonalRecord(exerciseName, weight, reps);\n        \n        // Aggiorna progresso sessione\n        updateSessionProgress(exerciseName);\n        \n        return exerciseEntry;\n    };\n\n    const updatePersonalRecord = (exerciseName, weight, reps) => {\n        const oneRepMax = calculateOneRepMax(weight, reps);\n        const currentPR = personalRecords[exerciseName] || { weight: 0, reps: 0, oneRepMax: 0, date: null };\n        \n        if (oneRepMax > currentPR.oneRepMax || \n            (weight > currentPR.weight && reps >= currentPR.reps)) {\n            \n            const updatedPR = {\n                ...personalRecords,\n                [exerciseName]: {\n                    weight: parseFloat(weight),\n                    reps: parseInt(reps),\n                    oneRepMax,\n                    date: new Date().toISOString(),\n                    previousRecord: currentPR.oneRepMax\n                }\n            };\n            \n            savePersonalRecords(updatedPR);\n            \n            // Notifica nuovo record\n            return true;\n        }\n        \n        return false;\n    };\n\n    const calculateOneRepMax = (weight, reps) => {\n        // Formula Epley: 1RM = w * (1 + r/30)\n        return Math.round(weight * (1 + reps / 30));\n    };\n\n    const updateSessionProgress = (exerciseName) => {\n        const today = new Date().toISOString().split('T')[0];\n        const todayExercises = Object.values(exerciseData).filter(ex => \n            ex.date === today && ex.completed\n        );\n        \n        setSessionProgress(prev => ({\n            ...prev,\n            [exerciseName]: true,\n            totalCompleted: todayExercises.length + 1\n        }));\n    };\n\n    const getExerciseHistory = (exerciseName, limit = 10) => {\n        return Object.values(exerciseData)\n            .filter(ex => ex.exerciseName === exerciseName)\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .slice(0, limit);\n    };\n\n    const getTodayProgress = (workoutExercises) => {\n        const today = new Date().toISOString().split('T')[0];\n        const completedToday = Object.values(exerciseData).filter(ex => \n            ex.date === today && ex.completed\n        );\n        \n        const completed = completedToday.length;\n        const total = workoutExercises ? workoutExercises.length : 0;\n        const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;\n        \n        return {\n            completed,\n            total,\n            percentage,\n            remaining: Math.max(0, total - completed)\n        };\n    };\n\n    const getWeeklyStats = () => {\n        const oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n        \n        const weeklyExercises = Object.values(exerciseData).filter(ex => \n            new Date(ex.date) >= oneWeekAgo && ex.completed\n        );\n        \n        const totalSets = weeklyExercises.reduce((sum, ex) => sum + ex.sets, 0);\n        const totalReps = weeklyExercises.reduce((sum, ex) => sum + (ex.sets * ex.reps), 0);\n        const totalVolume = weeklyExercises.reduce((sum, ex) => sum + (ex.weight * ex.sets * ex.reps), 0);\n        const uniqueExercises = new Set(weeklyExercises.map(ex => ex.exerciseName)).size;\n        \n        return {\n            sessions: weeklyExercises.length,\n            totalSets,\n            totalReps,\n            totalVolume: Math.round(totalVolume),\n            uniqueExercises,\n            averageWeight: weeklyExercises.length > 0 ? \n                Math.round(weeklyExercises.reduce((sum, ex) => sum + ex.weight, 0) / weeklyExercises.length) : 0\n        };\n    };\n\n    const getMonthlyProgress = () => {\n        const oneMonthAgo = new Date();\n        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\n        \n        const monthlyExercises = Object.values(exerciseData).filter(ex => \n            new Date(ex.date) >= oneMonthAgo && ex.completed\n        );\n        \n        const workoutDays = new Set(monthlyExercises.map(ex => ex.date)).size;\n        const totalVolume = monthlyExercises.reduce((sum, ex) => \n            sum + (ex.weight * ex.sets * ex.reps), 0\n        );\n        \n        return {\n            workoutDays,\n            totalExercises: monthlyExercises.length,\n            totalVolume: Math.round(totalVolume),\n            averageVolume: workoutDays > 0 ? Math.round(totalVolume / workoutDays) : 0\n        };\n    };\n\n    const isExerciseCompletedToday = (exerciseName) => {\n        const today = new Date().toISOString().split('T')[0];\n        return Object.values(exerciseData).some(ex => \n            ex.exerciseName === exerciseName && \n            ex.date === today && \n            ex.completed\n        );\n    };\n\n    const getExerciseProgressColor = (exerciseName) => {\n        if (isExerciseCompletedToday(exerciseName)) {\n            return '#00ff88'; // Verde completato\n        }\n        \n        const history = getExerciseHistory(exerciseName, 3);\n        if (history.length === 0) {\n            return '#ffffff'; // Bianco nuovo esercizio\n        }\n        \n        // Analisi progressione\n        const lastWeight = history[0]?.weight || 0;\n        const avgWeight = history.reduce((sum, ex) => sum + ex.weight, 0) / history.length;\n        \n        if (lastWeight > avgWeight * 1.05) {\n            return '#ff9500'; // Arancione in progressione\n        } else if (lastWeight < avgWeight * 0.95) {\n            return '#ff006e'; // Rosa in calo\n        }\n        \n        return '#00ffff'; // Cyan stabile\n    };\n\n    React.useEffect(() => {\n        loadExerciseData();\n    }, []);\n\n    return {\n        exerciseData,\n        sessionProgress,\n        personalRecords,\n        markExerciseCompleted,\n        getExerciseHistory,\n        getTodayProgress,\n        getWeeklyStats,\n        getMonthlyProgress,\n        isExerciseCompletedToday,\n        getExerciseProgressColor,\n        updatePersonalRecord,\n        calculateOneRepMax\n    };\n};\n\nexport default ExerciseTracker;","import React from 'react';\n\nconst SupplementStack = () => {\n    const [supplementSchedule, setSupplementSchedule] = React.useState({});\n    const [takenToday, setTakenToday] = React.useState({});\n\n    const evidenceBasedSupplements = {\n        creatine: {\n            name: 'Creatina Monoidrato',\n            dosage: '3-5g',\n            timing: 'Post-workout o qualsiasi momento',\n            evidence: 'A+ (Oltre 500 studi)',\n            benefits: ['↑ Forza 5-15%', '↑ Potenza esplosiva', '↑ Volume allenamento', '↑ Massa muscolare'],\n            mechanism: 'Rigenera ATP per contrazioni muscolari ad alta intensità',\n            notes: 'Loading non necessario. Consistenza > timing. Funziona meglio con carboidrati.',\n            color: '#00ff88',\n            icon: '💪'\n        },\n        citrulline: {\n            name: 'L-Citrullina Malato',\n            dosage: '6-8g',\n            timing: '30-45min pre-workout',\n            evidence: 'A (Multipli RCT)',\n            benefits: ['↑ Pump muscolare', '↑ Resistenza', '↓ DOMS', '↑ Ossido nitrico'],\n            mechanism: 'Precursore arginina → NO → vasodilatazione',\n            notes: 'Più efficace della L-Arginina. Sinergia con caffeina.',\n            color: '#ff9500',\n            icon: '🔥'\n        },\n        betaAlanine: {\n            name: 'Beta-Alanina',\n            dosage: '3-5g',\n            timing: 'Divisa in 2-3 dosi giornaliere',\n            evidence: 'A (Evidenza consolidata)',\n            benefits: ['↑ Resistenza muscolare', '↓ Fatica 1-4 min sforzo', '↑ Volume alto-rep'],\n            mechanism: 'Aumenta carnosina muscolare → buffer acido lattico',\n            notes: 'Loading 2-4 settimane. Possibile parestesia (innocua).',\n            color: '#00ffff',\n            icon: '⚡'\n        },\n        omega3: {\n            name: 'Omega-3 EPA/DHA',\n            dosage: '2-3g EPA+DHA',\n            timing: 'Con pasti contenenti grassi',\n            evidence: 'A+ (Migliaia di studi)',\n            benefits: ['↓ Infiammazione', '↑ Recupero', '↑ Sintesi proteica', '↑ Salute cardiovascolare'],\n            mechanism: 'Modulazione cascata infiammatoria e membrane cellulari',\n            notes: 'Ratio EPA:DHA 2:1 ottimale. Qualità > quantità.',\n            color: '#0099ff',\n            icon: '🐟'\n        },\n        caffeine: {\n            name: 'Caffeina',\n            dosage: '200-400mg',\n            timing: '30-45min pre-workout',\n            evidence: 'A+ (Gold standard)',\n            benefits: ['↑ Focus', '↑ Energia', '↑ Performance', '↑ Metabolismo grassi'],\n            mechanism: 'Antagonista adenosina → vigilanza + mobilizzazione grassi',\n            notes: 'Tolleranza sviluppa rapidamente. Ciclare 1-2 settimane ogni mese.',\n            color: '#8B4513',\n            icon: '☕'\n        },\n        vitaminD: {\n            name: 'Vitamina D3',\n            dosage: '2000-4000 IU',\n            timing: 'Con pasto contenente grassi',\n            evidence: 'A (Critico se carente)',\n            benefits: ['↑ Testosterone', '↑ Forza', '↑ Salute ossea', '↑ Sistema immunitario'],\n            mechanism: 'Regolazione ormonale e assorbimento calcio',\n            notes: 'Test ematico raccomandato. Target: 30-50 ng/mL.',\n            color: '#FFD700',\n            icon: '☀️'\n        }\n    };\n\n    const removedSupplements = {\n        hmb: 'Scarsa evidenza per atleti allenati. Solo utile per anziani/principianti.',\n        forskolin: 'Studi inconsistenti. Nessun beneficio provato su composizione corporea.',\n        rAla: 'Evidenza limitata. Costo-beneficio sfavorevole vs omega-3.',\n        bcaa: 'Inutili se assumi proteine complete. Whey protein superiore.',\n        glutamine: 'Non ergogenica in soggetti sani. Solo utile in immunodepressione.'\n    };\n\n    const getOptimalTiming = (currentTime) => {\n        const hour = currentTime.getHours();\n        const recommendations = [];\n\n        // Mattino (6-10)\n        if (hour >= 6 && hour <= 10) {\n            recommendations.push({\n                supplement: 'vitaminD',\n                reason: 'Assorbimento ottimale con prima colazione'\n            });\n            recommendations.push({\n                supplement: 'omega3',\n                reason: 'Con grassi della colazione per biodisponibilità'\n            });\n        }\n\n        // Pre-workout (dipende dall'orario allenamento)\n        const workoutHour = 18; // Assumiamo allenamento serale\n        if (hour === workoutHour - 1) {\n            recommendations.push({\n                supplement: 'caffeine',\n                reason: '30-45min prima allenamento per picco energetico'\n            });\n            recommendations.push({\n                supplement: 'citrulline',\n                reason: 'Pre-workout per pump e resistenza'\n            });\n        }\n\n        // Post-workout\n        if (hour === workoutHour + 1) {\n            recommendations.push({\n                supplement: 'creatine',\n                reason: 'Post-workout con carboidrati per uptake'\n            });\n        }\n\n        // Sera\n        if (hour >= 20) {\n            recommendations.push({\n                supplement: 'betaAlanine',\n                reason: 'Loading serale per evitare parestesia diurna'\n            });\n        }\n\n        return recommendations;\n    };\n\n    const markSupplementTaken = (supplementKey, dosage, timing) => {\n        const today = new Date().toISOString().split('T')[0];\n        const entryKey = `${supplementKey}_${today}`;\n\n        const taken = {\n            ...takenToday,\n            [entryKey]: {\n                supplement: supplementKey,\n                dosage,\n                timing,\n                timestamp: new Date().toISOString(),\n                taken: true\n            }\n        };\n\n        setTakenToday(taken);\n        localStorage.setItem('supplementsTakenToday', JSON.stringify(taken));\n\n        // Salva nello storico\n        const history = JSON.parse(localStorage.getItem('supplementsHistory') || '{}');\n        history[entryKey] = taken[entryKey];\n        localStorage.setItem('supplementsHistory', JSON.stringify(history));\n    };\n\n    const isSupplementTakenToday = (supplementKey) => {\n        const today = new Date().toISOString().split('T')[0];\n        const entryKey = `${supplementKey}_${today}`;\n        return takenToday[entryKey] && takenToday[entryKey].taken;\n    };\n\n    const getSupplementProgress = () => {\n        const totalSupplements = Object.keys(evidenceBasedSupplements).length;\n        const takenCount = Object.keys(evidenceBasedSupplements).filter(key => \n            isSupplementTakenToday(key)\n        ).length;\n        \n        return {\n            taken: takenCount,\n            total: totalSupplements,\n            percentage: Math.round((takenCount / totalSupplements) * 100)\n        };\n    };\n\n    const getWeeklySupplementStats = () => {\n        const history = JSON.parse(localStorage.getItem('supplementsHistory') || '{}');\n        const oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n        const weeklyEntries = Object.values(history).filter(entry => \n            new Date(entry.timestamp) >= oneWeekAgo\n        );\n\n        const consistency = {};\n        Object.keys(evidenceBasedSupplements).forEach(key => {\n            const supplementEntries = weeklyEntries.filter(entry => entry.supplement === key);\n            consistency[key] = {\n                taken: supplementEntries.length,\n                percentage: Math.round((supplementEntries.length / 7) * 100)\n            };\n        });\n\n        return consistency;\n    };\n\n    const createSupplementPlan = (workoutSchedule, goals) => {\n        const plan = {\n            core: ['creatine', 'omega3', 'vitaminD'], // Sempre consigliati\n            performance: ['caffeine', 'citrulline'], // Per performance\n            endurance: ['betaAlanine'], // Per resistenza\n            timing: {\n                morning: ['vitaminD', 'omega3'],\n                preWorkout: ['caffeine', 'citrulline'],\n                postWorkout: ['creatine'],\n                evening: ['betaAlanine']\n            }\n        };\n\n        return plan;\n    };\n\n    const loadTodaysSupplements = () => {\n        const today = new Date().toISOString().split('T')[0];\n        const saved = localStorage.getItem('supplementsTakenToday');\n        if (saved) {\n            const data = JSON.parse(saved);\n            // Filtra solo quelli di oggi\n            const todayData = {};\n            Object.keys(data).forEach(key => {\n                if (key.includes(today)) {\n                    todayData[key] = data[key];\n                }\n            });\n            setTakenToday(todayData);\n        }\n    };\n\n    React.useEffect(() => {\n        loadTodaysSupplements();\n    }, []);\n\n    return {\n        evidenceBasedSupplements,\n        removedSupplements,\n        takenToday,\n        markSupplementTaken,\n        isSupplementTakenToday,\n        getSupplementProgress,\n        getWeeklySupplementStats,\n        getOptimalTiming,\n        createSupplementPlan\n    };\n};\n\nexport default SupplementStack;","import React from 'react';\n\nconst RecoveryProtocol = () => {\n    const [recoveryLog, setRecoveryLog] = React.useState({});\n    const [todayRecovery, setTodayRecovery] = React.useState({});\n\n    const thermoTherapyProtocols = {\n        sauna: {\n            name: 'Sauna Finlandese',\n            temperature: '80-100°C',\n            humidity: '10-20%',\n            duration: '15-20 min',\n            timing: 'Immediatamente post-workout',\n            mechanism: 'Heat Shock Proteins → Anabolismo + Cardiovascolare',\n            benefits: [\n                '↑ Growth Hormone 24x',\n                '↑ Heat Shock Proteins (riparazione)',\n                '↑ Vasodilatazione (nutrienti muscolari)', \n                '↑ Eliminazione metaboliti'\n            ],\n            protocol: [\n                '5-10 min iniziali per adattamento',\n                '2-3 sessioni da 15-20 min',\n                'Pause 2-3 min aria fresca tra sessioni',\n                'Idratazione: 500ml acqua + elettroliti'\n            ],\n            precautions: [\n                'Mai subito dopo pasti abbondanti',\n                'Stop se nausea/vertigini/palpitazioni',\n                'Controindicato: ipertensione non controllata'\n            ],\n            scientificEvidence: 'A+ (Rhonda Patrick, Joyner studies)',\n            color: '#ff6b35',\n            icon: '🔥'\n        },\n        steamRoom: {\n            name: 'Bagno Turco',\n            temperature: '40-50°C',\n            humidity: '90-100%',\n            duration: '10-15 min',\n            timing: 'Giorni rest per mobilità/relax',\n            mechanism: 'Umidità → Idratazione tessuti + Mobilità articolare',\n            benefits: [\n                '↑ Mobilità articolare',\n                '↑ Idratazione tessuto connettivo',\n                '↓ Rigidità muscolare',\n                '↑ Eliminazione tossine via pelle'\n            ],\n            protocol: [\n                '10-15 min sessione unica',\n                'Respirazione profonda (vapori benefici)',\n                'Stretching dolce durante sessione',\n                'Doccia fredda finale (contrasto)'\n            ],\n            precautions: [\n                'Attenzione claustrofobia',\n                'Igiene: sempre su asciugamano',\n                'Idratazione pre/post obbligatoria'\n            ],\n            scientificEvidence: 'B+ (Benefici mobilità documentati)',\n            color: '#4ecdc4',\n            icon: '💨'\n        },\n        iceBath: {\n            name: 'Crioterapia (Ice Bath)',\n            temperature: '8-12°C',\n            humidity: 'N/A',\n            duration: '10-15 min',\n            timing: 'SOLO ≥4h post-workout (mai prima)',\n            mechanism: 'Vasocostrizione → Recovery neurologico + Anti-infiammatorio',\n            benefits: [\n                '↓ Infiammazione acuta',\n                '↑ Recovery Sistema Nervoso',\n                '↑ Resilienza mentale',\n                '↓ Percezione fatica'\n            ],\n            protocol: [\n                'Graduale: inizia 15°C → 10°C → 8°C',\n                '2-3 min prime volte → 10-15 min target',\n                'Respirazione controllata (Wim Hof)',\n                'Riscaldamento graduale post-immersione'\n            ],\n            precautions: [\n                'MAI nelle 4h post-workout (blocca adattamenti)',\n                'Controindicato: problemi cardiaci',\n                'Supervisione iniziale raccomandata'\n            ],\n            scientificEvidence: 'A- (Timing critico per efficacia)',\n            color: '#74b9ff',\n            icon: '🧊'\n        }\n    };\n\n    const contrastTherapy = {\n        name: 'Terapia Contrasto (Hot/Cold)',\n        protocol: [\n            'Sauna 15 min (80-90°C)',\n            'Doccia fredda 1 min (15°C)',\n            'Ripeti ciclo 3-4 volte',\n            'Termina sempre con freddo'\n        ],\n        benefits: [\n            'Pump vascolare (vasodilatazione/costrizione)',\n            'Massimo stimolo circolatorio',\n            'Recovery accelerata',\n            'Resilienza termica'\n        ],\n        timing: 'Post-workout giorni intensi',\n        scientificEvidence: 'A (Scandinavian protocols)',\n        color: '#fd79a8',\n        icon: '🌡️'\n    };\n\n    const optimalTiming = {\n        postWorkout: {\n            immediate: ['sauna'],\n            after2h: ['steamRoom', 'contrastTherapy'],\n            after4h: ['iceBath'],\n            nextMorning: ['sauna leggera', 'steamRoom']\n        },\n        restDays: {\n            morning: ['steamRoom', 'sauna leggera'],\n            evening: ['iceBath', 'contrastTherapy']\n        },\n        competition: {\n            before: 'Evitare ice bath 48h prima',\n            after: 'Full protocol per recovery rapido'\n        }\n    };\n\n    const biohacking = {\n        breathwork: {\n            name: 'Wim Hof Method',\n            protocol: '30 respiri profondi → apnea → ripeti 3 cicli',\n            benefits: 'Adattamento stress termico + controllo SNA',\n            timing: 'Pre ice bath o standalone'\n        },\n        supplements: {\n            preSauna: 'Magnesio 400mg (vasodilatazione)',\n            preIceBath: 'L-Theanina 200mg (calma mentale)',\n            postBoth: 'Elettroliti + Vitamina C'\n        },\n        monitoring: {\n            heartRate: 'HRV pre/post per valutare recovery',\n            bodyTemp: 'Termometro infrarossi per tracking',\n            subjective: 'Scale 1-10 per energia/dolori'\n        }\n    };\n\n    const markRecoverySession = (therapy, duration, temperature, notes, effectiveness) => {\n        const today = new Date().toISOString().split('T')[0];\n        const sessionId = `${therapy}_${Date.now()}`;\n\n        const session = {\n            id: sessionId,\n            date: today,\n            therapy,\n            duration: parseInt(duration),\n            temperature: parseFloat(temperature),\n            notes,\n            effectiveness: parseInt(effectiveness),\n            timestamp: new Date().toISOString()\n        };\n\n        const updatedLog = {\n            ...recoveryLog,\n            [sessionId]: session\n        };\n\n        setRecoveryLog(updatedLog);\n        localStorage.setItem('recoveryLog', JSON.stringify(updatedLog));\n\n        // Aggiorna sessioni di oggi\n        const todaySessions = Object.values(updatedLog).filter(s => s.date === today);\n        setTodayRecovery({\n            ...todayRecovery,\n            sessions: todaySessions,\n            totalTime: todaySessions.reduce((sum, s) => sum + s.duration, 0)\n        });\n    };\n\n    const getRecoveryRecommendation = (lastWorkout, workoutIntensity, stressLevel) => {\n        const recommendations = [];\n\n        // Basato su timing ultimo workout\n        const hoursSinceWorkout = lastWorkout ? \n            (new Date() - new Date(lastWorkout)) / (1000 * 60 * 60) : 24;\n\n        if (hoursSinceWorkout < 2) {\n            recommendations.push({\n                therapy: 'sauna',\n                priority: 'Alta',\n                reason: 'Finestra anabolica ottimale per heat shock proteins'\n            });\n        } else if (hoursSinceWorkout >= 4) {\n            recommendations.push({\n                therapy: 'iceBath',\n                priority: 'Media',\n                reason: 'Recovery Sistema Nervoso senza interferire adattamenti'\n            });\n        }\n\n        // Basato su intensità workout\n        if (workoutIntensity >= 8) {\n            recommendations.push({\n                therapy: 'contrastTherapy',\n                priority: 'Alta',\n                reason: 'Recovery accelerata per sessioni ad alta intensità'\n            });\n        }\n\n        // Basato su stress/recovery\n        if (stressLevel >= 7) {\n            recommendations.push({\n                therapy: 'steamRoom',\n                priority: 'Media',\n                reason: 'Relax parasimpatico per gestione stress'\n            });\n        }\n\n        return recommendations;\n    };\n\n    const getRecoveryStats = () => {\n        const last7Days = Object.values(recoveryLog).filter(session => {\n            const sessionDate = new Date(session.date);\n            const weekAgo = new Date();\n            weekAgo.setDate(weekAgo.getDate() - 7);\n            return sessionDate >= weekAgo;\n        });\n\n        const stats = {\n            totalSessions: last7Days.length,\n            totalTime: last7Days.reduce((sum, s) => sum + s.duration, 0),\n            averageEffectiveness: last7Days.length > 0 ? \n                Math.round(last7Days.reduce((sum, s) => sum + s.effectiveness, 0) / last7Days.length) : 0,\n            therapyBreakdown: {}\n        };\n\n        // Breakdown per terapia\n        Object.keys(thermoTherapyProtocols).forEach(therapy => {\n            const sessions = last7Days.filter(s => s.therapy === therapy);\n            stats.therapyBreakdown[therapy] = {\n                sessions: sessions.length,\n                time: sessions.reduce((sum, s) => sum + s.duration, 0)\n            };\n        });\n\n        return stats;\n    };\n\n    const loadRecoveryData = () => {\n        const saved = localStorage.getItem('recoveryLog');\n        if (saved) {\n            setRecoveryLog(JSON.parse(saved));\n        }\n\n        // Carica sessioni di oggi\n        const today = new Date().toISOString().split('T')[0];\n        const todaySessions = Object.values(JSON.parse(saved || '{}')).filter(s => s.date === today);\n        setTodayRecovery({\n            sessions: todaySessions,\n            totalTime: todaySessions.reduce((sum, s) => sum + s.duration, 0)\n        });\n    };\n\n    React.useEffect(() => {\n        loadRecoveryData();\n    }, []);\n\n    return {\n        thermoTherapyProtocols,\n        contrastTherapy,\n        optimalTiming,\n        biohacking,\n        recoveryLog,\n        todayRecovery,\n        markRecoverySession,\n        getRecoveryRecommendation,\n        getRecoveryStats\n    };\n};\n\nexport default RecoveryProtocol;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MotivationalQuotes from './MotivationalQuotes';\r\nimport CalendarStreak from './CalendarStreak';\r\nimport ExerciseTracker from './ExerciseTracker';\r\nimport SupplementStack from './SupplementStack';\r\nimport RecoveryProtocol from './RecoveryProtocol';\r\n\r\nconst Dashboard = () => {\r\n    const quotesHook = MotivationalQuotes();\r\n    const calendarHook = CalendarStreak();\r\n    const exerciseHook = ExerciseTracker();\r\n    const supplementsHook = SupplementStack();\r\n    const recoveryHook = RecoveryProtocol();\r\n    \r\n    const [dashboardData, setDashboardData] = React.useState({\r\n        currentWeight: 0,\r\n        muscleGain: 0,\r\n        workoutSessions: 0,\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        daysActive: 0,\r\n        lastWorkout: null,\r\n        currentStreak: 0\r\n    });\r\n    \r\n    const [todayWorkout, setTodayWorkout] = React.useState(null);\r\n    const [goals12Week, setGoals12Week] = React.useState({\r\n        startWeight: 75,\r\n        targetWeight: 80,\r\n        targetBench: 100,\r\n        targetSquat: 140,\r\n        targetDeadlift: 160,\r\n        startDate: new Date(),\r\n        weeksCompleted: 0\r\n    });\r\n    \r\n    const getTodayWorkout = () => {\r\n        const workoutPlan = {\r\n            1: { name: 'Petto + Bicipiti', exercises: 7, focus: 'Upper Power' },\r\n            2: { name: 'Dorso + Tricipiti + Collo (A)', exercises: 10, focus: 'Pull Strength' },\r\n            3: { name: 'Gambe Complete', exercises: 7, focus: 'Lower Power' },\r\n            4: { name: 'Recupero Attivo', exercises: 3, focus: 'Recovery' },\r\n            5: { name: 'Spalle Complete + Collo (B)', exercises: 13, focus: 'Delts 3D' },\r\n            6: { name: 'Posteriori + Conditioning', exercises: 7, focus: 'Athletic' },\r\n            0: { name: 'Riposo Completo', exercises: 4, focus: 'Rest' }\r\n        };\r\n        \r\n        const today = new Date().getDay();\r\n        return workoutPlan[today];\r\n    };\r\n    \r\n    const loadDashboardData = () => {\r\n        const progressData = JSON.parse(localStorage.getItem('progressData') || '[]');\r\n        const timeStats = JSON.parse(localStorage.getItem('timeStats') || '{}');\r\n        const workoutSessions = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        const goals = JSON.parse(localStorage.getItem('goals12Week') || '{}');\r\n        \r\n        const latestProgress = progressData[0];\r\n        const firstProgress = progressData[progressData.length - 1];\r\n        \r\n        const today = new Date();\r\n        const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n        const recentSessions = workoutSessions.filter(session => \r\n            new Date(session.date) >= oneWeekAgo\r\n        );\r\n        \r\n        setDashboardData({\r\n            currentWeight: latestProgress?.weight || goals.startWeight || 75,\r\n            muscleGain: latestProgress && firstProgress ? \r\n                (parseFloat(latestProgress.muscleMass) - parseFloat(firstProgress.muscleMass)) : 0,\r\n            workoutSessions: workoutSessions.length,\r\n            totalWorkoutTime: timeStats.totalWorkoutTime || 0,\r\n            weeklyTime: timeStats.weeklyTime || 0,\r\n            daysActive: new Set(workoutSessions.map(s => s.date.split('T')[0])).size,\r\n            lastWorkout: workoutSessions[0]?.date || null,\r\n            currentStreak: calendarHook.calculateCurrentStreak()\r\n        });\r\n        \r\n        setTodayWorkout(getTodayWorkout());\r\n        \r\n        if (goals.startDate) {\r\n            const weeksCompleted = Math.floor((today - new Date(goals.startDate)) / (7 * 24 * 60 * 60 * 1000));\r\n            setGoals12Week({...goals, weeksCompleted});\r\n        }\r\n    };\r\n    \r\n    const calculateStreak = (sessions) => {\r\n        if (sessions.length === 0) return 0;\r\n        \r\n        const today = new Date();\r\n        let streak = 0;\r\n        const sortedDates = [...new Set(sessions.map(s => s.date.split('T')[0]))].sort().reverse();\r\n        \r\n        for (let i = 0; i < sortedDates.length; i++) {\r\n            const sessionDate = new Date(sortedDates[i]);\r\n            const daysDiff = Math.floor((today - sessionDate) / (1000 * 60 * 60 * 24));\r\n            \r\n            if (daysDiff <= i + 1) {\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return streak;\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n    \r\n    const todayQuote = quotesHook.getTodayQuote();\r\n    const todayProgress = exerciseHook.getTodayProgress(todayWorkout?.exercises);\r\n    const supplementProgress = supplementsHook.getSupplementProgress();\r\n    const weeklyStats = exerciseHook.getWeeklyStats();\r\n    const recoveryStats = recoveryHook.getRecoveryStats();\r\n    \r\n    React.useEffect(() => {\r\n        loadDashboardData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <header className=\"dashboard-header\">\r\n                <h1>🏆 FISICO DELLA MADONNA</h1>\r\n                <p className=\"tagline\">\"L'eccellenza non è un atto, ma un'abitudine\" - Aristotele</p>\r\n            </header>\r\n\r\n            {/* MOTIVATIONAL QUOTE OF THE DAY */}\r\n            <div className=\"daily-motivation\">\r\n                <div className=\"quote-card\">\r\n                    <h3>💭 Frase del Giorno</h3>\r\n                    <blockquote>\r\n                        \"{todayQuote.quote}\"\r\n                        <footer>— {todayQuote.author}</footer>\r\n                    </blockquote>\r\n                    <p className=\"quote-context\">{todayQuote.context}</p>\r\n                </div>\r\n            </div>\r\n\r\n            {/* TODAY'S WORKOUT PREVIEW */}\r\n            <div className=\"today-workout-preview\">\r\n                <h3>🎯 Oggi: {todayWorkout?.name}</h3>\r\n                <div className=\"workout-quick-stats\">\r\n                    <span className=\"workout-focus\">{todayWorkout?.focus}</span>\r\n                    <span className=\"workout-exercises\">{todayWorkout?.exercises} esercizi</span>\r\n                    <span className={`workout-progress ${todayProgress.percentage === 100 ? 'completed' : ''}`}>\r\n                        {todayProgress.completed}/{todayProgress.total} completati ({todayProgress.percentage}%)\r\n                    </span>\r\n                </div>\r\n                <div className=\"progress-bar\">\r\n                    <div \r\n                        className=\"progress-fill\" \r\n                        style={{width: `${todayProgress.percentage}%`}}\r\n                    ></div>\r\n                </div>\r\n                <Link to=\"/workout\" className=\"start-workout-btn\">\r\n                    {todayProgress.percentage === 0 ? '🚀 INIZIA WORKOUT' : \r\n                     todayProgress.percentage === 100 ? '✅ COMPLETATO' : \r\n                     '▶️ CONTINUA WORKOUT'}\r\n                </Link>\r\n            </div>\r\n\r\n            {/* STREAK CALENDAR */}\r\n            <div className=\"streak-calendar-mini\">\r\n                <h3>📅 Calendario Streak</h3>\r\n                <div className=\"calendar-grid\">\r\n                    {calendarHook.getDaysInMonth(calendarHook.currentDate).slice(-7).map((day, index) => (\r\n                        <div key={index} className={`calendar-day-mini ${\r\n                            day?.isCompleted ? 'completed' : day?.isToday ? 'today' : ''\r\n                        }`}>\r\n                            <span className=\"day-number\">{day?.day || ''}</span>\r\n                            {day?.isCompleted && <span className=\"workout-emoji\">{calendarHook.getWorkoutTypeEmoji(day.workoutType)}</span>}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"streak-stats\">\r\n                    <span className=\"current-streak\" style={{color: calendarHook.getStreakColor(dashboardData.currentStreak)}}>\r\n                        🔥 {dashboardData.currentStreak} giorni\r\n                    </span>\r\n                    <span className=\"monthly-total\">\r\n                        📊 {calendarHook.monthlyStats.monthlyWorkouts || 0} questo mese\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PERFORMANCE DASHBOARD */}\r\n            <div className=\"performance-dashboard\">\r\n                <h3>⚡ Performance Overview</h3>\r\n                <div className=\"perf-grid\">\r\n                    <div className=\"perf-card strength\">\r\n                        <h4>💪 Forza</h4>\r\n                        <p className=\"perf-value\">{weeklyStats.totalVolume || 0}kg</p>\r\n                        <p className=\"perf-label\">Volume Settimanale</p>\r\n                    </div>\r\n                    <div className=\"perf-card volume\">\r\n                        <h4>🏋️ Volume</h4>\r\n                        <p className=\"perf-value\">{weeklyStats.totalSets || 0}</p>\r\n                        <p className=\"perf-label\">Serie Settimanali</p>\r\n                    </div>\r\n                    <div className=\"perf-card consistency\">\r\n                        <h4>🎯 Consistenza</h4>\r\n                        <p className=\"perf-value\">{Math.round(((dashboardData.currentStreak / 30) * 100))}%</p>\r\n                        <p className=\"perf-label\">Streak Rate</p>\r\n                    </div>\r\n                    <div className=\"perf-card supplements\">\r\n                        <h4>💊 Stack</h4>\r\n                        <p className=\"perf-value\">{supplementProgress.percentage}%</p>\r\n                        <p className=\"perf-label\">Integratori Oggi</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* 12-WEEK GOALS PROGRESS */}\r\n            <div className=\"goals-progress\">\r\n                <h3>🎯 Obiettivi 12 Settimane</h3>\r\n                <div className=\"goals-grid\">\r\n                    <div className=\"goal-item\">\r\n                        <h4>Peso Target</h4>\r\n                        <div className=\"goal-bar\">\r\n                            <div className=\"goal-progress\" style={{\r\n                                width: `${Math.min(100, ((dashboardData.currentWeight - goals12Week.startWeight) / (goals12Week.targetWeight - goals12Week.startWeight)) * 100)}%`\r\n                            }}></div>\r\n                        </div>\r\n                        <p>{dashboardData.currentWeight}kg → {goals12Week.targetWeight}kg</p>\r\n                    </div>\r\n                    <div className=\"goal-item\">\r\n                        <h4>Settimane</h4>\r\n                        <div className=\"goal-bar\">\r\n                            <div className=\"goal-progress\" style={{\r\n                                width: `${Math.min(100, (goals12Week.weeksCompleted / 12) * 100)}%`\r\n                            }}></div>\r\n                        </div>\r\n                        <p>{goals12Week.weeksCompleted}/12 settimane</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK ACTIONS */}\r\n            <nav className=\"quick-actions\">\r\n                <Link to=\"/workout\" className=\"action-card workout\">\r\n                    <span className=\"action-icon\">🏋️</span>\r\n                    <h4>Workout</h4>\r\n                    <p>Inizia sessione</p>\r\n                </Link>\r\n                <Link to=\"/progress\" className=\"action-card progress\">\r\n                    <span className=\"action-icon\">📈</span>\r\n                    <h4>Progressi</h4>\r\n                    <p>Traccia misure</p>\r\n                </Link>\r\n                <Link to=\"/nutrition-tracker\" className=\"action-card nutrition\">\r\n                    <span className=\"action-icon\">🥗</span>\r\n                    <h4>Dieta</h4>\r\n                    <p>Finestra 8-16</p>\r\n                </Link>\r\n                <Link to=\"/recovery-timer\" className=\"action-card recovery-timer\">\r\n                    <span className=\"action-icon\">🔥</span>\r\n                    <h4>Recovery</h4>\r\n                    <p>Timer sauna/ice</p>\r\n                </Link>\r\n                <Link to=\"/supplements\" className=\"action-card supplements\">\r\n                    <span className=\"action-icon\">💊</span>\r\n                    <h4>Integratori</h4>\r\n                    <p>{supplementProgress.taken}/{supplementProgress.total} presi</p>\r\n                </Link>\r\n                <Link to=\"/recovery\" className=\"action-card recovery\">\r\n                    <span className=\"action-icon\">🧘</span>\r\n                    <h4>Recovery Info</h4>\r\n                    <p>{recoveryStats.totalTime || 0}min oggi</p>\r\n                </Link>\r\n                <Link to=\"/analytics\" className=\"action-card analytics\">\r\n                    <span className=\"action-icon\">📊</span>\r\n                    <h4>Analytics</h4>\r\n                    <p>Grafici avanzati</p>\r\n                </Link>\r\n            </nav>\r\n\r\n            {/* LEGEND MINDSET */}\r\n            <div className=\"legend-mindset\">\r\n                <h3>👑 Mentalità da Leggenda</h3>\r\n                <p className=\"mindset-text\">\r\n                    \"I campioni non nascono in palestra. I campioni nascono da qualcosa di più profondo: \r\n                    <strong>un desiderio, un sogno, una visione.</strong> Tu hai tutto questo. \r\n                    Oggi è il giorno per dimostrarlo.\"\r\n                </p>\r\n                <div className=\"power-stats\">\r\n                    <span>💀 Disciplina: {Math.min(100, dashboardData.currentStreak * 3)}%</span>\r\n                    <span>⚡ Intensità: {Math.min(100, (weeklyStats.sessions || 0) * 20)}%</span>\r\n                    <span>🔥 Dedizione: {Math.min(100, (goals12Week.weeksCompleted || 0) * 8)}%</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nconst WorkoutTimer = ({ onSessionComplete }) => {\r\n    const [isActive, setIsActive] = React.useState(false);\r\n    const [currentExercise, setCurrentExercise] = React.useState('');\r\n    const [sessionTime, setSessionTime] = React.useState(0);\r\n    const [exerciseTime, setExerciseTime] = React.useState(0);\r\n    const [exercises, setExercises] = React.useState([]);\r\n    const [currentExerciseIndex, setCurrentExerciseIndex] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        let interval = null;\r\n        if (isActive) {\r\n            interval = setInterval(() => {\r\n                setSessionTime(time => time + 1);\r\n                setExerciseTime(time => time + 1);\r\n            }, 1000);\r\n        } else if (!isActive && sessionTime !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive, sessionTime]);\r\n\r\n    const startSession = () => {\r\n        setIsActive(true);\r\n        setSessionTime(0);\r\n        setExercises([]);\r\n    };\r\n\r\n    const pauseSession = () => {\r\n        setIsActive(false);\r\n    };\r\n\r\n    const nextExercise = () => {\r\n        if (currentExercise && exerciseTime > 0) {\r\n            const exerciseData = {\r\n                name: currentExercise,\r\n                duration: exerciseTime,\r\n                timestamp: new Date().toISOString()\r\n            };\r\n            setExercises([...exercises, exerciseData]);\r\n        }\r\n        \r\n        setCurrentExercise('');\r\n        setExerciseTime(0);\r\n        setCurrentExerciseIndex(prev => prev + 1);\r\n    };\r\n\r\n    const completeSession = () => {\r\n        if (currentExercise && exerciseTime > 0) {\r\n            nextExercise();\r\n        }\r\n        \r\n        const sessionData = {\r\n            date: new Date().toISOString(),\r\n            duration: sessionTime,\r\n            exercises: exercises,\r\n            id: Date.now()\r\n        };\r\n        \r\n        // Salva la sessione\r\n        const savedSessions = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        const updatedSessions = [sessionData, ...savedSessions];\r\n        localStorage.setItem('workoutSessions', JSON.stringify(updatedSessions));\r\n        \r\n        // Aggiorna le statistiche del tempo\r\n        const timeStats = JSON.parse(localStorage.getItem('timeStats') || '{}');\r\n        const updatedTimeStats = {\r\n            totalWorkoutTime: (timeStats.totalWorkoutTime || 0) + Math.floor(sessionTime / 60),\r\n            weeklyTime: calculateWeeklyTime(updatedSessions),\r\n            monthlyTime: calculateMonthlyTime(updatedSessions),\r\n            sessionsCompleted: (timeStats.sessionsCompleted || 0) + 1\r\n        };\r\n        localStorage.setItem('timeStats', JSON.stringify(updatedTimeStats));\r\n        \r\n        // Reset\r\n        setIsActive(false);\r\n        setSessionTime(0);\r\n        setExerciseTime(0);\r\n        setCurrentExercise('');\r\n        setExercises([]);\r\n        setCurrentExerciseIndex(0);\r\n        \r\n        if (onSessionComplete) {\r\n            onSessionComplete(sessionData);\r\n        }\r\n    };\r\n\r\n    const calculateWeeklyTime = (sessions) => {\r\n        const oneWeekAgo = new Date();\r\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n        \r\n        return sessions\r\n            .filter(session => new Date(session.date) >= oneWeekAgo)\r\n            .reduce((total, session) => total + Math.floor(session.duration / 60), 0);\r\n    };\r\n\r\n    const calculateMonthlyTime = (sessions) => {\r\n        const oneMonthAgo = new Date();\r\n        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\r\n        \r\n        return sessions\r\n            .filter(session => new Date(session.date) >= oneMonthAgo)\r\n            .reduce((total, session) => total + Math.floor(session.duration / 60), 0);\r\n    };\r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"workout-timer\">\r\n            <div className=\"timer-header\">\r\n                <h3>⏱️ Timer Sessione</h3>\r\n                <div className=\"session-time\">\r\n                    <span>Tempo Totale: {formatTime(sessionTime)}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"current-exercise\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Nome esercizio attuale...\"\r\n                    value={currentExercise}\r\n                    onChange={(e) => setCurrentExercise(e.target.value)}\r\n                    disabled={!isActive}\r\n                />\r\n                <div className=\"exercise-time\">\r\n                    Tempo Esercizio: {formatTime(exerciseTime)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"timer-controls\">\r\n                {!isActive && sessionTime === 0 ? (\r\n                    <button className=\"button start-btn\" onClick={startSession}>\r\n                        🚀 Inizia Sessione\r\n                    </button>\r\n                ) : (\r\n                    <div className=\"control-buttons\">\r\n                        <button \r\n                            className=\"button\" \r\n                            onClick={isActive ? pauseSession : () => setIsActive(true)}\r\n                        >\r\n                            {isActive ? '⏸️ Pausa' : '▶️ Riprendi'}\r\n                        </button>\r\n                        <button \r\n                            className=\"button next-btn\" \r\n                            onClick={nextExercise}\r\n                            disabled={!currentExercise}\r\n                        >\r\n                            ➡️ Prossimo Esercizio\r\n                        </button>\r\n                        <button \r\n                            className=\"button complete-btn\" \r\n                            onClick={completeSession}\r\n                        >\r\n                            ✅ Completa Sessione\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {exercises.length > 0 && (\r\n                <div className=\"completed-exercises\">\r\n                    <h4>Esercizi Completati:</h4>\r\n                    <ul>\r\n                        {exercises.map((exercise, index) => (\r\n                            <li key={index}>\r\n                                {exercise.name} - {formatTime(exercise.duration)}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WorkoutTimer;","import React from 'react';\n\nconst TechniqueGuides = () => {\n    const masterTechniques = {\n        'Panca Inclinata Bilanciere': {\n            category: 'Petto',\n            difficulty: 'Avanzato',\n            muscles: ['Petto (fascio superiore)', 'Deltoidi anteriori', 'Tricipiti'],\n            setup: [\n                'Panca inclinata 30-45° (mai oltre 45°)',\n                'Presa larghezza 1.5x spalle, pollice sopra barra',\n                'Scapole retratte e depresse, arco naturale',\n                'Piedi saldi a terra, core contratto'\n            ],\n            execution: [\n                'Discesa: 2-3 sec, barra al petto alto/clavicole',\n                'Pausa 1 sec al petto, mantenendo tensione',\n                'Spinta esplosiva, gomiti 45° dal busto',\n                'Lock-out completo, scapole sempre retratte'\n            ],\n            breathing: 'Inspira in discesa, espira durante spinta (dopo punto di stallo)',\n            commonMistakes: [\n                '❌ Angolo eccessivo (>45°) = stress spalle',\n                '❌ Gomiti troppo larghi = impingement',\n                '❌ Rebound al petto = perdita tensione',\n                '❌ Arch eccessivo = compenso lombare'\n            ],\n            progressionTips: [\n                'Master tecnica a corpo libero prima',\n                'Aumenta peso solo con form perfetto',\n                'Paused bench per controllo',\n                'Varianti: manubri, presa stretta'\n            ],\n            safetyNotes: [\n                'Sempre con spotter per carichi massimali',\n                'Stop se dolore spalle/polsi',\n                'Warm-up specifico: band pull-apart'\n            ]\n        },\n        'Trazioni Presa Ampia': {\n            category: 'Dorso',\n            difficulty: 'Intermedio-Avanzato',\n            muscles: ['Gran dorsale', 'Romboidi', 'Posteriori deltoidi', 'Bicipiti'],\n            setup: [\n                'Presa prona, 1.5x larghezza spalle',\n                'Appeso completo, scapole neutre',\n                'Core attivo, gambe leggermente avanti',\n                'Sguardo leggermente verso alto'\n            ],\n            execution: [\n                'Inizia movimento da scapole (depressione)',\n                'Tira gomiti verso basso e indietro',\n                'Petto verso sbarra, focus squeeze dorsali',\n                'Discesa controllata, stop prima rilascio completo'\n            ],\n            breathing: 'Inspira in partenza, espira durante trazione',\n            commonMistakes: [\n                '❌ Kipping/slancio = perdita target muscolare',\n                '❌ Solo braccia = manca attivazione dorsali',\n                '❌ Range parziale = crescita sub-ottimale',\n                '❌ Velocità eccessiva = momentum'\n            ],\n            progressionTips: [\n                'Principianti: lat pulldown + negative',\n                'Intermedi: band assist → bodyweight',\n                'Avanzati: weighted, pause, L-sit',\n                'Focus: mind-muscle connection dorsali'\n            ],\n            safetyNotes: [\n                'Shoulder health check pre-sessione',\n                'Progressione graduale volume',\n                'Stretching bicipiti/petto post-workout'\n            ]\n        },\n        'Squat': {\n            category: 'Gambe',\n            difficulty: 'Fondamentale',\n            muscles: ['Quadricipiti', 'Glutei', 'Femorali', 'Core'],\n            setup: [\n                'Barra alta su trapezi (non collo)',\n                'Presa 1.2x larghezza spalle, gomiti bassi',\n                'Piedi larghezza anche, punte 15-30°',\n                'Respirazione diaframmatica pre-discesa'\n            ],\n            execution: [\n                'Hip hinge + knee flexion simultanei',\n                'Discesa fino coscie parallele (minimo)',\n                'Ginocchia tracking con punte piedi',\n                'Drive dai talloni, petto alto in risalita'\n            ],\n            breathing: 'Valsalva: inspira in alto, trattieni, espira post-risalita',\n            commonMistakes: [\n                '❌ Knee valgus (ginocchia dentro) = infortunio',\n                '❌ Talloni si alzano = mobilità caviglie',\n                '❌ Busto troppo avanti = carico schiena',\n                '❌ Range parziale = perdita benefici'\n            ],\n            progressionTips: [\n                'Master bodyweight squat perfetto',\n                'Goblet squat per apprendimento pattern',\n                'Box squat per profondità e controllo',\n                'Front squat per postura e core'\n            ],\n            safetyNotes: [\n                'Sempre con safety bars altezza corretta',\n                'Warm-up mobilità anche/caviglie',\n                'Progressive overload: forma > peso'\n            ]\n        },\n        'Stacco Rumeno (RDL)': {\n            category: 'Posteriori',\n            difficulty: 'Intermedio',\n            muscles: ['Femorali', 'Glutei', 'Erettori spinale', 'Core'],\n            setup: [\n                'Partenza in piedi, barra a contatto cosce',\n                'Presa prona/mista, larghezza spalle',\n                'Spalle sopra barra, petto alto',\n                'Leggera flessione ginocchia (15-20°)'\n            ],\n            execution: [\n                'Hip hinge puro: anche indietro',\n                'Barra scorre lungo gambe (contatto costante)',\n                'Discesa fino stretch femorali (mid-shin)',\n                'Reverse: drive anche avanti, squeeze glutei'\n            ],\n            breathing: 'Inspira in alto, trattieni in discesa, espira in risalita',\n            commonMistakes: [\n                '❌ Schiena curva = shear stress vertebrale',\n                '❌ Troppa flessione ginocchia = squat variation',\n                '❌ Barra lontana corpo = momento aumentato',\n                '❌ Range eccessivo senza mobilità = compensi'\n            ],\n            progressionTips: [\n                'Prima mobilità femorali e anche',\n                'Deadlift con deficit per ROM',\n                'Single-leg RDL per stabilità',\n                'Varianti: manubri, kettlebell'\n            ],\n            safetyNotes: [\n                'Neutral spine sempre mantenuta',\n                'Start con carichi moderati',\n                'Stretching post-workout essenziale'\n            ]\n        },\n        'Military Press Manubri': {\n            category: 'Spalle',\n            difficulty: 'Intermedio',\n            muscles: ['Deltoidi (tutti fasci)', 'Tricipiti', 'Core', 'Stabilizzatori'],\n            setup: [\n                'Seduto con schienale 85-90°',\n                'Manubri altezza spalle, palmi avanti',\n                'Core contratto, schiena neutra',\n                'Piedi saldi, grip saldo ma non eccessivo'\n            ],\n            execution: [\n                'Spinta verticale, traiettoria rettilinea',\n                'Rotazione esterna spalle durante movimento',\n                'Lock-out senza hyperextension gomiti',\n                'Discesa controllata, stop all\\'altezza orecchie'\n            ],\n            breathing: 'Inspira in basso, espira durante spinta',\n            commonMistakes: [\n                '❌ Arch lombare eccessivo = compenso',\n                '❌ Spinta troppo avanti = impingement',\n                '❌ Gomiti troppo larghi = stress AC joint',\n                '❌ Range parziale = sviluppo incompleto'\n            ],\n            progressionTips: [\n                'Pike push-ups per pattern movimento',\n                'Press seduto prima di standing',\n                'Unilaterale per core e stabilità',\n                'Progressione: 2.5kg incrementi max'\n            ],\n            safetyNotes: [\n                'Warm-up spalle obbligatorio',\n                'Range dentro comfort zone',\n                'Stop al primo segno dolore'\n            ]\n        }\n    };\n\n    const getTechniqueCue = (exerciseName, phase) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        const cues = {\n            setup: exercise.setup,\n            execution: exercise.execution,\n            breathing: exercise.breathing\n        };\n\n        return cues[phase] || null;\n    };\n\n    const getProgressionLevel = (exerciseName, userLevel) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        const progressions = {\n            beginner: {\n                focus: 'Pattern Movement + Stabilità',\n                approach: 'Carichi leggeri, focus forma',\n                volume: 'Basso volume, alta frequenza'\n            },\n            intermediate: {\n                focus: 'Progressione Carico + Volume',\n                approach: 'Balance intensità/volume',\n                volume: 'Volume moderato-alto'\n            },\n            advanced: {\n                focus: 'Specializzazione + Varianti',\n                approach: 'Periodizzazione strutturata',\n                volume: 'Volume alto, intensità ciclica'\n            }\n        };\n\n        return progressions[userLevel];\n    };\n\n    const getInjuryPrevention = (exerciseName) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        const prevention = {\n            warmup: [],\n            cooldown: [],\n            redFlags: [],\n            alternatives: []\n        };\n\n        // Warm-up specifico per categoria\n        switch (exercise.category) {\n            case 'Petto':\n                prevention.warmup = ['Band pull-apart', 'Scap wall slides', 'Arm circles', 'Push-up progression'];\n                break;\n            case 'Dorso':\n                prevention.warmup = ['Cat-cow', 'Band face-pull', 'Scap pull-ups', 'Dead hang'];\n                break;\n            case 'Gambe':\n                prevention.warmup = ['Leg swings', 'Hip circles', 'Bodyweight squat', 'Ankle circles'];\n                break;\n            case 'Spalle':\n                prevention.warmup = ['Arm circles', 'Band external rotation', 'Wall slides', 'YTW raises'];\n                break;\n        }\n\n        // Red flags comuni\n        prevention.redFlags = [\n            'Dolore acuto durante movimento',\n            'Dolore che persiste post-workout',\n            'Limitazione ROM significativa',\n            'Instabilità articolare'\n        ];\n\n        return prevention;\n    };\n\n    const getMindMuscleCues = (exerciseName) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return [];\n\n        const mentalCues = {\n            'Panca Inclinata Bilanciere': [\n                'Visualizza petto che si \"apre\" in discesa',\n                'Spinta: \"schiaccia il mondo via da te\"',\n                'Immagina di \"avvicinare il petto alla barra\"',\n                'Focus: fibre muscolari che si contraggono'\n            ],\n            'Trazioni Presa Ampia': [\n                'Inizia tirando scapole verso \"tasche posteriori\"',\n                'Immagina di \"tirare sbarra verso petto\"',\n                'Visualizza dorsali come \"ali che si aprono\"',\n                'Senti l\\'ampiezza della schiena'\n            ],\n            'Squat': [\n                'Immagina di \"sederti su sedia invisibile\"',\n                'Spingi terra via con i piedi',\n                'Visualizza radici dai piedi al centro terra',\n                'Core come \"cintura di forza naturale\"'\n            ],\n            'Stacco Rumeno (RDL)': [\n                'Anche come \"cerniere che si aprono\"',\n                'Senti stretch intenso nei femorali',\n                'Immagina \"corda che tira anche indietro\"',\n                'Glutei come \"motori della risalita\"'\n            ],\n            'Military Press Manubri': [\n                'Spalle come \"fondamenta stabili\"',\n                'Spinta \"verso le stelle\"',\n                'Immagina di \"sostenere il cielo\"',\n                'Core come \"pilastro di marmo\"'\n            ]\n        };\n\n        return mentalCues[exerciseName] || [\n            'Connessione mente-muscolo',\n            'Controllo ogni millimetro',\n            'Qualità sopra quantità',\n            'Senti il muscolo lavorare'\n        ];\n    };\n\n    const getExerciseRating = (exerciseName) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        // Rating sistema basato su efficacia, sicurezza, trasferibilità\n        const ratings = {\n            'Panca Inclinata Bilanciere': {\n                effectiveness: 9,\n                safety: 7,\n                transferability: 8,\n                overall: 8.5,\n                notes: 'Re degli esercizi petto superiore'\n            },\n            'Trazioni Presa Ampia': {\n                effectiveness: 10,\n                safety: 8,\n                transferability: 9,\n                overall: 9.5,\n                notes: 'Miglior esercizio dorsali in assoluto'\n            },\n            'Squat': {\n                effectiveness: 10,\n                safety: 8,\n                transferability: 10,\n                overall: 9.5,\n                notes: 'Re di tutti gli esercizi'\n            },\n            'Stacco Rumeno (RDL)': {\n                effectiveness: 9,\n                safety: 7,\n                transferability: 9,\n                overall: 8.5,\n                notes: 'Insuperabile per posteriori'\n            },\n            'Military Press Manubri': {\n                effectiveness: 8,\n                safety: 8,\n                transferability: 7,\n                overall: 8.0,\n                notes: 'Eccellente per spalle 3D'\n            }\n        };\n\n        return ratings[exerciseName];\n    };\n\n    return {\n        masterTechniques,\n        getTechniqueCue,\n        getProgressionLevel,\n        getInjuryPrevention,\n        getMindMuscleCues,\n        getExerciseRating\n    };\n};\n\nexport default TechniqueGuides;","import React from 'react';\r\nimport WorkoutTimer from './WorkoutTimer';\r\nimport ExerciseTracker from './ExerciseTracker';\r\nimport TechniqueGuides from './TechniqueGuides';\r\nimport MotivationalQuotes from './MotivationalQuotes';\r\nimport CalendarStreak from './CalendarStreak';\r\n\r\nconst Workout = () => {\r\n    const exerciseHook = ExerciseTracker();\r\n    const techniqueHook = TechniqueGuides();\r\n    const quotesHook = MotivationalQuotes();\r\n    const calendarHook = CalendarStreak();\r\n    \r\n    const [selectedDay, setSelectedDay] = React.useState(null);\r\n    const [completedWorkouts, setCompletedWorkouts] = React.useState([]);\r\n    const [selectedExercise, setSelectedExercise] = React.useState(null);\r\n    const [exerciseForm, setExerciseForm] = React.useState({\r\n        sets: '',\r\n        reps: '',\r\n        weight: '',\r\n        rir: '',\r\n        notes: ''\r\n    });\r\n    const [showTechnique, setShowTechnique] = React.useState(false);\r\n    \r\n    const workoutPlan = {\r\n        'Lunedì': {\r\n            focus: 'Petto + Bicipiti',\r\n            subtitle: 'Focus: Petto (fascio alto + globale), Bicipiti',\r\n            exercises: [\r\n                { name: 'Panca Inclinata Bilanciere', sets: '4×6-8', rest: '2min', notes: 'RIR 1-2 | Focus forma e controllo' },\r\n                { name: 'Spinte Manubri Inclinata', sets: '3×8-10', rest: '90sec', notes: 'Angolo 30-45° | ROM completo' },\r\n                { name: 'Croci ai Cavi Alti/Inclinata', sets: '3×12-15', rest: '75sec', notes: 'Stretch massimo petto' },\r\n                { name: 'Dip alle Parallele (petto) o Panca Piana Manubri', sets: '3×8-10', rest: '90sec', notes: 'Inclinazione avanti per petto' },\r\n                { name: 'Curl Bilanciere', sets: '4×8-10', rest: '90sec', notes: 'No cheating | Controllo eccentrica' },\r\n                { name: 'Curl Manubri Inclinati', sets: '3×10-12', rest: '75sec', notes: 'Panca 45° | Stretch bicipiti' },\r\n                { name: 'Hammer Curl Manubri o Cavi', sets: '3×12-15', rest: '60sec', notes: 'Presa neutra | Focus brachiale' }\r\n            ]\r\n        },\r\n        'Martedì': {\r\n            focus: 'Dorso + Tricipiti + Collo (A)',\r\n            subtitle: 'Focus: Larghezza dorsale, spessore scapolare, tricipiti, collo',\r\n            exercises: [\r\n                { name: 'Trazioni Presa Ampia', sets: '4×6-8', rest: '2min', notes: 'Se necessario usa assistenza | Focus larghezza' },\r\n                { name: 'Rematore Bilanciere/Manubrio', sets: '4×8-10', rest: '2min', notes: 'Busto 45° | Squeeze scapole' },\r\n                { name: 'Lat Machine Inversa o Presa Stretta', sets: '3×10-12', rest: '90sec', notes: 'Controllo concentrica/eccentrica' },\r\n                { name: 'Pullover ai Cavi', sets: '3×12-15', rest: '75sec', notes: 'ROM ampio | Focus gran dorsale' },\r\n                { name: 'Panca Stretta Bilanciere', sets: '4×6-8', rest: '2min', notes: 'Presa larghezza spalle | Gomiti chiusi' },\r\n                { name: 'French Press EZ', sets: '3×8-10', rest: '90sec', notes: 'Solo avambracci si muovono' },\r\n                { name: 'Pushdown Cavo', sets: '3×12-15', rest: '60sec', notes: 'Contrazione massima in basso' },\r\n                { name: 'Collo - Flessione', sets: '2×15-20', rest: '30sec', notes: 'Lento e controllato' },\r\n                { name: 'Collo - Estensione', sets: '2×15-20', rest: '30sec', notes: 'Range completo sicuro' },\r\n                { name: 'Collo - Laterale dx/sx', sets: '2×12-15', rest: '30sec', notes: 'Ogni lato separatamente' }\r\n            ]\r\n        },\r\n        'Mercoledì': {\r\n            focus: 'Gambe Complete',\r\n            subtitle: 'Focus: Quadricipiti, glutei, femorali, polpacci',\r\n            exercises: [\r\n                { name: 'Squat', sets: '4×6-8', rest: '3min', notes: 'Profondità completa | RIR 1-2' },\r\n                { name: 'Hip Thrust', sets: '4×8-10', rest: '2min', notes: 'Contrazione glutei al top | Pausa 1 sec' },\r\n                { name: 'Affondi Camminata', sets: '3×10 passi/gamba', rest: '90sec', notes: 'Ginocchio a 90° | Passo lungo' },\r\n                { name: 'Leg Press 45°', sets: '3×10-12', rest: '90sec', notes: 'Piedi larghezza spalle | ROM completo' },\r\n                { name: 'Leg Curl Sdraiato', sets: '3×10-12', rest: '90sec', notes: 'Rest-pause ultimo set | Contrazione massima' },\r\n                { name: 'Calf Raise in Piedi', sets: '4×10-12', rest: '60sec', notes: 'Pausa 2 sec al top | Range completo' },\r\n                { name: 'Calf Raise Seduto', sets: '3×15-20', rest: '60sec', notes: 'Focus soleo | Controllo movimento' }\r\n            ]\r\n        },\r\n        'Giovedì': {\r\n            focus: 'Recupero Attivo',\r\n            subtitle: 'Focus: Cardiovascolare leggero, mobilità, recupero',\r\n            exercises: [\r\n                { name: 'LISS (Camminata/Cyclette)', sets: '30-40min', rest: 'Zona 1-2', notes: '60-70% FCMax | Mantieni conversazione' },\r\n                { name: 'Stretching/Mobilità', sets: '15-20min', rest: 'Rilassante', notes: 'Tutti i gruppi muscolari | Respiro profondo' },\r\n                { name: 'Sauna o Bagno Turco', sets: '10-15min', rest: 'Recovery', notes: 'Idratazione costante | Relax mentale' }\r\n            ]\r\n        },\r\n        'Venerdì': {\r\n            focus: 'Spalle Complete + Collo (B)',\r\n            subtitle: 'Focus: Deltoidi laterali/posteriori, trapezio, richiamo braccia, collo',\r\n            exercises: [\r\n                { name: 'Military Press Manubri', sets: '4×6-8', rest: '2min', notes: 'Seduto con schienale | Core attivo' },\r\n                { name: 'Alzate Laterali Cavi/Manubri', sets: '4×12-15', rest: '75sec', notes: 'Controllo eccentrica | No cheating' },\r\n                { name: 'Rear Delt Fly (Pec Deck Inversa o Manubri)', sets: '3×12-15', rest: '75sec', notes: 'Squeeze scapole | Focus deltoidi posteriori' },\r\n                { name: 'Face Pull', sets: '3×12-15', rest: '60sec', notes: 'Corda ai cavi | Gomiti alti' },\r\n                { name: 'Scrollate Manubri/Bilanciere', sets: '3×10-12', rest: '90sec', notes: 'Solo spalle | No rotazione' },\r\n                { name: 'Curl Manubri (Richiamo leggero)', sets: '2×12-15', rest: '60sec', notes: 'Pompaggio | Non a cedimento' },\r\n                { name: 'Pushdown Corda (Richiamo leggero)', sets: '2×12-15', rest: '60sec', notes: 'Focus connessione mente-muscolo' },\r\n                { name: 'Collo B - Flessione', sets: '2×15-20', rest: '30sec', notes: 'Progressione graduale resistenza' },\r\n                { name: 'Collo B - Estensione', sets: '2×15-20', rest: '30sec', notes: 'Mai forzare movimento' },\r\n                { name: 'Collo B - Laterale dx/sx', sets: '2×12-15', rest: '30sec', notes: 'Simmetrico entrambi lati' },\r\n                { name: 'Isometrie Multidirezionali Collo', sets: '3×20sec', rest: '30sec', notes: 'Resistenza manuale | 4 direzioni' },\r\n                { name: 'Stomach Vacuum', sets: '3×20sec', rest: '45sec', notes: 'Addome verso colonna | Respiro normale' },\r\n                { name: 'Plank', sets: '3×45sec', rest: '60sec', notes: 'Corpo dritto | Core attivo' }\r\n            ]\r\n        },\r\n        'Sabato': {\r\n            focus: 'Posteriori + Conditioning',\r\n            subtitle: 'Focus: Femorali, glutei, polpacci + condizionamento',\r\n            exercises: [\r\n                { name: 'Stacco Rumeno (RDL)', sets: '4×6-8', rest: '2min', notes: 'Focus femorali | Bilanciere vicino corpo' },\r\n                { name: 'Hip Thrust (Variante Mono)', sets: '3×10-12', rest: '2min', notes: 'Una gamba | Controllo stabilità' },\r\n                { name: 'Nordic Curl o Glute Ham Raise', sets: '3×8-10', rest: '90sec', notes: 'Eccentrica lenta | Assistenza se necessaria' },\r\n                { name: 'Leg Curl Seduto', sets: '3×12-15', rest: '75sec', notes: 'Contrazione massima | Pausa 1 sec' },\r\n                { name: 'Calf Raise Multipla', sets: '3×15-20', rest: '60sec', notes: 'Variare angoli piedi | Range massimo' },\r\n                { name: \"Farmer's Walk\", sets: '3×40m', rest: '90sec', notes: 'Carico pesante | Core + trapezio | Passo normale' },\r\n                { name: 'HIIT Finisher', sets: '8×30sec sprint / 60sec camminata', rest: 'Totale 10min', notes: 'Intensità massima sprint | Recupero attivo' }\r\n            ]\r\n        },\r\n        'Domenica': {\r\n            focus: 'Riposo Completo',\r\n            subtitle: 'Focus: Recupero totale, rigenerazione',\r\n            exercises: [\r\n                { name: 'Passeggiata Tranquilla', sets: '30-60min', rest: 'Libero', notes: 'Aria aperta | Ritmo rilassante' },\r\n                { name: 'Stretching Globale', sets: '20-30min', rest: 'Flow dolce', notes: 'Focus respirazione e relax' },\r\n                { name: 'Sauna/Bagno Turco (Opzionale)', sets: '15-20min', rest: 'Recovery', notes: 'Detossificazione | Idratazione' },\r\n                { name: 'Meditazione/Visualizzazione', sets: '10-20min', rest: 'Mentale', notes: 'Preparazione settimana successiva' }\r\n            ]\r\n        }\r\n    };\r\n    \r\n    const loadCompletedWorkouts = () => {\r\n        const saved = localStorage.getItem('completedWorkouts');\r\n        if (saved) {\r\n            setCompletedWorkouts(JSON.parse(saved));\r\n        }\r\n    };\r\n    \r\n    const handleExerciseComplete = () => {\r\n        if (!selectedExercise || !exerciseForm.sets || !exerciseForm.reps || !exerciseForm.weight) {\r\n            alert('Compila tutti i campi obbligatori!');\r\n            return;\r\n        }\r\n        \r\n        const isNewPR = exerciseHook.markExerciseCompleted(\r\n            selectedExercise.name,\r\n            exerciseForm.sets,\r\n            exerciseForm.reps,\r\n            exerciseForm.weight,\r\n            exerciseForm.notes,\r\n            exerciseForm.rir\r\n        );\r\n        \r\n        if (isNewPR) {\r\n            alert('🏆 NUOVO PERSONAL RECORD! Incredibile!');\r\n        }\r\n        \r\n        // Reset form\r\n        setExerciseForm({ sets: '', reps: '', weight: '', rir: '', notes: '' });\r\n        setSelectedExercise(null);\r\n    };\r\n    \r\n    const markWorkoutCompleted = (day) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const workoutData = {\r\n            day,\r\n            date: today,\r\n            id: Date.now()\r\n        };\r\n        \r\n        const updated = [workoutData, ...completedWorkouts];\r\n        setCompletedWorkouts(updated);\r\n        localStorage.setItem('completedWorkouts', JSON.stringify(updated));\r\n        \r\n        // Marca anche nel calendario streak\r\n        const todayWorkout = workoutPlan[day];\r\n        if (todayWorkout) {\r\n            calendarHook.markWorkoutCompleted(new Date(), todayWorkout.focus, todayWorkout.exercises);\r\n        }\r\n    };\r\n    \r\n    const isWorkoutCompletedToday = (day) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        return completedWorkouts.some(workout => \r\n            workout.day === day && workout.date === today\r\n        );\r\n    };\r\n    \r\n    const getExerciseCompletionStatus = (exercises) => {\r\n        const completedCount = exercises.filter(ex => \r\n            exerciseHook.isExerciseCompletedToday(ex.name)\r\n        ).length;\r\n        \r\n        return {\r\n            completed: completedCount,\r\n            total: exercises.length,\r\n            percentage: Math.round((completedCount / exercises.length) * 100)\r\n        };\r\n    };\r\n    \r\n    const getTodayWorkout = () => {\r\n        const today = new Date().getDay();\r\n        const todayWorkout = Object.entries(workoutPlan).find(([key]) => {\r\n            const dayMap = {\r\n                'Lunedì': 1, 'Martedì': 2, 'Mercoledì': 3, 'Giovedì': 4,\r\n                'Venerdì': 5, 'Sabato': 6, 'Domenica': 0\r\n            };\r\n            return dayMap[key] === today;\r\n        });\r\n        \r\n        return todayWorkout ? { day: todayWorkout[0], ...todayWorkout[1] } : null;\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        loadCompletedWorkouts();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"workout-container\">\r\n            <div className=\"workout-header\">\r\n                <h2>🏋️ Scheda: Fisico della Madonna (6 Mesi)</h2>\r\n                <p className=\"program-description\">Programma di allenamento avanzato per trasformazione fisica estrema. \r\n                   <strong>Split Push/Pull/Legs + Specializzazione</strong> ottimizzato per ipertrofia muscolare.</p>\r\n                <div className=\"program-stats\">\r\n                    <span className=\"stat\">📅 6 giorni/settimana</span>\r\n                    <span className=\"stat\">⏱️ 75-90 min/sessione</span>\r\n                    <span className=\"stat\">🎯 Volume: Alto</span>\r\n                    <span className=\"stat\">🔥 Intensità: RIR 1-3</span>\r\n                </div>\r\n            </div>\r\n            \r\n            <WorkoutTimer onSessionComplete={(sessionData) => {\r\n                console.log('Sessione completata:', sessionData);\r\n            }} />\r\n            \r\n            <div className=\"workout-week\">\r\n                <h3>📅 Piano Settimanale</h3>\r\n                <div className=\"days-grid\">\r\n                    {Object.entries(workoutPlan).map(([day, workout]) => (\r\n                        <div key={day} className={`day-card ${selectedDay === day ? 'selected' : ''}`}>\r\n                            <div className=\"day-header\" onClick={() => setSelectedDay(selectedDay === day ? null : day)}>\r\n                                <h4>{day}</h4>\r\n                                <p className=\"focus-title\">{workout.focus}</p>\r\n                                <p className=\"focus-subtitle\">{workout.subtitle}</p>\r\n                                {isWorkoutCompletedToday(day) && (\r\n                                    <span className=\"completed-badge\">✅ Completato</span>\r\n                                )}\r\n                            </div>\r\n                            \r\n                            {selectedDay === day && (\r\n                                <div className=\"day-details\">\r\n                                    <div className=\"exercises-list\">\r\n                                        {workout.exercises.map((exercise, index) => (\r\n                                            <div key={index} className=\"exercise-item\">\r\n                                                <h5>{exercise.name}</h5>\r\n                                                <div className=\"exercise-details\">\r\n                                                    <span className=\"sets\">{exercise.sets}</span>\r\n                                                    <span className=\"rest\">Rest: {exercise.rest}</span>\r\n                                                </div>\r\n                                                <p className=\"notes\">{exercise.notes}</p>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"day-actions\">\r\n                                        {!isWorkoutCompletedToday(day) ? (\r\n                                            <button \r\n                                                className=\"button complete-workout-btn\"\r\n                                                onClick={() => markWorkoutCompleted(day)}\r\n                                            >\r\n                                                ✅ Segna come Completato\r\n                                            </button>\r\n                                        ) : (\r\n                                            <p className=\"completed-message\">💪 Ottimo lavoro! Workout completato oggi.</p>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"workout-tips\">\r\n                <h3>💡 Principi Fondamentali - Fisico della Madonna</h3>\r\n                <ul>\r\n                    <li>🔥 <strong>RIR (Reps in Reserve):</strong> Mantieni sempre 1-2 ripetizioni di riserva per ottimizzare volume e recupero</li>\r\n                    <li>⏱️ <strong>Tempi di Recupero:</strong> Rispetta rigorosamente i tempi indicati - sono calcolati per massimizzare l'effetto allenante</li>\r\n                    <li>💪 <strong>Progressione:</strong> Aumenta il carico quando riesci a completare tutte le serie nel range alto delle ripetizioni</li>\r\n                    <li>🎯 <strong>Forma Tecnica:</strong> La qualità del movimento è prioritaria rispetto al peso utilizzato</li>\r\n                    <li>😴 <strong>Recupero:</strong> Il giovedì è sacro - recupero attivo essenziale per la crescita</li>\r\n                    <li>🍽️ <strong>Nutrizione:</strong> Surplus calorico di 300-500 kcal/die + 2.2g proteine/kg corporeo</li>\r\n                    <li>💧 <strong>Idratazione:</strong> Minimo 35ml/kg corporeo + 500ml extra nei giorni di allenamento</li>\r\n                    <li>📈 <strong>Tracking:</strong> Tieni traccia di carichi, ripetizioni e sensazioni per ogni esercizio</li>\r\n                    <li>🧘 <strong>Mente-Muscolo:</strong> Focus mentale sul muscolo target durante ogni ripetizione</li>\r\n                    <li>🔄 <strong>Periodizzazione:</strong> Ogni 6-8 settimane rivaluta e modifica il programma</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Workout;","import React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nconst Nutrition = () => {\r\n    const navigate = useNavigate();\r\n    const [selectedDay, setSelectedDay] = useState(new Date().getDay());\r\n    const [completedMeals, setCompletedMeals] = useState(() => {\r\n        const saved = localStorage.getItem('completedMeals');\r\n        return saved ? JSON.parse(saved) : {};\r\n    });\r\n    const [currentStreak, setCurrentStreak] = useState(() => {\r\n        const saved = localStorage.getItem('nutritionStreak');\r\n        return saved ? parseInt(saved) : 0;\r\n    });\r\n\r\n    // DIETA SETTIMANALE COMPLETA - 7 GIORNI\r\n    const weeklyDiet = {\r\n        0: { // Domenica\r\n            name: \"🔥 DOMENICA - RECOVERY DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"dom-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Pancakes proteici + mirtilli + sciroppo d'acero\",\r\n                    proteins: 28,\r\n                    calories: 420,\r\n                    ingredients: [\"3 uova\", \"50g farina avena\", \"1 scoop whey\", \"100g mirtilli\"]\r\n                },\r\n                {\r\n                    id: \"dom-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"13:00\",\r\n                    food: \"Salmone grigliato + riso basmati + avocado\",\r\n                    proteins: 35,\r\n                    calories: 580,\r\n                    ingredients: [\"150g salmone\", \"80g riso\", \"1/2 avocado\", \"verdure miste\"]\r\n                },\r\n                {\r\n                    id: \"dom-snack\",\r\n                    type: \"🥤 Snack\",\r\n                    time: \"16:30\",\r\n                    food: \"Smoothie proteico + banana + burro arachidi\",\r\n                    proteins: 25,\r\n                    calories: 380,\r\n                    ingredients: [\"1 scoop whey\", \"1 banana\", \"20g burro arachidi\", \"250ml latte\"]\r\n                },\r\n                {\r\n                    id: \"dom-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"20:00\",\r\n                    food: \"Petto pollo + patate dolci + broccoli\",\r\n                    proteins: 40,\r\n                    calories: 520,\r\n                    ingredients: [\"180g petto pollo\", \"200g patate dolci\", \"150g broccoli\"]\r\n                }\r\n            ]\r\n        },\r\n        1: { // Lunedì\r\n            name: \"💪 LUNEDÌ - POWER DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"lun-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"7:30\",\r\n                    food: \"Uova strapazzate + pane ezekiel + spinaci\",\r\n                    proteins: 32,\r\n                    calories: 450,\r\n                    ingredients: [\"4 uova\", \"2 fette pane ezekiel\", \"100g spinaci\", \"10g olio oliva\"]\r\n                },\r\n                {\r\n                    id: \"lun-preworkout\",\r\n                    type: \"⚡ Pre-Workout\",\r\n                    time: \"11:00\",\r\n                    food: \"Banana + caffè + BCAA\",\r\n                    proteins: 8,\r\n                    calories: 150,\r\n                    ingredients: [\"1 banana media\", \"5g BCAA\", \"caffè nero\"]\r\n                },\r\n                {\r\n                    id: \"lun-postworkout\",\r\n                    type: \"💥 Post-Workout\",\r\n                    time: \"13:30\",\r\n                    food: \"Whey shake + avena + miele\",\r\n                    proteins: 30,\r\n                    calories: 400,\r\n                    ingredients: [\"1.5 scoop whey\", \"40g avena\", \"15g miele\"]\r\n                },\r\n                {\r\n                    id: \"lun-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"15:00\",\r\n                    food: \"Manzo magro + quinoa + verdure grigliate\",\r\n                    proteins: 45,\r\n                    calories: 620,\r\n                    ingredients: [\"200g manzo magro\", \"80g quinoa\", \"verdure miste\", \"olio oliva\"]\r\n                },\r\n                {\r\n                    id: \"lun-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"20:30\",\r\n                    food: \"Merluzzo + riso integrale + asparagi\",\r\n                    proteins: 38,\r\n                    calories: 480,\r\n                    ingredients: [\"180g merluzzo\", \"70g riso integrale\", \"200g asparagi\"]\r\n                }\r\n            ]\r\n        },\r\n        2: { // Martedì\r\n            name: \"🎯 MARTEDÌ - PRECISION DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"mar-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"7:30\",\r\n                    food: \"Yogurt greco + granola + frutti bosco\",\r\n                    proteins: 25,\r\n                    calories: 380,\r\n                    ingredients: [\"200g yogurt greco 0%\", \"40g granola\", \"100g frutti bosco\"]\r\n                },\r\n                {\r\n                    id: \"mar-spuntino\",\r\n                    type: \"🍎 Spuntino\",\r\n                    time: \"10:30\",\r\n                    food: \"Mela + mandorle + ricotta\",\r\n                    proteins: 18,\r\n                    calories: 280,\r\n                    ingredients: [\"1 mela\", \"20g mandorle\", \"100g ricotta\"]\r\n                },\r\n                {\r\n                    id: \"mar-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"13:00\",\r\n                    food: \"Tacchino + farro + zucchine grigliate\",\r\n                    proteins: 42,\r\n                    calories: 540,\r\n                    ingredients: [\"180g tacchino\", \"80g farro\", \"200g zucchine\", \"olio EVO\"]\r\n                },\r\n                {\r\n                    id: \"mar-snack\",\r\n                    type: \"🥤 Snack\",\r\n                    time: \"16:00\",\r\n                    food: \"Caseine + noci + datteri\",\r\n                    proteins: 28,\r\n                    calories: 350,\r\n                    ingredients: [\"1 scoop caseine\", \"15g noci\", \"2 datteri\"]\r\n                },\r\n                {\r\n                    id: \"mar-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"20:00\",\r\n                    food: \"Tonno + pasta integrale + pomodorini\",\r\n                    proteins: 35,\r\n                    calories: 500,\r\n                    ingredients: [\"150g tonno fresco\", \"70g pasta integrale\", \"200g pomodorini\"]\r\n                }\r\n            ]\r\n        },\r\n        3: { // Mercoledì\r\n            name: \"🔋 MERCOLEDÌ - ENERGY DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"mer-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"7:45\",\r\n                    food: \"Porridge proteico + banana + cannella\",\r\n                    proteins: 30,\r\n                    calories: 420,\r\n                    ingredients: [\"50g avena\", \"1 scoop whey\", \"1 banana\", \"cannella\"]\r\n                },\r\n                {\r\n                    id: \"mer-preworkout\",\r\n                    type: \"⚡ Pre-Workout\",\r\n                    time: \"11:30\",\r\n                    food: \"Toast integrale + marmellata + caffè\",\r\n                    proteins: 8,\r\n                    calories: 180,\r\n                    ingredients: [\"2 fette toast\", \"15g marmellata\", \"caffè\"]\r\n                },\r\n                {\r\n                    id: \"mer-postworkout\",\r\n                    type: \"💥 Post-Workout\",\r\n                    time: \"14:00\",\r\n                    food: \"Whey + maltodestrine + creatina\",\r\n                    proteins: 25,\r\n                    calories: 320,\r\n                    ingredients: [\"1 scoop whey\", \"30g malto\", \"5g creatina\"]\r\n                },\r\n                {\r\n                    id: \"mer-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"15:30\",\r\n                    food: \"Pollo curry + riso basmati + verdure\",\r\n                    proteins: 40,\r\n                    calories: 580,\r\n                    ingredients: [\"170g pollo\", \"80g riso\", \"curry\", \"verdure miste\"]\r\n                },\r\n                {\r\n                    id: \"mer-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"20:00\",\r\n                    food: \"Orata + quinoa + spinaci saltati\",\r\n                    proteins: 36,\r\n                    calories: 460,\r\n                    ingredients: [\"160g orata\", \"70g quinoa\", \"150g spinaci\"]\r\n                }\r\n            ]\r\n        },\r\n        4: { // Giovedì\r\n            name: \"⚡ GIOVEDÌ - THUNDER DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"gio-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"7:30\",\r\n                    food: \"Frittata + pane integrale + pomodori\",\r\n                    proteins: 28,\r\n                    calories: 400,\r\n                    ingredients: [\"3 uova\", \"2 fette pane\", \"100g pomodori\", \"basilico\"]\r\n                },\r\n                {\r\n                    id: \"gio-spuntino\",\r\n                    type: \"🥜 Spuntino\",\r\n                    time: \"10:00\",\r\n                    food: \"Parmigiano + noci + pera\",\r\n                    proteins: 20,\r\n                    calories: 320,\r\n                    ingredients: [\"30g parmigiano\", \"20g noci\", \"1 pera media\"]\r\n                },\r\n                {\r\n                    id: \"gio-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"13:00\",\r\n                    food: \"Bistecca + patate + rucola\",\r\n                    proteins: 48,\r\n                    calories: 650,\r\n                    ingredients: [\"200g bistecca\", \"200g patate\", \"50g rucola\", \"olio EVO\"]\r\n                },\r\n                {\r\n                    id: \"gio-snack\",\r\n                    type: \"🍓 Snack\",\r\n                    time: \"16:30\",\r\n                    food: \"Smoothie verde + proteine\",\r\n                    proteins: 26,\r\n                    calories: 280,\r\n                    ingredients: [\"spinaci\", \"banana\", \"1 scoop whey\", \"acqua cocco\"]\r\n                },\r\n                {\r\n                    id: \"gio-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"20:00\",\r\n                    food: \"Gamberi + pasta + zucchine\",\r\n                    proteins: 32,\r\n                    calories: 480,\r\n                    ingredients: [\"150g gamberi\", \"70g pasta\", \"200g zucchine\"]\r\n                }\r\n            ]\r\n        },\r\n        5: { // Venerdì\r\n            name: \"🏆 VENERDÌ - VICTORY DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"ven-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"7:30\",\r\n                    food: \"Muesli proteico + latte + frutti bosco\",\r\n                    proteins: 32,\r\n                    calories: 450,\r\n                    ingredients: [\"50g muesli\", \"250ml latte\", \"1 scoop whey\", \"frutti bosco\"]\r\n                },\r\n                {\r\n                    id: \"ven-preworkout\",\r\n                    type: \"⚡ Pre-Workout\",\r\n                    time: \"11:00\",\r\n                    food: \"Energy balls + caffè\",\r\n                    proteins: 12,\r\n                    calories: 220,\r\n                    ingredients: [\"3 energy balls fatti in casa\", \"caffè nero\"]\r\n                },\r\n                {\r\n                    id: \"ven-postworkout\",\r\n                    type: \"💥 Post-Workout\",\r\n                    time: \"13:30\",\r\n                    food: \"Recovery shake completo\",\r\n                    proteins: 35,\r\n                    calories: 420,\r\n                    ingredients: [\"1.5 scoop whey\", \"banana\", \"latte\", \"miele\", \"avena\"]\r\n                },\r\n                {\r\n                    id: \"ven-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"15:00\",\r\n                    food: \"Salmone + quinoa + avocado\",\r\n                    proteins: 38,\r\n                    calories: 580,\r\n                    ingredients: [\"160g salmone\", \"80g quinoa\", \"1/2 avocado\", \"lime\"]\r\n                },\r\n                {\r\n                    id: \"ven-aperitivo\",\r\n                    type: \"🍻 Aperitivo\",\r\n                    time: \"18:30\",\r\n                    food: \"Hummus + verdure + crackers\",\r\n                    proteins: 15,\r\n                    calories: 280,\r\n                    ingredients: [\"60g hummus\", \"verdure crude\", \"crackers integrali\"]\r\n                },\r\n                {\r\n                    id: \"ven-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"21:00\",\r\n                    food: \"Pizza proteica fatta in casa\",\r\n                    proteins: 35,\r\n                    calories: 520,\r\n                    ingredients: [\"base proteica\", \"pomodoro\", \"mozzarella\", \"prosciutto\"]\r\n                }\r\n            ]\r\n        },\r\n        6: { // Sabato\r\n            name: \"🎉 SABATO - CHEAT DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"sab-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"9:00\",\r\n                    food: \"Pancakes proteici + sciroppo + bacon\",\r\n                    proteins: 35,\r\n                    calories: 550,\r\n                    ingredients: [\"pancakes proteici\", \"sciroppo acero\", \"3 fette bacon\"]\r\n                },\r\n                {\r\n                    id: \"sab-brunch\",\r\n                    type: \"🥐 Brunch\",\r\n                    time: \"11:30\",\r\n                    food: \"Avocado toast + uova + salmone affumicato\",\r\n                    proteins: 30,\r\n                    calories: 480,\r\n                    ingredients: [\"pane integrale\", \"avocado\", \"2 uova\", \"salmone affumicato\"]\r\n                },\r\n                {\r\n                    id: \"sab-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"14:00\",\r\n                    food: \"Burger proteico + patate dolci + insalata\",\r\n                    proteins: 45,\r\n                    calories: 680,\r\n                    ingredients: [\"180g carne\", \"panino integrale\", \"patate dolci\", \"insalata\"]\r\n                },\r\n                {\r\n                    id: \"sab-snack\",\r\n                    type: \"🍨 Snack\",\r\n                    time: \"17:00\",\r\n                    food: \"Gelato proteico fatto in casa\",\r\n                    proteins: 20,\r\n                    calories: 250,\r\n                    ingredients: [\"whey\", \"latte\", \"frutta\", \"dolcificante\"]\r\n                },\r\n                {\r\n                    id: \"sab-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"20:30\",\r\n                    food: \"Grigliata mista + verdure + pane\",\r\n                    proteins: 50,\r\n                    calories: 720,\r\n                    ingredients: [\"carne mista\", \"verdure grigliate\", \"pane integrale\"]\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    const dayNames = ['Domenica', 'Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato'];\r\n\r\n    const toggleMeal = (mealId) => {\r\n        const today = new Date().toDateString();\r\n        const key = `${today}-${mealId}`;\r\n        \r\n        const newCompleted = {\r\n            ...completedMeals,\r\n            [key]: !completedMeals[key]\r\n        };\r\n        \r\n        setCompletedMeals(newCompleted);\r\n        localStorage.setItem('completedMeals', JSON.stringify(newCompleted));\r\n        \r\n        // Calcola streak\r\n        updateStreak(newCompleted);\r\n    };\r\n\r\n    const updateStreak = (meals) => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[new Date().getDay()].meals;\r\n        const completedToday = todayMeals.filter(meal => meals[`${today}-${meal.id}`]).length;\r\n        \r\n        if (completedToday === todayMeals.length) {\r\n            const newStreak = currentStreak + 1;\r\n            setCurrentStreak(newStreak);\r\n            localStorage.setItem('nutritionStreak', newStreak.toString());\r\n        }\r\n    };\r\n\r\n    const isMealCompleted = (mealId) => {\r\n        const today = new Date().toDateString();\r\n        return completedMeals[`${today}-${mealId}`] || false;\r\n    };\r\n\r\n    const getDayProgress = () => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[selectedDay].meals;\r\n        const completed = todayMeals.filter(meal => completedMeals[`${today}-${meal.id}`]).length;\r\n        return Math.round((completed / todayMeals.length) * 100);\r\n    };\r\n\r\n    const getTotalProteins = () => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[selectedDay].meals;\r\n        return todayMeals\r\n            .filter(meal => completedMeals[`${today}-${meal.id}`])\r\n            .reduce((total, meal) => total + meal.proteins, 0);\r\n    };\r\n\r\n    const getTotalCalories = () => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[selectedDay].meals;\r\n        return todayMeals\r\n            .filter(meal => completedMeals[`${today}-${meal.id}`])\r\n            .reduce((total, meal) => total + meal.calories, 0);\r\n    };\r\n\r\n    return (\r\n        <div className=\"nutrition-premium\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"nutrition-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-title\">\r\n                    <h1>🍽️ NUTRITION TRACKER PRO</h1>\r\n                    <p className=\"subtitle\">Piano alimentare settimanale personalizzato</p>\r\n                </div>\r\n\r\n                <div className=\"streak-counter\">\r\n                    <div className=\"streak-number\">{currentStreak}</div>\r\n                    <div className=\"streak-label\">🔥 STREAK</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* SELECTOR GIORNI */}\r\n            <div className=\"day-selector\">\r\n                {dayNames.map((day, index) => (\r\n                    <button\r\n                        key={index}\r\n                        className={`day-button ${selectedDay === index ? 'active' : ''} ${index === new Date().getDay() ? 'today' : ''}`}\r\n                        onClick={() => setSelectedDay(index)}\r\n                    >\r\n                        <span className=\"day-name\">{day.slice(0, 3)}</span>\r\n                        <span className=\"day-number\">{index + 1}</span>\r\n                    </button>\r\n                ))}\r\n            </div>\r\n\r\n            {/* PROGRESS BAR */}\r\n            <div className=\"daily-progress\">\r\n                <div className=\"progress-info\">\r\n                    <h3>{weeklyDiet[selectedDay].name}</h3>\r\n                    <div className=\"progress-stats\">\r\n                        <span className=\"stat\">\r\n                            <strong>{getDayProgress()}%</strong> Completato\r\n                        </span>\r\n                        <span className=\"stat\">\r\n                            <strong>{getTotalProteins()}g</strong> Proteine\r\n                        </span>\r\n                        <span className=\"stat\">\r\n                            <strong>{getTotalCalories()}</strong> Kcal\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"progress-bar\">\r\n                    <div \r\n                        className=\"progress-fill\"\r\n                        style={{ width: `${getDayProgress()}%` }}\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* MEALS LIST */}\r\n            <div className=\"meals-container\">\r\n                {weeklyDiet[selectedDay].meals.map((meal, index) => (\r\n                    <div \r\n                        key={meal.id}\r\n                        className={`meal-card ${isMealCompleted(meal.id) ? 'completed' : ''}`}\r\n                    >\r\n                        <div className=\"meal-header\">\r\n                            <div className=\"meal-info\">\r\n                                <h4 className=\"meal-type\">{meal.type}</h4>\r\n                                <span className=\"meal-time\">{meal.time}</span>\r\n                            </div>\r\n                            <button\r\n                                className={`meal-checkbox ${isMealCompleted(meal.id) ? 'checked' : ''}`}\r\n                                onClick={() => toggleMeal(meal.id)}\r\n                            >\r\n                                {isMealCompleted(meal.id) ? '✅' : '⭕'}\r\n                            </button>\r\n                        </div>\r\n                        \r\n                        <div className=\"meal-content\">\r\n                            <h5 className=\"meal-food\">{meal.food}</h5>\r\n                            \r\n                            <div className=\"meal-macros\">\r\n                                <span className=\"macro protein\">\r\n                                    💪 {meal.proteins}g proteine\r\n                                </span>\r\n                                <span className=\"macro calories\">\r\n                                    🔥 {meal.calories} kcal\r\n                                </span>\r\n                            </div>\r\n                            \r\n                            <div className=\"ingredients\">\r\n                                <h6>Ingredienti:</h6>\r\n                                <ul>\r\n                                    {meal.ingredients.map((ingredient, idx) => (\r\n                                        <li key={idx}>{ingredient}</li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* QUICK ACTIONS */}\r\n            <div className=\"quick-actions\">\r\n                <Link to=\"/nutrition-tracker\" className=\"action-button primary\">\r\n                    📊 Nutrition Tracker Avanzato\r\n                </Link>\r\n                <Link to=\"/supplements\" className=\"action-button secondary\">\r\n                    💊 Gestione Integratori\r\n                </Link>\r\n                <button \r\n                    className=\"action-button tertiary\"\r\n                    onClick={() => {\r\n                        setCompletedMeals({});\r\n                        setCurrentStreak(0);\r\n                        localStorage.removeItem('completedMeals');\r\n                        localStorage.removeItem('nutritionStreak');\r\n                    }}\r\n                >\r\n                    🔄 Reset Progresso\r\n                </button>\r\n            </div>\r\n\r\n            {/* MOTIVATIONAL FOOTER */}\r\n            <div className=\"motivational-footer\">\r\n                <h3>💡 TIP DEL GIORNO</h3>\r\n                <p>\r\n                    \"La nutrizione rappresenta il 70% dei tuoi risultati. Ogni pasto è un'opportunità per alimentare la tua trasformazione straordinaria!\"\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nutrition;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Supplements = () => {\r\n    const navigate = useNavigate();\r\n    const [selectedCategory, setSelectedCategory] = useState('all');\r\n    const [takenToday, setTakenToday] = useState(() => {\r\n        const saved = localStorage.getItem('supplementsTaken');\r\n        return saved ? JSON.parse(saved) : {};\r\n    });\r\n    const [currentStack, setCurrentStack] = useState(() => {\r\n        const saved = localStorage.getItem('currentStack');\r\n        return saved ? JSON.parse(saved) : [\r\n            'whey-protein', 'creatine', 'multivitamin', 'omega3', 'vitamin-d'\r\n        ];\r\n    });\r\n\r\n    // SUPPLEMENTI COMPLETI CON TIMING E DOSAGGI\r\n    const supplements = {\r\n        'whey-protein': {\r\n            name: 'Whey Protein',\r\n            category: 'protein',\r\n            icon: '💪',\r\n            dosage: '25-30g',\r\n            timing: ['post-workout', 'snack'],\r\n            benefits: ['Crescita muscolare', 'Recovery', 'Sintesi proteica'],\r\n            priority: 'essential',\r\n            cost: '€35/mese',\r\n            description: 'Proteine del siero ad alto valore biologico per massimizzare la crescita muscolare',\r\n            instructions: 'Assumere 1 scoop (25g) in 250ml acqua/latte entro 30min dal workout'\r\n        },\r\n        'creatine': {\r\n            name: 'Creatina Monoidrata',\r\n            category: 'performance',\r\n            icon: '⚡',\r\n            dosage: '3-5g',\r\n            timing: ['pre-workout', 'post-workout'],\r\n            benefits: ['Forza', 'Potenza', 'Volume muscolare'],\r\n            priority: 'essential',\r\n            cost: '€15/mese',\r\n            description: 'Aumenta ATP per performance esplosive e volume cellulare',\r\n            instructions: '5g al giorno, possibile loading di 20g per 5 giorni iniziali'\r\n        },\r\n        'multivitamin': {\r\n            name: 'Multivitaminico Premium',\r\n            category: 'health',\r\n            icon: '🌟',\r\n            dosage: '1 tablet',\r\n            timing: ['breakfast'],\r\n            benefits: ['Salute generale', 'Sistema immunitario', 'Energia'],\r\n            priority: 'important',\r\n            cost: '€25/mese',\r\n            description: 'Formula completa di vitamine e minerali per atleti',\r\n            instructions: '1 compressa al mattino a stomaco pieno'\r\n        },\r\n        'omega3': {\r\n            name: 'Omega-3 EPA/DHA',\r\n            category: 'health',\r\n            icon: '🐟',\r\n            dosage: '1-2g',\r\n            timing: ['meals'],\r\n            benefits: ['Antinfiammatorio', 'Salute cuore', 'Recovery'],\r\n            priority: 'important',\r\n            cost: '€20/mese',\r\n            description: 'Acidi grassi essenziali per ridurre infiammazione e supportare il recovery',\r\n            instructions: '1-2 capsule ai pasti principali'\r\n        },\r\n        'vitamin-d': {\r\n            name: 'Vitamina D3',\r\n            category: 'health',\r\n            icon: '☀️',\r\n            dosage: '2000-4000 IU',\r\n            timing: ['breakfast'],\r\n            benefits: ['Salute ossa', 'Sistema immunitario', 'Testosterone'],\r\n            priority: 'important',\r\n            cost: '€12/mese',\r\n            description: 'Supporta salute ossea, sistema immunitario e produzione ormonale',\r\n            instructions: '2000 IU al mattino con grassi per migliore assorbimento'\r\n        },\r\n        'bcaa': {\r\n            name: 'BCAA 2:1:1',\r\n            category: 'recovery',\r\n            icon: '🔄',\r\n            dosage: '10-15g',\r\n            timing: ['intra-workout', 'between-meals'],\r\n            benefits: ['Riduce catabolismo', 'Energia durante workout', 'Recovery'],\r\n            priority: 'optional',\r\n            cost: '€30/mese',\r\n            description: 'Aminoacidi ramificati per preservare massa muscolare durante workout',\r\n            instructions: '10g durante workout lunghi o tra i pasti'\r\n        },\r\n        'beta-alanine': {\r\n            name: 'Beta-Alanina',\r\n            category: 'performance',\r\n            icon: '🔥',\r\n            dosage: '3-5g',\r\n            timing: ['pre-workout'],\r\n            benefits: ['Resistenza muscolare', 'Riduce fatica', 'Performance'],\r\n            priority: 'optional',\r\n            cost: '€18/mese',\r\n            description: 'Aumenta capacità di buffer muscolare per allenamenti intensi',\r\n            instructions: '3g 30min pre-workout, possibile formicolio normale'\r\n        },\r\n        'magnesium': {\r\n            name: 'Magnesio Glicinato',\r\n            category: 'recovery',\r\n            icon: '😴',\r\n            dosage: '200-400mg',\r\n            timing: ['evening'],\r\n            benefits: ['Rilassamento muscolare', 'Sonno', 'Recovery'],\r\n            priority: 'important',\r\n            cost: '€15/mese',\r\n            description: 'Supporta rilassamento muscolare e qualità del sonno',\r\n            instructions: '200-300mg la sera prima di dormire'\r\n        },\r\n        'caffeine': {\r\n            name: 'Caffeina Anidra',\r\n            category: 'performance',\r\n            icon: '☕',\r\n            dosage: '100-200mg',\r\n            timing: ['pre-workout'],\r\n            benefits: ['Energia', 'Focus', 'Performance'],\r\n            priority: 'optional',\r\n            cost: '€10/mese',\r\n            description: 'Stimolante per energia e focus durante allenamenti intensi',\r\n            instructions: '100-200mg 30-45min pre-workout, non oltre le 16:00'\r\n        },\r\n        'zinc': {\r\n            name: 'Zinco + Rame',\r\n            category: 'health',\r\n            icon: '⚡',\r\n            dosage: '15-30mg',\r\n            timing: ['evening'],\r\n            benefits: ['Testosterone', 'Sistema immunitario', 'Recovery'],\r\n            priority: 'important',\r\n            cost: '€12/mese',\r\n            description: 'Supporta produzione ormonale e sistema immunitario',\r\n            instructions: '15mg la sera a stomaco vuoto con rame 1-2mg'\r\n        }\r\n    };\r\n\r\n    const categories = {\r\n        all: { name: 'Tutti', icon: '🔮', color: '#00ffff' },\r\n        protein: { name: 'Proteine', icon: '💪', color: '#ff9500' },\r\n        performance: { name: 'Performance', icon: '⚡', color: '#ff6b6b' },\r\n        health: { name: 'Salute', icon: '🌟', color: '#4ecdc4' },\r\n        recovery: { name: 'Recovery', icon: '😴', color: '#a8e6cf' }\r\n    };\r\n\r\n    const timingLabels = {\r\n        'breakfast': '🌅 Colazione',\r\n        'pre-workout': '🏋️ Pre-Workout',\r\n        'intra-workout': '💪 Intra-Workout',\r\n        'post-workout': '🔥 Post-Workout',\r\n        'meals': '🍽️ Ai pasti',\r\n        'snack': '🥤 Snack',\r\n        'evening': '🌙 Sera',\r\n        'between-meals': '⏰ Tra pasti'\r\n    };\r\n\r\n    const toggleSupplement = (suppId) => {\r\n        const today = new Date().toDateString();\r\n        const key = `${today}-${suppId}`;\r\n        \r\n        const newTaken = {\r\n            ...takenToday,\r\n            [key]: !takenToday[key]\r\n        };\r\n        \r\n        setTakenToday(newTaken);\r\n        localStorage.setItem('supplementsTaken', JSON.stringify(newTaken));\r\n    };\r\n\r\n    const isSupplementTaken = (suppId) => {\r\n        const today = new Date().toDateString();\r\n        return takenToday[`${today}-${suppId}`] || false;\r\n    };\r\n\r\n    const addToStack = (suppId) => {\r\n        if (!currentStack.includes(suppId)) {\r\n            const newStack = [...currentStack, suppId];\r\n            setCurrentStack(newStack);\r\n            localStorage.setItem('currentStack', JSON.stringify(newStack));\r\n        }\r\n    };\r\n\r\n    const removeFromStack = (suppId) => {\r\n        const newStack = currentStack.filter(id => id !== suppId);\r\n        setCurrentStack(newStack);\r\n        localStorage.setItem('currentStack', JSON.stringify(newStack));\r\n    };\r\n\r\n    const getCompletionRate = () => {\r\n        const today = new Date().toDateString();\r\n        const stackSupplements = currentStack.length;\r\n        const takenCount = currentStack.filter(suppId => \r\n            takenToday[`${today}-${suppId}`]\r\n        ).length;\r\n        return stackSupplements > 0 ? Math.round((takenCount / stackSupplements) * 100) : 0;\r\n    };\r\n\r\n    const getFilteredSupplements = () => {\r\n        return Object.entries(supplements).filter(([id, supp]) => \r\n            selectedCategory === 'all' || supp.category === selectedCategory\r\n        );\r\n    };\r\n\r\n    const getTotalMonthlyCost = () => {\r\n        return currentStack.reduce((total, suppId) => {\r\n            const cost = supplements[suppId]?.cost || '€0/mese';\r\n            const amount = parseInt(cost.replace('€', '').replace('/mese', ''));\r\n            return total + amount;\r\n        }, 0);\r\n    };\r\n\r\n    return (\r\n        <div className=\"supplements-premium\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"supplements-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-title\">\r\n                    <h1>💊 SUPPLEMENT STACK PRO</h1>\r\n                    <p className=\"subtitle\">Gestione intelligente degli integratori</p>\r\n                </div>\r\n\r\n                <div className=\"completion-badge\">\r\n                    <div className=\"completion-circle\">\r\n                        <span className=\"completion-percentage\">{getCompletionRate()}%</span>\r\n                    </div>\r\n                    <div className=\"completion-label\">Oggi</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK STATS */}\r\n            <div className=\"stack-overview\">\r\n                <div className=\"overview-card\">\r\n                    <div className=\"card-icon\">📦</div>\r\n                    <div className=\"card-data\">\r\n                        <span className=\"card-value\">{currentStack.length}</span>\r\n                        <span className=\"card-label\">Nel tuo stack</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"overview-card\">\r\n                    <div className=\"card-icon\">✅</div>\r\n                    <div className=\"card-data\">\r\n                        <span className=\"card-value\">{currentStack.filter(id => isSupplementTaken(id)).length}</span>\r\n                        <span className=\"card-label\">Assunti oggi</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"overview-card\">\r\n                    <div className=\"card-icon\">💰</div>\r\n                    <div className=\"card-data\">\r\n                        <span className=\"card-value\">€{getTotalMonthlyCost()}</span>\r\n                        <span className=\"card-label\">Costo mensile</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* CURRENT STACK */}\r\n            <div className=\"current-stack-section\">\r\n                <h2>🔥 IL TUO STACK ATTUALE</h2>\r\n                <div className=\"stack-grid\">\r\n                    {currentStack.map(suppId => {\r\n                        const supplement = supplements[suppId];\r\n                        if (!supplement) return null;\r\n                        \r\n                        return (\r\n                            <div \r\n                                key={suppId}\r\n                                className={`stack-card ${isSupplementTaken(suppId) ? 'taken' : ''}`}\r\n                            >\r\n                                <div className=\"stack-card-header\">\r\n                                    <div className=\"stack-info\">\r\n                                        <span className=\"stack-icon\">{supplement.icon}</span>\r\n                                        <div className=\"stack-details\">\r\n                                            <h4>{supplement.name}</h4>\r\n                                            <span className=\"stack-dosage\">{supplement.dosage}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <button\r\n                                        className={`take-button ${isSupplementTaken(suppId) ? 'taken' : ''}`}\r\n                                        onClick={() => toggleSupplement(suppId)}\r\n                                    >\r\n                                        {isSupplementTaken(suppId) ? '✅' : '⭕'}\r\n                                    </button>\r\n                                </div>\r\n                                \r\n                                <div className=\"stack-timing\">\r\n                                    {supplement.timing.map(time => (\r\n                                        <span key={time} className=\"timing-tag\">\r\n                                            {timingLabels[time]}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                                \r\n                                <div className=\"stack-actions\">\r\n                                    <span className=\"stack-cost\">{supplement.cost}</span>\r\n                                    <button\r\n                                        className=\"remove-button\"\r\n                                        onClick={() => removeFromStack(suppId)}\r\n                                        title=\"Rimuovi dallo stack\"\r\n                                    >\r\n                                        🗑️\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            {/* CATEGORY FILTER */}\r\n            <div className=\"category-filter\">\r\n                <h2>🔍 ESPLORA SUPPLEMENTI</h2>\r\n                <div className=\"filter-buttons\">\r\n                    {Object.entries(categories).map(([key, category]) => (\r\n                        <button\r\n                            key={key}\r\n                            className={`filter-btn ${selectedCategory === key ? 'active' : ''}`}\r\n                            onClick={() => setSelectedCategory(key)}\r\n                            style={{ '--category-color': category.color }}\r\n                        >\r\n                            <span className=\"filter-icon\">{category.icon}</span>\r\n                            <span className=\"filter-name\">{category.name}</span>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* SUPPLEMENTS CATALOG */}\r\n            <div className=\"supplements-catalog\">\r\n                <div className=\"catalog-grid\">\r\n                    {getFilteredSupplements().map(([suppId, supplement]) => {\r\n                        const inStack = currentStack.includes(suppId);\r\n                        \r\n                        return (\r\n                            <div key={suppId} className={`supplement-card ${supplement.priority}`}>\r\n                                <div className=\"supplement-header\">\r\n                                    <div className=\"supplement-main\">\r\n                                        <span className=\"supplement-icon\">{supplement.icon}</span>\r\n                                        <div className=\"supplement-info\">\r\n                                            <h3>{supplement.name}</h3>\r\n                                            <span className=\"supplement-category\">\r\n                                                {categories[supplement.category].name}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"supplement-priority\">\r\n                                        {supplement.priority === 'essential' && <span className=\"priority-badge essential\">Essential</span>}\r\n                                        {supplement.priority === 'important' && <span className=\"priority-badge important\">Important</span>}\r\n                                        {supplement.priority === 'optional' && <span className=\"priority-badge optional\">Optional</span>}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-description\">\r\n                                    <p>{supplement.description}</p>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-details\">\r\n                                    <div className=\"detail-row\">\r\n                                        <span className=\"detail-label\">💊 Dosaggio:</span>\r\n                                        <span className=\"detail-value\">{supplement.dosage}</span>\r\n                                    </div>\r\n                                    <div className=\"detail-row\">\r\n                                        <span className=\"detail-label\">💰 Costo:</span>\r\n                                        <span className=\"detail-value\">{supplement.cost}</span>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-benefits\">\r\n                                    <h4>Benefici:</h4>\r\n                                    <div className=\"benefits-tags\">\r\n                                        {supplement.benefits.map((benefit, index) => (\r\n                                            <span key={index} className=\"benefit-tag\">\r\n                                                {benefit}\r\n                                            </span>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-timing\">\r\n                                    <h4>Quando assumere:</h4>\r\n                                    <div className=\"timing-tags\">\r\n                                        {supplement.timing.map(time => (\r\n                                            <span key={time} className=\"timing-tag\">\r\n                                                {timingLabels[time]}\r\n                                            </span>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-instructions\">\r\n                                    <p><strong>Istruzioni:</strong> {supplement.instructions}</p>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-actions\">\r\n                                    {inStack ? (\r\n                                        <button\r\n                                            className=\"action-button remove\"\r\n                                            onClick={() => removeFromStack(suppId)}\r\n                                        >\r\n                                            ❌ Rimuovi dal Stack\r\n                                        </button>\r\n                                    ) : (\r\n                                        <button\r\n                                            className=\"action-button add\"\r\n                                            onClick={() => addToStack(suppId)}\r\n                                        >\r\n                                            ➕ Aggiungi al Stack\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            {/* TIMING GUIDE */}\r\n            <div className=\"timing-guide\">\r\n                <h2>⏰ GUIDA AI TIMING</h2>\r\n                <div className=\"timing-schedule\">\r\n                    <div className=\"time-slot\">\r\n                        <h3>🌅 Mattino (7:00-9:00)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('breakfast'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"time-slot\">\r\n                        <h3>🏋️ Pre-Workout (30-45min prima)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('pre-workout'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"time-slot\">\r\n                        <h3>🔥 Post-Workout (0-30min dopo)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('post-workout'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"time-slot\">\r\n                        <h3>🌙 Sera (prima di dormire)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('evening'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK ACTIONS */}\r\n            <div className=\"supplements-actions\">\r\n                <button \r\n                    className=\"action-button reset\"\r\n                    onClick={() => {\r\n                        setTakenToday({});\r\n                        localStorage.removeItem('supplementsTaken');\r\n                    }}\r\n                >\r\n                    🔄 Reset Giorno\r\n                </button>\r\n                <button \r\n                    className=\"action-button clear\"\r\n                    onClick={() => {\r\n                        setCurrentStack([]);\r\n                        localStorage.removeItem('currentStack');\r\n                    }}\r\n                >\r\n                    🗑️ Svuota Stack\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Supplements;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Recovery = () => {\r\n    const navigate = useNavigate();\r\n    const [activeSession, setActiveSession] = useState(null);\r\n    const [sessionHistory, setSessionHistory] = useState(() => {\r\n        const saved = localStorage.getItem('recoveryHistory');\r\n        return saved ? JSON.parse(saved) : [];\r\n    });\r\n    const [currentTimer, setCurrentTimer] = useState(0);\r\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n    const [selectedProtocol, setSelectedProtocol] = useState('sauna');\r\n\r\n    // PROTOCOLLI RECOVERY PROFESSIONALI\r\n    const recoveryProtocols = {\r\n        'sauna': {\r\n            name: 'Sauna Finlandese',\r\n            icon: '🔥',\r\n            category: 'heat',\r\n            temperature: '80-90°C',\r\n            duration: '15-20 min',\r\n            benefits: ['Vasodilatazione', 'Rilascio endorfine', 'Detox', 'Riduce stress'],\r\n            difficulty: 'facile',\r\n            equipment: 'Sauna',\r\n            calories: 150,\r\n            description: 'Terapia del calore per rilassamento profondo e recupero muscolare',\r\n            instructions: [\r\n                'Riscalda la sauna a 80-90°C',\r\n                'Entra con asciugamano pulito',\r\n                'Siediti rilassato per 15-20 minuti',\r\n                'Bevi acqua frequentemente',\r\n                'Doccia fredda finale per shock termico'\r\n            ],\r\n            contraindications: ['Problemi cardiaci', 'Pressione alta', 'Gravidanza']\r\n        },\r\n        'ice-bath': {\r\n            name: 'Ice Bath (Crioterapia)',\r\n            icon: '🧊',\r\n            category: 'cold',\r\n            temperature: '10-15°C',\r\n            duration: '3-5 min',\r\n            benefits: ['Riduce infiammazione', 'Accelera recovery', 'Migliora circolazione'],\r\n            difficulty: 'difficile',\r\n            equipment: 'Vasca + ghiaccio',\r\n            calories: 50,\r\n            description: 'Immersione in acqua fredda per ridurre infiammazione e accelerare il recupero',\r\n            instructions: [\r\n                'Riempie vasca con acqua 10-15°C',\r\n                'Respirazione controllata prima di entrare',\r\n                'Immersione graduale fino al petto',\r\n                'Rimani calmo per 3-5 minuti',\r\n                'Uscita graduale e riscaldamento naturale'\r\n            ],\r\n            contraindications: ['Problemi circolatori', 'Ipotermia', 'Ferite aperte']\r\n        },\r\n        'contrast-shower': {\r\n            name: 'Doccia Contrastante',\r\n            icon: '🚿',\r\n            category: 'contrast',\r\n            temperature: '40°C / 15°C',\r\n            duration: '10-15 min',\r\n            benefits: ['Migliora circolazione', 'Energizza', 'Recovery veloce'],\r\n            difficulty: 'medio',\r\n            equipment: 'Doccia',\r\n            calories: 30,\r\n            description: 'Alternanza di acqua calda e fredda per stimolare la circolazione',\r\n            instructions: [\r\n                '3 min acqua calda (40°C)',\r\n                '30 sec acqua fredda (15°C)',\r\n                'Ripeti il ciclo 3-4 volte',\r\n                'Termina sempre con acqua fredda',\r\n                'Asciugatura energica con asciugamano'\r\n            ],\r\n            contraindications: ['Pressione alta instabile']\r\n        },\r\n        'massage': {\r\n            name: 'Massaggio Sportivo',\r\n            icon: '🙌',\r\n            category: 'manual',\r\n            temperature: 'Ambiente',\r\n            duration: '30-60 min',\r\n            benefits: ['Riduce tensione', 'Migliora flessibilità', 'Rilassamento profondo'],\r\n            difficulty: 'facile',\r\n            equipment: 'Olio da massaggio',\r\n            calories: 0,\r\n            description: 'Manipolazione manuale dei tessuti molli per rilassamento muscolare',\r\n            instructions: [\r\n                'Usa olio da massaggio di qualità',\r\n                'Movimenti lenti e profondi',\r\n                'Concentrati su aree tense',\r\n                'Pressione gradualmente crescente',\r\n                'Termina con movimenti rilassanti'\r\n            ],\r\n            contraindications: ['Lesioni acute', 'Infiammazioni acute']\r\n        },\r\n        'stretching': {\r\n            name: 'Stretching Profondo',\r\n            icon: '🤸',\r\n            category: 'movement',\r\n            temperature: 'Ambiente',\r\n            duration: '20-30 min',\r\n            benefits: ['Aumenta flessibilità', 'Riduce tensione', 'Migliora mobilità'],\r\n            difficulty: 'facile',\r\n            equipment: 'Tappetino yoga',\r\n            calories: 80,\r\n            description: 'Allungamento muscolare per migliorare flessibilità e ridurre tensioni',\r\n            instructions: [\r\n                'Riscaldamento leggero 5 minuti',\r\n                'Stretching statico 30 sec per gruppo muscolare',\r\n                'Respirazione profonda durante allungamento',\r\n                'Non forzare mai il movimento',\r\n                'Rilassamento finale 5 minuti'\r\n            ],\r\n            contraindications: ['Lesioni muscolari acute']\r\n        },\r\n        'meditation': {\r\n            name: 'Meditazione Mindfulness',\r\n            icon: '🧘',\r\n            category: 'mental',\r\n            temperature: 'Ambiente',\r\n            duration: '10-20 min',\r\n            benefits: ['Riduce stress', 'Migliora focus', 'Equilibrio mentale'],\r\n            difficulty: 'medio',\r\n            equipment: 'Silenzio',\r\n            calories: 0,\r\n            description: 'Pratica di consapevolezza per recupero mentale e riduzione dello stress',\r\n            instructions: [\r\n                'Trova posizione comoda e silenziosa',\r\n                'Chiudi gli occhi e respira naturalmente',\r\n                'Concentrati sul respiro',\r\n                'Osserva pensieri senza giudicare',\r\n                'Ritorna al respiro quando ti distrai'\r\n            ],\r\n            contraindications: ['Disturbi psichiatrici gravi']\r\n        },\r\n        'foam-rolling': {\r\n            name: 'Foam Rolling',\r\n            icon: '🌊',\r\n            category: 'self-massage',\r\n            temperature: 'Ambiente',\r\n            duration: '15-25 min',\r\n            benefits: ['Rilascia trigger points', 'Migliora mobilità', 'Self-massage'],\r\n            difficulty: 'facile',\r\n            equipment: 'Foam roller',\r\n            calories: 60,\r\n            description: 'Auto-massaggio con rullo per rilasciare tensioni e trigger points',\r\n            instructions: [\r\n                'Inizia con pressione leggera',\r\n                'Rotola lentamente ogni gruppo muscolare',\r\n                'Fermati sui punti dolorosi 30-60 sec',\r\n                'Mantieni respirazione regolare',\r\n                'Termina con movimenti rilassanti'\r\n            ],\r\n            contraindications: ['Lesioni acute', 'Osteoporosi severa']\r\n        },\r\n        'yoga': {\r\n            name: 'Yoga Restorative',\r\n            icon: '🕉️',\r\n            category: 'movement',\r\n            temperature: 'Ambiente',\r\n            duration: '30-45 min',\r\n            benefits: ['Flessibilità', 'Equilibrio', 'Rilassamento profondo'],\r\n            difficulty: 'medio',\r\n            equipment: 'Tappetino yoga',\r\n            calories: 120,\r\n            description: 'Pratica yoga dolce focalizzata sul recupero e rilassamento',\r\n            instructions: [\r\n                'Inizia con respirazione profonda',\r\n                'Posizioni dolci e sostenute',\r\n                'Mantieni ogni asana 1-3 minuti',\r\n                'Focus sul rilascio delle tensioni',\r\n                'Chiudi con Savasana 10 minuti'\r\n            ],\r\n            contraindications: ['Lesioni spinali acute']\r\n        }\r\n    };\r\n\r\n    // TIMER LOGIC\r\n    useEffect(() => {\r\n        let interval;\r\n        if (isTimerRunning) {\r\n            interval = setInterval(() => {\r\n                setCurrentTimer(prev => prev + 1);\r\n            }, 1000);\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isTimerRunning]);\r\n\r\n    const startSession = (protocolId) => {\r\n        setActiveSession(protocolId);\r\n        setSelectedProtocol(protocolId);\r\n        setCurrentTimer(0);\r\n        setIsTimerRunning(true);\r\n    };\r\n\r\n    const endSession = () => {\r\n        if (activeSession) {\r\n            const session = {\r\n                id: Date.now().toString(),\r\n                protocol: activeSession,\r\n                duration: currentTimer,\r\n                date: new Date().toISOString(),\r\n                quality: null // Verrà impostato dopo\r\n            };\r\n            \r\n            const newHistory = [session, ...sessionHistory.slice(0, 19)]; // Max 20 sessioni\r\n            setSessionHistory(newHistory);\r\n            localStorage.setItem('recoveryHistory', JSON.stringify(newHistory));\r\n        }\r\n        \r\n        setActiveSession(null);\r\n        setIsTimerRunning(false);\r\n        setCurrentTimer(0);\r\n    };\r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    const getSessionStats = () => {\r\n        const thisWeek = sessionHistory.filter(session => {\r\n            const sessionDate = new Date(session.date);\r\n            const weekAgo = new Date();\r\n            weekAgo.setDate(weekAgo.getDate() - 7);\r\n            return sessionDate >= weekAgo;\r\n        });\r\n\r\n        const totalDuration = sessionHistory.reduce((sum, session) => sum + session.duration, 0);\r\n        const avgDuration = sessionHistory.length > 0 ? Math.round(totalDuration / sessionHistory.length) : 0;\r\n\r\n        return {\r\n            totalSessions: sessionHistory.length,\r\n            thisWeek: thisWeek.length,\r\n            avgDuration: Math.floor(avgDuration / 60),\r\n            totalHours: Math.floor(totalDuration / 3600)\r\n        };\r\n    };\r\n\r\n    const stats = getSessionStats();\r\n\r\n    const categories = {\r\n        heat: { name: 'Calore', icon: '🔥', color: '#ff6b6b' },\r\n        cold: { name: 'Freddo', icon: '🧊', color: '#4ecdc4' },\r\n        contrast: { name: 'Contrasto', icon: '🌊', color: '#45b7d1' },\r\n        manual: { name: 'Manuale', icon: '🙌', color: '#f7b267' },\r\n        movement: { name: 'Movimento', icon: '🤸', color: '#a8e6cf' },\r\n        mental: { name: 'Mentale', icon: '🧘', color: '#dcc7e8' },\r\n        'self-massage': { name: 'Auto-massaggio', icon: '🌊', color: '#ffd93d' }\r\n    };\r\n\r\n    return (\r\n        <div className=\"recovery-luxury\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"recovery-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-title\">\r\n                    <h1>🛌 RECOVERY CENTER PRO</h1>\r\n                    <p className=\"subtitle\">Centro benessere digitale per il recupero ottimale</p>\r\n                </div>\r\n\r\n                <div className=\"recovery-streak\">\r\n                    <div className=\"streak-number\">{stats.thisWeek}</div>\r\n                    <div className=\"streak-label\">Questa Settimana</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* TIMER SESSIONE ATTIVA */}\r\n            {activeSession && (\r\n                <div className=\"active-session-timer\">\r\n                    <div className=\"timer-container\">\r\n                        <div className=\"timer-protocol\">\r\n                            <span className=\"timer-icon\">{recoveryProtocols[activeSession].icon}</span>\r\n                            <div className=\"timer-info\">\r\n                                <h3>{recoveryProtocols[activeSession].name}</h3>\r\n                                <span className=\"timer-duration\">Durata consigliata: {recoveryProtocols[activeSession].duration}</span>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"timer-display\">\r\n                            <span className=\"timer-time\">{formatTime(currentTimer)}</span>\r\n                        </div>\r\n\r\n                        <div className=\"timer-controls\">\r\n                            <button \r\n                                className=\"timer-btn pause\"\r\n                                onClick={() => setIsTimerRunning(!isTimerRunning)}\r\n                            >\r\n                                {isTimerRunning ? '⏸️' : '▶️'}\r\n                            </button>\r\n                            <button \r\n                                className=\"timer-btn stop\"\r\n                                onClick={endSession}\r\n                            >\r\n                                🛑 Fine Sessione\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"session-progress\">\r\n                        <div className=\"progress-info\">\r\n                            <span>Temperatura: {recoveryProtocols[activeSession].temperature}</span>\r\n                            <span>Calorie bruciate: ~{Math.round((currentTimer / 60) * (recoveryProtocols[activeSession].calories / 60))}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* STATISTICS OVERVIEW */}\r\n            <div className=\"recovery-stats\">\r\n                <div className=\"stat-card primary\">\r\n                    <div className=\"stat-icon\">📊</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.totalSessions}</span>\r\n                        <span className=\"stat-label\">Sessioni Totali</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card success\">\r\n                    <div className=\"stat-icon\">⏱️</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.avgDuration}min</span>\r\n                        <span className=\"stat-label\">Durata Media</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card info\">\r\n                    <div className=\"stat-icon\">🕐</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.totalHours}h</span>\r\n                        <span className=\"stat-label\">Ore Totali</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card warning\">\r\n                    <div className=\"stat-icon\">🔥</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.thisWeek}</span>\r\n                        <span className=\"stat-label\">Questa Settimana</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PROTOCOLLI RECOVERY */}\r\n            <div className=\"protocols-section\">\r\n                <h2>🎯 PROTOCOLLI PROFESSIONALI</h2>\r\n                \r\n                <div className=\"protocols-grid\">\r\n                    {Object.entries(recoveryProtocols).map(([id, protocol]) => (\r\n                        <div key={id} className={`protocol-card ${protocol.difficulty}`}>\r\n                            <div className=\"protocol-header\">\r\n                                <div className=\"protocol-main\">\r\n                                    <span className=\"protocol-icon\">{protocol.icon}</span>\r\n                                    <div className=\"protocol-info\">\r\n                                        <h3>{protocol.name}</h3>\r\n                                        <span className=\"protocol-category\">\r\n                                            {categories[protocol.category]?.name}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"protocol-difficulty\">\r\n                                    <span className={`difficulty-badge ${protocol.difficulty}`}>\r\n                                        {protocol.difficulty}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-description\">\r\n                                <p>{protocol.description}</p>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-details\">\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">🌡️ Temperatura:</span>\r\n                                    <span className=\"detail-value\">{protocol.temperature}</span>\r\n                                </div>\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">⏱️ Durata:</span>\r\n                                    <span className=\"detail-value\">{protocol.duration}</span>\r\n                                </div>\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">🔥 Calorie:</span>\r\n                                    <span className=\"detail-value\">~{protocol.calories}/sessione</span>\r\n                                </div>\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">🛠️ Equipment:</span>\r\n                                    <span className=\"detail-value\">{protocol.equipment}</span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-benefits\">\r\n                                <h4>💎 Benefici:</h4>\r\n                                <div className=\"benefits-tags\">\r\n                                    {protocol.benefits.map((benefit, index) => (\r\n                                        <span key={index} className=\"benefit-tag\">\r\n                                            {benefit}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-instructions\">\r\n                                <h4>📋 Istruzioni:</h4>\r\n                                <ol className=\"instructions-list\">\r\n                                    {protocol.instructions.map((instruction, index) => (\r\n                                        <li key={index}>{instruction}</li>\r\n                                    ))}\r\n                                </ol>\r\n                            </div>\r\n\r\n                            {protocol.contraindications.length > 0 && (\r\n                                <div className=\"protocol-warnings\">\r\n                                    <h4>⚠️ Controindicazioni:</h4>\r\n                                    <ul className=\"warnings-list\">\r\n                                        {protocol.contraindications.map((warning, index) => (\r\n                                            <li key={index}>{warning}</li>\r\n                                        ))}\r\n                                    </ul>\r\n                                </div>\r\n                            )}\r\n\r\n                            <div className=\"protocol-action\">\r\n                                <button\r\n                                    className={`protocol-btn ${activeSession === id ? 'active' : ''}`}\r\n                                    onClick={() => activeSession === id ? endSession() : startSession(id)}\r\n                                    disabled={activeSession && activeSession !== id}\r\n                                >\r\n                                    {activeSession === id ? '🛑 Ferma Sessione' : '▶️ Inizia Sessione'}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* HISTORY SESSIONI */}\r\n            {sessionHistory.length > 0 && (\r\n                <div className=\"recovery-history\">\r\n                    <h2>📈 CRONOLOGIA SESSIONI</h2>\r\n                    <div className=\"history-list\">\r\n                        {sessionHistory.slice(0, 10).map((session) => {\r\n                            const protocol = recoveryProtocols[session.protocol];\r\n                            const sessionDate = new Date(session.date);\r\n                            \r\n                            return (\r\n                                <div key={session.id} className=\"history-item\">\r\n                                    <div className=\"history-protocol\">\r\n                                        <span className=\"history-icon\">{protocol.icon}</span>\r\n                                        <div className=\"history-info\">\r\n                                            <h4>{protocol.name}</h4>\r\n                                            <span className=\"history-date\">\r\n                                                {sessionDate.toLocaleDateString('it-IT')} - {sessionDate.toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' })}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"history-stats\">\r\n                                        <span className=\"history-duration\">{formatTime(session.duration)}</span>\r\n                                        <span className=\"history-calories\">\r\n                                            ~{Math.round((session.duration / 60) * (protocol.calories / 60))} cal\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    \r\n                    {sessionHistory.length > 10 && (\r\n                        <button className=\"show-more-btn\">\r\n                            Mostra altre {sessionHistory.length - 10} sessioni\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            )}\r\n\r\n            {/* RECOVERY TIPS */}\r\n            <div className=\"recovery-tips\">\r\n                <h2>💡 CONSIGLI PROFESSIONALI</h2>\r\n                <div className=\"tips-grid\">\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">🌡️</div>\r\n                        <h4>Contrasto Termico</h4>\r\n                        <p>Alterna calore e freddo per massimizzare la circolazione e accelerare il recupero muscolare.</p>\r\n                    </div>\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">💧</div>\r\n                        <h4>Idratazione</h4>\r\n                        <p>Bevi acqua abbondante durante e dopo ogni sessione per mantenere l'equilibrio idro-salino.</p>\r\n                    </div>\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">⏰</div>\r\n                        <h4>Timing Ottimale</h4>\r\n                        <p>Le sessioni di recovery sono più efficaci entro 2-6 ore dopo l'allenamento intenso.</p>\r\n                    </div>\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">🎯</div>\r\n                        <h4>Consistenza</h4>\r\n                        <p>3-4 sessioni settimanali regolari sono più efficaci di sessioni sporadiche intense.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recovery;","import React from 'react';\r\n\r\nconst Progress = () => {\r\n    const [progressData, setProgressData] = React.useState([]);\r\n    const [newEntry, setNewEntry] = React.useState({\r\n        weight: '',\r\n        bodyFat: '',\r\n        muscleMass: '',\r\n        chest: '',\r\n        arms: '',\r\n        waist: '',\r\n        thighs: '',\r\n        notes: ''\r\n    });\r\n    const [timeStats, setTimeStats] = React.useState({\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        monthlyTime: 0,\r\n        sessionsCompleted: 0\r\n    });\r\n    \r\n    const loadProgressData = () => {\r\n        const saved = localStorage.getItem('progressData');\r\n        if (saved) {\r\n            setProgressData(JSON.parse(saved));\r\n        }\r\n        \r\n        const savedTimeStats = localStorage.getItem('timeStats');\r\n        if (savedTimeStats) {\r\n            setTimeStats(JSON.parse(savedTimeStats));\r\n        }\r\n    };\r\n    \r\n    const saveProgressData = (data) => {\r\n        localStorage.setItem('progressData', JSON.stringify(data));\r\n    };\r\n    \r\n    const addEntry = () => {\r\n        if (!newEntry.weight) return;\r\n        \r\n        const entry = {\r\n            ...newEntry,\r\n            date: new Date().toISOString().split('T')[0],\r\n            id: Date.now()\r\n        };\r\n        \r\n        const updated = [entry, ...progressData];\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n        \r\n        setNewEntry({\r\n            weight: '',\r\n            bodyFat: '',\r\n            muscleMass: '',\r\n            chest: '',\r\n            arms: '',\r\n            waist: '',\r\n            thighs: '',\r\n            notes: ''\r\n        });\r\n    };\r\n    \r\n    const deleteEntry = (id) => {\r\n        const updated = progressData.filter(entry => entry.id !== id);\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadProgressData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"progress-container\">\r\n            <h2>🎯 Progress Tracker Avanzato</h2>\r\n            \r\n            <div className=\"time-stats\">\r\n                <h3>📊 Statistiche Tempo Investito</h3>\r\n                <div className=\"stats-grid\">\r\n                    <div className=\"stat-card\">\r\n                        <h4>Tempo Totale</h4>\r\n                        <p>{formatTime(timeStats.totalWorkoutTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questa Settimana</h4>\r\n                        <p>{formatTime(timeStats.weeklyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questo Mese</h4>\r\n                        <p>{formatTime(timeStats.monthlyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Sessioni Completate</h4>\r\n                        <p>{timeStats.sessionsCompleted}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"add-entry-form\">\r\n                <h3>➕ Aggiungi Nuove Misurazioni</h3>\r\n                <div className=\"form-grid\">\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Peso (kg)\"\r\n                        value={newEntry.weight}\r\n                        onChange={(e) => setNewEntry({...newEntry, weight: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Grassa (%)\"\r\n                        value={newEntry.bodyFat}\r\n                        onChange={(e) => setNewEntry({...newEntry, bodyFat: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Muscolare (kg)\"\r\n                        value={newEntry.muscleMass}\r\n                        onChange={(e) => setNewEntry({...newEntry, muscleMass: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Petto (cm)\"\r\n                        value={newEntry.chest}\r\n                        onChange={(e) => setNewEntry({...newEntry, chest: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Braccia (cm)\"\r\n                        value={newEntry.arms}\r\n                        onChange={(e) => setNewEntry({...newEntry, arms: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Vita (cm)\"\r\n                        value={newEntry.waist}\r\n                        onChange={(e) => setNewEntry({...newEntry, waist: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Cosce (cm)\"\r\n                        value={newEntry.thighs}\r\n                        onChange={(e) => setNewEntry({...newEntry, thighs: e.target.value})}\r\n                    />\r\n                    <textarea\r\n                        placeholder=\"Note (sensazioni, obiettivi, etc.)\"\r\n                        value={newEntry.notes}\r\n                        onChange={(e) => setNewEntry({...newEntry, notes: e.target.value})}\r\n                    />\r\n                </div>\r\n                <button className=\"button\" onClick={addEntry}>Aggiungi Misurazione</button>\r\n            </div>\r\n            \r\n            <div className=\"progress-table\">\r\n                <h3>📈 Storico Progressi</h3>\r\n                {progressData.length === 0 ? (\r\n                    <p>Nessuna misurazione ancora. Inizia ad aggiungere i tuoi progressi!</p>\r\n                ) : (\r\n                    <div className=\"table-responsive\">\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Data</th>\r\n                                    <th>Peso</th>\r\n                                    <th>Grasso</th>\r\n                                    <th>Muscolo</th>\r\n                                    <th>Petto</th>\r\n                                    <th>Braccia</th>\r\n                                    <th>Vita</th>\r\n                                    <th>Cosce</th>\r\n                                    <th>Note</th>\r\n                                    <th>Azioni</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {progressData.map((entry) => (\r\n                                    <tr key={entry.id}>\r\n                                        <td>{entry.date}</td>\r\n                                        <td>{entry.weight} kg</td>\r\n                                        <td>{entry.bodyFat}%</td>\r\n                                        <td>{entry.muscleMass} kg</td>\r\n                                        <td>{entry.chest} cm</td>\r\n                                        <td>{entry.arms} cm</td>\r\n                                        <td>{entry.waist} cm</td>\r\n                                        <td>{entry.thighs} cm</td>\r\n                                        <td className=\"notes-cell\">{entry.notes}</td>\r\n                                        <td>\r\n                                            <button \r\n                                                className=\"delete-btn\"\r\n                                                onClick={() => deleteEntry(entry.id)}\r\n                                            >\r\n                                                🗑️\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Progress;","// Firebase Configuration - GitHub Pages Compatible\r\n// Configurazione inline per GitHub Pages (non supporta variabili .env a runtime)\r\n\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, connectAuthEmulator } from 'firebase/auth';\r\nimport { getFirestore, connectFirestoreEmulator, enableNetwork, disableNetwork } from 'firebase/firestore';\r\nimport { getStorage, connectStorageEmulator } from 'firebase/storage';\r\nimport { getAnalytics, isSupported } from 'firebase/analytics';\r\n\r\n// Configurazione Firebase - DEMO/LOCALE\r\nconst firebaseConfig = {\r\n    apiKey: \"demo-key\",\r\n    authDomain: \"demo-project.firebaseapp.com\",\r\n    projectId: \"demo-project\",\r\n    storageBucket: \"demo-project.appspot.com\",\r\n    messagingSenderId: \"123456789\",\r\n    appId: \"1:123456789:web:demo\",\r\n    measurementId: \"G-DEMO\"\r\n};\r\n\r\n\r\n// Inizializzazione app\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Inizializzazione servizi Firebase\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\nexport const storage = getStorage(app);\r\n\r\n// Inizializzazione Analytics condizionale\r\nlet analytics = null;\r\nisSupported().then(supported => {\r\n    if (supported) {\r\n        analytics = getAnalytics(app);\r\n        console.log('📊 Firebase Analytics inizializzato');\r\n    } else {\r\n        console.log('📊 Firebase Analytics non supportato in questo ambiente');\r\n    }\r\n});\r\n\r\nexport { analytics };\r\n\r\n// Configurazione ambiente sviluppo\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\nconst useEmulators = process.env.REACT_APP_USE_FIREBASE_EMULATORS === 'true';\r\n\r\nif (isDevelopment && useEmulators) {\r\n    console.log('🔧 Connessione agli emulatori Firebase...');\r\n    \r\n    // Connessione agli emulatori solo se non già connessi\r\n    if (!auth._delegate._config?.emulator) {\r\n        connectAuthEmulator(auth, 'http://localhost:9099');\r\n    }\r\n    \r\n    if (!db._delegate._databaseId?.database.includes('localhost')) {\r\n        connectFirestoreEmulator(db, 'localhost', 8080);\r\n    }\r\n    \r\n    if (!storage._delegate._host.includes('localhost')) {\r\n        connectStorageEmulator(storage, 'localhost', 9199);\r\n    }\r\n    \r\n    console.log('✅ Emulatori Firebase connessi');\r\n}\r\n\r\n// Utility per gestione connessione\r\nexport const connectionManager = {\r\n    enable: () => enableNetwork(db),\r\n    disable: () => disableNetwork(db),\r\n    \r\n    // Controlla stato connessione\r\n    checkConnection: async () => {\r\n        try {\r\n            await enableNetwork(db);\r\n            return true;\r\n        } catch (error) {\r\n            console.error('❌ Errore connessione Firebase:', error);\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\n// Configurazioni ottimizzate per performance\r\nexport const firestoreSettings = {\r\n    cacheSizeBytes: 50 * 1024 * 1024, // 50MB cache\r\n    experimentalForceLongPolling: false, // Usa WebSocket quando possibile\r\n    merge: true, // Abilita merge automatico\r\n    ignoreUndefinedProperties: true // Ignora proprietà undefined\r\n};\r\n\r\n// Helper per logging strutturato\r\nexport const logger = {\r\n    info: (message, data = null) => {\r\n        console.log(`ℹ️ [Firebase] ${message}`, data || '');\r\n    },\r\n    \r\n    error: (message, error = null) => {\r\n        console.error(`❌ [Firebase] ${message}`, error || '');\r\n    },\r\n    \r\n    warn: (message, data = null) => {\r\n        console.warn(`⚠️ [Firebase] ${message}`, data || '');\r\n    },\r\n    \r\n    success: (message, data = null) => {\r\n        console.log(`✅ [Firebase] ${message}`, data || '');\r\n    }\r\n};\r\n\r\n// Export dell'app per usi avanzati\r\nexport default app;\r\n\r\nlogger.success('Firebase configurato con successo');","// Firebase Authentication Service - Enterprise Grade\r\n// Gestione completa autenticazione con error handling avanzato\r\n\r\nimport { \r\n    signInWithEmailAndPassword,\r\n    createUserWithEmailAndPassword,\r\n    signInWithPopup,\r\n    GoogleAuthProvider,\r\n    signOut,\r\n    onAuthStateChanged,\r\n    sendPasswordResetEmail,\r\n    updateProfile,\r\n    updatePassword,\r\n    deleteUser,\r\n    reauthenticateWithCredential,\r\n    EmailAuthProvider\r\n} from 'firebase/auth';\r\n\r\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { auth, db, logger } from './config';\r\n\r\n// Provider Google configurato\r\nconst googleProvider = new GoogleAuthProvider();\r\ngoogleProvider.addScope('profile');\r\ngoogleProvider.addScope('email');\r\n\r\n// Classe per gestire l'autenticazione\r\nclass AuthService {\r\n    constructor() {\r\n        this.currentUser = null;\r\n        this.authStateListeners = [];\r\n        this.initializeAuthListener();\r\n    }\r\n\r\n    // Inizializza listener per cambio stato auth\r\n    initializeAuthListener() {\r\n        onAuthStateChanged(auth, (user) => {\r\n            this.currentUser = user;\r\n            this.notifyAuthStateListeners(user);\r\n            \r\n            if (user) {\r\n                logger.success('Utente autenticato', { \r\n                    uid: user.uid, \r\n                    email: user.email,\r\n                    displayName: user.displayName \r\n                });\r\n                this.updateUserLastSeen(user);\r\n            } else {\r\n                logger.info('Utente disconnesso');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Registra listener per cambio stato\r\n    onAuthStateChange(callback) {\r\n        this.authStateListeners.push(callback);\r\n        \r\n        // Rimuovi listener\r\n        return () => {\r\n            this.authStateListeners = this.authStateListeners.filter(cb => cb !== callback);\r\n        };\r\n    }\r\n\r\n    // Notifica tutti i listener del cambio stato\r\n    notifyAuthStateListeners(user) {\r\n        this.authStateListeners.forEach(callback => {\r\n            try {\r\n                callback(user);\r\n            } catch (error) {\r\n                logger.error('Errore nel listener auth state', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Login con email e password\r\n    async signInWithEmail(email, password) {\r\n        try {\r\n            logger.info('Tentativo login con email...');\r\n            \r\n            const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n            \r\n            await this.updateUserLastSeen(user);\r\n            logger.success('Login completato', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore login email', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Registrazione con email e password\r\n    async signUpWithEmail(email, password, displayName = null) {\r\n        try {\r\n            logger.info('Tentativo registrazione con email...');\r\n            \r\n            const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n            \r\n            // Aggiorna profilo se fornito displayName\r\n            if (displayName) {\r\n                await updateProfile(user, { displayName });\r\n            }\r\n            \r\n            // Crea documento utente in Firestore\r\n            await this.createUserDocument(user, { displayName });\r\n            \r\n            logger.success('Registrazione completata', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore registrazione email', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Login con Google\r\n    async signInWithGoogle() {\r\n        try {\r\n            logger.info('Tentativo login con Google...');\r\n            \r\n            const userCredential = await signInWithPopup(auth, googleProvider);\r\n            const user = userCredential.user;\r\n            \r\n            // Crea o aggiorna documento utente\r\n            await this.createUserDocument(user, {\r\n                displayName: user.displayName,\r\n                photoURL: user.photoURL,\r\n                provider: 'google'\r\n            });\r\n            \r\n            logger.success('Login Google completato', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore login Google', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Logout\r\n    async signOutUser() {\r\n        try {\r\n            logger.info('Logout utente...');\r\n            await signOut(auth);\r\n            logger.success('Logout completato');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore logout', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Reset password\r\n    async resetPassword(email) {\r\n        try {\r\n            logger.info('Invio reset password...');\r\n            await sendPasswordResetEmail(auth, email);\r\n            logger.success('Email reset password inviata');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore reset password', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Aggiorna password (richiede riautenticazione recente)\r\n    async updateUserPassword(currentPassword, newPassword) {\r\n        try {\r\n            if (!this.currentUser) {\r\n                throw new Error('Nessun utente autenticato');\r\n            }\r\n\r\n            logger.info('Aggiornamento password...');\r\n            \r\n            // Riautentica utente\r\n            const credential = EmailAuthProvider.credential(\r\n                this.currentUser.email,\r\n                currentPassword\r\n            );\r\n            await reauthenticateWithCredential(this.currentUser, credential);\r\n            \r\n            // Aggiorna password\r\n            await updatePassword(this.currentUser, newPassword);\r\n            \r\n            logger.success('Password aggiornata');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore aggiornamento password', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Crea documento utente in Firestore\r\n    async createUserDocument(user, additionalData = {}) {\r\n        if (!user) return;\r\n        \r\n        try {\r\n            const userRef = doc(db, 'users', user.uid);\r\n            const userDoc = await getDoc(userRef);\r\n            \r\n            if (!userDoc.exists()) {\r\n                const userData = {\r\n                    uid: user.uid,\r\n                    email: user.email,\r\n                    displayName: user.displayName || additionalData.displayName || 'Utente',\r\n                    photoURL: user.photoURL || additionalData.photoURL || null,\r\n                    provider: additionalData.provider || 'email',\r\n                    createdAt: serverTimestamp(),\r\n                    lastSeen: serverTimestamp(),\r\n                    settings: {\r\n                        units: 'metric', // metric/imperial\r\n                        language: 'it',\r\n                        notifications: true,\r\n                        darkMode: false\r\n                    },\r\n                    profile: {\r\n                        age: null,\r\n                        height: null,\r\n                        activityLevel: 'moderate',\r\n                        goals: [],\r\n                        experience: 'beginner'\r\n                    },\r\n                    ...additionalData\r\n                };\r\n                \r\n                await setDoc(userRef, userData);\r\n                logger.success('Documento utente creato');\r\n            } else {\r\n                // Aggiorna solo lastSeen se utente esiste\r\n                await setDoc(userRef, { lastSeen: serverTimestamp() }, { merge: true });\r\n                logger.info('LastSeen aggiornato');\r\n            }\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore creazione documento utente', error);\r\n        }\r\n    }\r\n\r\n    // Aggiorna ultimo accesso\r\n    async updateUserLastSeen(user) {\r\n        if (!user) return;\r\n        \r\n        try {\r\n            const userRef = doc(db, 'users', user.uid);\r\n            await setDoc(userRef, { \r\n                lastSeen: serverTimestamp(),\r\n                isOnline: true \r\n            }, { merge: true });\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore aggiornamento lastSeen', error);\r\n        }\r\n    }\r\n\r\n    // Gestione errori Firebase Auth\r\n    handleAuthError(error) {\r\n        const errorMessages = {\r\n            'auth/user-not-found': 'Utente non trovato. Verifica l\\'email inserita.',\r\n            'auth/wrong-password': 'Password non corretta. Riprova.',\r\n            'auth/email-already-in-use': 'Email già registrata. Prova ad effettuare il login.',\r\n            'auth/weak-password': 'Password troppo debole. Usa almeno 6 caratteri.',\r\n            'auth/invalid-email': 'Email non valida. Verifica il formato.',\r\n            'auth/user-disabled': 'Account disabilitato. Contatta l\\'assistenza.',\r\n            'auth/too-many-requests': 'Troppi tentativi. Riprova più tardi.',\r\n            'auth/network-request-failed': 'Errore di connessione. Verifica la rete.',\r\n            'auth/popup-closed-by-user': 'Login annullato dall\\'utente.',\r\n            'auth/cancelled-popup-request': 'Popup già aperto. Completa il login.',\r\n            'auth/popup-blocked': 'Popup bloccato dal browser. Abilita i popup.',\r\n            'auth/requires-recent-login': 'Operazione sensibile. Effettua nuovamente il login.'\r\n        };\r\n\r\n        return {\r\n            code: error.code,\r\n            message: errorMessages[error.code] || error.message || 'Errore sconosciuto',\r\n            originalError: error\r\n        };\r\n    }\r\n\r\n    // Utility per controllo stato\r\n    isAuthenticated() {\r\n        return !!this.currentUser;\r\n    }\r\n\r\n    getCurrentUser() {\r\n        return this.currentUser;\r\n    }\r\n\r\n    // Elimina account (operazione irreversibile)\r\n    async deleteAccount(password = null) {\r\n        try {\r\n            if (!this.currentUser) {\r\n                throw new Error('Nessun utente autenticato');\r\n            }\r\n\r\n            logger.warn('Tentativo eliminazione account...');\r\n            \r\n            // Riautentica se password fornita\r\n            if (password) {\r\n                const credential = EmailAuthProvider.credential(\r\n                    this.currentUser.email,\r\n                    password\r\n                );\r\n                await reauthenticateWithCredential(this.currentUser, credential);\r\n            }\r\n            \r\n            const uid = this.currentUser.uid;\r\n            \r\n            // Elimina account\r\n            await deleteUser(this.currentUser);\r\n            \r\n            logger.warn('Account eliminato', { uid });\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore eliminazione account', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n}\r\n\r\n// Instanza singleton del servizio\r\nconst authService = new AuthService();\r\n\r\nexport default authService;\r\n\r\n// Export delle funzioni principali per retrocompatibilità\r\nexport {\r\n    authService,\r\n    auth,\r\n    GoogleAuthProvider\r\n};","// Firestore Database Service - Enterprise Architecture\r\n// Gestione dati fitness con pattern Repository e caching intelligente\r\n\r\nimport {\r\n    collection,\r\n    doc,\r\n    getDocs,\r\n    getDoc,\r\n    setDoc,\r\n    addDoc,\r\n    updateDoc,\r\n    deleteDoc,\r\n    query,\r\n    where,\r\n    orderBy,\r\n    limit,\r\n    startAfter,\r\n    onSnapshot,\r\n    serverTimestamp,\r\n    increment,\r\n    arrayUnion,\r\n    arrayRemove,\r\n    writeBatch,\r\n    runTransaction\r\n} from 'firebase/firestore';\r\n\r\nimport { db, logger } from './config';\r\nimport authService from './auth';\r\n\r\n// Base Repository Class per operazioni CRUD standardizzate\r\nclass BaseRepository {\r\n    constructor(collectionName) {\r\n        this.collectionName = collectionName;\r\n        this.collectionRef = collection(db, collectionName);\r\n        this.cache = new Map(); // Cache locale per performance\r\n        this.listeners = new Map(); // Gestione listener real-time\r\n    }\r\n\r\n    // Ottieni documento per ID\r\n    async getById(id, useCache = true) {\r\n        try {\r\n            // Controlla cache prima\r\n            if (useCache && this.cache.has(id)) {\r\n                const cached = this.cache.get(id);\r\n                // Cache valida per 5 minuti\r\n                if (Date.now() - cached.timestamp < 5 * 60 * 1000) {\r\n                    logger.info(`Cache hit per ${this.collectionName}/${id}`);\r\n                    return { success: true, data: cached.data, fromCache: true };\r\n                }\r\n            }\r\n\r\n            const docRef = doc(db, this.collectionName, id);\r\n            const docSnap = await getDoc(docRef);\r\n            \r\n            if (docSnap.exists()) {\r\n                const data = { id: docSnap.id, ...docSnap.data() };\r\n                \r\n                // Aggiorna cache\r\n                if (useCache) {\r\n                    this.cache.set(id, { data, timestamp: Date.now() });\r\n                }\r\n                \r\n                return { success: true, data, fromCache: false };\r\n            } else {\r\n                return { success: false, error: 'Documento non trovato', data: null };\r\n            }\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore getById ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, data: null };\r\n        }\r\n    }\r\n\r\n    // Crea nuovo documento\r\n    async create(data, customId = null) {\r\n        try {\r\n            const userId = authService.getCurrentUser()?.uid;\r\n            if (!userId) {\r\n                throw new Error('Utente non autenticato');\r\n            }\r\n\r\n            const docData = {\r\n                ...data,\r\n                userId,\r\n                createdAt: serverTimestamp(),\r\n                updatedAt: serverTimestamp()\r\n            };\r\n\r\n            let docRef;\r\n            if (customId) {\r\n                docRef = doc(db, this.collectionName, customId);\r\n                await setDoc(docRef, docData);\r\n            } else {\r\n                docRef = await addDoc(this.collectionRef, docData);\r\n            }\r\n\r\n            const newId = customId || docRef.id;\r\n            \r\n            // Invalida cache\r\n            this.invalidateCache();\r\n            \r\n            logger.success(`Documento creato in ${this.collectionName}`, { id: newId });\r\n            return { success: true, id: newId, data: { id: newId, ...docData } };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore create ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, id: null };\r\n        }\r\n    }\r\n\r\n    // Aggiorna documento\r\n    async update(id, data, merge = true) {\r\n        try {\r\n            const docRef = doc(db, this.collectionName, id);\r\n            const updateData = {\r\n                ...data,\r\n                updatedAt: serverTimestamp()\r\n            };\r\n\r\n            if (merge) {\r\n                await updateDoc(docRef, updateData);\r\n            } else {\r\n                await setDoc(docRef, updateData);\r\n            }\r\n\r\n            // Invalida cache per questo documento\r\n            this.cache.delete(id);\r\n            \r\n            logger.success(`Documento aggiornato in ${this.collectionName}`, { id });\r\n            return { success: true, id };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore update ${this.collectionName}`, error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Elimina documento\r\n    async delete(id) {\r\n        try {\r\n            const docRef = doc(db, this.collectionName, id);\r\n            await deleteDoc(docRef);\r\n            \r\n            // Rimuovi da cache\r\n            this.cache.delete(id);\r\n            \r\n            logger.success(`Documento eliminato da ${this.collectionName}`, { id });\r\n            return { success: true };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore delete ${this.collectionName}`, error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Query personalizzata\r\n    async getWithQuery(queryConstraints = [], useCache = false) {\r\n        try {\r\n            const q = query(this.collectionRef, ...queryConstraints);\r\n            const querySnapshot = await getDocs(q);\r\n            \r\n            const docs = [];\r\n            querySnapshot.forEach((doc) => {\r\n                docs.push({ id: doc.id, ...doc.data() });\r\n            });\r\n            \r\n            return { success: true, data: docs, count: docs.length };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore query ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, data: [], count: 0 };\r\n        }\r\n    }\r\n\r\n    // Listener real-time\r\n    subscribeToChanges(queryConstraints = [], callback = () => {}) {\r\n        try {\r\n            const q = query(this.collectionRef, ...queryConstraints);\r\n            const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n                const docs = [];\r\n                querySnapshot.forEach((doc) => {\r\n                    docs.push({ id: doc.id, ...doc.data() });\r\n                });\r\n                callback(docs);\r\n            });\r\n\r\n            return unsubscribe;\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore subscription ${this.collectionName}`, error);\r\n            return () => {};\r\n        }\r\n    }\r\n\r\n    // Invalidazione cache\r\n    invalidateCache() {\r\n        this.cache.clear();\r\n        logger.info(`Cache invalidata per ${this.collectionName}`);\r\n    }\r\n}\r\n\r\n// Repository specializzato per Progress Data\r\nclass ProgressRepository extends BaseRepository {\r\n    constructor() {\r\n        super('progress');\r\n    }\r\n\r\n    // Ottieni progressi utente corrente\r\n    async getUserProgress(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Aggiungi misurazione\r\n    async addMeasurement(measurementData) {\r\n        const data = {\r\n            ...measurementData,\r\n            date: measurementData.date || new Date().toISOString().split('T')[0],\r\n            type: 'measurement'\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Ottieni statistiche periodo\r\n    async getPeriodStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserProgress(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (result.success && result.data.length > 0) {\r\n            const data = result.data;\r\n            const latest = data[0];\r\n            const oldest = data[data.length - 1];\r\n\r\n            return {\r\n                success: true,\r\n                stats: {\r\n                    totalEntries: data.length,\r\n                    weightChange: latest.weight - oldest.weight,\r\n                    muscleMassChange: latest.muscleMass - oldest.muscleMass,\r\n                    bodyFatChange: latest.bodyFat - oldest.bodyFat,\r\n                    averageWeight: data.reduce((sum, entry) => sum + (entry.weight || 0), 0) / data.length,\r\n                    period: { startDate, endDate, days }\r\n                }\r\n            };\r\n        }\r\n\r\n        return { success: false, error: 'Dati insufficienti per calcolare statistiche' };\r\n    }\r\n}\r\n\r\n// Repository per Workout Sessions\r\nclass WorkoutRepository extends BaseRepository {\r\n    constructor() {\r\n        super('workouts');\r\n    }\r\n\r\n    // Inizio sessione workout\r\n    async startSession(workoutData) {\r\n        const sessionData = {\r\n            ...workoutData,\r\n            status: 'in_progress',\r\n            startTime: serverTimestamp(),\r\n            exercises: workoutData.exercises || [],\r\n            totalDuration: 0\r\n        };\r\n        \r\n        return this.create(sessionData);\r\n    }\r\n\r\n    // Completa sessione\r\n    async completeSession(sessionId, completionData) {\r\n        const updateData = {\r\n            ...completionData,\r\n            status: 'completed',\r\n            endTime: serverTimestamp(),\r\n            completedAt: serverTimestamp()\r\n        };\r\n        \r\n        return this.update(sessionId, updateData);\r\n    }\r\n\r\n    // Ottieni sessioni utente\r\n    async getUserSessions(limit = 50) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            orderBy('createdAt', 'desc'),\r\n            limit(limit)\r\n        ]);\r\n    }\r\n\r\n    // Statistiche workout\r\n    async getWorkoutStats(days = 7) {\r\n        const sessions = await this.getUserSessions(100);\r\n        \r\n        if (!sessions.success) return sessions;\r\n\r\n        const now = new Date();\r\n        const weekAgo = new Date(now.getTime() - (days * 24 * 60 * 60 * 1000));\r\n        \r\n        const recentSessions = sessions.data.filter(session => {\r\n            const sessionDate = session.createdAt?.toDate?.() || new Date(session.createdAt);\r\n            return sessionDate >= weekAgo && session.status === 'completed';\r\n        });\r\n\r\n        const totalSessions = recentSessions.length;\r\n        const totalDuration = recentSessions.reduce((sum, session) => sum + (session.totalDuration || 0), 0);\r\n        const averageDuration = totalSessions > 0 ? totalDuration / totalSessions : 0;\r\n        \r\n        const exerciseStats = {};\r\n        recentSessions.forEach(session => {\r\n            session.exercises?.forEach(exercise => {\r\n                if (!exerciseStats[exercise.name]) {\r\n                    exerciseStats[exercise.name] = { count: 0, totalVolume: 0 };\r\n                }\r\n                exerciseStats[exercise.name].count++;\r\n                exerciseStats[exercise.name].totalVolume += (exercise.sets * exercise.reps * exercise.weight) || 0;\r\n            });\r\n        });\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalSessions,\r\n                totalDuration,\r\n                averageDuration,\r\n                exerciseStats,\r\n                period: { days, startDate: weekAgo, endDate: now }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Repository per Exercise Tracking\r\nclass ExerciseRepository extends BaseRepository {\r\n    constructor() {\r\n        super('exercises');\r\n    }\r\n\r\n    // Aggiungi esercizio completato\r\n    async logExercise(exerciseData) {\r\n        const data = {\r\n            ...exerciseData,\r\n            date: exerciseData.date || new Date().toISOString().split('T')[0],\r\n            volume: (exerciseData.sets * exerciseData.reps * exerciseData.weight) || 0,\r\n            oneRepMax: this.calculateOneRepMax(exerciseData.weight, exerciseData.reps)\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Calcola 1RM stimato (formula Epley)\r\n    calculateOneRepMax(weight, reps) {\r\n        if (!weight || !reps || reps <= 0) return 0;\r\n        if (reps === 1) return weight;\r\n        return Math.round(weight * (1 + reps / 30));\r\n    }\r\n\r\n    // Ottieni PR per esercizio\r\n    async getPersonalRecords(exerciseName = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('weight', 'desc')\r\n        ];\r\n\r\n        if (exerciseName) {\r\n            constraints.unshift(where('exerciseName', '==', exerciseName));\r\n        }\r\n\r\n        const result = await this.getWithQuery(constraints);\r\n        \r\n        if (result.success) {\r\n            // Raggruppa per esercizio e prendi il massimo\r\n            const prs = {};\r\n            result.data.forEach(exercise => {\r\n                const name = exercise.exerciseName;\r\n                if (!prs[name] || exercise.weight > prs[name].weight) {\r\n                    prs[name] = exercise;\r\n                }\r\n            });\r\n            \r\n            return { success: true, data: Object.values(prs) };\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n\r\n// Repository per User Settings\r\nclass UserRepository extends BaseRepository {\r\n    constructor() {\r\n        super('users');\r\n    }\r\n\r\n    // Ottieni profilo utente corrente\r\n    async getCurrentUserProfile() {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.getById(userId);\r\n    }\r\n\r\n    // Aggiorna impostazioni utente\r\n    async updateSettings(settings) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.update(userId, { settings }, true);\r\n    }\r\n\r\n    // Aggiorna profilo utente\r\n    async updateProfile(profileData) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.update(userId, { profile: profileData }, true);\r\n    }\r\n}\r\n\r\n// Repository per Nutrition Tracking\r\nclass NutritionRepository extends BaseRepository {\r\n    constructor() {\r\n        super('nutrition');\r\n    }\r\n\r\n    // Registra pasto completato/saltato\r\n    async logMeal(mealData) {\r\n        const data = {\r\n            ...mealData,\r\n            date: mealData.date || new Date().toISOString().split('T')[0],\r\n            completedAt: mealData.status === 'completed' ? new Date() : null\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Aggiorna stato pasto\r\n    async updateMealStatus(mealId, status, notes = null) {\r\n        const updateData = {\r\n            status,\r\n            notes,\r\n            completedAt: status === 'completed' ? new Date() : null\r\n        };\r\n        \r\n        return this.update(mealId, updateData);\r\n    }\r\n\r\n    // Ottieni pasti utente per data/range\r\n    async getUserMeals(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Ottieni pasti per giorno specifico\r\n    async getDayMeals(date) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            where('date', '==', date),\r\n            orderBy('mealType', 'asc')\r\n        ]);\r\n    }\r\n\r\n    // Statistiche nutrizionali periodo\r\n    async getNutritionStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserMeals(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (!result.success) return result;\r\n\r\n        const meals = result.data;\r\n        const completedMeals = meals.filter(m => m.status === 'completed');\r\n        const totalMeals = meals.length;\r\n        const adherenceRate = totalMeals > 0 ? (completedMeals.length / totalMeals) * 100 : 0;\r\n\r\n        // Calcola proteine totali (se tracked)\r\n        const totalProteins = completedMeals.reduce((sum, meal) => sum + (meal.proteins || 0), 0);\r\n        const avgProteinsPerDay = days > 0 ? totalProteins / days : 0;\r\n\r\n        // Calcola streak\r\n        const streak = this.calculateNutritionStreak(meals);\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalMeals,\r\n                completedMeals: completedMeals.length,\r\n                adherenceRate: Math.round(adherenceRate),\r\n                totalProteins,\r\n                avgProteinsPerDay: Math.round(avgProteinsPerDay),\r\n                currentStreak: streak,\r\n                period: { startDate, endDate, days }\r\n            }\r\n        };\r\n    }\r\n\r\n    // Calcola streak nutrizionale\r\n    calculateNutritionStreak(meals) {\r\n        if (!meals.length) return 0;\r\n\r\n        // Raggruppa pasti per giorno\r\n        const mealsByDay = {};\r\n        meals.forEach(meal => {\r\n            if (!mealsByDay[meal.date]) {\r\n                mealsByDay[meal.date] = [];\r\n            }\r\n            mealsByDay[meal.date].push(meal);\r\n        });\r\n\r\n        // Calcola streak giorni consecutivi con adherence > 66%\r\n        let streak = 0;\r\n        const sortedDates = Object.keys(mealsByDay).sort().reverse();\r\n\r\n        for (const date of sortedDates) {\r\n            const dayMeals = mealsByDay[date];\r\n            const completedMeals = dayMeals.filter(m => m.status === 'completed');\r\n            const adherence = completedMeals.length / dayMeals.length;\r\n\r\n            if (adherence >= 0.66) { // Almeno 2/3 dei pasti completati\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return streak;\r\n    }\r\n}\r\n\r\n// Repository per Recovery Tracking\r\nclass RecoveryRepository extends BaseRepository {\r\n    constructor() {\r\n        super('recovery');\r\n    }\r\n\r\n    // Registra sessione recovery\r\n    async logRecoverySession(recoveryData) {\r\n        const data = {\r\n            ...recoveryData,\r\n            date: recoveryData.date || new Date().toISOString().split('T')[0],\r\n            completedAt: new Date()\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Ottieni sessioni recovery utente\r\n    async getUserRecoverySessions(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Ottieni sessioni per giorno\r\n    async getDayRecoverySessions(date) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            where('date', '==', date),\r\n            orderBy('createdAt', 'desc')\r\n        ]);\r\n    }\r\n\r\n    // Statistiche recovery\r\n    async getRecoveryStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserRecoverySessions(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (!result.success) return result;\r\n\r\n        const sessions = result.data;\r\n        const totalSessions = sessions.length;\r\n        const totalDuration = sessions.reduce((sum, s) => sum + (s.duration || 0), 0);\r\n        const avgDuration = totalSessions > 0 ? totalDuration / totalSessions : 0;\r\n\r\n        // Breakdown per tipo attività\r\n        const activityBreakdown = {};\r\n        sessions.forEach(session => {\r\n            const type = session.activityType;\r\n            if (!activityBreakdown[type]) {\r\n                activityBreakdown[type] = { count: 0, totalDuration: 0 };\r\n            }\r\n            activityBreakdown[type].count++;\r\n            activityBreakdown[type].totalDuration += session.duration || 0;\r\n        });\r\n\r\n        // Calcola frequenza settimanale\r\n        const weeksInPeriod = Math.ceil(days / 7);\r\n        const weeklyFrequency = totalSessions / weeksInPeriod;\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalSessions,\r\n                totalDuration,\r\n                avgDuration: Math.round(avgDuration),\r\n                weeklyFrequency: Math.round(weeklyFrequency * 10) / 10,\r\n                activityBreakdown,\r\n                period: { startDate, endDate, days }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Istanze singleton dei repository\r\nexport const progressRepo = new ProgressRepository();\r\nexport const workoutRepo = new WorkoutRepository();\r\nexport const exerciseRepo = new ExerciseRepository();\r\nexport const userRepo = new UserRepository();\r\nexport const nutritionRepo = new NutritionRepository();\r\nexport const recoveryRepo = new RecoveryRepository();\r\n\r\n// Utility per operazioni batch\r\nexport const batchOperations = {\r\n    // Esegui multiple operazioni in una transazione\r\n    async executeTransaction(operations) {\r\n        try {\r\n            const result = await runTransaction(db, async (transaction) => {\r\n                const results = [];\r\n                \r\n                for (const operation of operations) {\r\n                    const { type, ref, data } = operation;\r\n                    \r\n                    switch (type) {\r\n                        case 'set':\r\n                            transaction.set(ref, data);\r\n                            break;\r\n                        case 'update':\r\n                            transaction.update(ref, data);\r\n                            break;\r\n                        case 'delete':\r\n                            transaction.delete(ref);\r\n                            break;\r\n                        default:\r\n                            throw new Error(`Operazione non supportata: ${type}`);\r\n                    }\r\n                    \r\n                    results.push({ success: true, operation: type });\r\n                }\r\n                \r\n                return results;\r\n            });\r\n            \r\n            logger.success('Transazione completata', { operations: result.length });\r\n            return { success: true, results: result };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore transazione batch', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    // Operazioni batch (fino a 500 operazioni)\r\n    async executeBatch(operations) {\r\n        try {\r\n            const batch = writeBatch(db);\r\n            \r\n            operations.forEach(operation => {\r\n                const { type, ref, data } = operation;\r\n                \r\n                switch (type) {\r\n                    case 'set':\r\n                        batch.set(ref, data);\r\n                        break;\r\n                    case 'update':\r\n                        batch.update(ref, data);\r\n                        break;\r\n                    case 'delete':\r\n                        batch.delete(ref);\r\n                        break;\r\n                    default:\r\n                        throw new Error(`Operazione non supportata: ${type}`);\r\n                }\r\n            });\r\n            \r\n            await batch.commit();\r\n            \r\n            logger.success('Batch completato', { operations: operations.length });\r\n            return { success: true, count: operations.length };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore batch operations', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n};\r\n\r\n// Export per retrocompatibilità\r\nexport default {\r\n    progressRepo,\r\n    workoutRepo,\r\n    exerciseRepo,\r\n    userRepo,\r\n    nutritionRepo,\r\n    recoveryRepo,\r\n    batchOperations\r\n};","// Data Migration Service - localStorage to Firestore\r\n// Sistema di migrazione intelligente con backup e rollback\r\n\r\nimport { progressRepo, workoutRepo, exerciseRepo, userRepo, batchOperations } from './firestore';\r\nimport authService from './auth';\r\nimport { logger } from './config';\r\n\r\nclass MigrationService {\r\n    constructor() {\r\n        this.migrationKey = 'firebase_migration_status';\r\n        this.backupKey = 'firebase_migration_backup';\r\n    }\r\n\r\n    // Controlla se la migrazione è già stata eseguita\r\n    isMigrationCompleted() {\r\n        try {\r\n            const status = localStorage.getItem(this.migrationKey);\r\n            return status === 'completed';\r\n        } catch (error) {\r\n            logger.error('Errore verifica migrazione', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Segna migrazione come completata\r\n    markMigrationCompleted() {\r\n        try {\r\n            const migrationData = {\r\n                status: 'completed',\r\n                timestamp: new Date().toISOString(),\r\n                version: '1.0.0'\r\n            };\r\n            localStorage.setItem(this.migrationKey, 'completed');\r\n            localStorage.setItem(`${this.migrationKey}_details`, JSON.stringify(migrationData));\r\n            logger.success('Migrazione marcata come completata');\r\n        } catch (error) {\r\n            logger.error('Errore marcamento migrazione', error);\r\n        }\r\n    }\r\n\r\n    // Crea backup completo dei dati localStorage\r\n    createBackup() {\r\n        try {\r\n            const backupData = {\r\n                timestamp: new Date().toISOString(),\r\n                data: {\r\n                    progressData: this.safeGetLocalStorage('progressData'),\r\n                    workoutSessions: this.safeGetLocalStorage('workoutSessions'),\r\n                    exerciseData: this.safeGetLocalStorage('exerciseData'),\r\n                    timeStats: this.safeGetLocalStorage('timeStats'),\r\n                    streakData: this.safeGetLocalStorage('streakData'),\r\n                    personalRecords: this.safeGetLocalStorage('personalRecords'),\r\n                    goals12Week: this.safeGetLocalStorage('goals12Week'),\r\n                    userSettings: this.safeGetLocalStorage('userSettings')\r\n                }\r\n            };\r\n\r\n            // Comprimi backup se troppo grande\r\n            const backupString = JSON.stringify(backupData);\r\n            if (backupString.length > 2 * 1024 * 1024) { // 2MB\r\n                logger.warn('Backup molto grande, compressione necessaria');\r\n                // In un'implementazione reale, potresti voler comprimere i dati\r\n            }\r\n\r\n            localStorage.setItem(this.backupKey, backupString);\r\n            logger.success('Backup creato', { size: `${Math.round(backupString.length / 1024)}KB` });\r\n            \r\n            return { success: true, backup: backupData };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore creazione backup', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Sicuro get da localStorage con fallback\r\n    safeGetLocalStorage(key) {\r\n        try {\r\n            const data = localStorage.getItem(key);\r\n            return data ? JSON.parse(data) : null;\r\n        } catch (error) {\r\n            logger.warn(`Errore parsing ${key}`, error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Migrazione completa con controlli e validazioni\r\n    async migrateAllData() {\r\n        if (!authService.isAuthenticated()) {\r\n            return { success: false, error: 'Utente non autenticato' };\r\n        }\r\n\r\n        if (this.isMigrationCompleted()) {\r\n            logger.info('Migrazione già completata');\r\n            return { success: true, message: 'Migrazione già completata' };\r\n        }\r\n\r\n        const migrationReport = {\r\n            startTime: new Date().toISOString(),\r\n            steps: [],\r\n            errors: [],\r\n            totalItems: 0,\r\n            migratedItems: 0\r\n        };\r\n\r\n        try {\r\n            logger.info('🚀 Inizio migrazione dati localStorage → Firestore');\r\n\r\n            // STEP 1: Crea backup\r\n            migrationReport.steps.push('Creazione backup...');\r\n            const backupResult = this.createBackup();\r\n            if (!backupResult.success) {\r\n                throw new Error(`Backup fallito: ${backupResult.error}`);\r\n            }\r\n\r\n            // STEP 2: Migra dati progress\r\n            migrationReport.steps.push('Migrazione dati progress...');\r\n            const progressResult = await this.migrateProgressData();\r\n            migrationReport.totalItems += progressResult.totalItems;\r\n            migrationReport.migratedItems += progressResult.migratedItems;\r\n            if (progressResult.errors.length > 0) {\r\n                migrationReport.errors.push(...progressResult.errors);\r\n            }\r\n\r\n            // STEP 3: Migra sessioni workout\r\n            migrationReport.steps.push('Migrazione sessioni workout...');\r\n            const workoutResult = await this.migrateWorkoutSessions();\r\n            migrationReport.totalItems += workoutResult.totalItems;\r\n            migrationReport.migratedItems += workoutResult.migratedItems;\r\n            if (workoutResult.errors.length > 0) {\r\n                migrationReport.errors.push(...workoutResult.errors);\r\n            }\r\n\r\n            // STEP 4: Migra dati esercizi\r\n            migrationReport.steps.push('Migrazione dati esercizi...');\r\n            const exerciseResult = await this.migrateExerciseData();\r\n            migrationReport.totalItems += exerciseResult.totalItems;\r\n            migrationReport.migratedItems += exerciseResult.migratedItems;\r\n            if (exerciseResult.errors.length > 0) {\r\n                migrationReport.errors.push(...exerciseResult.errors);\r\n            }\r\n\r\n            // STEP 5: Migra impostazioni utente\r\n            migrationReport.steps.push('Migrazione impostazioni utente...');\r\n            const userResult = await this.migrateUserSettings();\r\n            if (!userResult.success) {\r\n                migrationReport.errors.push(`Errore migrazione utente: ${userResult.error}`);\r\n            }\r\n\r\n            // STEP 6: Verifica integrità\r\n            migrationReport.steps.push('Verifica integrità dati...');\r\n            const verificationResult = await this.verifyMigration();\r\n            migrationReport.verificationPassed = verificationResult.success;\r\n\r\n            // STEP 7: Completa migrazione se tutto ok\r\n            if (migrationReport.errors.length === 0 && verificationResult.success) {\r\n                this.markMigrationCompleted();\r\n                migrationReport.steps.push('Migrazione completata con successo');\r\n                logger.success('✅ Migrazione completata', {\r\n                    totalItems: migrationReport.totalItems,\r\n                    migratedItems: migrationReport.migratedItems,\r\n                    duration: `${Date.now() - new Date(migrationReport.startTime).getTime()}ms`\r\n                });\r\n            } else {\r\n                logger.warn('⚠️ Migrazione completata con errori', {\r\n                    errors: migrationReport.errors.length,\r\n                    details: migrationReport.errors\r\n                });\r\n            }\r\n\r\n            migrationReport.endTime = new Date().toISOString();\r\n            migrationReport.success = migrationReport.errors.length === 0;\r\n\r\n            return { success: true, report: migrationReport };\r\n\r\n        } catch (error) {\r\n            migrationReport.endTime = new Date().toISOString();\r\n            migrationReport.success = false;\r\n            migrationReport.errors.push(`Errore fatale: ${error.message}`);\r\n            \r\n            logger.error('❌ Migrazione fallita', error);\r\n            return { success: false, error: error.message, report: migrationReport };\r\n        }\r\n    }\r\n\r\n    // Migrazione dati progress\r\n    async migrateProgressData() {\r\n        const progressData = this.safeGetLocalStorage('progressData') || [];\r\n        const result = { totalItems: progressData.length, migratedItems: 0, errors: [] };\r\n\r\n        if (progressData.length === 0) {\r\n            logger.info('Nessun dato progress da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${progressData.length} record progress...`);\r\n\r\n        for (const item of progressData) {\r\n            try {\r\n                // Validazione e pulizia dati\r\n                const cleanedData = this.cleanProgressData(item);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Dato progress non valido: ${JSON.stringify(item)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await progressRepo.addMeasurement(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Progress migrato: ${cleanedData.date}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione progress: ${createResult.error}`);\r\n                }\r\n\r\n                // Throttling per non sovraccaricare Firestore\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore progress item: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Progress migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione sessioni workout\r\n    async migrateWorkoutSessions() {\r\n        const workoutSessions = this.safeGetLocalStorage('workoutSessions') || [];\r\n        const result = { totalItems: workoutSessions.length, migratedItems: 0, errors: [] };\r\n\r\n        if (workoutSessions.length === 0) {\r\n            logger.info('Nessuna sessione workout da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${workoutSessions.length} sessioni workout...`);\r\n\r\n        for (const session of workoutSessions) {\r\n            try {\r\n                const cleanedData = this.cleanWorkoutSession(session);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Sessione workout non valida: ${JSON.stringify(session)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await workoutRepo.create(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Workout migrato: ${cleanedData.date}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione workout: ${createResult.error}`);\r\n                }\r\n\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore workout session: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Workout migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione dati esercizi\r\n    async migrateExerciseData() {\r\n        const exerciseData = this.safeGetLocalStorage('exerciseData') || {};\r\n        const exercises = Object.values(exerciseData);\r\n        const result = { totalItems: exercises.length, migratedItems: 0, errors: [] };\r\n\r\n        if (exercises.length === 0) {\r\n            logger.info('Nessun dato esercizio da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${exercises.length} record esercizi...`);\r\n\r\n        for (const exercise of exercises) {\r\n            try {\r\n                const cleanedData = this.cleanExerciseData(exercise);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Dato esercizio non valido: ${JSON.stringify(exercise)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await exerciseRepo.logExercise(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Esercizio migrato: ${cleanedData.exerciseName}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione esercizio: ${createResult.error}`);\r\n                }\r\n\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore exercise item: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Exercise migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione impostazioni utente\r\n    async migrateUserSettings() {\r\n        try {\r\n            const timeStats = this.safeGetLocalStorage('timeStats') || {};\r\n            const goals12Week = this.safeGetLocalStorage('goals12Week') || {};\r\n            const userSettings = this.safeGetLocalStorage('userSettings') || {};\r\n\r\n            const profileData = {\r\n                fitnessStats: timeStats,\r\n                goals: goals12Week,\r\n                preferences: userSettings,\r\n                migratedFrom: 'localStorage',\r\n                migrationDate: new Date().toISOString()\r\n            };\r\n\r\n            const updateResult = await userRepo.updateProfile(profileData);\r\n            if (updateResult.success) {\r\n                logger.success('Impostazioni utente migrate');\r\n                return { success: true };\r\n            } else {\r\n                return { success: false, error: updateResult.error };\r\n            }\r\n\r\n        } catch (error) {\r\n            logger.error('Errore migrazione impostazioni utente', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Pulizia e validazione dati progress\r\n    cleanProgressData(data) {\r\n        if (!data || typeof data !== 'object') return null;\r\n\r\n        const cleaned = {\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            weight: this.validateNumber(data.weight, 30, 300),\r\n            bodyFat: this.validateNumber(data.bodyFat, 1, 50),\r\n            muscleMass: this.validateNumber(data.muscleMass, 10, 150),\r\n            chest: this.validateNumber(data.chest, 50, 200),\r\n            arms: this.validateNumber(data.arms, 20, 100),\r\n            waist: this.validateNumber(data.waist, 50, 150),\r\n            thighs: this.validateNumber(data.thighs, 30, 100),\r\n            notes: this.validateString(data.notes, 1000)\r\n        };\r\n\r\n        // Rimuovi campi null/undefined\r\n        Object.keys(cleaned).forEach(key => {\r\n            if (cleaned[key] === null || cleaned[key] === undefined) {\r\n                delete cleaned[key];\r\n            }\r\n        });\r\n\r\n        // Deve avere almeno peso o data\r\n        return (cleaned.weight || cleaned.date) ? cleaned : null;\r\n    }\r\n\r\n    // Pulizia dati workout session\r\n    cleanWorkoutSession(data) {\r\n        if (!data || typeof data !== 'object') return null;\r\n\r\n        return {\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            name: this.validateString(data.name || data.workoutName, 100),\r\n            status: ['planned', 'in_progress', 'completed'].includes(data.status) ? data.status : 'completed',\r\n            totalDuration: this.validateNumber(data.totalDuration || data.duration, 0, 480),\r\n            exercises: Array.isArray(data.exercises) ? data.exercises : [],\r\n            notes: this.validateString(data.notes, 1000)\r\n        };\r\n    }\r\n\r\n    // Pulizia dati esercizio\r\n    cleanExerciseData(data) {\r\n        if (!data || typeof data !== 'object' || !data.exerciseName) return null;\r\n\r\n        return {\r\n            exerciseName: this.validateString(data.exerciseName, 100),\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            sets: this.validateNumber(data.sets, 1, 20),\r\n            reps: this.validateNumber(data.reps, 1, 100),\r\n            weight: this.validateNumber(data.weight, 0, 1000),\r\n            rir: this.validateNumber(data.rir, 0, 10),\r\n            notes: this.validateString(data.notes, 500)\r\n        };\r\n    }\r\n\r\n    // Validazione numeri con range\r\n    validateNumber(value, min = 0, max = Number.MAX_SAFE_INTEGER) {\r\n        const num = parseFloat(value);\r\n        return (!isNaN(num) && num >= min && num <= max) ? num : null;\r\n    }\r\n\r\n    // Validazione stringhe con lunghezza massima\r\n    validateString(value, maxLength = 1000) {\r\n        if (typeof value !== 'string') return null;\r\n        return value.length <= maxLength ? value.trim() : value.substring(0, maxLength).trim();\r\n    }\r\n\r\n    // Verifica integrità post-migrazione\r\n    async verifyMigration() {\r\n        try {\r\n            logger.info('Verifica integrità dati migrati...');\r\n\r\n            // Controlla se i dati sono stati creati correttamente\r\n            const progressCheck = await progressRepo.getUserProgress();\r\n            const workoutCheck = await workoutRepo.getUserSessions(10);\r\n            const userCheck = await userRepo.getCurrentUserProfile();\r\n\r\n            const checks = {\r\n                progress: progressCheck.success,\r\n                workouts: workoutCheck.success,\r\n                userProfile: userCheck.success\r\n            };\r\n\r\n            const allPassed = Object.values(checks).every(check => check === true);\r\n\r\n            logger.info('Risultati verifica', checks);\r\n            \r\n            return { \r\n                success: allPassed, \r\n                checks,\r\n                details: {\r\n                    progressCount: progressCheck.data?.length || 0,\r\n                    workoutCount: workoutCheck.data?.length || 0,\r\n                    hasUserProfile: !!userCheck.data\r\n                }\r\n            };\r\n\r\n        } catch (error) {\r\n            logger.error('Errore verifica migrazione', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Rollback migrazione (ripristina da backup)\r\n    async rollbackMigration() {\r\n        try {\r\n            logger.warn('🔄 Inizio rollback migrazione...');\r\n\r\n            const backupData = localStorage.getItem(this.backupKey);\r\n            if (!backupData) {\r\n                throw new Error('Nessun backup disponibile per il rollback');\r\n            }\r\n\r\n            const backup = JSON.parse(backupData);\r\n            \r\n            // Ripristina tutti i dati localStorage dal backup\r\n            Object.keys(backup.data).forEach(key => {\r\n                if (backup.data[key] !== null) {\r\n                    localStorage.setItem(key, JSON.stringify(backup.data[key]));\r\n                }\r\n            });\r\n\r\n            // Rimuovi flag migrazione completata\r\n            localStorage.removeItem(this.migrationKey);\r\n            localStorage.removeItem(`${this.migrationKey}_details`);\r\n\r\n            logger.success('✅ Rollback completato');\r\n            return { success: true, message: 'Dati ripristinati da backup' };\r\n\r\n        } catch (error) {\r\n            logger.error('❌ Errore rollback', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Utility per throttling\r\n    sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    // Ottieni stato migrazione dettagliato\r\n    getMigrationStatus() {\r\n        try {\r\n            const status = localStorage.getItem(this.migrationKey);\r\n            const details = localStorage.getItem(`${this.migrationKey}_details`);\r\n            \r\n            return {\r\n                isCompleted: status === 'completed',\r\n                status,\r\n                details: details ? JSON.parse(details) : null,\r\n                hasBackup: !!localStorage.getItem(this.backupKey)\r\n            };\r\n\r\n        } catch (error) {\r\n            logger.error('Errore stato migrazione', error);\r\n            return {\r\n                isCompleted: false,\r\n                status: 'unknown',\r\n                details: null,\r\n                hasBackup: false,\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n// Istanza singleton del servizio migrazione\r\nconst migrationService = new MigrationService();\r\n\r\nexport default migrationService;\r\nexport { MigrationService };","// AuthProvider - Context Provider per gestione autenticazione\r\n// Wrapper completo per gestire stato auth in tutta l'applicazione\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport authService from '../firebase/auth';\r\nimport migrationService from '../firebase/migration';\r\nimport { logger } from '../firebase/config';\r\n\r\n// Context per l'autenticazione\r\nconst AuthContext = createContext({});\r\n\r\n// Hook per utilizzare il context auth\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth deve essere utilizzato all\\'interno di AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\n// Provider componente principale\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [migrationStatus, setMigrationStatus] = useState({\r\n        isRequired: false,\r\n        inProgress: false,\r\n        completed: false\r\n    });\r\n\r\n    // Inizializza listener auth state\r\n    useEffect(() => {\r\n        logger.info('Inizializzazione AuthProvider...');\r\n\r\n        const unsubscribe = authService.onAuthStateChange(async (firebaseUser) => {\r\n            setLoading(true);\r\n            setError(null);\r\n\r\n            try {\r\n                if (firebaseUser) {\r\n                    logger.success('Utente autenticato', { \r\n                        uid: firebaseUser.uid, \r\n                        email: firebaseUser.email \r\n                    });\r\n                    \r\n                    setUser({\r\n                        uid: firebaseUser.uid,\r\n                        email: firebaseUser.email,\r\n                        displayName: firebaseUser.displayName,\r\n                        photoURL: firebaseUser.photoURL,\r\n                        emailVerified: firebaseUser.emailVerified,\r\n                        isAnonymous: firebaseUser.isAnonymous,\r\n                        createdAt: firebaseUser.metadata.creationTime,\r\n                        lastLoginAt: firebaseUser.metadata.lastSignInTime\r\n                    });\r\n\r\n                    // Controlla se serve migrazione dati\r\n                    await checkMigrationRequired();\r\n\r\n                } else {\r\n                    logger.info('Utente non autenticato');\r\n                    setUser(null);\r\n                    setMigrationStatus({\r\n                        isRequired: false,\r\n                        inProgress: false,\r\n                        completed: false\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                logger.error('Errore gestione auth state', error);\r\n                setError('Errore durante l\\'autenticazione. Riprova.');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        });\r\n\r\n        return unsubscribe;\r\n    }, []);\r\n\r\n    // Controlla se è necessaria la migrazione\r\n    const checkMigrationRequired = async () => {\r\n        try {\r\n            const migrationStatusData = migrationService.getMigrationStatus();\r\n            \r\n            // Controlla se ci sono dati localStorage da migrare\r\n            const hasLocalData = (\r\n                localStorage.getItem('progressData') ||\r\n                localStorage.getItem('workoutSessions') ||\r\n                localStorage.getItem('exerciseData')\r\n            );\r\n\r\n            const isRequired = hasLocalData && !migrationStatusData.isCompleted;\r\n\r\n            setMigrationStatus({\r\n                isRequired,\r\n                inProgress: false,\r\n                completed: migrationStatusData.isCompleted,\r\n                details: migrationStatusData\r\n            });\r\n\r\n            logger.info('Status migrazione controllato', { \r\n                isRequired, \r\n                hasLocalData,\r\n                completed: migrationStatusData.isCompleted \r\n            });\r\n\r\n        } catch (error) {\r\n            logger.error('Errore controllo migrazione', error);\r\n        }\r\n    };\r\n\r\n    // Funzioni di autenticazione con error handling\r\n\r\n    const login = async (email, password) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signInWithEmail(email, password);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Login completato');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il login. Riprova.';\r\n            logger.error('Errore login wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const register = async (email, password, displayName = null) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signUpWithEmail(email, password, displayName);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Registrazione completata');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante la registrazione. Riprova.';\r\n            logger.error('Errore registrazione wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const loginWithGoogle = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signInWithGoogle();\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Login Google completato');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il login con Google. Riprova.';\r\n            logger.error('Errore Google login wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signOutUser();\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Logout completato');\r\n            return { success: true };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il logout. Riprova.';\r\n            logger.error('Errore logout wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const resetPassword = async (email) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.resetPassword(email);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Email reset password inviata');\r\n            return { success: true };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore invio email reset. Riprova.';\r\n            logger.error('Errore reset password wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Gestione migrazione dati\r\n    const startMigration = async () => {\r\n        if (!user || migrationStatus.inProgress) {\r\n            return { success: false, error: 'Migrazione non possibile al momento' };\r\n        }\r\n\r\n        setMigrationStatus(prev => ({ ...prev, inProgress: true }));\r\n\r\n        try {\r\n            logger.info('Avvio migrazione dati...');\r\n            const result = await migrationService.migrateAllData();\r\n\r\n            if (result.success) {\r\n                setMigrationStatus({\r\n                    isRequired: false,\r\n                    inProgress: false,\r\n                    completed: true,\r\n                    report: result.report\r\n                });\r\n                logger.success('Migrazione completata con successo');\r\n                return { success: true, report: result.report };\r\n            } else {\r\n                setMigrationStatus(prev => ({ ...prev, inProgress: false }));\r\n                setError('Errore durante la migrazione dati');\r\n                return { success: false, error: result.error, report: result.report };\r\n            }\r\n\r\n        } catch (error) {\r\n            logger.error('Errore migrazione wrapper', error);\r\n            setMigrationStatus(prev => ({ ...prev, inProgress: false }));\r\n            setError('Errore imprevisto durante la migrazione');\r\n            return { success: false, error: error.message };\r\n        }\r\n    };\r\n\r\n    const skipMigration = () => {\r\n        setMigrationStatus({\r\n            isRequired: false,\r\n            inProgress: false,\r\n            completed: false,\r\n            skipped: true\r\n        });\r\n        logger.info('Migrazione saltata dall\\'utente');\r\n    };\r\n\r\n    // Utility functions\r\n    const isAuthenticated = () => !!user;\r\n    \r\n    const hasRole = (role) => {\r\n        // Implementazione futura per ruoli utente\r\n        return user?.customClaims?.[role] || false;\r\n    };\r\n\r\n    const clearError = () => setError(null);\r\n\r\n    // Context value\r\n    const contextValue = {\r\n        // Stato auth\r\n        user,\r\n        loading,\r\n        error,\r\n        migrationStatus,\r\n\r\n        // Funzioni auth\r\n        login,\r\n        register,\r\n        loginWithGoogle,\r\n        logout,\r\n        resetPassword,\r\n\r\n        // Migrazione\r\n        startMigration,\r\n        skipMigration,\r\n\r\n        // Utility\r\n        isAuthenticated,\r\n        hasRole,\r\n        clearError,\r\n        \r\n        // Servizi diretti (per casi avanzati)\r\n        authService,\r\n        migrationService\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Hook specializzati per casi d'uso comuni\r\n\r\n// Hook per proteggere componenti (richiede autenticazione)\r\nexport const useRequireAuth = (redirectTo = '/login') => {\r\n    const { user, loading } = useAuth();\r\n    \r\n    useEffect(() => {\r\n        if (!loading && !user && window.location.pathname !== redirectTo) {\r\n            window.location.href = redirectTo;\r\n        }\r\n    }, [user, loading, redirectTo]);\r\n\r\n    return { user, loading, isAuthenticated: !!user };\r\n};\r\n\r\n// Hook per redirect dopo login\r\nexport const useAuthRedirect = (redirectTo = '/') => {\r\n    const { user, loading } = useAuth();\r\n    \r\n    useEffect(() => {\r\n        if (!loading && user && window.location.pathname === '/login') {\r\n            window.location.href = redirectTo;\r\n        }\r\n    }, [user, loading, redirectTo]);\r\n\r\n    return { user, loading };\r\n};\r\n\r\n// HOC per proteggere componenti\r\nexport const withAuth = (Component, requireAuth = true) => {\r\n    return function AuthenticatedComponent(props) {\r\n        const { user, loading } = useAuth();\r\n        \r\n        if (loading) {\r\n            return (\r\n                <div className=\"auth-loading\">\r\n                    <div className=\"loading-spinner\">Caricamento...</div>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n        if (requireAuth && !user) {\r\n            return (\r\n                <div className=\"auth-required\">\r\n                    <h2>Accesso Richiesto</h2>\r\n                    <p>Devi effettuare il login per accedere a questa sezione.</p>\r\n                    <button onClick={() => window.location.href = '/login'}>\r\n                        Vai al Login\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n        return <Component {...props} />;\r\n    };\r\n};\r\n\r\nexport default AuthProvider;","// Validation Schemas - Enterprise Grade\r\n// Schema di validazione completi per tutti i form dell'applicazione\r\n\r\nimport * as yup from 'yup';\r\n\r\n// ========== CONFIGURAZIONE BASE ==========\r\n\r\n// Messaggi di errore personalizzati in italiano\r\nyup.setLocale({\r\n    mixed: {\r\n        default: 'Campo non valido',\r\n        required: 'Campo obbligatorio',\r\n        notType: 'Tipo di dato non valido'\r\n    },\r\n    string: {\r\n        min: 'Minimo ${min} caratteri',\r\n        max: 'Massimo ${max} caratteri',\r\n        email: 'Email non valida'\r\n    },\r\n    number: {\r\n        min: 'Valore minimo: ${min}',\r\n        max: 'Valore massimo: ${max}',\r\n        positive: 'Deve essere un numero positivo',\r\n        integer: 'Deve essere un numero intero'\r\n    },\r\n    date: {\r\n        min: 'Data non può essere precedente al ${min}',\r\n        max: 'Data non può essere successiva al ${max}'\r\n    }\r\n});\r\n\r\n// ========== UTILITY VALIDATIONS ==========\r\n\r\n// Validazione peso realistico (30-300 kg)\r\nconst weightValidation = yup.number()\r\n    .typeError('Peso deve essere un numero')\r\n    .min(30, 'Peso minimo 30kg')\r\n    .max(300, 'Peso massimo 300kg');\r\n\r\n// Validazione percentuale (0-100%)\r\nconst percentageValidation = yup.number()\r\n    .typeError('Percentuale deve essere un numero')\r\n    .min(0, 'Percentuale minima 0%')\r\n    .max(100, 'Percentuale massima 100%');\r\n\r\n// Validazione circonferenze corporee (10-200 cm)\r\nconst measurementValidation = yup.number()\r\n    .typeError('Misurazione deve essere un numero')\r\n    .min(10, 'Misurazione minima 10cm')\r\n    .max(200, 'Misurazione massima 200cm');\r\n\r\n// Validazione data (non futura)\r\nconst dateValidation = yup.date()\r\n    .typeError('Data non valida')\r\n    .max(new Date(), 'Data non può essere futura');\r\n\r\n// Validazione password sicura\r\nconst passwordValidation = yup.string()\r\n    .min(8, 'Password minimo 8 caratteri')\r\n    .matches(/[a-z]/, 'Deve contenere almeno una lettera minuscola')\r\n    .matches(/[A-Z]/, 'Deve contenere almeno una lettera maiuscola')\r\n    .matches(/[0-9]/, 'Deve contenere almeno un numero')\r\n    .matches(/[^a-zA-Z0-9]/, 'Deve contenere almeno un carattere speciale');\r\n\r\n// ========== AUTHENTICATION SCHEMAS ==========\r\n\r\n// Schema registrazione\r\nexport const registrationSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido')\r\n        .max(254, 'Email troppo lunga'),\r\n    \r\n    password: passwordValidation.required('Password è obbligatoria'),\r\n    \r\n    confirmPassword: yup\r\n        .string()\r\n        .required('Conferma password è obbligatoria')\r\n        .oneOf([yup.ref('password')], 'Le password non corrispondono'),\r\n    \r\n    displayName: yup\r\n        .string()\r\n        .min(2, 'Nome minimo 2 caratteri')\r\n        .max(50, 'Nome massimo 50 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ\\s]+$/, 'Nome può contenere solo lettere e spazi')\r\n        .nullable(),\r\n    \r\n    acceptTerms: yup\r\n        .boolean()\r\n        .oneOf([true], 'Devi accettare i termini e condizioni')\r\n});\r\n\r\n// Schema login\r\nexport const loginSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido'),\r\n    \r\n    password: yup\r\n        .string()\r\n        .required('Password è obbligatoria')\r\n        .min(1, 'Password non può essere vuota'),\r\n    \r\n    rememberMe: yup.boolean().default(false)\r\n});\r\n\r\n// Schema reset password\r\nexport const resetPasswordSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido')\r\n});\r\n\r\n// Schema cambio password\r\nexport const changePasswordSchema = yup.object({\r\n    currentPassword: yup\r\n        .string()\r\n        .required('Password attuale è obbligatoria'),\r\n    \r\n    newPassword: passwordValidation.required('Nuova password è obbligatoria'),\r\n    \r\n    confirmNewPassword: yup\r\n        .string()\r\n        .required('Conferma nuova password è obbligatoria')\r\n        .oneOf([yup.ref('newPassword')], 'Le password non corrispondono')\r\n});\r\n\r\n// ========== PROGRESS TRACKING SCHEMAS ==========\r\n\r\n// Schema misurazione progress\r\nexport const progressMeasurementSchema = yup.object({\r\n    weight: weightValidation.nullable(),\r\n    \r\n    bodyFat: percentageValidation\r\n        .min(3, 'Massa grassa minima 3%')\r\n        .max(50, 'Massa grassa massima 50%')\r\n        .nullable(),\r\n    \r\n    muscleMass: yup.number()\r\n        .typeError('Massa muscolare deve essere un numero')\r\n        .min(10, 'Massa muscolare minima 10kg')\r\n        .max(150, 'Massa muscolare massima 150kg')\r\n        .nullable(),\r\n    \r\n    chest: measurementValidation\r\n        .min(50, 'Circonferenza petto minima 50cm')\r\n        .max(200, 'Circonferenza petto massima 200cm')\r\n        .nullable(),\r\n    \r\n    arms: measurementValidation\r\n        .min(20, 'Circonferenza braccia minima 20cm')\r\n        .max(100, 'Circonferenza braccia massima 100cm')\r\n        .nullable(),\r\n    \r\n    waist: measurementValidation\r\n        .min(50, 'Circonferenza vita minima 50cm')\r\n        .max(150, 'Circonferenza vita massima 150cm')\r\n        .nullable(),\r\n    \r\n    thighs: measurementValidation\r\n        .min(30, 'Circonferenza cosce minima 30cm')\r\n        .max(100, 'Circonferenza cosce massima 100cm')\r\n        .nullable(),\r\n    \r\n    date: dateValidation.default(() => new Date()),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(1000, 'Note massimo 1000 caratteri')\r\n        .nullable()\r\n})\r\n.test('at-least-one-measurement', 'Inserisci almeno una misurazione', function(value) {\r\n    const { weight, bodyFat, muscleMass, chest, arms, waist, thighs } = value || {};\r\n    return !!(weight || bodyFat || muscleMass || chest || arms || waist || thighs);\r\n});\r\n\r\n// ========== WORKOUT SCHEMAS ==========\r\n\r\n// Schema esercizio singolo\r\nexport const exerciseSchema = yup.object({\r\n    exerciseName: yup\r\n        .string()\r\n        .required('Nome esercizio è obbligatorio')\r\n        .min(2, 'Nome esercizio minimo 2 caratteri')\r\n        .max(100, 'Nome esercizio massimo 100 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ0-9\\s\\-().]+$/, 'Nome esercizio contiene caratteri non validi'),\r\n    \r\n    sets: yup\r\n        .number()\r\n        .required('Numero serie è obbligatorio')\r\n        .integer('Serie deve essere un numero intero')\r\n        .min(1, 'Minimo 1 serie')\r\n        .max(20, 'Massimo 20 serie'),\r\n    \r\n    reps: yup\r\n        .number()\r\n        .required('Numero ripetizioni è obbligatorio')\r\n        .integer('Ripetizioni deve essere un numero intero')\r\n        .min(1, 'Minimo 1 ripetizione')\r\n        .max(100, 'Massimo 100 ripetizioni'),\r\n    \r\n    weight: yup\r\n        .number()\r\n        .typeError('Peso deve essere un numero')\r\n        .min(0, 'Peso non può essere negativo')\r\n        .max(1000, 'Peso massimo 1000kg')\r\n        .nullable(),\r\n    \r\n    rir: yup\r\n        .number()\r\n        .typeError('RIR deve essere un numero')\r\n        .integer('RIR deve essere un numero intero')\r\n        .min(0, 'RIR minimo 0')\r\n        .max(10, 'RIR massimo 10')\r\n        .nullable(),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(500, 'Note esercizio massimo 500 caratteri')\r\n        .nullable()\r\n});\r\n\r\n// Schema sessione workout\r\nexport const workoutSessionSchema = yup.object({\r\n    name: yup\r\n        .string()\r\n        .required('Nome workout è obbligatorio')\r\n        .min(3, 'Nome workout minimo 3 caratteri')\r\n        .max(100, 'Nome workout massimo 100 caratteri'),\r\n    \r\n    date: dateValidation.required('Data è obbligatoria'),\r\n    \r\n    startTime: yup\r\n        .date()\r\n        .typeError('Orario inizio non valido')\r\n        .nullable(),\r\n    \r\n    endTime: yup\r\n        .date()\r\n        .typeError('Orario fine non valido')\r\n        .min(yup.ref('startTime'), 'Orario fine deve essere dopo l\\'inizio')\r\n        .nullable(),\r\n    \r\n    totalDuration: yup\r\n        .number()\r\n        .typeError('Durata deve essere un numero')\r\n        .min(1, 'Durata minima 1 minuto')\r\n        .max(480, 'Durata massima 8 ore (480 minuti)')\r\n        .nullable(),\r\n    \r\n    exercises: yup\r\n        .array()\r\n        .of(exerciseSchema)\r\n        .min(1, 'Almeno un esercizio è obbligatorio'),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(1000, 'Note workout massimo 1000 caratteri')\r\n        .nullable(),\r\n    \r\n    intensity: yup\r\n        .number()\r\n        .integer('Intensità deve essere un numero intero')\r\n        .min(1, 'Intensità minima 1')\r\n        .max(10, 'Intensità massima 10')\r\n        .nullable()\r\n});\r\n\r\n// ========== USER PROFILE SCHEMAS ==========\r\n\r\n// Schema profilo utente\r\nexport const userProfileSchema = yup.object({\r\n    displayName: yup\r\n        .string()\r\n        .min(2, 'Nome minimo 2 caratteri')\r\n        .max(50, 'Nome massimo 50 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ\\s]+$/, 'Nome può contenere solo lettere e spazi')\r\n        .nullable(),\r\n    \r\n    age: yup\r\n        .number()\r\n        .integer('Età deve essere un numero intero')\r\n        .min(13, 'Età minima 13 anni')\r\n        .max(120, 'Età massima 120 anni')\r\n        .nullable(),\r\n    \r\n    height: yup\r\n        .number()\r\n        .typeError('Altezza deve essere un numero')\r\n        .min(100, 'Altezza minima 100cm')\r\n        .max(250, 'Altezza massima 250cm')\r\n        .nullable(),\r\n    \r\n    activityLevel: yup\r\n        .string()\r\n        .oneOf(['sedentary', 'light', 'moderate', 'active', 'very_active'], 'Livello attività non valido')\r\n        .default('moderate'),\r\n    \r\n    fitnessGoals: yup\r\n        .array()\r\n        .of(yup.string().oneOf([\r\n            'weight_loss', 'muscle_gain', 'strength', 'endurance', \r\n            'flexibility', 'general_health', 'athletic_performance'\r\n        ]))\r\n        .max(5, 'Massimo 5 obiettivi'),\r\n    \r\n    experience: yup\r\n        .string()\r\n        .oneOf(['beginner', 'intermediate', 'advanced', 'expert'], 'Livello esperienza non valido')\r\n        .default('beginner'),\r\n    \r\n    preferences: yup.object({\r\n        units: yup.string().oneOf(['metric', 'imperial']).default('metric'),\r\n        language: yup.string().oneOf(['it', 'en']).default('it'),\r\n        notifications: yup.boolean().default(true),\r\n        darkMode: yup.boolean().default(false),\r\n        publicProfile: yup.boolean().default(false)\r\n    })\r\n});\r\n\r\n// ========== GOALS SCHEMAS ==========\r\n\r\n// Schema obiettivi 12 settimane\r\nexport const goals12WeekSchema = yup.object({\r\n    startWeight: weightValidation.required('Peso iniziale è obbligatorio'),\r\n    \r\n    targetWeight: weightValidation\r\n        .required('Peso target è obbligatorio')\r\n        .test('weight-difference', 'Differenza peso deve essere ragionevole (±30kg)', function(value) {\r\n            const { startWeight } = this.parent;\r\n            if (!startWeight || !value) return true;\r\n            return Math.abs(value - startWeight) <= 30;\r\n        }),\r\n    \r\n    targetBench: yup\r\n        .number()\r\n        .typeError('Target panca deve essere un numero')\r\n        .min(20, 'Target panca minimo 20kg')\r\n        .max(300, 'Target panca massimo 300kg')\r\n        .nullable(),\r\n    \r\n    targetSquat: yup\r\n        .number()\r\n        .typeError('Target squat deve essere un numero')\r\n        .min(30, 'Target squat minimo 30kg')\r\n        .max(500, 'Target squat massimo 500kg')\r\n        .nullable(),\r\n    \r\n    targetDeadlift: yup\r\n        .number()\r\n        .typeError('Target deadlift deve essere un numero')\r\n        .min(40, 'Target deadlift minimo 40kg')\r\n        .max(600, 'Target deadlift massimo 600kg')\r\n        .nullable(),\r\n    \r\n    startDate: yup\r\n        .date()\r\n        .required('Data inizio è obbligatoria')\r\n        .max(new Date(), 'Data inizio non può essere futura'),\r\n    \r\n    targetDate: yup\r\n        .date()\r\n        .required('Data target è obbligatoria')\r\n        .min(yup.ref('startDate'), 'Data target deve essere dopo data inizio')\r\n        .test('12-weeks-max', 'Periodo massimo 16 settimane', function(value) {\r\n            const { startDate } = this.parent;\r\n            if (!startDate || !value) return true;\r\n            const diffWeeks = (value - startDate) / (7 * 24 * 60 * 60 * 1000);\r\n            return diffWeeks <= 16;\r\n        })\r\n});\r\n\r\n// ========== SETTINGS SCHEMAS ==========\r\n\r\n// Schema impostazioni app\r\nexport const appSettingsSchema = yup.object({\r\n    notifications: yup.object({\r\n        workoutReminders: yup.boolean().default(true),\r\n        progressReminders: yup.boolean().default(true),\r\n        achievementAlerts: yup.boolean().default(true),\r\n        emailNotifications: yup.boolean().default(false),\r\n        pushNotifications: yup.boolean().default(true)\r\n    }),\r\n    \r\n    privacy: yup.object({\r\n        profileVisibility: yup.string().oneOf(['private', 'friends', 'public']).default('private'),\r\n        shareProgress: yup.boolean().default(false),\r\n        shareWorkouts: yup.boolean().default(false),\r\n        allowFriendRequests: yup.boolean().default(true)\r\n    }),\r\n    \r\n    display: yup.object({\r\n        theme: yup.string().oneOf(['light', 'dark', 'auto']).default('light'),\r\n        language: yup.string().oneOf(['it', 'en']).default('it'),\r\n        dateFormat: yup.string().oneOf(['DD/MM/YYYY', 'MM/DD/YYYY', 'YYYY-MM-DD']).default('DD/MM/YYYY'),\r\n        timeFormat: yup.string().oneOf(['24h', '12h']).default('24h')\r\n    }),\r\n    \r\n    units: yup.object({\r\n        weight: yup.string().oneOf(['kg', 'lb']).default('kg'),\r\n        distance: yup.string().oneOf(['km', 'mi']).default('km'),\r\n        height: yup.string().oneOf(['cm', 'ft']).default('cm')\r\n    })\r\n});\r\n\r\n// ========== VALIDATION HELPERS ==========\r\n\r\n// Helper per validazione condizionale\r\nexport const conditionalSchema = (condition, schema, fallback = yup.mixed().nullable()) => {\r\n    return yup.mixed().when(condition, {\r\n        is: true,\r\n        then: schema,\r\n        otherwise: fallback\r\n    });\r\n};\r\n\r\n// Helper per validazione campi dinamici\r\nexport const dynamicFieldSchema = (fieldType) => {\r\n    const schemas = {\r\n        text: yup.string().max(100),\r\n        number: yup.number(),\r\n        email: yup.string().email(),\r\n        date: dateValidation,\r\n        boolean: yup.boolean()\r\n    };\r\n    \r\n    return schemas[fieldType] || yup.mixed();\r\n};\r\n\r\n// Validazione personalizzata per form complessi\r\nexport const validateWithSchema = async (schema, data, options = {}) => {\r\n    try {\r\n        const validatedData = await schema.validate(data, {\r\n            abortEarly: false,\r\n            stripUnknown: true,\r\n            ...options\r\n        });\r\n        \r\n        return { isValid: true, data: validatedData, errors: {} };\r\n        \r\n    } catch (error) {\r\n        const errors = {};\r\n        \r\n        if (error.inner) {\r\n            error.inner.forEach(err => {\r\n                if (err.path) {\r\n                    errors[err.path] = err.message;\r\n                }\r\n            });\r\n        } else {\r\n            errors.general = error.message;\r\n        }\r\n        \r\n        return { isValid: false, data: null, errors };\r\n    }\r\n};\r\n\r\n// Export di tutti gli schemi per uso modulare\r\nexport default {\r\n    registrationSchema,\r\n    loginSchema,\r\n    resetPasswordSchema,\r\n    changePasswordSchema,\r\n    progressMeasurementSchema,\r\n    exerciseSchema,\r\n    workoutSessionSchema,\r\n    userProfileSchema,\r\n    goals12WeekSchema,\r\n    appSettingsSchema,\r\n    validateWithSchema\r\n};","import React, { Suspense, lazy } from 'react';\r\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\r\n// import { AuthProvider, useAuth } from './components/AuthProvider';\r\nimport Dashboard from './components/Dashboard';\r\nimport Workout from './components/Workout';\r\nimport Nutrition from './components/Nutrition';\r\nimport Supplements from './components/Supplements';\r\nimport Recovery from './components/Recovery';\r\nimport Progress from './components/Progress';\r\nimport AuthModal from './components/AuthModal';\r\nimport MigrationModal from './components/MigrationModal';\r\nimport './styles/main.css';\r\n\r\n// Lazy loading per componenti pesanti\r\nconst LazyAnalytics = lazy(() => import('./components/AdvancedAnalytics'));\r\nconst LazyNutritionTracker = lazy(() => import('./components/SimpleNutritionTracker'));\r\nconst LazyRecoveryTimer = lazy(() => import('./components/SimpleRecoveryTimer'));\r\n\r\n// Componente principale senza autenticazione\r\nfunction AppContent() {\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                {/* Autenticazione disabilitata per uso locale */}\r\n                \r\n                {/* Routing principale */}\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Dashboard />} />\r\n                    <Route path=\"/workout\" element={<Workout />} />\r\n                    <Route path=\"/nutrition\" element={<Nutrition />} />\r\n                    <Route path=\"/supplements\" element={<Supplements />} />\r\n                    <Route path=\"/recovery\" element={<Recovery />} />\r\n                    <Route path=\"/progress\" element={<Progress />} />\r\n                    <Route path=\"/analytics\" element={\r\n                        <Suspense fallback={<div className=\"loading-analytics\">Caricamento Analytics...</div>}>\r\n                            <LazyAnalytics />\r\n                        </Suspense>\r\n                    } />\r\n                    <Route path=\"/nutrition-tracker\" element={\r\n                        <Suspense fallback={<div className=\"loading-nutrition\">Caricamento Nutrition Tracker...</div>}>\r\n                            <LazyNutritionTracker />\r\n                        </Suspense>\r\n                    } />\r\n                    <Route path=\"/recovery-timer\" element={\r\n                        <Suspense fallback={<div className=\"loading-recovery\">Caricamento Recovery Timer...</div>}>\r\n                            <LazyRecoveryTimer />\r\n                        </Suspense>\r\n                    } />\r\n                </Routes>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\n// App wrapper senza autenticazione\r\nfunction App() {\r\n    return <AppContent />;\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/main.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}