{"version":3,"sources":["firebase/auth.js","firebase/firestore.js","firebase/migration.js","components/AuthProvider.js","firebase/config.js","components/MotivationalQuotes.js","components/CalendarStreak.js","components/ExerciseTracker.js","components/SupplementStack.js","components/RecoveryProtocol.js","components/Dashboard.js","components/WorkoutTimer.js","components/TechniqueGuides.js","components/Workout.js","components/Nutrition.js","components/Supplements.js","components/Recovery.js","components/Progress.js","validation/schemas.js","components/AuthModal.js","components/MigrationModal.js","App.js","index.js"],"names":["googleProvider","GoogleAuthProvider","addScope","authService","constructor","this","currentUser","authStateListeners","initializeAuthListener","onAuthStateChanged","auth","user","notifyAuthStateListeners","logger","success","uid","email","displayName","updateUserLastSeen","info","onAuthStateChange","callback","push","filter","cb","forEach","error","signInWithEmail","password","signInWithEmailAndPassword","handleAuthError","signUpWithEmail","arguments","length","undefined","createUserWithEmailAndPassword","updateProfile","createUserDocument","signInWithGoogle","signInWithPopup","photoURL","provider","signOutUser","signOut","resetPassword","sendPasswordResetEmail","updateUserPassword","currentPassword","newPassword","Error","credential","EmailAuthProvider","reauthenticateWithCredential","updatePassword","additionalData","userRef","doc","db","getDoc","exists","setDoc","lastSeen","serverTimestamp","merge","userData","_objectSpread","createdAt","settings","units","language","notifications","darkMode","profile","age","height","activityLevel","goals","experience","isOnline","code","message","originalError","isAuthenticated","getCurrentUser","deleteAccount","warn","deleteUser","BaseRepository","collectionName","collectionRef","collection","cache","Map","listeners","getById","id","useCache","has","cached","get","Date","now","timestamp","concat","data","fromCache","docRef","docSnap","set","create","customId","_authService$getCurre","userId","docData","updatedAt","addDoc","newId","invalidateCache","update","updateData","updateDoc","delete","deleteDoc","getWithQuery","queryConstraints","q","query","querySnapshot","getDocs","docs","count","subscribeToChanges","onSnapshot","clear","progressRepo","super","getUserProgress","_authService$getCurre2","startDate","endDate","constraints","where","orderBy","addMeasurement","measurementData","date","toISOString","split","type","getPeriodStats","_authService$getCurre3","days","getTime","result","latest","oldest","stats","totalEntries","weightChange","weight","muscleMassChange","muscleMass","bodyFatChange","bodyFat","averageWeight","reduce","sum","entry","period","workoutRepo","startSession","workoutData","sessionData","status","startTime","exercises","totalDuration","completeSession","sessionId","completionData","endTime","completedAt","getUserSessions","_authService$getCurre4","limit","getWorkoutStats","sessions","weekAgo","recentSessions","session","_session$createdAt","_session$createdAt$to","toDate","call","totalSessions","averageDuration","exerciseStats","_session$exercises","exercise","name","totalVolume","sets","reps","exerciseRepo","logExercise","exerciseData","volume","oneRepMax","calculateOneRepMax","Math","round","getPersonalRecords","_authService$getCurre5","exerciseName","unshift","prs","Object","values","userRepo","getCurrentUserProfile","_authService$getCurre6","updateSettings","_authService$getCurre7","profileData","_authService$getCurre8","nutritionRepo","logMeal","mealData","updateMealStatus","mealId","notes","getUserMeals","_authService$getCurre9","getDayMeals","_authService$getCurre0","getNutritionStats","_authService$getCurre1","meals","completedMeals","m","totalMeals","adherenceRate","totalProteins","meal","proteins","avgProteinsPerDay","streak","calculateNutritionStreak","currentStreak","mealsByDay","sortedDates","keys","sort","reverse","dayMeals","recoveryRepo","logRecoverySession","recoveryData","getUserRecoverySessions","_authService$getCurre10","getDayRecoverySessions","_authService$getCurre11","getRecoveryStats","_authService$getCurre12","s","duration","avgDuration","activityBreakdown","activityType","weeklyFrequency","ceil","migrationService","migrationKey","backupKey","isMigrationCompleted","localStorage","getItem","markMigrationCompleted","migrationData","version","setItem","JSON","stringify","createBackup","backupData","progressData","safeGetLocalStorage","workoutSessions","timeStats","streakData","personalRecords","goals12Week","userSettings","backupString","size","backup","key","parse","migrateAllData","migrationReport","steps","errors","totalItems","migratedItems","backupResult","progressResult","migrateProgressData","workoutResult","migrateWorkoutSessions","exerciseResult","migrateExerciseData","userResult","migrateUserSettings","verificationResult","verifyMigration","verificationPassed","details","report","item","cleanedData","cleanProgressData","createResult","sleep","cleanWorkoutSession","cleanExerciseData","fitnessStats","preferences","migratedFrom","migrationDate","updateResult","cleaned","validateNumber","chest","arms","waist","thighs","validateString","workoutName","includes","Array","isArray","rir","value","min","max","Number","MAX_SAFE_INTEGER","num","parseFloat","isNaN","maxLength","trim","substring","_progressCheck$data","_workoutCheck$data","progressCheck","workoutCheck","userCheck","checks","progress","workouts","userProfile","allPassed","every","check","progressCount","workoutCount","hasUserProfile","rollbackMigration","removeItem","ms","Promise","resolve","setTimeout","getMigrationStatus","isCompleted","hasBackup","AuthContext","createContext","useAuth","context","useContext","AuthProvider","_ref","children","setUser","useState","loading","setLoading","setError","migrationStatus","setMigrationStatus","isRequired","inProgress","completed","useEffect","unsubscribe","async","firebaseUser","emailVerified","isAnonymous","metadata","creationTime","lastLoginAt","lastSignInTime","checkMigrationRequired","migrationStatusData","hasLocalData","contextValue","login","errorMessage","register","loginWithGoogle","logout","startMigration","prev","skipMigration","skipped","hasRole","role","_user$customClaims","customClaims","clearError","_jsx","Provider","validatedConfig","config","missing","console","validateConfig","apiKey","process","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","app","initializeApp","getAuth","getFirestore","getStorage","analytics","isSupported","then","supported","getAnalytics","log","REACT_APP_USE_FIREBASE_EMULATORS","MotivationalQuotes","legendaryQuotes","day","quote","author","additionalQuotes","getTodayQuote","today","getDay","find","getRandomAdditionalQuote","floor","random","CalendarStreak","currentDate","setCurrentDate","React","setStreakData","monthlyStats","setMonthlyStats","calculateMonthlyStats","currentMonth","getMonth","currentYear","getFullYear","monthlyWorkouts","dateKey","calculateCurrentStreak","longestStreak","calculateLongestStreak","weeklyAverage","calculateWeeklyAverage","lastUpdated","checkDate","setDate","getDate","toDateString","maxStreak","i","prevDate","fourWeeksAgo","toFixed","loadStreakData","saved","markWorkoutCompleted","workoutType","updated","getDaysInMonth","year","month","firstDay","daysInMonth","startingDayOfWeek","currentDay","isToday","navigateMonth","direction","newDate","setMonth","getStreakColor","getWorkoutTypeEmoji","monthNames","dayNames","ExerciseTracker","setExerciseData","sessionProgress","setSessionProgress","setPersonalRecords","updatePersonalRecord","currentPR","updatedPR","parseInt","previousRecord","updateSessionProgress","todayExercises","ex","totalCompleted","getExerciseHistory","a","b","slice","isExerciseCompletedToday","some","loadExerciseData","savedPR","markExerciseCompleted","exerciseId","exerciseEntry","getTodayProgress","workoutExercises","total","percentage","remaining","getWeeklyStats","oneWeekAgo","weeklyExercises","totalSets","totalReps","uniqueExercises","Set","map","getMonthlyProgress","oneMonthAgo","monthlyExercises","workoutDays","totalExercises","averageVolume","getExerciseProgressColor","_history$","history","lastWeight","avgWeight","SupplementStack","supplementSchedule","setSupplementSchedule","takenToday","setTakenToday","evidenceBasedSupplements","creatine","dosage","timing","evidence","benefits","mechanism","color","icon","citrulline","betaAlanine","omega3","caffeine","vitaminD","isSupplementTakenToday","supplementKey","entryKey","taken","loadTodaysSupplements","todayData","removedSupplements","hmb","forskolin","rAla","bcaa","glutamine","markSupplementTaken","supplement","getSupplementProgress","totalSupplements","takenCount","getWeeklySupplementStats","weeklyEntries","consistency","supplementEntries","getOptimalTiming","currentTime","hour","getHours","recommendations","reason","workoutHour","createSupplementPlan","workoutSchedule","core","performance","endurance","morning","preWorkout","postWorkout","evening","RecoveryProtocol","recoveryLog","setRecoveryLog","todayRecovery","setTodayRecovery","thermoTherapyProtocols","sauna","temperature","humidity","protocol","precautions","scientificEvidence","steamRoom","iceBath","loadRecoveryData","todaySessions","totalTime","contrastTherapy","optimalTiming","immediate","after2h","after4h","nextMorning","restDays","competition","before","after","biohacking","breathwork","supplements","preSauna","preIceBath","postBoth","monitoring","heartRate","bodyTemp","subjective","markRecoverySession","therapy","effectiveness","updatedLog","getRecoveryRecommendation","lastWorkout","workoutIntensity","stressLevel","hoursSinceWorkout","priority","last7Days","sessionDate","averageEffectiveness","therapyBreakdown","time","Dashboard","quotesHook","calendarHook","exerciseHook","supplementsHook","recoveryHook","dashboardData","setDashboardData","currentWeight","muscleGain","totalWorkoutTime","weeklyTime","daysActive","todayWorkout","setTodayWorkout","setGoals12Week","startWeight","targetWeight","targetBench","targetSquat","targetDeadlift","weeksCompleted","loadDashboardData","_workoutSessions$","latestProgress","firstProgress","focus","todayQuote","todayProgress","supplementProgress","weeklyStats","recoveryStats","_jsxs","className","style","width","Link","to","index","WorkoutTimer","onSessionComplete","isActive","setIsActive","currentExercise","setCurrentExercise","sessionTime","setSessionTime","exerciseTime","setExerciseTime","setExercises","currentExerciseIndex","setCurrentExerciseIndex","interval","setInterval","clearInterval","nextExercise","calculateWeeklyTime","calculateMonthlyTime","formatTime","seconds","mins","secs","toString","padStart","placeholder","onChange","e","target","disabled","onClick","pauseSession","updatedSessions","updatedTimeStats","monthlyTime","sessionsCompleted","TechniqueGuides","masterTechniques","category","difficulty","muscles","setup","execution","breathing","commonMistakes","progressionTips","safetyNotes","getTechniqueCue","phase","getProgressionLevel","userLevel","beginner","approach","intermediate","advanced","getInjuryPrevention","prevention","warmup","cooldown","redFlags","alternatives","getMindMuscleCues","getExerciseRating","safety","transferability","overall","Workout","selectedDay","setSelectedDay","completedWorkouts","setCompletedWorkouts","selectedExercise","setSelectedExercise","exerciseForm","setExerciseForm","showTechnique","setShowTechnique","workoutPlan","subtitle","rest","isWorkoutCompletedToday","workout","loadCompletedWorkouts","entries","_ref2","Nutrition","Supplements","Recovery","Progress","setProgressData","newEntry","setNewEntry","setTimeStats","saveProgressData","minutes","hours","loadProgressData","savedTimeStats","addEntry","deleteEntry","yup","mixed","default","required","notType","string","number","positive","integer","weightValidation","typeError","percentageValidation","measurementValidation","dateValidation","passwordValidation","matches","registrationSchema","confirmPassword","oneOf","nullable","acceptTerms","loginSchema","rememberMe","resetPasswordSchema","exerciseSchema","confirmNewPassword","test","validateWithSchema","of","intensity","fitnessGoals","publicProfile","parent","abs","targetDate","workoutReminders","progressReminders","achievementAlerts","emailNotifications","pushNotifications","privacy","profileVisibility","shareProgress","shareWorkouts","allowFriendRequests","display","theme","dateFormat","timeFormat","distance","schema","options","isValid","validate","abortEarly","stripUnknown","inner","err","path","general","AuthModal","mode","setMode","formData","setFormData","validationErrors","setValidationErrors","isSubmitting","setIsSubmitting","successMessage","setSuccessMessage","changeMode","newMode","updateField","field","newErrors","onSubmit","preventDefault","validation","dataToValidate","validateForm","htmlFor","_Fragment","checked","href","MigrationModal","showDetails","setShowDetails","setMigrationReport","_migrationReport$erro","isSuccess","toLocaleString","step","window","location","reload","handleSkipMigration","confirm","LazyAnalytics","lazy","LazyNutritionTracker","LazyRecoveryTimer","AppContent","Router","Routes","Route","element","Suspense","fallback","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7655c875.chunk.js","sourcesContent":["// Firebase Authentication Service - Enterprise Grade\r\n// Gestione completa autenticazione con error handling avanzato\r\n\r\nimport { \r\n    signInWithEmailAndPassword,\r\n    createUserWithEmailAndPassword,\r\n    signInWithPopup,\r\n    GoogleAuthProvider,\r\n    signOut,\r\n    onAuthStateChanged,\r\n    sendPasswordResetEmail,\r\n    updateProfile,\r\n    updatePassword,\r\n    deleteUser,\r\n    reauthenticateWithCredential,\r\n    EmailAuthProvider\r\n} from 'firebase/auth';\r\n\r\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { auth, db, logger } from './config';\r\n\r\n// Provider Google configurato\r\nconst googleProvider = new GoogleAuthProvider();\r\ngoogleProvider.addScope('profile');\r\ngoogleProvider.addScope('email');\r\n\r\n// Classe per gestire l'autenticazione\r\nclass AuthService {\r\n    constructor() {\r\n        this.currentUser = null;\r\n        this.authStateListeners = [];\r\n        this.initializeAuthListener();\r\n    }\r\n\r\n    // Inizializza listener per cambio stato auth\r\n    initializeAuthListener() {\r\n        onAuthStateChanged(auth, (user) => {\r\n            this.currentUser = user;\r\n            this.notifyAuthStateListeners(user);\r\n            \r\n            if (user) {\r\n                logger.success('Utente autenticato', { \r\n                    uid: user.uid, \r\n                    email: user.email,\r\n                    displayName: user.displayName \r\n                });\r\n                this.updateUserLastSeen(user);\r\n            } else {\r\n                logger.info('Utente disconnesso');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Registra listener per cambio stato\r\n    onAuthStateChange(callback) {\r\n        this.authStateListeners.push(callback);\r\n        \r\n        // Rimuovi listener\r\n        return () => {\r\n            this.authStateListeners = this.authStateListeners.filter(cb => cb !== callback);\r\n        };\r\n    }\r\n\r\n    // Notifica tutti i listener del cambio stato\r\n    notifyAuthStateListeners(user) {\r\n        this.authStateListeners.forEach(callback => {\r\n            try {\r\n                callback(user);\r\n            } catch (error) {\r\n                logger.error('Errore nel listener auth state', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Login con email e password\r\n    async signInWithEmail(email, password) {\r\n        try {\r\n            logger.info('Tentativo login con email...');\r\n            \r\n            const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n            \r\n            await this.updateUserLastSeen(user);\r\n            logger.success('Login completato', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore login email', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Registrazione con email e password\r\n    async signUpWithEmail(email, password, displayName = null) {\r\n        try {\r\n            logger.info('Tentativo registrazione con email...');\r\n            \r\n            const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n            \r\n            // Aggiorna profilo se fornito displayName\r\n            if (displayName) {\r\n                await updateProfile(user, { displayName });\r\n            }\r\n            \r\n            // Crea documento utente in Firestore\r\n            await this.createUserDocument(user, { displayName });\r\n            \r\n            logger.success('Registrazione completata', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore registrazione email', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Login con Google\r\n    async signInWithGoogle() {\r\n        try {\r\n            logger.info('Tentativo login con Google...');\r\n            \r\n            const userCredential = await signInWithPopup(auth, googleProvider);\r\n            const user = userCredential.user;\r\n            \r\n            // Crea o aggiorna documento utente\r\n            await this.createUserDocument(user, {\r\n                displayName: user.displayName,\r\n                photoURL: user.photoURL,\r\n                provider: 'google'\r\n            });\r\n            \r\n            logger.success('Login Google completato', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore login Google', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Logout\r\n    async signOutUser() {\r\n        try {\r\n            logger.info('Logout utente...');\r\n            await signOut(auth);\r\n            logger.success('Logout completato');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore logout', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Reset password\r\n    async resetPassword(email) {\r\n        try {\r\n            logger.info('Invio reset password...');\r\n            await sendPasswordResetEmail(auth, email);\r\n            logger.success('Email reset password inviata');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore reset password', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Aggiorna password (richiede riautenticazione recente)\r\n    async updateUserPassword(currentPassword, newPassword) {\r\n        try {\r\n            if (!this.currentUser) {\r\n                throw new Error('Nessun utente autenticato');\r\n            }\r\n\r\n            logger.info('Aggiornamento password...');\r\n            \r\n            // Riautentica utente\r\n            const credential = EmailAuthProvider.credential(\r\n                this.currentUser.email,\r\n                currentPassword\r\n            );\r\n            await reauthenticateWithCredential(this.currentUser, credential);\r\n            \r\n            // Aggiorna password\r\n            await updatePassword(this.currentUser, newPassword);\r\n            \r\n            logger.success('Password aggiornata');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore aggiornamento password', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Crea documento utente in Firestore\r\n    async createUserDocument(user, additionalData = {}) {\r\n        if (!user) return;\r\n        \r\n        try {\r\n            const userRef = doc(db, 'users', user.uid);\r\n            const userDoc = await getDoc(userRef);\r\n            \r\n            if (!userDoc.exists()) {\r\n                const userData = {\r\n                    uid: user.uid,\r\n                    email: user.email,\r\n                    displayName: user.displayName || additionalData.displayName || 'Utente',\r\n                    photoURL: user.photoURL || additionalData.photoURL || null,\r\n                    provider: additionalData.provider || 'email',\r\n                    createdAt: serverTimestamp(),\r\n                    lastSeen: serverTimestamp(),\r\n                    settings: {\r\n                        units: 'metric', // metric/imperial\r\n                        language: 'it',\r\n                        notifications: true,\r\n                        darkMode: false\r\n                    },\r\n                    profile: {\r\n                        age: null,\r\n                        height: null,\r\n                        activityLevel: 'moderate',\r\n                        goals: [],\r\n                        experience: 'beginner'\r\n                    },\r\n                    ...additionalData\r\n                };\r\n                \r\n                await setDoc(userRef, userData);\r\n                logger.success('Documento utente creato');\r\n            } else {\r\n                // Aggiorna solo lastSeen se utente esiste\r\n                await setDoc(userRef, { lastSeen: serverTimestamp() }, { merge: true });\r\n                logger.info('LastSeen aggiornato');\r\n            }\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore creazione documento utente', error);\r\n        }\r\n    }\r\n\r\n    // Aggiorna ultimo accesso\r\n    async updateUserLastSeen(user) {\r\n        if (!user) return;\r\n        \r\n        try {\r\n            const userRef = doc(db, 'users', user.uid);\r\n            await setDoc(userRef, { \r\n                lastSeen: serverTimestamp(),\r\n                isOnline: true \r\n            }, { merge: true });\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore aggiornamento lastSeen', error);\r\n        }\r\n    }\r\n\r\n    // Gestione errori Firebase Auth\r\n    handleAuthError(error) {\r\n        const errorMessages = {\r\n            'auth/user-not-found': 'Utente non trovato. Verifica l\\'email inserita.',\r\n            'auth/wrong-password': 'Password non corretta. Riprova.',\r\n            'auth/email-already-in-use': 'Email già registrata. Prova ad effettuare il login.',\r\n            'auth/weak-password': 'Password troppo debole. Usa almeno 6 caratteri.',\r\n            'auth/invalid-email': 'Email non valida. Verifica il formato.',\r\n            'auth/user-disabled': 'Account disabilitato. Contatta l\\'assistenza.',\r\n            'auth/too-many-requests': 'Troppi tentativi. Riprova più tardi.',\r\n            'auth/network-request-failed': 'Errore di connessione. Verifica la rete.',\r\n            'auth/popup-closed-by-user': 'Login annullato dall\\'utente.',\r\n            'auth/cancelled-popup-request': 'Popup già aperto. Completa il login.',\r\n            'auth/popup-blocked': 'Popup bloccato dal browser. Abilita i popup.',\r\n            'auth/requires-recent-login': 'Operazione sensibile. Effettua nuovamente il login.'\r\n        };\r\n\r\n        return {\r\n            code: error.code,\r\n            message: errorMessages[error.code] || error.message || 'Errore sconosciuto',\r\n            originalError: error\r\n        };\r\n    }\r\n\r\n    // Utility per controllo stato\r\n    isAuthenticated() {\r\n        return !!this.currentUser;\r\n    }\r\n\r\n    getCurrentUser() {\r\n        return this.currentUser;\r\n    }\r\n\r\n    // Elimina account (operazione irreversibile)\r\n    async deleteAccount(password = null) {\r\n        try {\r\n            if (!this.currentUser) {\r\n                throw new Error('Nessun utente autenticato');\r\n            }\r\n\r\n            logger.warn('Tentativo eliminazione account...');\r\n            \r\n            // Riautentica se password fornita\r\n            if (password) {\r\n                const credential = EmailAuthProvider.credential(\r\n                    this.currentUser.email,\r\n                    password\r\n                );\r\n                await reauthenticateWithCredential(this.currentUser, credential);\r\n            }\r\n            \r\n            const uid = this.currentUser.uid;\r\n            \r\n            // Elimina account\r\n            await deleteUser(this.currentUser);\r\n            \r\n            logger.warn('Account eliminato', { uid });\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore eliminazione account', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n}\r\n\r\n// Instanza singleton del servizio\r\nconst authService = new AuthService();\r\n\r\nexport default authService;\r\n\r\n// Export delle funzioni principali per retrocompatibilità\r\nexport {\r\n    authService,\r\n    auth,\r\n    GoogleAuthProvider\r\n};","// Firestore Database Service - Enterprise Architecture\r\n// Gestione dati fitness con pattern Repository e caching intelligente\r\n\r\nimport {\r\n    collection,\r\n    doc,\r\n    getDocs,\r\n    getDoc,\r\n    setDoc,\r\n    addDoc,\r\n    updateDoc,\r\n    deleteDoc,\r\n    query,\r\n    where,\r\n    orderBy,\r\n    limit,\r\n    startAfter,\r\n    onSnapshot,\r\n    serverTimestamp,\r\n    increment,\r\n    arrayUnion,\r\n    arrayRemove,\r\n    writeBatch,\r\n    runTransaction\r\n} from 'firebase/firestore';\r\n\r\nimport { db, logger } from './config';\r\nimport authService from './auth';\r\n\r\n// Base Repository Class per operazioni CRUD standardizzate\r\nclass BaseRepository {\r\n    constructor(collectionName) {\r\n        this.collectionName = collectionName;\r\n        this.collectionRef = collection(db, collectionName);\r\n        this.cache = new Map(); // Cache locale per performance\r\n        this.listeners = new Map(); // Gestione listener real-time\r\n    }\r\n\r\n    // Ottieni documento per ID\r\n    async getById(id, useCache = true) {\r\n        try {\r\n            // Controlla cache prima\r\n            if (useCache && this.cache.has(id)) {\r\n                const cached = this.cache.get(id);\r\n                // Cache valida per 5 minuti\r\n                if (Date.now() - cached.timestamp < 5 * 60 * 1000) {\r\n                    logger.info(`Cache hit per ${this.collectionName}/${id}`);\r\n                    return { success: true, data: cached.data, fromCache: true };\r\n                }\r\n            }\r\n\r\n            const docRef = doc(db, this.collectionName, id);\r\n            const docSnap = await getDoc(docRef);\r\n            \r\n            if (docSnap.exists()) {\r\n                const data = { id: docSnap.id, ...docSnap.data() };\r\n                \r\n                // Aggiorna cache\r\n                if (useCache) {\r\n                    this.cache.set(id, { data, timestamp: Date.now() });\r\n                }\r\n                \r\n                return { success: true, data, fromCache: false };\r\n            } else {\r\n                return { success: false, error: 'Documento non trovato', data: null };\r\n            }\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore getById ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, data: null };\r\n        }\r\n    }\r\n\r\n    // Crea nuovo documento\r\n    async create(data, customId = null) {\r\n        try {\r\n            const userId = authService.getCurrentUser()?.uid;\r\n            if (!userId) {\r\n                throw new Error('Utente non autenticato');\r\n            }\r\n\r\n            const docData = {\r\n                ...data,\r\n                userId,\r\n                createdAt: serverTimestamp(),\r\n                updatedAt: serverTimestamp()\r\n            };\r\n\r\n            let docRef;\r\n            if (customId) {\r\n                docRef = doc(db, this.collectionName, customId);\r\n                await setDoc(docRef, docData);\r\n            } else {\r\n                docRef = await addDoc(this.collectionRef, docData);\r\n            }\r\n\r\n            const newId = customId || docRef.id;\r\n            \r\n            // Invalida cache\r\n            this.invalidateCache();\r\n            \r\n            logger.success(`Documento creato in ${this.collectionName}`, { id: newId });\r\n            return { success: true, id: newId, data: { id: newId, ...docData } };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore create ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, id: null };\r\n        }\r\n    }\r\n\r\n    // Aggiorna documento\r\n    async update(id, data, merge = true) {\r\n        try {\r\n            const docRef = doc(db, this.collectionName, id);\r\n            const updateData = {\r\n                ...data,\r\n                updatedAt: serverTimestamp()\r\n            };\r\n\r\n            if (merge) {\r\n                await updateDoc(docRef, updateData);\r\n            } else {\r\n                await setDoc(docRef, updateData);\r\n            }\r\n\r\n            // Invalida cache per questo documento\r\n            this.cache.delete(id);\r\n            \r\n            logger.success(`Documento aggiornato in ${this.collectionName}`, { id });\r\n            return { success: true, id };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore update ${this.collectionName}`, error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Elimina documento\r\n    async delete(id) {\r\n        try {\r\n            const docRef = doc(db, this.collectionName, id);\r\n            await deleteDoc(docRef);\r\n            \r\n            // Rimuovi da cache\r\n            this.cache.delete(id);\r\n            \r\n            logger.success(`Documento eliminato da ${this.collectionName}`, { id });\r\n            return { success: true };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore delete ${this.collectionName}`, error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Query personalizzata\r\n    async getWithQuery(queryConstraints = [], useCache = false) {\r\n        try {\r\n            const q = query(this.collectionRef, ...queryConstraints);\r\n            const querySnapshot = await getDocs(q);\r\n            \r\n            const docs = [];\r\n            querySnapshot.forEach((doc) => {\r\n                docs.push({ id: doc.id, ...doc.data() });\r\n            });\r\n            \r\n            return { success: true, data: docs, count: docs.length };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore query ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, data: [], count: 0 };\r\n        }\r\n    }\r\n\r\n    // Listener real-time\r\n    subscribeToChanges(queryConstraints = [], callback = () => {}) {\r\n        try {\r\n            const q = query(this.collectionRef, ...queryConstraints);\r\n            const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n                const docs = [];\r\n                querySnapshot.forEach((doc) => {\r\n                    docs.push({ id: doc.id, ...doc.data() });\r\n                });\r\n                callback(docs);\r\n            });\r\n\r\n            return unsubscribe;\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore subscription ${this.collectionName}`, error);\r\n            return () => {};\r\n        }\r\n    }\r\n\r\n    // Invalidazione cache\r\n    invalidateCache() {\r\n        this.cache.clear();\r\n        logger.info(`Cache invalidata per ${this.collectionName}`);\r\n    }\r\n}\r\n\r\n// Repository specializzato per Progress Data\r\nclass ProgressRepository extends BaseRepository {\r\n    constructor() {\r\n        super('progress');\r\n    }\r\n\r\n    // Ottieni progressi utente corrente\r\n    async getUserProgress(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Aggiungi misurazione\r\n    async addMeasurement(measurementData) {\r\n        const data = {\r\n            ...measurementData,\r\n            date: measurementData.date || new Date().toISOString().split('T')[0],\r\n            type: 'measurement'\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Ottieni statistiche periodo\r\n    async getPeriodStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserProgress(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (result.success && result.data.length > 0) {\r\n            const data = result.data;\r\n            const latest = data[0];\r\n            const oldest = data[data.length - 1];\r\n\r\n            return {\r\n                success: true,\r\n                stats: {\r\n                    totalEntries: data.length,\r\n                    weightChange: latest.weight - oldest.weight,\r\n                    muscleMassChange: latest.muscleMass - oldest.muscleMass,\r\n                    bodyFatChange: latest.bodyFat - oldest.bodyFat,\r\n                    averageWeight: data.reduce((sum, entry) => sum + (entry.weight || 0), 0) / data.length,\r\n                    period: { startDate, endDate, days }\r\n                }\r\n            };\r\n        }\r\n\r\n        return { success: false, error: 'Dati insufficienti per calcolare statistiche' };\r\n    }\r\n}\r\n\r\n// Repository per Workout Sessions\r\nclass WorkoutRepository extends BaseRepository {\r\n    constructor() {\r\n        super('workouts');\r\n    }\r\n\r\n    // Inizio sessione workout\r\n    async startSession(workoutData) {\r\n        const sessionData = {\r\n            ...workoutData,\r\n            status: 'in_progress',\r\n            startTime: serverTimestamp(),\r\n            exercises: workoutData.exercises || [],\r\n            totalDuration: 0\r\n        };\r\n        \r\n        return this.create(sessionData);\r\n    }\r\n\r\n    // Completa sessione\r\n    async completeSession(sessionId, completionData) {\r\n        const updateData = {\r\n            ...completionData,\r\n            status: 'completed',\r\n            endTime: serverTimestamp(),\r\n            completedAt: serverTimestamp()\r\n        };\r\n        \r\n        return this.update(sessionId, updateData);\r\n    }\r\n\r\n    // Ottieni sessioni utente\r\n    async getUserSessions(limit = 50) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            orderBy('createdAt', 'desc'),\r\n            limit(limit)\r\n        ]);\r\n    }\r\n\r\n    // Statistiche workout\r\n    async getWorkoutStats(days = 7) {\r\n        const sessions = await this.getUserSessions(100);\r\n        \r\n        if (!sessions.success) return sessions;\r\n\r\n        const now = new Date();\r\n        const weekAgo = new Date(now.getTime() - (days * 24 * 60 * 60 * 1000));\r\n        \r\n        const recentSessions = sessions.data.filter(session => {\r\n            const sessionDate = session.createdAt?.toDate?.() || new Date(session.createdAt);\r\n            return sessionDate >= weekAgo && session.status === 'completed';\r\n        });\r\n\r\n        const totalSessions = recentSessions.length;\r\n        const totalDuration = recentSessions.reduce((sum, session) => sum + (session.totalDuration || 0), 0);\r\n        const averageDuration = totalSessions > 0 ? totalDuration / totalSessions : 0;\r\n        \r\n        const exerciseStats = {};\r\n        recentSessions.forEach(session => {\r\n            session.exercises?.forEach(exercise => {\r\n                if (!exerciseStats[exercise.name]) {\r\n                    exerciseStats[exercise.name] = { count: 0, totalVolume: 0 };\r\n                }\r\n                exerciseStats[exercise.name].count++;\r\n                exerciseStats[exercise.name].totalVolume += (exercise.sets * exercise.reps * exercise.weight) || 0;\r\n            });\r\n        });\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalSessions,\r\n                totalDuration,\r\n                averageDuration,\r\n                exerciseStats,\r\n                period: { days, startDate: weekAgo, endDate: now }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Repository per Exercise Tracking\r\nclass ExerciseRepository extends BaseRepository {\r\n    constructor() {\r\n        super('exercises');\r\n    }\r\n\r\n    // Aggiungi esercizio completato\r\n    async logExercise(exerciseData) {\r\n        const data = {\r\n            ...exerciseData,\r\n            date: exerciseData.date || new Date().toISOString().split('T')[0],\r\n            volume: (exerciseData.sets * exerciseData.reps * exerciseData.weight) || 0,\r\n            oneRepMax: this.calculateOneRepMax(exerciseData.weight, exerciseData.reps)\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Calcola 1RM stimato (formula Epley)\r\n    calculateOneRepMax(weight, reps) {\r\n        if (!weight || !reps || reps <= 0) return 0;\r\n        if (reps === 1) return weight;\r\n        return Math.round(weight * (1 + reps / 30));\r\n    }\r\n\r\n    // Ottieni PR per esercizio\r\n    async getPersonalRecords(exerciseName = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('weight', 'desc')\r\n        ];\r\n\r\n        if (exerciseName) {\r\n            constraints.unshift(where('exerciseName', '==', exerciseName));\r\n        }\r\n\r\n        const result = await this.getWithQuery(constraints);\r\n        \r\n        if (result.success) {\r\n            // Raggruppa per esercizio e prendi il massimo\r\n            const prs = {};\r\n            result.data.forEach(exercise => {\r\n                const name = exercise.exerciseName;\r\n                if (!prs[name] || exercise.weight > prs[name].weight) {\r\n                    prs[name] = exercise;\r\n                }\r\n            });\r\n            \r\n            return { success: true, data: Object.values(prs) };\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n\r\n// Repository per User Settings\r\nclass UserRepository extends BaseRepository {\r\n    constructor() {\r\n        super('users');\r\n    }\r\n\r\n    // Ottieni profilo utente corrente\r\n    async getCurrentUserProfile() {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.getById(userId);\r\n    }\r\n\r\n    // Aggiorna impostazioni utente\r\n    async updateSettings(settings) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.update(userId, { settings }, true);\r\n    }\r\n\r\n    // Aggiorna profilo utente\r\n    async updateProfile(profileData) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.update(userId, { profile: profileData }, true);\r\n    }\r\n}\r\n\r\n// Repository per Nutrition Tracking\r\nclass NutritionRepository extends BaseRepository {\r\n    constructor() {\r\n        super('nutrition');\r\n    }\r\n\r\n    // Registra pasto completato/saltato\r\n    async logMeal(mealData) {\r\n        const data = {\r\n            ...mealData,\r\n            date: mealData.date || new Date().toISOString().split('T')[0],\r\n            completedAt: mealData.status === 'completed' ? new Date() : null\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Aggiorna stato pasto\r\n    async updateMealStatus(mealId, status, notes = null) {\r\n        const updateData = {\r\n            status,\r\n            notes,\r\n            completedAt: status === 'completed' ? new Date() : null\r\n        };\r\n        \r\n        return this.update(mealId, updateData);\r\n    }\r\n\r\n    // Ottieni pasti utente per data/range\r\n    async getUserMeals(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Ottieni pasti per giorno specifico\r\n    async getDayMeals(date) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            where('date', '==', date),\r\n            orderBy('mealType', 'asc')\r\n        ]);\r\n    }\r\n\r\n    // Statistiche nutrizionali periodo\r\n    async getNutritionStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserMeals(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (!result.success) return result;\r\n\r\n        const meals = result.data;\r\n        const completedMeals = meals.filter(m => m.status === 'completed');\r\n        const totalMeals = meals.length;\r\n        const adherenceRate = totalMeals > 0 ? (completedMeals.length / totalMeals) * 100 : 0;\r\n\r\n        // Calcola proteine totali (se tracked)\r\n        const totalProteins = completedMeals.reduce((sum, meal) => sum + (meal.proteins || 0), 0);\r\n        const avgProteinsPerDay = days > 0 ? totalProteins / days : 0;\r\n\r\n        // Calcola streak\r\n        const streak = this.calculateNutritionStreak(meals);\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalMeals,\r\n                completedMeals: completedMeals.length,\r\n                adherenceRate: Math.round(adherenceRate),\r\n                totalProteins,\r\n                avgProteinsPerDay: Math.round(avgProteinsPerDay),\r\n                currentStreak: streak,\r\n                period: { startDate, endDate, days }\r\n            }\r\n        };\r\n    }\r\n\r\n    // Calcola streak nutrizionale\r\n    calculateNutritionStreak(meals) {\r\n        if (!meals.length) return 0;\r\n\r\n        // Raggruppa pasti per giorno\r\n        const mealsByDay = {};\r\n        meals.forEach(meal => {\r\n            if (!mealsByDay[meal.date]) {\r\n                mealsByDay[meal.date] = [];\r\n            }\r\n            mealsByDay[meal.date].push(meal);\r\n        });\r\n\r\n        // Calcola streak giorni consecutivi con adherence > 66%\r\n        let streak = 0;\r\n        const sortedDates = Object.keys(mealsByDay).sort().reverse();\r\n\r\n        for (const date of sortedDates) {\r\n            const dayMeals = mealsByDay[date];\r\n            const completedMeals = dayMeals.filter(m => m.status === 'completed');\r\n            const adherence = completedMeals.length / dayMeals.length;\r\n\r\n            if (adherence >= 0.66) { // Almeno 2/3 dei pasti completati\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return streak;\r\n    }\r\n}\r\n\r\n// Repository per Recovery Tracking\r\nclass RecoveryRepository extends BaseRepository {\r\n    constructor() {\r\n        super('recovery');\r\n    }\r\n\r\n    // Registra sessione recovery\r\n    async logRecoverySession(recoveryData) {\r\n        const data = {\r\n            ...recoveryData,\r\n            date: recoveryData.date || new Date().toISOString().split('T')[0],\r\n            completedAt: new Date()\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Ottieni sessioni recovery utente\r\n    async getUserRecoverySessions(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Ottieni sessioni per giorno\r\n    async getDayRecoverySessions(date) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            where('date', '==', date),\r\n            orderBy('createdAt', 'desc')\r\n        ]);\r\n    }\r\n\r\n    // Statistiche recovery\r\n    async getRecoveryStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserRecoverySessions(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (!result.success) return result;\r\n\r\n        const sessions = result.data;\r\n        const totalSessions = sessions.length;\r\n        const totalDuration = sessions.reduce((sum, s) => sum + (s.duration || 0), 0);\r\n        const avgDuration = totalSessions > 0 ? totalDuration / totalSessions : 0;\r\n\r\n        // Breakdown per tipo attività\r\n        const activityBreakdown = {};\r\n        sessions.forEach(session => {\r\n            const type = session.activityType;\r\n            if (!activityBreakdown[type]) {\r\n                activityBreakdown[type] = { count: 0, totalDuration: 0 };\r\n            }\r\n            activityBreakdown[type].count++;\r\n            activityBreakdown[type].totalDuration += session.duration || 0;\r\n        });\r\n\r\n        // Calcola frequenza settimanale\r\n        const weeksInPeriod = Math.ceil(days / 7);\r\n        const weeklyFrequency = totalSessions / weeksInPeriod;\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalSessions,\r\n                totalDuration,\r\n                avgDuration: Math.round(avgDuration),\r\n                weeklyFrequency: Math.round(weeklyFrequency * 10) / 10,\r\n                activityBreakdown,\r\n                period: { startDate, endDate, days }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Istanze singleton dei repository\r\nexport const progressRepo = new ProgressRepository();\r\nexport const workoutRepo = new WorkoutRepository();\r\nexport const exerciseRepo = new ExerciseRepository();\r\nexport const userRepo = new UserRepository();\r\nexport const nutritionRepo = new NutritionRepository();\r\nexport const recoveryRepo = new RecoveryRepository();\r\n\r\n// Utility per operazioni batch\r\nexport const batchOperations = {\r\n    // Esegui multiple operazioni in una transazione\r\n    async executeTransaction(operations) {\r\n        try {\r\n            const result = await runTransaction(db, async (transaction) => {\r\n                const results = [];\r\n                \r\n                for (const operation of operations) {\r\n                    const { type, ref, data } = operation;\r\n                    \r\n                    switch (type) {\r\n                        case 'set':\r\n                            transaction.set(ref, data);\r\n                            break;\r\n                        case 'update':\r\n                            transaction.update(ref, data);\r\n                            break;\r\n                        case 'delete':\r\n                            transaction.delete(ref);\r\n                            break;\r\n                        default:\r\n                            throw new Error(`Operazione non supportata: ${type}`);\r\n                    }\r\n                    \r\n                    results.push({ success: true, operation: type });\r\n                }\r\n                \r\n                return results;\r\n            });\r\n            \r\n            logger.success('Transazione completata', { operations: result.length });\r\n            return { success: true, results: result };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore transazione batch', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    // Operazioni batch (fino a 500 operazioni)\r\n    async executeBatch(operations) {\r\n        try {\r\n            const batch = writeBatch(db);\r\n            \r\n            operations.forEach(operation => {\r\n                const { type, ref, data } = operation;\r\n                \r\n                switch (type) {\r\n                    case 'set':\r\n                        batch.set(ref, data);\r\n                        break;\r\n                    case 'update':\r\n                        batch.update(ref, data);\r\n                        break;\r\n                    case 'delete':\r\n                        batch.delete(ref);\r\n                        break;\r\n                    default:\r\n                        throw new Error(`Operazione non supportata: ${type}`);\r\n                }\r\n            });\r\n            \r\n            await batch.commit();\r\n            \r\n            logger.success('Batch completato', { operations: operations.length });\r\n            return { success: true, count: operations.length };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore batch operations', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n};\r\n\r\n// Export per retrocompatibilità\r\nexport default {\r\n    progressRepo,\r\n    workoutRepo,\r\n    exerciseRepo,\r\n    userRepo,\r\n    nutritionRepo,\r\n    recoveryRepo,\r\n    batchOperations\r\n};","// Data Migration Service - localStorage to Firestore\r\n// Sistema di migrazione intelligente con backup e rollback\r\n\r\nimport { progressRepo, workoutRepo, exerciseRepo, userRepo, batchOperations } from './firestore';\r\nimport authService from './auth';\r\nimport { logger } from './config';\r\n\r\nclass MigrationService {\r\n    constructor() {\r\n        this.migrationKey = 'firebase_migration_status';\r\n        this.backupKey = 'firebase_migration_backup';\r\n    }\r\n\r\n    // Controlla se la migrazione è già stata eseguita\r\n    isMigrationCompleted() {\r\n        try {\r\n            const status = localStorage.getItem(this.migrationKey);\r\n            return status === 'completed';\r\n        } catch (error) {\r\n            logger.error('Errore verifica migrazione', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Segna migrazione come completata\r\n    markMigrationCompleted() {\r\n        try {\r\n            const migrationData = {\r\n                status: 'completed',\r\n                timestamp: new Date().toISOString(),\r\n                version: '1.0.0'\r\n            };\r\n            localStorage.setItem(this.migrationKey, 'completed');\r\n            localStorage.setItem(`${this.migrationKey}_details`, JSON.stringify(migrationData));\r\n            logger.success('Migrazione marcata come completata');\r\n        } catch (error) {\r\n            logger.error('Errore marcamento migrazione', error);\r\n        }\r\n    }\r\n\r\n    // Crea backup completo dei dati localStorage\r\n    createBackup() {\r\n        try {\r\n            const backupData = {\r\n                timestamp: new Date().toISOString(),\r\n                data: {\r\n                    progressData: this.safeGetLocalStorage('progressData'),\r\n                    workoutSessions: this.safeGetLocalStorage('workoutSessions'),\r\n                    exerciseData: this.safeGetLocalStorage('exerciseData'),\r\n                    timeStats: this.safeGetLocalStorage('timeStats'),\r\n                    streakData: this.safeGetLocalStorage('streakData'),\r\n                    personalRecords: this.safeGetLocalStorage('personalRecords'),\r\n                    goals12Week: this.safeGetLocalStorage('goals12Week'),\r\n                    userSettings: this.safeGetLocalStorage('userSettings')\r\n                }\r\n            };\r\n\r\n            // Comprimi backup se troppo grande\r\n            const backupString = JSON.stringify(backupData);\r\n            if (backupString.length > 2 * 1024 * 1024) { // 2MB\r\n                logger.warn('Backup molto grande, compressione necessaria');\r\n                // In un'implementazione reale, potresti voler comprimere i dati\r\n            }\r\n\r\n            localStorage.setItem(this.backupKey, backupString);\r\n            logger.success('Backup creato', { size: `${Math.round(backupString.length / 1024)}KB` });\r\n            \r\n            return { success: true, backup: backupData };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore creazione backup', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Sicuro get da localStorage con fallback\r\n    safeGetLocalStorage(key) {\r\n        try {\r\n            const data = localStorage.getItem(key);\r\n            return data ? JSON.parse(data) : null;\r\n        } catch (error) {\r\n            logger.warn(`Errore parsing ${key}`, error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Migrazione completa con controlli e validazioni\r\n    async migrateAllData() {\r\n        if (!authService.isAuthenticated()) {\r\n            return { success: false, error: 'Utente non autenticato' };\r\n        }\r\n\r\n        if (this.isMigrationCompleted()) {\r\n            logger.info('Migrazione già completata');\r\n            return { success: true, message: 'Migrazione già completata' };\r\n        }\r\n\r\n        const migrationReport = {\r\n            startTime: new Date().toISOString(),\r\n            steps: [],\r\n            errors: [],\r\n            totalItems: 0,\r\n            migratedItems: 0\r\n        };\r\n\r\n        try {\r\n            logger.info('🚀 Inizio migrazione dati localStorage → Firestore');\r\n\r\n            // STEP 1: Crea backup\r\n            migrationReport.steps.push('Creazione backup...');\r\n            const backupResult = this.createBackup();\r\n            if (!backupResult.success) {\r\n                throw new Error(`Backup fallito: ${backupResult.error}`);\r\n            }\r\n\r\n            // STEP 2: Migra dati progress\r\n            migrationReport.steps.push('Migrazione dati progress...');\r\n            const progressResult = await this.migrateProgressData();\r\n            migrationReport.totalItems += progressResult.totalItems;\r\n            migrationReport.migratedItems += progressResult.migratedItems;\r\n            if (progressResult.errors.length > 0) {\r\n                migrationReport.errors.push(...progressResult.errors);\r\n            }\r\n\r\n            // STEP 3: Migra sessioni workout\r\n            migrationReport.steps.push('Migrazione sessioni workout...');\r\n            const workoutResult = await this.migrateWorkoutSessions();\r\n            migrationReport.totalItems += workoutResult.totalItems;\r\n            migrationReport.migratedItems += workoutResult.migratedItems;\r\n            if (workoutResult.errors.length > 0) {\r\n                migrationReport.errors.push(...workoutResult.errors);\r\n            }\r\n\r\n            // STEP 4: Migra dati esercizi\r\n            migrationReport.steps.push('Migrazione dati esercizi...');\r\n            const exerciseResult = await this.migrateExerciseData();\r\n            migrationReport.totalItems += exerciseResult.totalItems;\r\n            migrationReport.migratedItems += exerciseResult.migratedItems;\r\n            if (exerciseResult.errors.length > 0) {\r\n                migrationReport.errors.push(...exerciseResult.errors);\r\n            }\r\n\r\n            // STEP 5: Migra impostazioni utente\r\n            migrationReport.steps.push('Migrazione impostazioni utente...');\r\n            const userResult = await this.migrateUserSettings();\r\n            if (!userResult.success) {\r\n                migrationReport.errors.push(`Errore migrazione utente: ${userResult.error}`);\r\n            }\r\n\r\n            // STEP 6: Verifica integrità\r\n            migrationReport.steps.push('Verifica integrità dati...');\r\n            const verificationResult = await this.verifyMigration();\r\n            migrationReport.verificationPassed = verificationResult.success;\r\n\r\n            // STEP 7: Completa migrazione se tutto ok\r\n            if (migrationReport.errors.length === 0 && verificationResult.success) {\r\n                this.markMigrationCompleted();\r\n                migrationReport.steps.push('Migrazione completata con successo');\r\n                logger.success('✅ Migrazione completata', {\r\n                    totalItems: migrationReport.totalItems,\r\n                    migratedItems: migrationReport.migratedItems,\r\n                    duration: `${Date.now() - new Date(migrationReport.startTime).getTime()}ms`\r\n                });\r\n            } else {\r\n                logger.warn('⚠️ Migrazione completata con errori', {\r\n                    errors: migrationReport.errors.length,\r\n                    details: migrationReport.errors\r\n                });\r\n            }\r\n\r\n            migrationReport.endTime = new Date().toISOString();\r\n            migrationReport.success = migrationReport.errors.length === 0;\r\n\r\n            return { success: true, report: migrationReport };\r\n\r\n        } catch (error) {\r\n            migrationReport.endTime = new Date().toISOString();\r\n            migrationReport.success = false;\r\n            migrationReport.errors.push(`Errore fatale: ${error.message}`);\r\n            \r\n            logger.error('❌ Migrazione fallita', error);\r\n            return { success: false, error: error.message, report: migrationReport };\r\n        }\r\n    }\r\n\r\n    // Migrazione dati progress\r\n    async migrateProgressData() {\r\n        const progressData = this.safeGetLocalStorage('progressData') || [];\r\n        const result = { totalItems: progressData.length, migratedItems: 0, errors: [] };\r\n\r\n        if (progressData.length === 0) {\r\n            logger.info('Nessun dato progress da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${progressData.length} record progress...`);\r\n\r\n        for (const item of progressData) {\r\n            try {\r\n                // Validazione e pulizia dati\r\n                const cleanedData = this.cleanProgressData(item);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Dato progress non valido: ${JSON.stringify(item)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await progressRepo.addMeasurement(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Progress migrato: ${cleanedData.date}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione progress: ${createResult.error}`);\r\n                }\r\n\r\n                // Throttling per non sovraccaricare Firestore\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore progress item: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Progress migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione sessioni workout\r\n    async migrateWorkoutSessions() {\r\n        const workoutSessions = this.safeGetLocalStorage('workoutSessions') || [];\r\n        const result = { totalItems: workoutSessions.length, migratedItems: 0, errors: [] };\r\n\r\n        if (workoutSessions.length === 0) {\r\n            logger.info('Nessuna sessione workout da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${workoutSessions.length} sessioni workout...`);\r\n\r\n        for (const session of workoutSessions) {\r\n            try {\r\n                const cleanedData = this.cleanWorkoutSession(session);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Sessione workout non valida: ${JSON.stringify(session)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await workoutRepo.create(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Workout migrato: ${cleanedData.date}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione workout: ${createResult.error}`);\r\n                }\r\n\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore workout session: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Workout migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione dati esercizi\r\n    async migrateExerciseData() {\r\n        const exerciseData = this.safeGetLocalStorage('exerciseData') || {};\r\n        const exercises = Object.values(exerciseData);\r\n        const result = { totalItems: exercises.length, migratedItems: 0, errors: [] };\r\n\r\n        if (exercises.length === 0) {\r\n            logger.info('Nessun dato esercizio da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${exercises.length} record esercizi...`);\r\n\r\n        for (const exercise of exercises) {\r\n            try {\r\n                const cleanedData = this.cleanExerciseData(exercise);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Dato esercizio non valido: ${JSON.stringify(exercise)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await exerciseRepo.logExercise(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Esercizio migrato: ${cleanedData.exerciseName}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione esercizio: ${createResult.error}`);\r\n                }\r\n\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore exercise item: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Exercise migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione impostazioni utente\r\n    async migrateUserSettings() {\r\n        try {\r\n            const timeStats = this.safeGetLocalStorage('timeStats') || {};\r\n            const goals12Week = this.safeGetLocalStorage('goals12Week') || {};\r\n            const userSettings = this.safeGetLocalStorage('userSettings') || {};\r\n\r\n            const profileData = {\r\n                fitnessStats: timeStats,\r\n                goals: goals12Week,\r\n                preferences: userSettings,\r\n                migratedFrom: 'localStorage',\r\n                migrationDate: new Date().toISOString()\r\n            };\r\n\r\n            const updateResult = await userRepo.updateProfile(profileData);\r\n            if (updateResult.success) {\r\n                logger.success('Impostazioni utente migrate');\r\n                return { success: true };\r\n            } else {\r\n                return { success: false, error: updateResult.error };\r\n            }\r\n\r\n        } catch (error) {\r\n            logger.error('Errore migrazione impostazioni utente', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Pulizia e validazione dati progress\r\n    cleanProgressData(data) {\r\n        if (!data || typeof data !== 'object') return null;\r\n\r\n        const cleaned = {\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            weight: this.validateNumber(data.weight, 30, 300),\r\n            bodyFat: this.validateNumber(data.bodyFat, 1, 50),\r\n            muscleMass: this.validateNumber(data.muscleMass, 10, 150),\r\n            chest: this.validateNumber(data.chest, 50, 200),\r\n            arms: this.validateNumber(data.arms, 20, 100),\r\n            waist: this.validateNumber(data.waist, 50, 150),\r\n            thighs: this.validateNumber(data.thighs, 30, 100),\r\n            notes: this.validateString(data.notes, 1000)\r\n        };\r\n\r\n        // Rimuovi campi null/undefined\r\n        Object.keys(cleaned).forEach(key => {\r\n            if (cleaned[key] === null || cleaned[key] === undefined) {\r\n                delete cleaned[key];\r\n            }\r\n        });\r\n\r\n        // Deve avere almeno peso o data\r\n        return (cleaned.weight || cleaned.date) ? cleaned : null;\r\n    }\r\n\r\n    // Pulizia dati workout session\r\n    cleanWorkoutSession(data) {\r\n        if (!data || typeof data !== 'object') return null;\r\n\r\n        return {\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            name: this.validateString(data.name || data.workoutName, 100),\r\n            status: ['planned', 'in_progress', 'completed'].includes(data.status) ? data.status : 'completed',\r\n            totalDuration: this.validateNumber(data.totalDuration || data.duration, 0, 480),\r\n            exercises: Array.isArray(data.exercises) ? data.exercises : [],\r\n            notes: this.validateString(data.notes, 1000)\r\n        };\r\n    }\r\n\r\n    // Pulizia dati esercizio\r\n    cleanExerciseData(data) {\r\n        if (!data || typeof data !== 'object' || !data.exerciseName) return null;\r\n\r\n        return {\r\n            exerciseName: this.validateString(data.exerciseName, 100),\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            sets: this.validateNumber(data.sets, 1, 20),\r\n            reps: this.validateNumber(data.reps, 1, 100),\r\n            weight: this.validateNumber(data.weight, 0, 1000),\r\n            rir: this.validateNumber(data.rir, 0, 10),\r\n            notes: this.validateString(data.notes, 500)\r\n        };\r\n    }\r\n\r\n    // Validazione numeri con range\r\n    validateNumber(value, min = 0, max = Number.MAX_SAFE_INTEGER) {\r\n        const num = parseFloat(value);\r\n        return (!isNaN(num) && num >= min && num <= max) ? num : null;\r\n    }\r\n\r\n    // Validazione stringhe con lunghezza massima\r\n    validateString(value, maxLength = 1000) {\r\n        if (typeof value !== 'string') return null;\r\n        return value.length <= maxLength ? value.trim() : value.substring(0, maxLength).trim();\r\n    }\r\n\r\n    // Verifica integrità post-migrazione\r\n    async verifyMigration() {\r\n        try {\r\n            logger.info('Verifica integrità dati migrati...');\r\n\r\n            // Controlla se i dati sono stati creati correttamente\r\n            const progressCheck = await progressRepo.getUserProgress();\r\n            const workoutCheck = await workoutRepo.getUserSessions(10);\r\n            const userCheck = await userRepo.getCurrentUserProfile();\r\n\r\n            const checks = {\r\n                progress: progressCheck.success,\r\n                workouts: workoutCheck.success,\r\n                userProfile: userCheck.success\r\n            };\r\n\r\n            const allPassed = Object.values(checks).every(check => check === true);\r\n\r\n            logger.info('Risultati verifica', checks);\r\n            \r\n            return { \r\n                success: allPassed, \r\n                checks,\r\n                details: {\r\n                    progressCount: progressCheck.data?.length || 0,\r\n                    workoutCount: workoutCheck.data?.length || 0,\r\n                    hasUserProfile: !!userCheck.data\r\n                }\r\n            };\r\n\r\n        } catch (error) {\r\n            logger.error('Errore verifica migrazione', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Rollback migrazione (ripristina da backup)\r\n    async rollbackMigration() {\r\n        try {\r\n            logger.warn('🔄 Inizio rollback migrazione...');\r\n\r\n            const backupData = localStorage.getItem(this.backupKey);\r\n            if (!backupData) {\r\n                throw new Error('Nessun backup disponibile per il rollback');\r\n            }\r\n\r\n            const backup = JSON.parse(backupData);\r\n            \r\n            // Ripristina tutti i dati localStorage dal backup\r\n            Object.keys(backup.data).forEach(key => {\r\n                if (backup.data[key] !== null) {\r\n                    localStorage.setItem(key, JSON.stringify(backup.data[key]));\r\n                }\r\n            });\r\n\r\n            // Rimuovi flag migrazione completata\r\n            localStorage.removeItem(this.migrationKey);\r\n            localStorage.removeItem(`${this.migrationKey}_details`);\r\n\r\n            logger.success('✅ Rollback completato');\r\n            return { success: true, message: 'Dati ripristinati da backup' };\r\n\r\n        } catch (error) {\r\n            logger.error('❌ Errore rollback', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Utility per throttling\r\n    sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    // Ottieni stato migrazione dettagliato\r\n    getMigrationStatus() {\r\n        try {\r\n            const status = localStorage.getItem(this.migrationKey);\r\n            const details = localStorage.getItem(`${this.migrationKey}_details`);\r\n            \r\n            return {\r\n                isCompleted: status === 'completed',\r\n                status,\r\n                details: details ? JSON.parse(details) : null,\r\n                hasBackup: !!localStorage.getItem(this.backupKey)\r\n            };\r\n\r\n        } catch (error) {\r\n            logger.error('Errore stato migrazione', error);\r\n            return {\r\n                isCompleted: false,\r\n                status: 'unknown',\r\n                details: null,\r\n                hasBackup: false,\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n// Istanza singleton del servizio migrazione\r\nconst migrationService = new MigrationService();\r\n\r\nexport default migrationService;\r\nexport { MigrationService };","// AuthProvider - Context Provider per gestione autenticazione\r\n// Wrapper completo per gestire stato auth in tutta l'applicazione\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport authService from '../firebase/auth';\r\nimport migrationService from '../firebase/migration';\r\nimport { logger } from '../firebase/config';\r\n\r\n// Context per l'autenticazione\r\nconst AuthContext = createContext({});\r\n\r\n// Hook per utilizzare il context auth\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth deve essere utilizzato all\\'interno di AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\n// Provider componente principale\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [migrationStatus, setMigrationStatus] = useState({\r\n        isRequired: false,\r\n        inProgress: false,\r\n        completed: false\r\n    });\r\n\r\n    // Inizializza listener auth state\r\n    useEffect(() => {\r\n        logger.info('Inizializzazione AuthProvider...');\r\n\r\n        const unsubscribe = authService.onAuthStateChange(async (firebaseUser) => {\r\n            setLoading(true);\r\n            setError(null);\r\n\r\n            try {\r\n                if (firebaseUser) {\r\n                    logger.success('Utente autenticato', { \r\n                        uid: firebaseUser.uid, \r\n                        email: firebaseUser.email \r\n                    });\r\n                    \r\n                    setUser({\r\n                        uid: firebaseUser.uid,\r\n                        email: firebaseUser.email,\r\n                        displayName: firebaseUser.displayName,\r\n                        photoURL: firebaseUser.photoURL,\r\n                        emailVerified: firebaseUser.emailVerified,\r\n                        isAnonymous: firebaseUser.isAnonymous,\r\n                        createdAt: firebaseUser.metadata.creationTime,\r\n                        lastLoginAt: firebaseUser.metadata.lastSignInTime\r\n                    });\r\n\r\n                    // Controlla se serve migrazione dati\r\n                    await checkMigrationRequired();\r\n\r\n                } else {\r\n                    logger.info('Utente non autenticato');\r\n                    setUser(null);\r\n                    setMigrationStatus({\r\n                        isRequired: false,\r\n                        inProgress: false,\r\n                        completed: false\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                logger.error('Errore gestione auth state', error);\r\n                setError('Errore durante l\\'autenticazione. Riprova.');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        });\r\n\r\n        return unsubscribe;\r\n    }, []);\r\n\r\n    // Controlla se è necessaria la migrazione\r\n    const checkMigrationRequired = async () => {\r\n        try {\r\n            const migrationStatusData = migrationService.getMigrationStatus();\r\n            \r\n            // Controlla se ci sono dati localStorage da migrare\r\n            const hasLocalData = (\r\n                localStorage.getItem('progressData') ||\r\n                localStorage.getItem('workoutSessions') ||\r\n                localStorage.getItem('exerciseData')\r\n            );\r\n\r\n            const isRequired = hasLocalData && !migrationStatusData.isCompleted;\r\n\r\n            setMigrationStatus({\r\n                isRequired,\r\n                inProgress: false,\r\n                completed: migrationStatusData.isCompleted,\r\n                details: migrationStatusData\r\n            });\r\n\r\n            logger.info('Status migrazione controllato', { \r\n                isRequired, \r\n                hasLocalData,\r\n                completed: migrationStatusData.isCompleted \r\n            });\r\n\r\n        } catch (error) {\r\n            logger.error('Errore controllo migrazione', error);\r\n        }\r\n    };\r\n\r\n    // Funzioni di autenticazione con error handling\r\n\r\n    const login = async (email, password) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signInWithEmail(email, password);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Login completato');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il login. Riprova.';\r\n            logger.error('Errore login wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const register = async (email, password, displayName = null) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signUpWithEmail(email, password, displayName);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Registrazione completata');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante la registrazione. Riprova.';\r\n            logger.error('Errore registrazione wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const loginWithGoogle = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signInWithGoogle();\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Login Google completato');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il login con Google. Riprova.';\r\n            logger.error('Errore Google login wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signOutUser();\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Logout completato');\r\n            return { success: true };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il logout. Riprova.';\r\n            logger.error('Errore logout wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const resetPassword = async (email) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.resetPassword(email);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Email reset password inviata');\r\n            return { success: true };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore invio email reset. Riprova.';\r\n            logger.error('Errore reset password wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Gestione migrazione dati\r\n    const startMigration = async () => {\r\n        if (!user || migrationStatus.inProgress) {\r\n            return { success: false, error: 'Migrazione non possibile al momento' };\r\n        }\r\n\r\n        setMigrationStatus(prev => ({ ...prev, inProgress: true }));\r\n\r\n        try {\r\n            logger.info('Avvio migrazione dati...');\r\n            const result = await migrationService.migrateAllData();\r\n\r\n            if (result.success) {\r\n                setMigrationStatus({\r\n                    isRequired: false,\r\n                    inProgress: false,\r\n                    completed: true,\r\n                    report: result.report\r\n                });\r\n                logger.success('Migrazione completata con successo');\r\n                return { success: true, report: result.report };\r\n            } else {\r\n                setMigrationStatus(prev => ({ ...prev, inProgress: false }));\r\n                setError('Errore durante la migrazione dati');\r\n                return { success: false, error: result.error, report: result.report };\r\n            }\r\n\r\n        } catch (error) {\r\n            logger.error('Errore migrazione wrapper', error);\r\n            setMigrationStatus(prev => ({ ...prev, inProgress: false }));\r\n            setError('Errore imprevisto durante la migrazione');\r\n            return { success: false, error: error.message };\r\n        }\r\n    };\r\n\r\n    const skipMigration = () => {\r\n        setMigrationStatus({\r\n            isRequired: false,\r\n            inProgress: false,\r\n            completed: false,\r\n            skipped: true\r\n        });\r\n        logger.info('Migrazione saltata dall\\'utente');\r\n    };\r\n\r\n    // Utility functions\r\n    const isAuthenticated = () => !!user;\r\n    \r\n    const hasRole = (role) => {\r\n        // Implementazione futura per ruoli utente\r\n        return user?.customClaims?.[role] || false;\r\n    };\r\n\r\n    const clearError = () => setError(null);\r\n\r\n    // Context value\r\n    const contextValue = {\r\n        // Stato auth\r\n        user,\r\n        loading,\r\n        error,\r\n        migrationStatus,\r\n\r\n        // Funzioni auth\r\n        login,\r\n        register,\r\n        loginWithGoogle,\r\n        logout,\r\n        resetPassword,\r\n\r\n        // Migrazione\r\n        startMigration,\r\n        skipMigration,\r\n\r\n        // Utility\r\n        isAuthenticated,\r\n        hasRole,\r\n        clearError,\r\n        \r\n        // Servizi diretti (per casi avanzati)\r\n        authService,\r\n        migrationService\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Hook specializzati per casi d'uso comuni\r\n\r\n// Hook per proteggere componenti (richiede autenticazione)\r\nexport const useRequireAuth = (redirectTo = '/login') => {\r\n    const { user, loading } = useAuth();\r\n    \r\n    useEffect(() => {\r\n        if (!loading && !user && window.location.pathname !== redirectTo) {\r\n            window.location.href = redirectTo;\r\n        }\r\n    }, [user, loading, redirectTo]);\r\n\r\n    return { user, loading, isAuthenticated: !!user };\r\n};\r\n\r\n// Hook per redirect dopo login\r\nexport const useAuthRedirect = (redirectTo = '/') => {\r\n    const { user, loading } = useAuth();\r\n    \r\n    useEffect(() => {\r\n        if (!loading && user && window.location.pathname === '/login') {\r\n            window.location.href = redirectTo;\r\n        }\r\n    }, [user, loading, redirectTo]);\r\n\r\n    return { user, loading };\r\n};\r\n\r\n// HOC per proteggere componenti\r\nexport const withAuth = (Component, requireAuth = true) => {\r\n    return function AuthenticatedComponent(props) {\r\n        const { user, loading } = useAuth();\r\n        \r\n        if (loading) {\r\n            return (\r\n                <div className=\"auth-loading\">\r\n                    <div className=\"loading-spinner\">Caricamento...</div>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n        if (requireAuth && !user) {\r\n            return (\r\n                <div className=\"auth-required\">\r\n                    <h2>Accesso Richiesto</h2>\r\n                    <p>Devi effettuare il login per accedere a questa sezione.</p>\r\n                    <button onClick={() => window.location.href = '/login'}>\r\n                        Vai al Login\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n        return <Component {...props} />;\r\n    };\r\n};\r\n\r\nexport default AuthProvider;","// Firebase Configuration - Enterprise Grade Setup\r\n// Configurazione ottimizzata per performance, sicurezza e scalabilità\r\n\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, connectAuthEmulator } from 'firebase/auth';\r\nimport { getFirestore, connectFirestoreEmulator, enableNetwork, disableNetwork } from 'firebase/firestore';\r\nimport { getStorage, connectStorageEmulator } from 'firebase/storage';\r\nimport { getAnalytics, isSupported } from 'firebase/analytics';\r\n\r\n// Configurazione Firebase - DA SOSTITUIRE CON I TUOI VALORI REALI\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY || \"demo-api-key\",\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN || \"extraordinary-growth-app.firebaseapp.com\",\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID || \"extraordinary-growth-app\",\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET || \"extraordinary-growth-app.appspot.com\",\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID || \"1:123456789:web:abcdef123456\",\r\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID || \"G-XXXXXXXXXX\"\r\n};\r\n\r\n// Validazione configurazione\r\nconst validateConfig = (config) => {\r\n    const requiredKeys = ['apiKey', 'authDomain', 'projectId', 'storageBucket', 'messagingSenderId', 'appId'];\r\n    const missing = requiredKeys.filter(key => !config[key] || config[key].includes('demo') || config[key].includes('123456'));\r\n    \r\n    if (missing.length > 0) {\r\n        console.warn('🚨 Firebase Config Warning: Alcune chiavi sembrano essere demo values:', missing);\r\n        console.warn('📋 Per utilizzare Firebase in produzione, sostituisci i valori in .env.local');\r\n    }\r\n    \r\n    return config;\r\n};\r\n\r\n// Inizializzazione app con validazione\r\nconst validatedConfig = validateConfig(firebaseConfig);\r\nconst app = initializeApp(validatedConfig);\r\n\r\n// Inizializzazione servizi Firebase\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\nexport const storage = getStorage(app);\r\n\r\n// Inizializzazione Analytics condizionale\r\nlet analytics = null;\r\nisSupported().then(supported => {\r\n    if (supported) {\r\n        analytics = getAnalytics(app);\r\n        console.log('📊 Firebase Analytics inizializzato');\r\n    } else {\r\n        console.log('📊 Firebase Analytics non supportato in questo ambiente');\r\n    }\r\n});\r\n\r\nexport { analytics };\r\n\r\n// Configurazione ambiente sviluppo\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\nconst useEmulators = process.env.REACT_APP_USE_FIREBASE_EMULATORS === 'true';\r\n\r\nif (isDevelopment && useEmulators) {\r\n    console.log('🔧 Connessione agli emulatori Firebase...');\r\n    \r\n    // Connessione agli emulatori solo se non già connessi\r\n    if (!auth._delegate._config?.emulator) {\r\n        connectAuthEmulator(auth, 'http://localhost:9099');\r\n    }\r\n    \r\n    if (!db._delegate._databaseId?.database.includes('localhost')) {\r\n        connectFirestoreEmulator(db, 'localhost', 8080);\r\n    }\r\n    \r\n    if (!storage._delegate._host.includes('localhost')) {\r\n        connectStorageEmulator(storage, 'localhost', 9199);\r\n    }\r\n    \r\n    console.log('✅ Emulatori Firebase connessi');\r\n}\r\n\r\n// Utility per gestione connessione\r\nexport const connectionManager = {\r\n    enable: () => enableNetwork(db),\r\n    disable: () => disableNetwork(db),\r\n    \r\n    // Controlla stato connessione\r\n    checkConnection: async () => {\r\n        try {\r\n            await enableNetwork(db);\r\n            return true;\r\n        } catch (error) {\r\n            console.error('❌ Errore connessione Firebase:', error);\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\n// Configurazioni ottimizzate per performance\r\nexport const firestoreSettings = {\r\n    cacheSizeBytes: 50 * 1024 * 1024, // 50MB cache\r\n    experimentalForceLongPolling: false, // Usa WebSocket quando possibile\r\n    merge: true, // Abilita merge automatico\r\n    ignoreUndefinedProperties: true // Ignora proprietà undefined\r\n};\r\n\r\n// Helper per logging strutturato\r\nexport const logger = {\r\n    info: (message, data = null) => {\r\n        console.log(`ℹ️ [Firebase] ${message}`, data || '');\r\n    },\r\n    \r\n    error: (message, error = null) => {\r\n        console.error(`❌ [Firebase] ${message}`, error || '');\r\n    },\r\n    \r\n    warn: (message, data = null) => {\r\n        console.warn(`⚠️ [Firebase] ${message}`, data || '');\r\n    },\r\n    \r\n    success: (message, data = null) => {\r\n        console.log(`✅ [Firebase] ${message}`, data || '');\r\n    }\r\n};\r\n\r\n// Export dell'app per usi avanzati\r\nexport default app;\r\n\r\nlogger.success('Firebase configurato con successo');","import React from 'react';\n\nconst MotivationalQuotes = () => {\n    const legendaryQuotes = [\n        {\n            day: 1, // Lunedì\n            quote: \"Champions aren't made in the gyms. Champions are made from something deep inside them: a desire, a dream, a vision.\",\n            author: \"Muhammad Ali\",\n            context: \"Petto + Bicipiti - Inizia la settimana con la forza del campione\"\n        },\n        {\n            day: 2, // Martedì  \n            quote: \"The cave you fear to enter holds the treasure you seek.\",\n            author: \"Arnold Schwarzenegger\",\n            context: \"Dorso + Tricipiti - Affronta la paura, trova la forza\"\n        },\n        {\n            day: 3, // Mercoledì\n            quote: \"Strength does not come from physical capacity. It comes from an indomitable will.\",\n            author: \"Mahatma Gandhi (adattato da Kobe Bryant)\",\n            context: \"Gambe Complete - La vera forza viene dalla mente\"\n        },\n        {\n            day: 4, // Giovedì\n            quote: \"Recovery is not a sign of weakness, it's a strategy of champions.\",\n            author: \"LeBron James\",\n            context: \"Recupero Attivo - Il riposo è parte della vittoria\"\n        },\n        {\n            day: 5, // Venerdì\n            quote: \"Excellence is not a skill, it's an attitude.\",\n            author: \"Ralph Marston (filosofia Michael Jordan)\",\n            context: \"Spalle + Core - L'eccellenza è una scelta quotidiana\"\n        },\n        {\n            day: 6, // Sabato\n            quote: \"The body achieves what the mind believes.\",\n            author: \"Napoleon Hill (ispirato da Serena Williams)\",\n            context: \"Posteriori + Conditioning - Credi e raggiungerai\"\n        },\n        {\n            day: 0, // Domenica\n            quote: \"Rest when you're weary. Refresh and renew yourself, your body, your mind, your spirit. Then get back to work.\",\n            author: \"Ralph Marston\",\n            context: \"Riposo Completo - Rigenera per dominare\"\n        }\n    ];\n\n    const additionalQuotes = [\n        {\n            quote: \"I don't measure a man's success by how high he climbs but how high he bounces when he hits bottom.\",\n            author: \"George S. Patton\",\n            context: \"Per i giorni difficili\"\n        },\n        {\n            quote: \"The will to win, the desire to succeed, the urge to reach your full potential... these are the keys that will unlock the door to personal excellence.\",\n            author: \"Confucio (filosofia Kobe Bryant)\",\n            context: \"Quando manca la motivazione\"\n        },\n        {\n            quote: \"Pain is temporary. Quitting lasts forever.\",\n            author: \"Lance Armstrong\",\n            context: \"Durante l'allenamento intenso\"\n        },\n        {\n            quote: \"You have power over your mind - not outside events. Realize this, and you will find strength.\",\n            author: \"Marcus Aurelius (filosofia Tom Brady)\",\n            context: \"Controllo mentale\"\n        },\n        {\n            quote: \"The brick walls are there for a reason. The brick walls are not there to keep us out. The brick walls are there to give us a chance to show how badly we want something.\",\n            author: \"Randy Pausch (mentalità Cristiano Ronaldo)\",\n            context: \"Superare gli ostacoli\"\n        }\n    ];\n\n    const getTodayQuote = () => {\n        const today = new Date().getDay(); // 0 = Domenica, 1 = Lunedì, etc.\n        return legendaryQuotes.find(q => q.day === today) || legendaryQuotes[0];\n    };\n\n    const getRandomAdditionalQuote = () => {\n        return additionalQuotes[Math.floor(Math.random() * additionalQuotes.length)];\n    };\n\n    return {\n        getTodayQuote,\n        getRandomAdditionalQuote,\n        legendaryQuotes,\n        additionalQuotes\n    };\n};\n\nexport default MotivationalQuotes;","import React from 'react';\n\nconst CalendarStreak = () => {\n    const [currentDate, setCurrentDate] = React.useState(new Date());\n    const [streakData, setStreakData] = React.useState({});\n    const [monthlyStats, setMonthlyStats] = React.useState({});\n\n    const loadStreakData = () => {\n        const saved = localStorage.getItem('streakData');\n        if (saved) {\n            setStreakData(JSON.parse(saved));\n        }\n    };\n\n    const saveStreakData = (data) => {\n        localStorage.setItem('streakData', JSON.stringify(data));\n        setStreakData(data);\n    };\n\n    const markWorkoutCompleted = (date, workoutType, exercises = []) => {\n        const dateKey = date.toISOString().split('T')[0];\n        const updated = {\n            ...streakData,\n            [dateKey]: {\n                completed: true,\n                workoutType,\n                exercises,\n                timestamp: new Date().toISOString()\n            }\n        };\n        saveStreakData(updated);\n        calculateMonthlyStats(updated);\n    };\n\n    const calculateMonthlyStats = (data = streakData) => {\n        const currentMonth = currentDate.getMonth();\n        const currentYear = currentDate.getFullYear();\n        \n        const monthlyWorkouts = Object.keys(data).filter(dateKey => {\n            const date = new Date(dateKey);\n            return date.getMonth() === currentMonth && \n                   date.getFullYear() === currentYear &&\n                   data[dateKey].completed;\n        }).length;\n\n        const currentStreak = calculateCurrentStreak(data);\n        const longestStreak = calculateLongestStreak(data);\n        const weeklyAverage = calculateWeeklyAverage(data);\n\n        setMonthlyStats({\n            monthlyWorkouts,\n            currentStreak,\n            longestStreak,\n            weeklyAverage,\n            lastUpdated: new Date()\n        });\n    };\n\n    const calculateCurrentStreak = (data) => {\n        const today = new Date();\n        let streak = 0;\n        let checkDate = new Date(today);\n\n        while (checkDate) {\n            const dateKey = checkDate.toISOString().split('T')[0];\n            if (data[dateKey] && data[dateKey].completed) {\n                streak++;\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else if (streak === 0 && checkDate.toDateString() === today.toDateString()) {\n                // Se oggi non è completato, controlla ieri\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else {\n                break;\n            }\n            \n            // Evita loop infiniti\n            if (streak > 365) break;\n        }\n        \n        return streak;\n    };\n\n    const calculateLongestStreak = (data) => {\n        let maxStreak = 0;\n        let currentStreak = 0;\n        \n        const sortedDates = Object.keys(data)\n            .filter(key => data[key].completed)\n            .sort();\n        \n        for (let i = 0; i < sortedDates.length; i++) {\n            if (i === 0) {\n                currentStreak = 1;\n            } else {\n                const prevDate = new Date(sortedDates[i - 1]);\n                const currDate = new Date(sortedDates[i]);\n                const daysDiff = (currDate - prevDate) / (1000 * 60 * 60 * 24);\n                \n                if (daysDiff === 1) {\n                    currentStreak++;\n                } else {\n                    maxStreak = Math.max(maxStreak, currentStreak);\n                    currentStreak = 1;\n                }\n            }\n        }\n        \n        return Math.max(maxStreak, currentStreak);\n    };\n\n    const calculateWeeklyAverage = (data) => {\n        const fourWeeksAgo = new Date();\n        fourWeeksAgo.setDate(fourWeeksAgo.getDate() - 28);\n        \n        const recentWorkouts = Object.keys(data).filter(dateKey => {\n            const date = new Date(dateKey);\n            return date >= fourWeeksAgo && data[dateKey].completed;\n        }).length;\n        \n        return (recentWorkouts / 4).toFixed(1);\n    };\n\n    const getDaysInMonth = (date) => {\n        const year = date.getFullYear();\n        const month = date.getMonth();\n        const firstDay = new Date(year, month, 1);\n        const lastDay = new Date(year, month + 1, 0);\n        const daysInMonth = lastDay.getDate();\n        const startingDayOfWeek = firstDay.getDay();\n\n        const days = [];\n        \n        // Aggiungi giorni vuoti per allineare il calendario\n        for (let i = 0; i < startingDayOfWeek; i++) {\n            days.push(null);\n        }\n        \n        // Aggiungi tutti i giorni del mese\n        for (let day = 1; day <= daysInMonth; day++) {\n            const currentDay = new Date(year, month, day);\n            const dateKey = currentDay.toISOString().split('T')[0];\n            days.push({\n                date: currentDay,\n                day,\n                isCompleted: streakData[dateKey] && streakData[dateKey].completed,\n                workoutType: streakData[dateKey] ? streakData[dateKey].workoutType : null,\n                isToday: currentDay.toDateString() === new Date().toDateString()\n            });\n        }\n        \n        return days;\n    };\n\n    const navigateMonth = (direction) => {\n        const newDate = new Date(currentDate);\n        newDate.setMonth(newDate.getMonth() + direction);\n        setCurrentDate(newDate);\n    };\n\n    const getStreakColor = (streak) => {\n        if (streak >= 30) return '#ff006e'; // Rosa intenso\n        if (streak >= 21) return '#ff9500'; // Arancione \n        if (streak >= 14) return '#00ff88'; // Verde\n        if (streak >= 7) return '#00ffff';  // Cyan\n        return '#ffffff'; // Bianco\n    };\n\n    const getWorkoutTypeEmoji = (type) => {\n        const emojiMap = {\n            'Petto + Bicipiti': '💪',\n            'Dorso + Tricipiti + Collo (A)': '🏋️',\n            'Gambe Complete': '🦵',\n            'Recupero Attivo': '🧘',\n            'Spalle Complete + Collo (B)': '💫',\n            'Posteriori + Conditioning': '🔥',\n            'Riposo Completo': '😴'\n        };\n        return emojiMap[type] || '💪';\n    };\n\n    React.useEffect(() => {\n        loadStreakData();\n    }, []);\n\n    React.useEffect(() => {\n        calculateMonthlyStats();\n    }, [streakData, currentDate]);\n\n    const monthNames = [\n        'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n        'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n    ];\n\n    const dayNames = ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab'];\n\n    return {\n        currentDate,\n        streakData,\n        monthlyStats,\n        markWorkoutCompleted,\n        getDaysInMonth,\n        navigateMonth,\n        getStreakColor,\n        getWorkoutTypeEmoji,\n        monthNames,\n        dayNames,\n        calculateCurrentStreak: () => calculateCurrentStreak(streakData)\n    };\n};\n\nexport default CalendarStreak;","import React from 'react';\n\nconst ExerciseTracker = () => {\n    const [exerciseData, setExerciseData] = React.useState({});\n    const [sessionProgress, setSessionProgress] = React.useState({});\n    const [personalRecords, setPersonalRecords] = React.useState({});\n\n    const loadExerciseData = () => {\n        const saved = localStorage.getItem('exerciseData');\n        if (saved) {\n            setExerciseData(JSON.parse(saved));\n        }\n        \n        const savedPR = localStorage.getItem('personalRecords');\n        if (savedPR) {\n            setPersonalRecords(JSON.parse(savedPR));\n        }\n    };\n\n    const saveExerciseData = (data) => {\n        localStorage.setItem('exerciseData', JSON.stringify(data));\n        setExerciseData(data);\n    };\n\n    const savePersonalRecords = (data) => {\n        localStorage.setItem('personalRecords', JSON.stringify(data));\n        setPersonalRecords(data);\n    };\n\n    const markExerciseCompleted = (exerciseName, sets, reps, weight, notes = '', rir = null) => {\n        const today = new Date().toISOString().split('T')[0];\n        const exerciseId = `${exerciseName}_${today}`;\n        \n        const exerciseEntry = {\n            id: exerciseId,\n            exerciseName,\n            date: today,\n            sets: parseInt(sets),\n            reps: parseInt(reps),\n            weight: parseFloat(weight),\n            notes,\n            rir,\n            timestamp: new Date().toISOString(),\n            completed: true\n        };\n\n        const updated = {\n            ...exerciseData,\n            [exerciseId]: exerciseEntry\n        };\n        \n        saveExerciseData(updated);\n        \n        // Aggiorna record personali se necessario\n        updatePersonalRecord(exerciseName, weight, reps);\n        \n        // Aggiorna progresso sessione\n        updateSessionProgress(exerciseName);\n        \n        return exerciseEntry;\n    };\n\n    const updatePersonalRecord = (exerciseName, weight, reps) => {\n        const oneRepMax = calculateOneRepMax(weight, reps);\n        const currentPR = personalRecords[exerciseName] || { weight: 0, reps: 0, oneRepMax: 0, date: null };\n        \n        if (oneRepMax > currentPR.oneRepMax || \n            (weight > currentPR.weight && reps >= currentPR.reps)) {\n            \n            const updatedPR = {\n                ...personalRecords,\n                [exerciseName]: {\n                    weight: parseFloat(weight),\n                    reps: parseInt(reps),\n                    oneRepMax,\n                    date: new Date().toISOString(),\n                    previousRecord: currentPR.oneRepMax\n                }\n            };\n            \n            savePersonalRecords(updatedPR);\n            \n            // Notifica nuovo record\n            return true;\n        }\n        \n        return false;\n    };\n\n    const calculateOneRepMax = (weight, reps) => {\n        // Formula Epley: 1RM = w * (1 + r/30)\n        return Math.round(weight * (1 + reps / 30));\n    };\n\n    const updateSessionProgress = (exerciseName) => {\n        const today = new Date().toISOString().split('T')[0];\n        const todayExercises = Object.values(exerciseData).filter(ex => \n            ex.date === today && ex.completed\n        );\n        \n        setSessionProgress(prev => ({\n            ...prev,\n            [exerciseName]: true,\n            totalCompleted: todayExercises.length + 1\n        }));\n    };\n\n    const getExerciseHistory = (exerciseName, limit = 10) => {\n        return Object.values(exerciseData)\n            .filter(ex => ex.exerciseName === exerciseName)\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .slice(0, limit);\n    };\n\n    const getTodayProgress = (workoutExercises) => {\n        const today = new Date().toISOString().split('T')[0];\n        const completedToday = Object.values(exerciseData).filter(ex => \n            ex.date === today && ex.completed\n        );\n        \n        const completed = completedToday.length;\n        const total = workoutExercises ? workoutExercises.length : 0;\n        const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;\n        \n        return {\n            completed,\n            total,\n            percentage,\n            remaining: Math.max(0, total - completed)\n        };\n    };\n\n    const getWeeklyStats = () => {\n        const oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n        \n        const weeklyExercises = Object.values(exerciseData).filter(ex => \n            new Date(ex.date) >= oneWeekAgo && ex.completed\n        );\n        \n        const totalSets = weeklyExercises.reduce((sum, ex) => sum + ex.sets, 0);\n        const totalReps = weeklyExercises.reduce((sum, ex) => sum + (ex.sets * ex.reps), 0);\n        const totalVolume = weeklyExercises.reduce((sum, ex) => sum + (ex.weight * ex.sets * ex.reps), 0);\n        const uniqueExercises = new Set(weeklyExercises.map(ex => ex.exerciseName)).size;\n        \n        return {\n            sessions: weeklyExercises.length,\n            totalSets,\n            totalReps,\n            totalVolume: Math.round(totalVolume),\n            uniqueExercises,\n            averageWeight: weeklyExercises.length > 0 ? \n                Math.round(weeklyExercises.reduce((sum, ex) => sum + ex.weight, 0) / weeklyExercises.length) : 0\n        };\n    };\n\n    const getMonthlyProgress = () => {\n        const oneMonthAgo = new Date();\n        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\n        \n        const monthlyExercises = Object.values(exerciseData).filter(ex => \n            new Date(ex.date) >= oneMonthAgo && ex.completed\n        );\n        \n        const workoutDays = new Set(monthlyExercises.map(ex => ex.date)).size;\n        const totalVolume = monthlyExercises.reduce((sum, ex) => \n            sum + (ex.weight * ex.sets * ex.reps), 0\n        );\n        \n        return {\n            workoutDays,\n            totalExercises: monthlyExercises.length,\n            totalVolume: Math.round(totalVolume),\n            averageVolume: workoutDays > 0 ? Math.round(totalVolume / workoutDays) : 0\n        };\n    };\n\n    const isExerciseCompletedToday = (exerciseName) => {\n        const today = new Date().toISOString().split('T')[0];\n        return Object.values(exerciseData).some(ex => \n            ex.exerciseName === exerciseName && \n            ex.date === today && \n            ex.completed\n        );\n    };\n\n    const getExerciseProgressColor = (exerciseName) => {\n        if (isExerciseCompletedToday(exerciseName)) {\n            return '#00ff88'; // Verde completato\n        }\n        \n        const history = getExerciseHistory(exerciseName, 3);\n        if (history.length === 0) {\n            return '#ffffff'; // Bianco nuovo esercizio\n        }\n        \n        // Analisi progressione\n        const lastWeight = history[0]?.weight || 0;\n        const avgWeight = history.reduce((sum, ex) => sum + ex.weight, 0) / history.length;\n        \n        if (lastWeight > avgWeight * 1.05) {\n            return '#ff9500'; // Arancione in progressione\n        } else if (lastWeight < avgWeight * 0.95) {\n            return '#ff006e'; // Rosa in calo\n        }\n        \n        return '#00ffff'; // Cyan stabile\n    };\n\n    React.useEffect(() => {\n        loadExerciseData();\n    }, []);\n\n    return {\n        exerciseData,\n        sessionProgress,\n        personalRecords,\n        markExerciseCompleted,\n        getExerciseHistory,\n        getTodayProgress,\n        getWeeklyStats,\n        getMonthlyProgress,\n        isExerciseCompletedToday,\n        getExerciseProgressColor,\n        updatePersonalRecord,\n        calculateOneRepMax\n    };\n};\n\nexport default ExerciseTracker;","import React from 'react';\n\nconst SupplementStack = () => {\n    const [supplementSchedule, setSupplementSchedule] = React.useState({});\n    const [takenToday, setTakenToday] = React.useState({});\n\n    const evidenceBasedSupplements = {\n        creatine: {\n            name: 'Creatina Monoidrato',\n            dosage: '3-5g',\n            timing: 'Post-workout o qualsiasi momento',\n            evidence: 'A+ (Oltre 500 studi)',\n            benefits: ['↑ Forza 5-15%', '↑ Potenza esplosiva', '↑ Volume allenamento', '↑ Massa muscolare'],\n            mechanism: 'Rigenera ATP per contrazioni muscolari ad alta intensità',\n            notes: 'Loading non necessario. Consistenza > timing. Funziona meglio con carboidrati.',\n            color: '#00ff88',\n            icon: '💪'\n        },\n        citrulline: {\n            name: 'L-Citrullina Malato',\n            dosage: '6-8g',\n            timing: '30-45min pre-workout',\n            evidence: 'A (Multipli RCT)',\n            benefits: ['↑ Pump muscolare', '↑ Resistenza', '↓ DOMS', '↑ Ossido nitrico'],\n            mechanism: 'Precursore arginina → NO → vasodilatazione',\n            notes: 'Più efficace della L-Arginina. Sinergia con caffeina.',\n            color: '#ff9500',\n            icon: '🔥'\n        },\n        betaAlanine: {\n            name: 'Beta-Alanina',\n            dosage: '3-5g',\n            timing: 'Divisa in 2-3 dosi giornaliere',\n            evidence: 'A (Evidenza consolidata)',\n            benefits: ['↑ Resistenza muscolare', '↓ Fatica 1-4 min sforzo', '↑ Volume alto-rep'],\n            mechanism: 'Aumenta carnosina muscolare → buffer acido lattico',\n            notes: 'Loading 2-4 settimane. Possibile parestesia (innocua).',\n            color: '#00ffff',\n            icon: '⚡'\n        },\n        omega3: {\n            name: 'Omega-3 EPA/DHA',\n            dosage: '2-3g EPA+DHA',\n            timing: 'Con pasti contenenti grassi',\n            evidence: 'A+ (Migliaia di studi)',\n            benefits: ['↓ Infiammazione', '↑ Recupero', '↑ Sintesi proteica', '↑ Salute cardiovascolare'],\n            mechanism: 'Modulazione cascata infiammatoria e membrane cellulari',\n            notes: 'Ratio EPA:DHA 2:1 ottimale. Qualità > quantità.',\n            color: '#0099ff',\n            icon: '🐟'\n        },\n        caffeine: {\n            name: 'Caffeina',\n            dosage: '200-400mg',\n            timing: '30-45min pre-workout',\n            evidence: 'A+ (Gold standard)',\n            benefits: ['↑ Focus', '↑ Energia', '↑ Performance', '↑ Metabolismo grassi'],\n            mechanism: 'Antagonista adenosina → vigilanza + mobilizzazione grassi',\n            notes: 'Tolleranza sviluppa rapidamente. Ciclare 1-2 settimane ogni mese.',\n            color: '#8B4513',\n            icon: '☕'\n        },\n        vitaminD: {\n            name: 'Vitamina D3',\n            dosage: '2000-4000 IU',\n            timing: 'Con pasto contenente grassi',\n            evidence: 'A (Critico se carente)',\n            benefits: ['↑ Testosterone', '↑ Forza', '↑ Salute ossea', '↑ Sistema immunitario'],\n            mechanism: 'Regolazione ormonale e assorbimento calcio',\n            notes: 'Test ematico raccomandato. Target: 30-50 ng/mL.',\n            color: '#FFD700',\n            icon: '☀️'\n        }\n    };\n\n    const removedSupplements = {\n        hmb: 'Scarsa evidenza per atleti allenati. Solo utile per anziani/principianti.',\n        forskolin: 'Studi inconsistenti. Nessun beneficio provato su composizione corporea.',\n        rAla: 'Evidenza limitata. Costo-beneficio sfavorevole vs omega-3.',\n        bcaa: 'Inutili se assumi proteine complete. Whey protein superiore.',\n        glutamine: 'Non ergogenica in soggetti sani. Solo utile in immunodepressione.'\n    };\n\n    const getOptimalTiming = (currentTime) => {\n        const hour = currentTime.getHours();\n        const recommendations = [];\n\n        // Mattino (6-10)\n        if (hour >= 6 && hour <= 10) {\n            recommendations.push({\n                supplement: 'vitaminD',\n                reason: 'Assorbimento ottimale con prima colazione'\n            });\n            recommendations.push({\n                supplement: 'omega3',\n                reason: 'Con grassi della colazione per biodisponibilità'\n            });\n        }\n\n        // Pre-workout (dipende dall'orario allenamento)\n        const workoutHour = 18; // Assumiamo allenamento serale\n        if (hour === workoutHour - 1) {\n            recommendations.push({\n                supplement: 'caffeine',\n                reason: '30-45min prima allenamento per picco energetico'\n            });\n            recommendations.push({\n                supplement: 'citrulline',\n                reason: 'Pre-workout per pump e resistenza'\n            });\n        }\n\n        // Post-workout\n        if (hour === workoutHour + 1) {\n            recommendations.push({\n                supplement: 'creatine',\n                reason: 'Post-workout con carboidrati per uptake'\n            });\n        }\n\n        // Sera\n        if (hour >= 20) {\n            recommendations.push({\n                supplement: 'betaAlanine',\n                reason: 'Loading serale per evitare parestesia diurna'\n            });\n        }\n\n        return recommendations;\n    };\n\n    const markSupplementTaken = (supplementKey, dosage, timing) => {\n        const today = new Date().toISOString().split('T')[0];\n        const entryKey = `${supplementKey}_${today}`;\n\n        const taken = {\n            ...takenToday,\n            [entryKey]: {\n                supplement: supplementKey,\n                dosage,\n                timing,\n                timestamp: new Date().toISOString(),\n                taken: true\n            }\n        };\n\n        setTakenToday(taken);\n        localStorage.setItem('supplementsTakenToday', JSON.stringify(taken));\n\n        // Salva nello storico\n        const history = JSON.parse(localStorage.getItem('supplementsHistory') || '{}');\n        history[entryKey] = taken[entryKey];\n        localStorage.setItem('supplementsHistory', JSON.stringify(history));\n    };\n\n    const isSupplementTakenToday = (supplementKey) => {\n        const today = new Date().toISOString().split('T')[0];\n        const entryKey = `${supplementKey}_${today}`;\n        return takenToday[entryKey] && takenToday[entryKey].taken;\n    };\n\n    const getSupplementProgress = () => {\n        const totalSupplements = Object.keys(evidenceBasedSupplements).length;\n        const takenCount = Object.keys(evidenceBasedSupplements).filter(key => \n            isSupplementTakenToday(key)\n        ).length;\n        \n        return {\n            taken: takenCount,\n            total: totalSupplements,\n            percentage: Math.round((takenCount / totalSupplements) * 100)\n        };\n    };\n\n    const getWeeklySupplementStats = () => {\n        const history = JSON.parse(localStorage.getItem('supplementsHistory') || '{}');\n        const oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n        const weeklyEntries = Object.values(history).filter(entry => \n            new Date(entry.timestamp) >= oneWeekAgo\n        );\n\n        const consistency = {};\n        Object.keys(evidenceBasedSupplements).forEach(key => {\n            const supplementEntries = weeklyEntries.filter(entry => entry.supplement === key);\n            consistency[key] = {\n                taken: supplementEntries.length,\n                percentage: Math.round((supplementEntries.length / 7) * 100)\n            };\n        });\n\n        return consistency;\n    };\n\n    const createSupplementPlan = (workoutSchedule, goals) => {\n        const plan = {\n            core: ['creatine', 'omega3', 'vitaminD'], // Sempre consigliati\n            performance: ['caffeine', 'citrulline'], // Per performance\n            endurance: ['betaAlanine'], // Per resistenza\n            timing: {\n                morning: ['vitaminD', 'omega3'],\n                preWorkout: ['caffeine', 'citrulline'],\n                postWorkout: ['creatine'],\n                evening: ['betaAlanine']\n            }\n        };\n\n        return plan;\n    };\n\n    const loadTodaysSupplements = () => {\n        const today = new Date().toISOString().split('T')[0];\n        const saved = localStorage.getItem('supplementsTakenToday');\n        if (saved) {\n            const data = JSON.parse(saved);\n            // Filtra solo quelli di oggi\n            const todayData = {};\n            Object.keys(data).forEach(key => {\n                if (key.includes(today)) {\n                    todayData[key] = data[key];\n                }\n            });\n            setTakenToday(todayData);\n        }\n    };\n\n    React.useEffect(() => {\n        loadTodaysSupplements();\n    }, []);\n\n    return {\n        evidenceBasedSupplements,\n        removedSupplements,\n        takenToday,\n        markSupplementTaken,\n        isSupplementTakenToday,\n        getSupplementProgress,\n        getWeeklySupplementStats,\n        getOptimalTiming,\n        createSupplementPlan\n    };\n};\n\nexport default SupplementStack;","import React from 'react';\n\nconst RecoveryProtocol = () => {\n    const [recoveryLog, setRecoveryLog] = React.useState({});\n    const [todayRecovery, setTodayRecovery] = React.useState({});\n\n    const thermoTherapyProtocols = {\n        sauna: {\n            name: 'Sauna Finlandese',\n            temperature: '80-100°C',\n            humidity: '10-20%',\n            duration: '15-20 min',\n            timing: 'Immediatamente post-workout',\n            mechanism: 'Heat Shock Proteins → Anabolismo + Cardiovascolare',\n            benefits: [\n                '↑ Growth Hormone 24x',\n                '↑ Heat Shock Proteins (riparazione)',\n                '↑ Vasodilatazione (nutrienti muscolari)', \n                '↑ Eliminazione metaboliti'\n            ],\n            protocol: [\n                '5-10 min iniziali per adattamento',\n                '2-3 sessioni da 15-20 min',\n                'Pause 2-3 min aria fresca tra sessioni',\n                'Idratazione: 500ml acqua + elettroliti'\n            ],\n            precautions: [\n                'Mai subito dopo pasti abbondanti',\n                'Stop se nausea/vertigini/palpitazioni',\n                'Controindicato: ipertensione non controllata'\n            ],\n            scientificEvidence: 'A+ (Rhonda Patrick, Joyner studies)',\n            color: '#ff6b35',\n            icon: '🔥'\n        },\n        steamRoom: {\n            name: 'Bagno Turco',\n            temperature: '40-50°C',\n            humidity: '90-100%',\n            duration: '10-15 min',\n            timing: 'Giorni rest per mobilità/relax',\n            mechanism: 'Umidità → Idratazione tessuti + Mobilità articolare',\n            benefits: [\n                '↑ Mobilità articolare',\n                '↑ Idratazione tessuto connettivo',\n                '↓ Rigidità muscolare',\n                '↑ Eliminazione tossine via pelle'\n            ],\n            protocol: [\n                '10-15 min sessione unica',\n                'Respirazione profonda (vapori benefici)',\n                'Stretching dolce durante sessione',\n                'Doccia fredda finale (contrasto)'\n            ],\n            precautions: [\n                'Attenzione claustrofobia',\n                'Igiene: sempre su asciugamano',\n                'Idratazione pre/post obbligatoria'\n            ],\n            scientificEvidence: 'B+ (Benefici mobilità documentati)',\n            color: '#4ecdc4',\n            icon: '💨'\n        },\n        iceBath: {\n            name: 'Crioterapia (Ice Bath)',\n            temperature: '8-12°C',\n            humidity: 'N/A',\n            duration: '10-15 min',\n            timing: 'SOLO ≥4h post-workout (mai prima)',\n            mechanism: 'Vasocostrizione → Recovery neurologico + Anti-infiammatorio',\n            benefits: [\n                '↓ Infiammazione acuta',\n                '↑ Recovery Sistema Nervoso',\n                '↑ Resilienza mentale',\n                '↓ Percezione fatica'\n            ],\n            protocol: [\n                'Graduale: inizia 15°C → 10°C → 8°C',\n                '2-3 min prime volte → 10-15 min target',\n                'Respirazione controllata (Wim Hof)',\n                'Riscaldamento graduale post-immersione'\n            ],\n            precautions: [\n                'MAI nelle 4h post-workout (blocca adattamenti)',\n                'Controindicato: problemi cardiaci',\n                'Supervisione iniziale raccomandata'\n            ],\n            scientificEvidence: 'A- (Timing critico per efficacia)',\n            color: '#74b9ff',\n            icon: '🧊'\n        }\n    };\n\n    const contrastTherapy = {\n        name: 'Terapia Contrasto (Hot/Cold)',\n        protocol: [\n            'Sauna 15 min (80-90°C)',\n            'Doccia fredda 1 min (15°C)',\n            'Ripeti ciclo 3-4 volte',\n            'Termina sempre con freddo'\n        ],\n        benefits: [\n            'Pump vascolare (vasodilatazione/costrizione)',\n            'Massimo stimolo circolatorio',\n            'Recovery accelerata',\n            'Resilienza termica'\n        ],\n        timing: 'Post-workout giorni intensi',\n        scientificEvidence: 'A (Scandinavian protocols)',\n        color: '#fd79a8',\n        icon: '🌡️'\n    };\n\n    const optimalTiming = {\n        postWorkout: {\n            immediate: ['sauna'],\n            after2h: ['steamRoom', 'contrastTherapy'],\n            after4h: ['iceBath'],\n            nextMorning: ['sauna leggera', 'steamRoom']\n        },\n        restDays: {\n            morning: ['steamRoom', 'sauna leggera'],\n            evening: ['iceBath', 'contrastTherapy']\n        },\n        competition: {\n            before: 'Evitare ice bath 48h prima',\n            after: 'Full protocol per recovery rapido'\n        }\n    };\n\n    const biohacking = {\n        breathwork: {\n            name: 'Wim Hof Method',\n            protocol: '30 respiri profondi → apnea → ripeti 3 cicli',\n            benefits: 'Adattamento stress termico + controllo SNA',\n            timing: 'Pre ice bath o standalone'\n        },\n        supplements: {\n            preSauna: 'Magnesio 400mg (vasodilatazione)',\n            preIceBath: 'L-Theanina 200mg (calma mentale)',\n            postBoth: 'Elettroliti + Vitamina C'\n        },\n        monitoring: {\n            heartRate: 'HRV pre/post per valutare recovery',\n            bodyTemp: 'Termometro infrarossi per tracking',\n            subjective: 'Scale 1-10 per energia/dolori'\n        }\n    };\n\n    const markRecoverySession = (therapy, duration, temperature, notes, effectiveness) => {\n        const today = new Date().toISOString().split('T')[0];\n        const sessionId = `${therapy}_${Date.now()}`;\n\n        const session = {\n            id: sessionId,\n            date: today,\n            therapy,\n            duration: parseInt(duration),\n            temperature: parseFloat(temperature),\n            notes,\n            effectiveness: parseInt(effectiveness),\n            timestamp: new Date().toISOString()\n        };\n\n        const updatedLog = {\n            ...recoveryLog,\n            [sessionId]: session\n        };\n\n        setRecoveryLog(updatedLog);\n        localStorage.setItem('recoveryLog', JSON.stringify(updatedLog));\n\n        // Aggiorna sessioni di oggi\n        const todaySessions = Object.values(updatedLog).filter(s => s.date === today);\n        setTodayRecovery({\n            ...todayRecovery,\n            sessions: todaySessions,\n            totalTime: todaySessions.reduce((sum, s) => sum + s.duration, 0)\n        });\n    };\n\n    const getRecoveryRecommendation = (lastWorkout, workoutIntensity, stressLevel) => {\n        const recommendations = [];\n\n        // Basato su timing ultimo workout\n        const hoursSinceWorkout = lastWorkout ? \n            (new Date() - new Date(lastWorkout)) / (1000 * 60 * 60) : 24;\n\n        if (hoursSinceWorkout < 2) {\n            recommendations.push({\n                therapy: 'sauna',\n                priority: 'Alta',\n                reason: 'Finestra anabolica ottimale per heat shock proteins'\n            });\n        } else if (hoursSinceWorkout >= 4) {\n            recommendations.push({\n                therapy: 'iceBath',\n                priority: 'Media',\n                reason: 'Recovery Sistema Nervoso senza interferire adattamenti'\n            });\n        }\n\n        // Basato su intensità workout\n        if (workoutIntensity >= 8) {\n            recommendations.push({\n                therapy: 'contrastTherapy',\n                priority: 'Alta',\n                reason: 'Recovery accelerata per sessioni ad alta intensità'\n            });\n        }\n\n        // Basato su stress/recovery\n        if (stressLevel >= 7) {\n            recommendations.push({\n                therapy: 'steamRoom',\n                priority: 'Media',\n                reason: 'Relax parasimpatico per gestione stress'\n            });\n        }\n\n        return recommendations;\n    };\n\n    const getRecoveryStats = () => {\n        const last7Days = Object.values(recoveryLog).filter(session => {\n            const sessionDate = new Date(session.date);\n            const weekAgo = new Date();\n            weekAgo.setDate(weekAgo.getDate() - 7);\n            return sessionDate >= weekAgo;\n        });\n\n        const stats = {\n            totalSessions: last7Days.length,\n            totalTime: last7Days.reduce((sum, s) => sum + s.duration, 0),\n            averageEffectiveness: last7Days.length > 0 ? \n                Math.round(last7Days.reduce((sum, s) => sum + s.effectiveness, 0) / last7Days.length) : 0,\n            therapyBreakdown: {}\n        };\n\n        // Breakdown per terapia\n        Object.keys(thermoTherapyProtocols).forEach(therapy => {\n            const sessions = last7Days.filter(s => s.therapy === therapy);\n            stats.therapyBreakdown[therapy] = {\n                sessions: sessions.length,\n                time: sessions.reduce((sum, s) => sum + s.duration, 0)\n            };\n        });\n\n        return stats;\n    };\n\n    const loadRecoveryData = () => {\n        const saved = localStorage.getItem('recoveryLog');\n        if (saved) {\n            setRecoveryLog(JSON.parse(saved));\n        }\n\n        // Carica sessioni di oggi\n        const today = new Date().toISOString().split('T')[0];\n        const todaySessions = Object.values(JSON.parse(saved || '{}')).filter(s => s.date === today);\n        setTodayRecovery({\n            sessions: todaySessions,\n            totalTime: todaySessions.reduce((sum, s) => sum + s.duration, 0)\n        });\n    };\n\n    React.useEffect(() => {\n        loadRecoveryData();\n    }, []);\n\n    return {\n        thermoTherapyProtocols,\n        contrastTherapy,\n        optimalTiming,\n        biohacking,\n        recoveryLog,\n        todayRecovery,\n        markRecoverySession,\n        getRecoveryRecommendation,\n        getRecoveryStats\n    };\n};\n\nexport default RecoveryProtocol;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MotivationalQuotes from './MotivationalQuotes';\r\nimport CalendarStreak from './CalendarStreak';\r\nimport ExerciseTracker from './ExerciseTracker';\r\nimport SupplementStack from './SupplementStack';\r\nimport RecoveryProtocol from './RecoveryProtocol';\r\n\r\nconst Dashboard = () => {\r\n    const quotesHook = MotivationalQuotes();\r\n    const calendarHook = CalendarStreak();\r\n    const exerciseHook = ExerciseTracker();\r\n    const supplementsHook = SupplementStack();\r\n    const recoveryHook = RecoveryProtocol();\r\n    \r\n    const [dashboardData, setDashboardData] = React.useState({\r\n        currentWeight: 0,\r\n        muscleGain: 0,\r\n        workoutSessions: 0,\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        daysActive: 0,\r\n        lastWorkout: null,\r\n        currentStreak: 0\r\n    });\r\n    \r\n    const [todayWorkout, setTodayWorkout] = React.useState(null);\r\n    const [goals12Week, setGoals12Week] = React.useState({\r\n        startWeight: 75,\r\n        targetWeight: 80,\r\n        targetBench: 100,\r\n        targetSquat: 140,\r\n        targetDeadlift: 160,\r\n        startDate: new Date(),\r\n        weeksCompleted: 0\r\n    });\r\n    \r\n    const getTodayWorkout = () => {\r\n        const workoutPlan = {\r\n            1: { name: 'Petto + Bicipiti', exercises: 7, focus: 'Upper Power' },\r\n            2: { name: 'Dorso + Tricipiti + Collo (A)', exercises: 10, focus: 'Pull Strength' },\r\n            3: { name: 'Gambe Complete', exercises: 7, focus: 'Lower Power' },\r\n            4: { name: 'Recupero Attivo', exercises: 3, focus: 'Recovery' },\r\n            5: { name: 'Spalle Complete + Collo (B)', exercises: 13, focus: 'Delts 3D' },\r\n            6: { name: 'Posteriori + Conditioning', exercises: 7, focus: 'Athletic' },\r\n            0: { name: 'Riposo Completo', exercises: 4, focus: 'Rest' }\r\n        };\r\n        \r\n        const today = new Date().getDay();\r\n        return workoutPlan[today];\r\n    };\r\n    \r\n    const loadDashboardData = () => {\r\n        const progressData = JSON.parse(localStorage.getItem('progressData') || '[]');\r\n        const timeStats = JSON.parse(localStorage.getItem('timeStats') || '{}');\r\n        const workoutSessions = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        const goals = JSON.parse(localStorage.getItem('goals12Week') || '{}');\r\n        \r\n        const latestProgress = progressData[0];\r\n        const firstProgress = progressData[progressData.length - 1];\r\n        \r\n        const today = new Date();\r\n        const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n        const recentSessions = workoutSessions.filter(session => \r\n            new Date(session.date) >= oneWeekAgo\r\n        );\r\n        \r\n        setDashboardData({\r\n            currentWeight: latestProgress?.weight || goals.startWeight || 75,\r\n            muscleGain: latestProgress && firstProgress ? \r\n                (parseFloat(latestProgress.muscleMass) - parseFloat(firstProgress.muscleMass)) : 0,\r\n            workoutSessions: workoutSessions.length,\r\n            totalWorkoutTime: timeStats.totalWorkoutTime || 0,\r\n            weeklyTime: timeStats.weeklyTime || 0,\r\n            daysActive: new Set(workoutSessions.map(s => s.date.split('T')[0])).size,\r\n            lastWorkout: workoutSessions[0]?.date || null,\r\n            currentStreak: calendarHook.calculateCurrentStreak()\r\n        });\r\n        \r\n        setTodayWorkout(getTodayWorkout());\r\n        \r\n        if (goals.startDate) {\r\n            const weeksCompleted = Math.floor((today - new Date(goals.startDate)) / (7 * 24 * 60 * 60 * 1000));\r\n            setGoals12Week({...goals, weeksCompleted});\r\n        }\r\n    };\r\n    \r\n    const calculateStreak = (sessions) => {\r\n        if (sessions.length === 0) return 0;\r\n        \r\n        const today = new Date();\r\n        let streak = 0;\r\n        const sortedDates = [...new Set(sessions.map(s => s.date.split('T')[0]))].sort().reverse();\r\n        \r\n        for (let i = 0; i < sortedDates.length; i++) {\r\n            const sessionDate = new Date(sortedDates[i]);\r\n            const daysDiff = Math.floor((today - sessionDate) / (1000 * 60 * 60 * 24));\r\n            \r\n            if (daysDiff <= i + 1) {\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return streak;\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n    \r\n    const todayQuote = quotesHook.getTodayQuote();\r\n    const todayProgress = exerciseHook.getTodayProgress(todayWorkout?.exercises);\r\n    const supplementProgress = supplementsHook.getSupplementProgress();\r\n    const weeklyStats = exerciseHook.getWeeklyStats();\r\n    const recoveryStats = recoveryHook.getRecoveryStats();\r\n    \r\n    React.useEffect(() => {\r\n        loadDashboardData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <header className=\"dashboard-header\">\r\n                <h1>🏆 FISICO DELLA MADONNA</h1>\r\n                <p className=\"tagline\">\"L'eccellenza non è un atto, ma un'abitudine\" - Aristotele</p>\r\n            </header>\r\n\r\n            {/* MOTIVATIONAL QUOTE OF THE DAY */}\r\n            <div className=\"daily-motivation\">\r\n                <div className=\"quote-card\">\r\n                    <h3>💭 Frase del Giorno</h3>\r\n                    <blockquote>\r\n                        \"{todayQuote.quote}\"\r\n                        <footer>— {todayQuote.author}</footer>\r\n                    </blockquote>\r\n                    <p className=\"quote-context\">{todayQuote.context}</p>\r\n                </div>\r\n            </div>\r\n\r\n            {/* TODAY'S WORKOUT PREVIEW */}\r\n            <div className=\"today-workout-preview\">\r\n                <h3>🎯 Oggi: {todayWorkout?.name}</h3>\r\n                <div className=\"workout-quick-stats\">\r\n                    <span className=\"workout-focus\">{todayWorkout?.focus}</span>\r\n                    <span className=\"workout-exercises\">{todayWorkout?.exercises} esercizi</span>\r\n                    <span className={`workout-progress ${todayProgress.percentage === 100 ? 'completed' : ''}`}>\r\n                        {todayProgress.completed}/{todayProgress.total} completati ({todayProgress.percentage}%)\r\n                    </span>\r\n                </div>\r\n                <div className=\"progress-bar\">\r\n                    <div \r\n                        className=\"progress-fill\" \r\n                        style={{width: `${todayProgress.percentage}%`}}\r\n                    ></div>\r\n                </div>\r\n                <Link to=\"/workout\" className=\"start-workout-btn\">\r\n                    {todayProgress.percentage === 0 ? '🚀 INIZIA WORKOUT' : \r\n                     todayProgress.percentage === 100 ? '✅ COMPLETATO' : \r\n                     '▶️ CONTINUA WORKOUT'}\r\n                </Link>\r\n            </div>\r\n\r\n            {/* STREAK CALENDAR */}\r\n            <div className=\"streak-calendar-mini\">\r\n                <h3>📅 Calendario Streak</h3>\r\n                <div className=\"calendar-grid\">\r\n                    {calendarHook.getDaysInMonth(calendarHook.currentDate).slice(-7).map((day, index) => (\r\n                        <div key={index} className={`calendar-day-mini ${\r\n                            day?.isCompleted ? 'completed' : day?.isToday ? 'today' : ''\r\n                        }`}>\r\n                            <span className=\"day-number\">{day?.day || ''}</span>\r\n                            {day?.isCompleted && <span className=\"workout-emoji\">{calendarHook.getWorkoutTypeEmoji(day.workoutType)}</span>}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"streak-stats\">\r\n                    <span className=\"current-streak\" style={{color: calendarHook.getStreakColor(dashboardData.currentStreak)}}>\r\n                        🔥 {dashboardData.currentStreak} giorni\r\n                    </span>\r\n                    <span className=\"monthly-total\">\r\n                        📊 {calendarHook.monthlyStats.monthlyWorkouts || 0} questo mese\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PERFORMANCE DASHBOARD */}\r\n            <div className=\"performance-dashboard\">\r\n                <h3>⚡ Performance Overview</h3>\r\n                <div className=\"perf-grid\">\r\n                    <div className=\"perf-card strength\">\r\n                        <h4>💪 Forza</h4>\r\n                        <p className=\"perf-value\">{weeklyStats.totalVolume || 0}kg</p>\r\n                        <p className=\"perf-label\">Volume Settimanale</p>\r\n                    </div>\r\n                    <div className=\"perf-card volume\">\r\n                        <h4>🏋️ Volume</h4>\r\n                        <p className=\"perf-value\">{weeklyStats.totalSets || 0}</p>\r\n                        <p className=\"perf-label\">Serie Settimanali</p>\r\n                    </div>\r\n                    <div className=\"perf-card consistency\">\r\n                        <h4>🎯 Consistenza</h4>\r\n                        <p className=\"perf-value\">{Math.round(((dashboardData.currentStreak / 30) * 100))}%</p>\r\n                        <p className=\"perf-label\">Streak Rate</p>\r\n                    </div>\r\n                    <div className=\"perf-card supplements\">\r\n                        <h4>💊 Stack</h4>\r\n                        <p className=\"perf-value\">{supplementProgress.percentage}%</p>\r\n                        <p className=\"perf-label\">Integratori Oggi</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* 12-WEEK GOALS PROGRESS */}\r\n            <div className=\"goals-progress\">\r\n                <h3>🎯 Obiettivi 12 Settimane</h3>\r\n                <div className=\"goals-grid\">\r\n                    <div className=\"goal-item\">\r\n                        <h4>Peso Target</h4>\r\n                        <div className=\"goal-bar\">\r\n                            <div className=\"goal-progress\" style={{\r\n                                width: `${Math.min(100, ((dashboardData.currentWeight - goals12Week.startWeight) / (goals12Week.targetWeight - goals12Week.startWeight)) * 100)}%`\r\n                            }}></div>\r\n                        </div>\r\n                        <p>{dashboardData.currentWeight}kg → {goals12Week.targetWeight}kg</p>\r\n                    </div>\r\n                    <div className=\"goal-item\">\r\n                        <h4>Settimane</h4>\r\n                        <div className=\"goal-bar\">\r\n                            <div className=\"goal-progress\" style={{\r\n                                width: `${Math.min(100, (goals12Week.weeksCompleted / 12) * 100)}%`\r\n                            }}></div>\r\n                        </div>\r\n                        <p>{goals12Week.weeksCompleted}/12 settimane</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK ACTIONS */}\r\n            <nav className=\"quick-actions\">\r\n                <Link to=\"/workout\" className=\"action-card workout\">\r\n                    <span className=\"action-icon\">🏋️</span>\r\n                    <h4>Workout</h4>\r\n                    <p>Inizia sessione</p>\r\n                </Link>\r\n                <Link to=\"/progress\" className=\"action-card progress\">\r\n                    <span className=\"action-icon\">📈</span>\r\n                    <h4>Progressi</h4>\r\n                    <p>Traccia misure</p>\r\n                </Link>\r\n                <Link to=\"/nutrition-tracker\" className=\"action-card nutrition\">\r\n                    <span className=\"action-icon\">🥗</span>\r\n                    <h4>Dieta</h4>\r\n                    <p>Finestra 8-16</p>\r\n                </Link>\r\n                <Link to=\"/recovery-timer\" className=\"action-card recovery-timer\">\r\n                    <span className=\"action-icon\">🔥</span>\r\n                    <h4>Recovery</h4>\r\n                    <p>Timer sauna/ice</p>\r\n                </Link>\r\n                <Link to=\"/supplements\" className=\"action-card supplements\">\r\n                    <span className=\"action-icon\">💊</span>\r\n                    <h4>Integratori</h4>\r\n                    <p>{supplementProgress.taken}/{supplementProgress.total} presi</p>\r\n                </Link>\r\n                <Link to=\"/recovery\" className=\"action-card recovery\">\r\n                    <span className=\"action-icon\">🧘</span>\r\n                    <h4>Recovery Info</h4>\r\n                    <p>{recoveryStats.totalTime || 0}min oggi</p>\r\n                </Link>\r\n                <Link to=\"/analytics\" className=\"action-card analytics\">\r\n                    <span className=\"action-icon\">📊</span>\r\n                    <h4>Analytics</h4>\r\n                    <p>Grafici avanzati</p>\r\n                </Link>\r\n            </nav>\r\n\r\n            {/* LEGEND MINDSET */}\r\n            <div className=\"legend-mindset\">\r\n                <h3>👑 Mentalità da Leggenda</h3>\r\n                <p className=\"mindset-text\">\r\n                    \"I campioni non nascono in palestra. I campioni nascono da qualcosa di più profondo: \r\n                    <strong>un desiderio, un sogno, una visione.</strong> Tu hai tutto questo. \r\n                    Oggi è il giorno per dimostrarlo.\"\r\n                </p>\r\n                <div className=\"power-stats\">\r\n                    <span>💀 Disciplina: {Math.min(100, dashboardData.currentStreak * 3)}%</span>\r\n                    <span>⚡ Intensità: {Math.min(100, (weeklyStats.sessions || 0) * 20)}%</span>\r\n                    <span>🔥 Dedizione: {Math.min(100, (goals12Week.weeksCompleted || 0) * 8)}%</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nconst WorkoutTimer = ({ onSessionComplete }) => {\r\n    const [isActive, setIsActive] = React.useState(false);\r\n    const [currentExercise, setCurrentExercise] = React.useState('');\r\n    const [sessionTime, setSessionTime] = React.useState(0);\r\n    const [exerciseTime, setExerciseTime] = React.useState(0);\r\n    const [exercises, setExercises] = React.useState([]);\r\n    const [currentExerciseIndex, setCurrentExerciseIndex] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        let interval = null;\r\n        if (isActive) {\r\n            interval = setInterval(() => {\r\n                setSessionTime(time => time + 1);\r\n                setExerciseTime(time => time + 1);\r\n            }, 1000);\r\n        } else if (!isActive && sessionTime !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive, sessionTime]);\r\n\r\n    const startSession = () => {\r\n        setIsActive(true);\r\n        setSessionTime(0);\r\n        setExercises([]);\r\n    };\r\n\r\n    const pauseSession = () => {\r\n        setIsActive(false);\r\n    };\r\n\r\n    const nextExercise = () => {\r\n        if (currentExercise && exerciseTime > 0) {\r\n            const exerciseData = {\r\n                name: currentExercise,\r\n                duration: exerciseTime,\r\n                timestamp: new Date().toISOString()\r\n            };\r\n            setExercises([...exercises, exerciseData]);\r\n        }\r\n        \r\n        setCurrentExercise('');\r\n        setExerciseTime(0);\r\n        setCurrentExerciseIndex(prev => prev + 1);\r\n    };\r\n\r\n    const completeSession = () => {\r\n        if (currentExercise && exerciseTime > 0) {\r\n            nextExercise();\r\n        }\r\n        \r\n        const sessionData = {\r\n            date: new Date().toISOString(),\r\n            duration: sessionTime,\r\n            exercises: exercises,\r\n            id: Date.now()\r\n        };\r\n        \r\n        // Salva la sessione\r\n        const savedSessions = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        const updatedSessions = [sessionData, ...savedSessions];\r\n        localStorage.setItem('workoutSessions', JSON.stringify(updatedSessions));\r\n        \r\n        // Aggiorna le statistiche del tempo\r\n        const timeStats = JSON.parse(localStorage.getItem('timeStats') || '{}');\r\n        const updatedTimeStats = {\r\n            totalWorkoutTime: (timeStats.totalWorkoutTime || 0) + Math.floor(sessionTime / 60),\r\n            weeklyTime: calculateWeeklyTime(updatedSessions),\r\n            monthlyTime: calculateMonthlyTime(updatedSessions),\r\n            sessionsCompleted: (timeStats.sessionsCompleted || 0) + 1\r\n        };\r\n        localStorage.setItem('timeStats', JSON.stringify(updatedTimeStats));\r\n        \r\n        // Reset\r\n        setIsActive(false);\r\n        setSessionTime(0);\r\n        setExerciseTime(0);\r\n        setCurrentExercise('');\r\n        setExercises([]);\r\n        setCurrentExerciseIndex(0);\r\n        \r\n        if (onSessionComplete) {\r\n            onSessionComplete(sessionData);\r\n        }\r\n    };\r\n\r\n    const calculateWeeklyTime = (sessions) => {\r\n        const oneWeekAgo = new Date();\r\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n        \r\n        return sessions\r\n            .filter(session => new Date(session.date) >= oneWeekAgo)\r\n            .reduce((total, session) => total + Math.floor(session.duration / 60), 0);\r\n    };\r\n\r\n    const calculateMonthlyTime = (sessions) => {\r\n        const oneMonthAgo = new Date();\r\n        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\r\n        \r\n        return sessions\r\n            .filter(session => new Date(session.date) >= oneMonthAgo)\r\n            .reduce((total, session) => total + Math.floor(session.duration / 60), 0);\r\n    };\r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"workout-timer\">\r\n            <div className=\"timer-header\">\r\n                <h3>⏱️ Timer Sessione</h3>\r\n                <div className=\"session-time\">\r\n                    <span>Tempo Totale: {formatTime(sessionTime)}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"current-exercise\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Nome esercizio attuale...\"\r\n                    value={currentExercise}\r\n                    onChange={(e) => setCurrentExercise(e.target.value)}\r\n                    disabled={!isActive}\r\n                />\r\n                <div className=\"exercise-time\">\r\n                    Tempo Esercizio: {formatTime(exerciseTime)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"timer-controls\">\r\n                {!isActive && sessionTime === 0 ? (\r\n                    <button className=\"button start-btn\" onClick={startSession}>\r\n                        🚀 Inizia Sessione\r\n                    </button>\r\n                ) : (\r\n                    <div className=\"control-buttons\">\r\n                        <button \r\n                            className=\"button\" \r\n                            onClick={isActive ? pauseSession : () => setIsActive(true)}\r\n                        >\r\n                            {isActive ? '⏸️ Pausa' : '▶️ Riprendi'}\r\n                        </button>\r\n                        <button \r\n                            className=\"button next-btn\" \r\n                            onClick={nextExercise}\r\n                            disabled={!currentExercise}\r\n                        >\r\n                            ➡️ Prossimo Esercizio\r\n                        </button>\r\n                        <button \r\n                            className=\"button complete-btn\" \r\n                            onClick={completeSession}\r\n                        >\r\n                            ✅ Completa Sessione\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {exercises.length > 0 && (\r\n                <div className=\"completed-exercises\">\r\n                    <h4>Esercizi Completati:</h4>\r\n                    <ul>\r\n                        {exercises.map((exercise, index) => (\r\n                            <li key={index}>\r\n                                {exercise.name} - {formatTime(exercise.duration)}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WorkoutTimer;","import React from 'react';\n\nconst TechniqueGuides = () => {\n    const masterTechniques = {\n        'Panca Inclinata Bilanciere': {\n            category: 'Petto',\n            difficulty: 'Avanzato',\n            muscles: ['Petto (fascio superiore)', 'Deltoidi anteriori', 'Tricipiti'],\n            setup: [\n                'Panca inclinata 30-45° (mai oltre 45°)',\n                'Presa larghezza 1.5x spalle, pollice sopra barra',\n                'Scapole retratte e depresse, arco naturale',\n                'Piedi saldi a terra, core contratto'\n            ],\n            execution: [\n                'Discesa: 2-3 sec, barra al petto alto/clavicole',\n                'Pausa 1 sec al petto, mantenendo tensione',\n                'Spinta esplosiva, gomiti 45° dal busto',\n                'Lock-out completo, scapole sempre retratte'\n            ],\n            breathing: 'Inspira in discesa, espira durante spinta (dopo punto di stallo)',\n            commonMistakes: [\n                '❌ Angolo eccessivo (>45°) = stress spalle',\n                '❌ Gomiti troppo larghi = impingement',\n                '❌ Rebound al petto = perdita tensione',\n                '❌ Arch eccessivo = compenso lombare'\n            ],\n            progressionTips: [\n                'Master tecnica a corpo libero prima',\n                'Aumenta peso solo con form perfetto',\n                'Paused bench per controllo',\n                'Varianti: manubri, presa stretta'\n            ],\n            safetyNotes: [\n                'Sempre con spotter per carichi massimali',\n                'Stop se dolore spalle/polsi',\n                'Warm-up specifico: band pull-apart'\n            ]\n        },\n        'Trazioni Presa Ampia': {\n            category: 'Dorso',\n            difficulty: 'Intermedio-Avanzato',\n            muscles: ['Gran dorsale', 'Romboidi', 'Posteriori deltoidi', 'Bicipiti'],\n            setup: [\n                'Presa prona, 1.5x larghezza spalle',\n                'Appeso completo, scapole neutre',\n                'Core attivo, gambe leggermente avanti',\n                'Sguardo leggermente verso alto'\n            ],\n            execution: [\n                'Inizia movimento da scapole (depressione)',\n                'Tira gomiti verso basso e indietro',\n                'Petto verso sbarra, focus squeeze dorsali',\n                'Discesa controllata, stop prima rilascio completo'\n            ],\n            breathing: 'Inspira in partenza, espira durante trazione',\n            commonMistakes: [\n                '❌ Kipping/slancio = perdita target muscolare',\n                '❌ Solo braccia = manca attivazione dorsali',\n                '❌ Range parziale = crescita sub-ottimale',\n                '❌ Velocità eccessiva = momentum'\n            ],\n            progressionTips: [\n                'Principianti: lat pulldown + negative',\n                'Intermedi: band assist → bodyweight',\n                'Avanzati: weighted, pause, L-sit',\n                'Focus: mind-muscle connection dorsali'\n            ],\n            safetyNotes: [\n                'Shoulder health check pre-sessione',\n                'Progressione graduale volume',\n                'Stretching bicipiti/petto post-workout'\n            ]\n        },\n        'Squat': {\n            category: 'Gambe',\n            difficulty: 'Fondamentale',\n            muscles: ['Quadricipiti', 'Glutei', 'Femorali', 'Core'],\n            setup: [\n                'Barra alta su trapezi (non collo)',\n                'Presa 1.2x larghezza spalle, gomiti bassi',\n                'Piedi larghezza anche, punte 15-30°',\n                'Respirazione diaframmatica pre-discesa'\n            ],\n            execution: [\n                'Hip hinge + knee flexion simultanei',\n                'Discesa fino coscie parallele (minimo)',\n                'Ginocchia tracking con punte piedi',\n                'Drive dai talloni, petto alto in risalita'\n            ],\n            breathing: 'Valsalva: inspira in alto, trattieni, espira post-risalita',\n            commonMistakes: [\n                '❌ Knee valgus (ginocchia dentro) = infortunio',\n                '❌ Talloni si alzano = mobilità caviglie',\n                '❌ Busto troppo avanti = carico schiena',\n                '❌ Range parziale = perdita benefici'\n            ],\n            progressionTips: [\n                'Master bodyweight squat perfetto',\n                'Goblet squat per apprendimento pattern',\n                'Box squat per profondità e controllo',\n                'Front squat per postura e core'\n            ],\n            safetyNotes: [\n                'Sempre con safety bars altezza corretta',\n                'Warm-up mobilità anche/caviglie',\n                'Progressive overload: forma > peso'\n            ]\n        },\n        'Stacco Rumeno (RDL)': {\n            category: 'Posteriori',\n            difficulty: 'Intermedio',\n            muscles: ['Femorali', 'Glutei', 'Erettori spinale', 'Core'],\n            setup: [\n                'Partenza in piedi, barra a contatto cosce',\n                'Presa prona/mista, larghezza spalle',\n                'Spalle sopra barra, petto alto',\n                'Leggera flessione ginocchia (15-20°)'\n            ],\n            execution: [\n                'Hip hinge puro: anche indietro',\n                'Barra scorre lungo gambe (contatto costante)',\n                'Discesa fino stretch femorali (mid-shin)',\n                'Reverse: drive anche avanti, squeeze glutei'\n            ],\n            breathing: 'Inspira in alto, trattieni in discesa, espira in risalita',\n            commonMistakes: [\n                '❌ Schiena curva = shear stress vertebrale',\n                '❌ Troppa flessione ginocchia = squat variation',\n                '❌ Barra lontana corpo = momento aumentato',\n                '❌ Range eccessivo senza mobilità = compensi'\n            ],\n            progressionTips: [\n                'Prima mobilità femorali e anche',\n                'Deadlift con deficit per ROM',\n                'Single-leg RDL per stabilità',\n                'Varianti: manubri, kettlebell'\n            ],\n            safetyNotes: [\n                'Neutral spine sempre mantenuta',\n                'Start con carichi moderati',\n                'Stretching post-workout essenziale'\n            ]\n        },\n        'Military Press Manubri': {\n            category: 'Spalle',\n            difficulty: 'Intermedio',\n            muscles: ['Deltoidi (tutti fasci)', 'Tricipiti', 'Core', 'Stabilizzatori'],\n            setup: [\n                'Seduto con schienale 85-90°',\n                'Manubri altezza spalle, palmi avanti',\n                'Core contratto, schiena neutra',\n                'Piedi saldi, grip saldo ma non eccessivo'\n            ],\n            execution: [\n                'Spinta verticale, traiettoria rettilinea',\n                'Rotazione esterna spalle durante movimento',\n                'Lock-out senza hyperextension gomiti',\n                'Discesa controllata, stop all\\'altezza orecchie'\n            ],\n            breathing: 'Inspira in basso, espira durante spinta',\n            commonMistakes: [\n                '❌ Arch lombare eccessivo = compenso',\n                '❌ Spinta troppo avanti = impingement',\n                '❌ Gomiti troppo larghi = stress AC joint',\n                '❌ Range parziale = sviluppo incompleto'\n            ],\n            progressionTips: [\n                'Pike push-ups per pattern movimento',\n                'Press seduto prima di standing',\n                'Unilaterale per core e stabilità',\n                'Progressione: 2.5kg incrementi max'\n            ],\n            safetyNotes: [\n                'Warm-up spalle obbligatorio',\n                'Range dentro comfort zone',\n                'Stop al primo segno dolore'\n            ]\n        }\n    };\n\n    const getTechniqueCue = (exerciseName, phase) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        const cues = {\n            setup: exercise.setup,\n            execution: exercise.execution,\n            breathing: exercise.breathing\n        };\n\n        return cues[phase] || null;\n    };\n\n    const getProgressionLevel = (exerciseName, userLevel) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        const progressions = {\n            beginner: {\n                focus: 'Pattern Movement + Stabilità',\n                approach: 'Carichi leggeri, focus forma',\n                volume: 'Basso volume, alta frequenza'\n            },\n            intermediate: {\n                focus: 'Progressione Carico + Volume',\n                approach: 'Balance intensità/volume',\n                volume: 'Volume moderato-alto'\n            },\n            advanced: {\n                focus: 'Specializzazione + Varianti',\n                approach: 'Periodizzazione strutturata',\n                volume: 'Volume alto, intensità ciclica'\n            }\n        };\n\n        return progressions[userLevel];\n    };\n\n    const getInjuryPrevention = (exerciseName) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        const prevention = {\n            warmup: [],\n            cooldown: [],\n            redFlags: [],\n            alternatives: []\n        };\n\n        // Warm-up specifico per categoria\n        switch (exercise.category) {\n            case 'Petto':\n                prevention.warmup = ['Band pull-apart', 'Scap wall slides', 'Arm circles', 'Push-up progression'];\n                break;\n            case 'Dorso':\n                prevention.warmup = ['Cat-cow', 'Band face-pull', 'Scap pull-ups', 'Dead hang'];\n                break;\n            case 'Gambe':\n                prevention.warmup = ['Leg swings', 'Hip circles', 'Bodyweight squat', 'Ankle circles'];\n                break;\n            case 'Spalle':\n                prevention.warmup = ['Arm circles', 'Band external rotation', 'Wall slides', 'YTW raises'];\n                break;\n        }\n\n        // Red flags comuni\n        prevention.redFlags = [\n            'Dolore acuto durante movimento',\n            'Dolore che persiste post-workout',\n            'Limitazione ROM significativa',\n            'Instabilità articolare'\n        ];\n\n        return prevention;\n    };\n\n    const getMindMuscleCues = (exerciseName) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return [];\n\n        const mentalCues = {\n            'Panca Inclinata Bilanciere': [\n                'Visualizza petto che si \"apre\" in discesa',\n                'Spinta: \"schiaccia il mondo via da te\"',\n                'Immagina di \"avvicinare il petto alla barra\"',\n                'Focus: fibre muscolari che si contraggono'\n            ],\n            'Trazioni Presa Ampia': [\n                'Inizia tirando scapole verso \"tasche posteriori\"',\n                'Immagina di \"tirare sbarra verso petto\"',\n                'Visualizza dorsali come \"ali che si aprono\"',\n                'Senti l\\'ampiezza della schiena'\n            ],\n            'Squat': [\n                'Immagina di \"sederti su sedia invisibile\"',\n                'Spingi terra via con i piedi',\n                'Visualizza radici dai piedi al centro terra',\n                'Core come \"cintura di forza naturale\"'\n            ],\n            'Stacco Rumeno (RDL)': [\n                'Anche come \"cerniere che si aprono\"',\n                'Senti stretch intenso nei femorali',\n                'Immagina \"corda che tira anche indietro\"',\n                'Glutei come \"motori della risalita\"'\n            ],\n            'Military Press Manubri': [\n                'Spalle come \"fondamenta stabili\"',\n                'Spinta \"verso le stelle\"',\n                'Immagina di \"sostenere il cielo\"',\n                'Core come \"pilastro di marmo\"'\n            ]\n        };\n\n        return mentalCues[exerciseName] || [\n            'Connessione mente-muscolo',\n            'Controllo ogni millimetro',\n            'Qualità sopra quantità',\n            'Senti il muscolo lavorare'\n        ];\n    };\n\n    const getExerciseRating = (exerciseName) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        // Rating sistema basato su efficacia, sicurezza, trasferibilità\n        const ratings = {\n            'Panca Inclinata Bilanciere': {\n                effectiveness: 9,\n                safety: 7,\n                transferability: 8,\n                overall: 8.5,\n                notes: 'Re degli esercizi petto superiore'\n            },\n            'Trazioni Presa Ampia': {\n                effectiveness: 10,\n                safety: 8,\n                transferability: 9,\n                overall: 9.5,\n                notes: 'Miglior esercizio dorsali in assoluto'\n            },\n            'Squat': {\n                effectiveness: 10,\n                safety: 8,\n                transferability: 10,\n                overall: 9.5,\n                notes: 'Re di tutti gli esercizi'\n            },\n            'Stacco Rumeno (RDL)': {\n                effectiveness: 9,\n                safety: 7,\n                transferability: 9,\n                overall: 8.5,\n                notes: 'Insuperabile per posteriori'\n            },\n            'Military Press Manubri': {\n                effectiveness: 8,\n                safety: 8,\n                transferability: 7,\n                overall: 8.0,\n                notes: 'Eccellente per spalle 3D'\n            }\n        };\n\n        return ratings[exerciseName];\n    };\n\n    return {\n        masterTechniques,\n        getTechniqueCue,\n        getProgressionLevel,\n        getInjuryPrevention,\n        getMindMuscleCues,\n        getExerciseRating\n    };\n};\n\nexport default TechniqueGuides;","import React from 'react';\r\nimport WorkoutTimer from './WorkoutTimer';\r\nimport ExerciseTracker from './ExerciseTracker';\r\nimport TechniqueGuides from './TechniqueGuides';\r\nimport MotivationalQuotes from './MotivationalQuotes';\r\nimport CalendarStreak from './CalendarStreak';\r\n\r\nconst Workout = () => {\r\n    const exerciseHook = ExerciseTracker();\r\n    const techniqueHook = TechniqueGuides();\r\n    const quotesHook = MotivationalQuotes();\r\n    const calendarHook = CalendarStreak();\r\n    \r\n    const [selectedDay, setSelectedDay] = React.useState(null);\r\n    const [completedWorkouts, setCompletedWorkouts] = React.useState([]);\r\n    const [selectedExercise, setSelectedExercise] = React.useState(null);\r\n    const [exerciseForm, setExerciseForm] = React.useState({\r\n        sets: '',\r\n        reps: '',\r\n        weight: '',\r\n        rir: '',\r\n        notes: ''\r\n    });\r\n    const [showTechnique, setShowTechnique] = React.useState(false);\r\n    \r\n    const workoutPlan = {\r\n        'Lunedì': {\r\n            focus: 'Petto + Bicipiti',\r\n            subtitle: 'Focus: Petto (fascio alto + globale), Bicipiti',\r\n            exercises: [\r\n                { name: 'Panca Inclinata Bilanciere', sets: '4×6-8', rest: '2min', notes: 'RIR 1-2 | Focus forma e controllo' },\r\n                { name: 'Spinte Manubri Inclinata', sets: '3×8-10', rest: '90sec', notes: 'Angolo 30-45° | ROM completo' },\r\n                { name: 'Croci ai Cavi Alti/Inclinata', sets: '3×12-15', rest: '75sec', notes: 'Stretch massimo petto' },\r\n                { name: 'Dip alle Parallele (petto) o Panca Piana Manubri', sets: '3×8-10', rest: '90sec', notes: 'Inclinazione avanti per petto' },\r\n                { name: 'Curl Bilanciere', sets: '4×8-10', rest: '90sec', notes: 'No cheating | Controllo eccentrica' },\r\n                { name: 'Curl Manubri Inclinati', sets: '3×10-12', rest: '75sec', notes: 'Panca 45° | Stretch bicipiti' },\r\n                { name: 'Hammer Curl Manubri o Cavi', sets: '3×12-15', rest: '60sec', notes: 'Presa neutra | Focus brachiale' }\r\n            ]\r\n        },\r\n        'Martedì': {\r\n            focus: 'Dorso + Tricipiti + Collo (A)',\r\n            subtitle: 'Focus: Larghezza dorsale, spessore scapolare, tricipiti, collo',\r\n            exercises: [\r\n                { name: 'Trazioni Presa Ampia', sets: '4×6-8', rest: '2min', notes: 'Se necessario usa assistenza | Focus larghezza' },\r\n                { name: 'Rematore Bilanciere/Manubrio', sets: '4×8-10', rest: '2min', notes: 'Busto 45° | Squeeze scapole' },\r\n                { name: 'Lat Machine Inversa o Presa Stretta', sets: '3×10-12', rest: '90sec', notes: 'Controllo concentrica/eccentrica' },\r\n                { name: 'Pullover ai Cavi', sets: '3×12-15', rest: '75sec', notes: 'ROM ampio | Focus gran dorsale' },\r\n                { name: 'Panca Stretta Bilanciere', sets: '4×6-8', rest: '2min', notes: 'Presa larghezza spalle | Gomiti chiusi' },\r\n                { name: 'French Press EZ', sets: '3×8-10', rest: '90sec', notes: 'Solo avambracci si muovono' },\r\n                { name: 'Pushdown Cavo', sets: '3×12-15', rest: '60sec', notes: 'Contrazione massima in basso' },\r\n                { name: 'Collo - Flessione', sets: '2×15-20', rest: '30sec', notes: 'Lento e controllato' },\r\n                { name: 'Collo - Estensione', sets: '2×15-20', rest: '30sec', notes: 'Range completo sicuro' },\r\n                { name: 'Collo - Laterale dx/sx', sets: '2×12-15', rest: '30sec', notes: 'Ogni lato separatamente' }\r\n            ]\r\n        },\r\n        'Mercoledì': {\r\n            focus: 'Gambe Complete',\r\n            subtitle: 'Focus: Quadricipiti, glutei, femorali, polpacci',\r\n            exercises: [\r\n                { name: 'Squat', sets: '4×6-8', rest: '3min', notes: 'Profondità completa | RIR 1-2' },\r\n                { name: 'Hip Thrust', sets: '4×8-10', rest: '2min', notes: 'Contrazione glutei al top | Pausa 1 sec' },\r\n                { name: 'Affondi Camminata', sets: '3×10 passi/gamba', rest: '90sec', notes: 'Ginocchio a 90° | Passo lungo' },\r\n                { name: 'Leg Press 45°', sets: '3×10-12', rest: '90sec', notes: 'Piedi larghezza spalle | ROM completo' },\r\n                { name: 'Leg Curl Sdraiato', sets: '3×10-12', rest: '90sec', notes: 'Rest-pause ultimo set | Contrazione massima' },\r\n                { name: 'Calf Raise in Piedi', sets: '4×10-12', rest: '60sec', notes: 'Pausa 2 sec al top | Range completo' },\r\n                { name: 'Calf Raise Seduto', sets: '3×15-20', rest: '60sec', notes: 'Focus soleo | Controllo movimento' }\r\n            ]\r\n        },\r\n        'Giovedì': {\r\n            focus: 'Recupero Attivo',\r\n            subtitle: 'Focus: Cardiovascolare leggero, mobilità, recupero',\r\n            exercises: [\r\n                { name: 'LISS (Camminata/Cyclette)', sets: '30-40min', rest: 'Zona 1-2', notes: '60-70% FCMax | Mantieni conversazione' },\r\n                { name: 'Stretching/Mobilità', sets: '15-20min', rest: 'Rilassante', notes: 'Tutti i gruppi muscolari | Respiro profondo' },\r\n                { name: 'Sauna o Bagno Turco', sets: '10-15min', rest: 'Recovery', notes: 'Idratazione costante | Relax mentale' }\r\n            ]\r\n        },\r\n        'Venerdì': {\r\n            focus: 'Spalle Complete + Collo (B)',\r\n            subtitle: 'Focus: Deltoidi laterali/posteriori, trapezio, richiamo braccia, collo',\r\n            exercises: [\r\n                { name: 'Military Press Manubri', sets: '4×6-8', rest: '2min', notes: 'Seduto con schienale | Core attivo' },\r\n                { name: 'Alzate Laterali Cavi/Manubri', sets: '4×12-15', rest: '75sec', notes: 'Controllo eccentrica | No cheating' },\r\n                { name: 'Rear Delt Fly (Pec Deck Inversa o Manubri)', sets: '3×12-15', rest: '75sec', notes: 'Squeeze scapole | Focus deltoidi posteriori' },\r\n                { name: 'Face Pull', sets: '3×12-15', rest: '60sec', notes: 'Corda ai cavi | Gomiti alti' },\r\n                { name: 'Scrollate Manubri/Bilanciere', sets: '3×10-12', rest: '90sec', notes: 'Solo spalle | No rotazione' },\r\n                { name: 'Curl Manubri (Richiamo leggero)', sets: '2×12-15', rest: '60sec', notes: 'Pompaggio | Non a cedimento' },\r\n                { name: 'Pushdown Corda (Richiamo leggero)', sets: '2×12-15', rest: '60sec', notes: 'Focus connessione mente-muscolo' },\r\n                { name: 'Collo B - Flessione', sets: '2×15-20', rest: '30sec', notes: 'Progressione graduale resistenza' },\r\n                { name: 'Collo B - Estensione', sets: '2×15-20', rest: '30sec', notes: 'Mai forzare movimento' },\r\n                { name: 'Collo B - Laterale dx/sx', sets: '2×12-15', rest: '30sec', notes: 'Simmetrico entrambi lati' },\r\n                { name: 'Isometrie Multidirezionali Collo', sets: '3×20sec', rest: '30sec', notes: 'Resistenza manuale | 4 direzioni' },\r\n                { name: 'Stomach Vacuum', sets: '3×20sec', rest: '45sec', notes: 'Addome verso colonna | Respiro normale' },\r\n                { name: 'Plank', sets: '3×45sec', rest: '60sec', notes: 'Corpo dritto | Core attivo' }\r\n            ]\r\n        },\r\n        'Sabato': {\r\n            focus: 'Posteriori + Conditioning',\r\n            subtitle: 'Focus: Femorali, glutei, polpacci + condizionamento',\r\n            exercises: [\r\n                { name: 'Stacco Rumeno (RDL)', sets: '4×6-8', rest: '2min', notes: 'Focus femorali | Bilanciere vicino corpo' },\r\n                { name: 'Hip Thrust (Variante Mono)', sets: '3×10-12', rest: '2min', notes: 'Una gamba | Controllo stabilità' },\r\n                { name: 'Nordic Curl o Glute Ham Raise', sets: '3×8-10', rest: '90sec', notes: 'Eccentrica lenta | Assistenza se necessaria' },\r\n                { name: 'Leg Curl Seduto', sets: '3×12-15', rest: '75sec', notes: 'Contrazione massima | Pausa 1 sec' },\r\n                { name: 'Calf Raise Multipla', sets: '3×15-20', rest: '60sec', notes: 'Variare angoli piedi | Range massimo' },\r\n                { name: \"Farmer's Walk\", sets: '3×40m', rest: '90sec', notes: 'Carico pesante | Core + trapezio | Passo normale' },\r\n                { name: 'HIIT Finisher', sets: '8×30sec sprint / 60sec camminata', rest: 'Totale 10min', notes: 'Intensità massima sprint | Recupero attivo' }\r\n            ]\r\n        },\r\n        'Domenica': {\r\n            focus: 'Riposo Completo',\r\n            subtitle: 'Focus: Recupero totale, rigenerazione',\r\n            exercises: [\r\n                { name: 'Passeggiata Tranquilla', sets: '30-60min', rest: 'Libero', notes: 'Aria aperta | Ritmo rilassante' },\r\n                { name: 'Stretching Globale', sets: '20-30min', rest: 'Flow dolce', notes: 'Focus respirazione e relax' },\r\n                { name: 'Sauna/Bagno Turco (Opzionale)', sets: '15-20min', rest: 'Recovery', notes: 'Detossificazione | Idratazione' },\r\n                { name: 'Meditazione/Visualizzazione', sets: '10-20min', rest: 'Mentale', notes: 'Preparazione settimana successiva' }\r\n            ]\r\n        }\r\n    };\r\n    \r\n    const loadCompletedWorkouts = () => {\r\n        const saved = localStorage.getItem('completedWorkouts');\r\n        if (saved) {\r\n            setCompletedWorkouts(JSON.parse(saved));\r\n        }\r\n    };\r\n    \r\n    const handleExerciseComplete = () => {\r\n        if (!selectedExercise || !exerciseForm.sets || !exerciseForm.reps || !exerciseForm.weight) {\r\n            alert('Compila tutti i campi obbligatori!');\r\n            return;\r\n        }\r\n        \r\n        const isNewPR = exerciseHook.markExerciseCompleted(\r\n            selectedExercise.name,\r\n            exerciseForm.sets,\r\n            exerciseForm.reps,\r\n            exerciseForm.weight,\r\n            exerciseForm.notes,\r\n            exerciseForm.rir\r\n        );\r\n        \r\n        if (isNewPR) {\r\n            alert('🏆 NUOVO PERSONAL RECORD! Incredibile!');\r\n        }\r\n        \r\n        // Reset form\r\n        setExerciseForm({ sets: '', reps: '', weight: '', rir: '', notes: '' });\r\n        setSelectedExercise(null);\r\n    };\r\n    \r\n    const markWorkoutCompleted = (day) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const workoutData = {\r\n            day,\r\n            date: today,\r\n            id: Date.now()\r\n        };\r\n        \r\n        const updated = [workoutData, ...completedWorkouts];\r\n        setCompletedWorkouts(updated);\r\n        localStorage.setItem('completedWorkouts', JSON.stringify(updated));\r\n        \r\n        // Marca anche nel calendario streak\r\n        const todayWorkout = workoutPlan[day];\r\n        if (todayWorkout) {\r\n            calendarHook.markWorkoutCompleted(new Date(), todayWorkout.focus, todayWorkout.exercises);\r\n        }\r\n    };\r\n    \r\n    const isWorkoutCompletedToday = (day) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        return completedWorkouts.some(workout => \r\n            workout.day === day && workout.date === today\r\n        );\r\n    };\r\n    \r\n    const getExerciseCompletionStatus = (exercises) => {\r\n        const completedCount = exercises.filter(ex => \r\n            exerciseHook.isExerciseCompletedToday(ex.name)\r\n        ).length;\r\n        \r\n        return {\r\n            completed: completedCount,\r\n            total: exercises.length,\r\n            percentage: Math.round((completedCount / exercises.length) * 100)\r\n        };\r\n    };\r\n    \r\n    const getTodayWorkout = () => {\r\n        const today = new Date().getDay();\r\n        const todayWorkout = Object.entries(workoutPlan).find(([key]) => {\r\n            const dayMap = {\r\n                'Lunedì': 1, 'Martedì': 2, 'Mercoledì': 3, 'Giovedì': 4,\r\n                'Venerdì': 5, 'Sabato': 6, 'Domenica': 0\r\n            };\r\n            return dayMap[key] === today;\r\n        });\r\n        \r\n        return todayWorkout ? { day: todayWorkout[0], ...todayWorkout[1] } : null;\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        loadCompletedWorkouts();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"workout-container\">\r\n            <div className=\"workout-header\">\r\n                <h2>🏋️ Scheda: Fisico della Madonna (6 Mesi)</h2>\r\n                <p className=\"program-description\">Programma di allenamento avanzato per trasformazione fisica estrema. \r\n                   <strong>Split Push/Pull/Legs + Specializzazione</strong> ottimizzato per ipertrofia muscolare.</p>\r\n                <div className=\"program-stats\">\r\n                    <span className=\"stat\">📅 6 giorni/settimana</span>\r\n                    <span className=\"stat\">⏱️ 75-90 min/sessione</span>\r\n                    <span className=\"stat\">🎯 Volume: Alto</span>\r\n                    <span className=\"stat\">🔥 Intensità: RIR 1-3</span>\r\n                </div>\r\n            </div>\r\n            \r\n            <WorkoutTimer onSessionComplete={(sessionData) => {\r\n                console.log('Sessione completata:', sessionData);\r\n            }} />\r\n            \r\n            <div className=\"workout-week\">\r\n                <h3>📅 Piano Settimanale</h3>\r\n                <div className=\"days-grid\">\r\n                    {Object.entries(workoutPlan).map(([day, workout]) => (\r\n                        <div key={day} className={`day-card ${selectedDay === day ? 'selected' : ''}`}>\r\n                            <div className=\"day-header\" onClick={() => setSelectedDay(selectedDay === day ? null : day)}>\r\n                                <h4>{day}</h4>\r\n                                <p className=\"focus-title\">{workout.focus}</p>\r\n                                <p className=\"focus-subtitle\">{workout.subtitle}</p>\r\n                                {isWorkoutCompletedToday(day) && (\r\n                                    <span className=\"completed-badge\">✅ Completato</span>\r\n                                )}\r\n                            </div>\r\n                            \r\n                            {selectedDay === day && (\r\n                                <div className=\"day-details\">\r\n                                    <div className=\"exercises-list\">\r\n                                        {workout.exercises.map((exercise, index) => (\r\n                                            <div key={index} className=\"exercise-item\">\r\n                                                <h5>{exercise.name}</h5>\r\n                                                <div className=\"exercise-details\">\r\n                                                    <span className=\"sets\">{exercise.sets}</span>\r\n                                                    <span className=\"rest\">Rest: {exercise.rest}</span>\r\n                                                </div>\r\n                                                <p className=\"notes\">{exercise.notes}</p>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"day-actions\">\r\n                                        {!isWorkoutCompletedToday(day) ? (\r\n                                            <button \r\n                                                className=\"button complete-workout-btn\"\r\n                                                onClick={() => markWorkoutCompleted(day)}\r\n                                            >\r\n                                                ✅ Segna come Completato\r\n                                            </button>\r\n                                        ) : (\r\n                                            <p className=\"completed-message\">💪 Ottimo lavoro! Workout completato oggi.</p>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"workout-tips\">\r\n                <h3>💡 Principi Fondamentali - Fisico della Madonna</h3>\r\n                <ul>\r\n                    <li>🔥 <strong>RIR (Reps in Reserve):</strong> Mantieni sempre 1-2 ripetizioni di riserva per ottimizzare volume e recupero</li>\r\n                    <li>⏱️ <strong>Tempi di Recupero:</strong> Rispetta rigorosamente i tempi indicati - sono calcolati per massimizzare l'effetto allenante</li>\r\n                    <li>💪 <strong>Progressione:</strong> Aumenta il carico quando riesci a completare tutte le serie nel range alto delle ripetizioni</li>\r\n                    <li>🎯 <strong>Forma Tecnica:</strong> La qualità del movimento è prioritaria rispetto al peso utilizzato</li>\r\n                    <li>😴 <strong>Recupero:</strong> Il giovedì è sacro - recupero attivo essenziale per la crescita</li>\r\n                    <li>🍽️ <strong>Nutrizione:</strong> Surplus calorico di 300-500 kcal/die + 2.2g proteine/kg corporeo</li>\r\n                    <li>💧 <strong>Idratazione:</strong> Minimo 35ml/kg corporeo + 500ml extra nei giorni di allenamento</li>\r\n                    <li>📈 <strong>Tracking:</strong> Tieni traccia di carichi, ripetizioni e sensazioni per ogni esercizio</li>\r\n                    <li>🧘 <strong>Mente-Muscolo:</strong> Focus mentale sul muscolo target durante ogni ripetizione</li>\r\n                    <li>🔄 <strong>Periodizzazione:</strong> Ogni 6-8 settimane rivaluta e modifica il programma</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Workout;","import React from 'react';\r\n\r\nconst Nutrition = () => {\r\n    return (\r\n        <div className=\"nutrition-container\">\r\n            <h2>Piano Nutrizionale</h2>\r\n            <p>Scopri i piani nutrizionali e le linee guida per supportare la tua crescita fisica straordinaria.</p>\r\n            <h3>Linee Guida Nutrizionali</h3>\r\n            <ul>\r\n                <li>Consuma una varietà di alimenti per garantire un apporto nutrizionale completo.</li>\r\n                <li>Includi proteine magre in ogni pasto per supportare la crescita muscolare.</li>\r\n                <li>Assicurati di idratarti adeguatamente durante il giorno.</li>\r\n                <li>Limita il consumo di zuccheri aggiunti e cibi altamente processati.</li>\r\n                <li>Considera l'uso di integratori se necessario, in consultazione con un professionista della salute.</li>\r\n            </ul>\r\n            <h3>Esempio di Piano Alimentare</h3>\r\n            <p>Colazione: Uova strapazzate con spinaci e pane integrale.</p>\r\n            <p>Pranzo: Petto di pollo grigliato con quinoa e verdure al vapore.</p>\r\n            <p>Cena: Salmone al forno con patate dolci e broccoli.</p>\r\n            <p>Snack: Yogurt greco con frutta e noci.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nutrition;","import React from 'react';\r\n\r\nconst Supplements = () => {\r\n    return (\r\n        <div className=\"supplements-container\">\r\n            <h2>Recommended Supplements for Extraordinary Growth</h2>\r\n            <ul>\r\n                <li>\r\n                    <strong>Protein Powder:</strong> Supports muscle recovery and growth.\r\n                </li>\r\n                <li>\r\n                    <strong>Creatine:</strong> Enhances strength and performance during workouts.\r\n                </li>\r\n                <li>\r\n                    <strong>BCAAs:</strong> Helps reduce muscle soreness and fatigue.\r\n                </li>\r\n                <li>\r\n                    <strong>Omega-3 Fatty Acids:</strong> Supports overall health and reduces inflammation.\r\n                </li>\r\n                <li>\r\n                    <strong>Multivitamins:</strong> Ensures adequate intake of essential vitamins and minerals.\r\n                </li>\r\n            </ul>\r\n            <p>Always consult with a healthcare professional before starting any supplement regimen.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Supplements;","import React from 'react';\r\n\r\nconst Recovery = () => {\r\n    return (\r\n        <div className=\"recovery-container\">\r\n            <h2>Recovery Strategies for Extraordinary Growth</h2>\r\n            <p>Recovery is a crucial aspect of any training program, especially for those aiming for extraordinary physical growth. Here are some effective recovery strategies:</p>\r\n            <ul>\r\n                <li><strong>Rest Days:</strong> Incorporate regular rest days into your training schedule to allow your muscles to repair and grow.</li>\r\n                <li><strong>Active Recovery:</strong> Engage in low-intensity activities such as walking, yoga, or light cycling to promote blood flow and recovery.</li>\r\n                <li><strong>Hydration:</strong> Ensure adequate hydration before, during, and after workouts to support recovery and performance.</li>\r\n                <li><strong>Nutrition:</strong> Consume a balanced diet rich in protein, healthy fats, and carbohydrates to fuel recovery.</li>\r\n                <li><strong>Sleep:</strong> Aim for 7-9 hours of quality sleep each night to optimize recovery and hormonal balance.</li>\r\n                <li><strong>Stretching and Mobility:</strong> Incorporate stretching and mobility exercises to improve flexibility and reduce muscle soreness.</li>\r\n                <li><strong>Foam Rolling:</strong> Use foam rollers to alleviate muscle tightness and improve circulation.</li>\r\n            </ul>\r\n            <p>Implementing these recovery strategies will help you maximize your training efforts and achieve your physical growth goals.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recovery;","import React from 'react';\r\n\r\nconst Progress = () => {\r\n    const [progressData, setProgressData] = React.useState([]);\r\n    const [newEntry, setNewEntry] = React.useState({\r\n        weight: '',\r\n        bodyFat: '',\r\n        muscleMass: '',\r\n        chest: '',\r\n        arms: '',\r\n        waist: '',\r\n        thighs: '',\r\n        notes: ''\r\n    });\r\n    const [timeStats, setTimeStats] = React.useState({\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        monthlyTime: 0,\r\n        sessionsCompleted: 0\r\n    });\r\n    \r\n    const loadProgressData = () => {\r\n        const saved = localStorage.getItem('progressData');\r\n        if (saved) {\r\n            setProgressData(JSON.parse(saved));\r\n        }\r\n        \r\n        const savedTimeStats = localStorage.getItem('timeStats');\r\n        if (savedTimeStats) {\r\n            setTimeStats(JSON.parse(savedTimeStats));\r\n        }\r\n    };\r\n    \r\n    const saveProgressData = (data) => {\r\n        localStorage.setItem('progressData', JSON.stringify(data));\r\n    };\r\n    \r\n    const addEntry = () => {\r\n        if (!newEntry.weight) return;\r\n        \r\n        const entry = {\r\n            ...newEntry,\r\n            date: new Date().toISOString().split('T')[0],\r\n            id: Date.now()\r\n        };\r\n        \r\n        const updated = [entry, ...progressData];\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n        \r\n        setNewEntry({\r\n            weight: '',\r\n            bodyFat: '',\r\n            muscleMass: '',\r\n            chest: '',\r\n            arms: '',\r\n            waist: '',\r\n            thighs: '',\r\n            notes: ''\r\n        });\r\n    };\r\n    \r\n    const deleteEntry = (id) => {\r\n        const updated = progressData.filter(entry => entry.id !== id);\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadProgressData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"progress-container\">\r\n            <h2>🎯 Progress Tracker Avanzato</h2>\r\n            \r\n            <div className=\"time-stats\">\r\n                <h3>📊 Statistiche Tempo Investito</h3>\r\n                <div className=\"stats-grid\">\r\n                    <div className=\"stat-card\">\r\n                        <h4>Tempo Totale</h4>\r\n                        <p>{formatTime(timeStats.totalWorkoutTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questa Settimana</h4>\r\n                        <p>{formatTime(timeStats.weeklyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questo Mese</h4>\r\n                        <p>{formatTime(timeStats.monthlyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Sessioni Completate</h4>\r\n                        <p>{timeStats.sessionsCompleted}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"add-entry-form\">\r\n                <h3>➕ Aggiungi Nuove Misurazioni</h3>\r\n                <div className=\"form-grid\">\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Peso (kg)\"\r\n                        value={newEntry.weight}\r\n                        onChange={(e) => setNewEntry({...newEntry, weight: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Grassa (%)\"\r\n                        value={newEntry.bodyFat}\r\n                        onChange={(e) => setNewEntry({...newEntry, bodyFat: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Muscolare (kg)\"\r\n                        value={newEntry.muscleMass}\r\n                        onChange={(e) => setNewEntry({...newEntry, muscleMass: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Petto (cm)\"\r\n                        value={newEntry.chest}\r\n                        onChange={(e) => setNewEntry({...newEntry, chest: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Braccia (cm)\"\r\n                        value={newEntry.arms}\r\n                        onChange={(e) => setNewEntry({...newEntry, arms: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Vita (cm)\"\r\n                        value={newEntry.waist}\r\n                        onChange={(e) => setNewEntry({...newEntry, waist: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Cosce (cm)\"\r\n                        value={newEntry.thighs}\r\n                        onChange={(e) => setNewEntry({...newEntry, thighs: e.target.value})}\r\n                    />\r\n                    <textarea\r\n                        placeholder=\"Note (sensazioni, obiettivi, etc.)\"\r\n                        value={newEntry.notes}\r\n                        onChange={(e) => setNewEntry({...newEntry, notes: e.target.value})}\r\n                    />\r\n                </div>\r\n                <button className=\"button\" onClick={addEntry}>Aggiungi Misurazione</button>\r\n            </div>\r\n            \r\n            <div className=\"progress-table\">\r\n                <h3>📈 Storico Progressi</h3>\r\n                {progressData.length === 0 ? (\r\n                    <p>Nessuna misurazione ancora. Inizia ad aggiungere i tuoi progressi!</p>\r\n                ) : (\r\n                    <div className=\"table-responsive\">\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Data</th>\r\n                                    <th>Peso</th>\r\n                                    <th>Grasso</th>\r\n                                    <th>Muscolo</th>\r\n                                    <th>Petto</th>\r\n                                    <th>Braccia</th>\r\n                                    <th>Vita</th>\r\n                                    <th>Cosce</th>\r\n                                    <th>Note</th>\r\n                                    <th>Azioni</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {progressData.map((entry) => (\r\n                                    <tr key={entry.id}>\r\n                                        <td>{entry.date}</td>\r\n                                        <td>{entry.weight} kg</td>\r\n                                        <td>{entry.bodyFat}%</td>\r\n                                        <td>{entry.muscleMass} kg</td>\r\n                                        <td>{entry.chest} cm</td>\r\n                                        <td>{entry.arms} cm</td>\r\n                                        <td>{entry.waist} cm</td>\r\n                                        <td>{entry.thighs} cm</td>\r\n                                        <td className=\"notes-cell\">{entry.notes}</td>\r\n                                        <td>\r\n                                            <button \r\n                                                className=\"delete-btn\"\r\n                                                onClick={() => deleteEntry(entry.id)}\r\n                                            >\r\n                                                🗑️\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Progress;","// Validation Schemas - Enterprise Grade\r\n// Schema di validazione completi per tutti i form dell'applicazione\r\n\r\nimport * as yup from 'yup';\r\n\r\n// ========== CONFIGURAZIONE BASE ==========\r\n\r\n// Messaggi di errore personalizzati in italiano\r\nyup.setLocale({\r\n    mixed: {\r\n        default: 'Campo non valido',\r\n        required: 'Campo obbligatorio',\r\n        notType: 'Tipo di dato non valido'\r\n    },\r\n    string: {\r\n        min: 'Minimo ${min} caratteri',\r\n        max: 'Massimo ${max} caratteri',\r\n        email: 'Email non valida'\r\n    },\r\n    number: {\r\n        min: 'Valore minimo: ${min}',\r\n        max: 'Valore massimo: ${max}',\r\n        positive: 'Deve essere un numero positivo',\r\n        integer: 'Deve essere un numero intero'\r\n    },\r\n    date: {\r\n        min: 'Data non può essere precedente al ${min}',\r\n        max: 'Data non può essere successiva al ${max}'\r\n    }\r\n});\r\n\r\n// ========== UTILITY VALIDATIONS ==========\r\n\r\n// Validazione peso realistico (30-300 kg)\r\nconst weightValidation = yup.number()\r\n    .typeError('Peso deve essere un numero')\r\n    .min(30, 'Peso minimo 30kg')\r\n    .max(300, 'Peso massimo 300kg');\r\n\r\n// Validazione percentuale (0-100%)\r\nconst percentageValidation = yup.number()\r\n    .typeError('Percentuale deve essere un numero')\r\n    .min(0, 'Percentuale minima 0%')\r\n    .max(100, 'Percentuale massima 100%');\r\n\r\n// Validazione circonferenze corporee (10-200 cm)\r\nconst measurementValidation = yup.number()\r\n    .typeError('Misurazione deve essere un numero')\r\n    .min(10, 'Misurazione minima 10cm')\r\n    .max(200, 'Misurazione massima 200cm');\r\n\r\n// Validazione data (non futura)\r\nconst dateValidation = yup.date()\r\n    .typeError('Data non valida')\r\n    .max(new Date(), 'Data non può essere futura');\r\n\r\n// Validazione password sicura\r\nconst passwordValidation = yup.string()\r\n    .min(8, 'Password minimo 8 caratteri')\r\n    .matches(/[a-z]/, 'Deve contenere almeno una lettera minuscola')\r\n    .matches(/[A-Z]/, 'Deve contenere almeno una lettera maiuscola')\r\n    .matches(/[0-9]/, 'Deve contenere almeno un numero')\r\n    .matches(/[^a-zA-Z0-9]/, 'Deve contenere almeno un carattere speciale');\r\n\r\n// ========== AUTHENTICATION SCHEMAS ==========\r\n\r\n// Schema registrazione\r\nexport const registrationSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido')\r\n        .max(254, 'Email troppo lunga'),\r\n    \r\n    password: passwordValidation.required('Password è obbligatoria'),\r\n    \r\n    confirmPassword: yup\r\n        .string()\r\n        .required('Conferma password è obbligatoria')\r\n        .oneOf([yup.ref('password')], 'Le password non corrispondono'),\r\n    \r\n    displayName: yup\r\n        .string()\r\n        .min(2, 'Nome minimo 2 caratteri')\r\n        .max(50, 'Nome massimo 50 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ\\s]+$/, 'Nome può contenere solo lettere e spazi')\r\n        .nullable(),\r\n    \r\n    acceptTerms: yup\r\n        .boolean()\r\n        .oneOf([true], 'Devi accettare i termini e condizioni')\r\n});\r\n\r\n// Schema login\r\nexport const loginSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido'),\r\n    \r\n    password: yup\r\n        .string()\r\n        .required('Password è obbligatoria')\r\n        .min(1, 'Password non può essere vuota'),\r\n    \r\n    rememberMe: yup.boolean().default(false)\r\n});\r\n\r\n// Schema reset password\r\nexport const resetPasswordSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido')\r\n});\r\n\r\n// Schema cambio password\r\nexport const changePasswordSchema = yup.object({\r\n    currentPassword: yup\r\n        .string()\r\n        .required('Password attuale è obbligatoria'),\r\n    \r\n    newPassword: passwordValidation.required('Nuova password è obbligatoria'),\r\n    \r\n    confirmNewPassword: yup\r\n        .string()\r\n        .required('Conferma nuova password è obbligatoria')\r\n        .oneOf([yup.ref('newPassword')], 'Le password non corrispondono')\r\n});\r\n\r\n// ========== PROGRESS TRACKING SCHEMAS ==========\r\n\r\n// Schema misurazione progress\r\nexport const progressMeasurementSchema = yup.object({\r\n    weight: weightValidation.nullable(),\r\n    \r\n    bodyFat: percentageValidation\r\n        .min(3, 'Massa grassa minima 3%')\r\n        .max(50, 'Massa grassa massima 50%')\r\n        .nullable(),\r\n    \r\n    muscleMass: yup.number()\r\n        .typeError('Massa muscolare deve essere un numero')\r\n        .min(10, 'Massa muscolare minima 10kg')\r\n        .max(150, 'Massa muscolare massima 150kg')\r\n        .nullable(),\r\n    \r\n    chest: measurementValidation\r\n        .min(50, 'Circonferenza petto minima 50cm')\r\n        .max(200, 'Circonferenza petto massima 200cm')\r\n        .nullable(),\r\n    \r\n    arms: measurementValidation\r\n        .min(20, 'Circonferenza braccia minima 20cm')\r\n        .max(100, 'Circonferenza braccia massima 100cm')\r\n        .nullable(),\r\n    \r\n    waist: measurementValidation\r\n        .min(50, 'Circonferenza vita minima 50cm')\r\n        .max(150, 'Circonferenza vita massima 150cm')\r\n        .nullable(),\r\n    \r\n    thighs: measurementValidation\r\n        .min(30, 'Circonferenza cosce minima 30cm')\r\n        .max(100, 'Circonferenza cosce massima 100cm')\r\n        .nullable(),\r\n    \r\n    date: dateValidation.default(() => new Date()),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(1000, 'Note massimo 1000 caratteri')\r\n        .nullable()\r\n})\r\n.test('at-least-one-measurement', 'Inserisci almeno una misurazione', function(value) {\r\n    const { weight, bodyFat, muscleMass, chest, arms, waist, thighs } = value || {};\r\n    return !!(weight || bodyFat || muscleMass || chest || arms || waist || thighs);\r\n});\r\n\r\n// ========== WORKOUT SCHEMAS ==========\r\n\r\n// Schema esercizio singolo\r\nexport const exerciseSchema = yup.object({\r\n    exerciseName: yup\r\n        .string()\r\n        .required('Nome esercizio è obbligatorio')\r\n        .min(2, 'Nome esercizio minimo 2 caratteri')\r\n        .max(100, 'Nome esercizio massimo 100 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ0-9\\s\\-().]+$/, 'Nome esercizio contiene caratteri non validi'),\r\n    \r\n    sets: yup\r\n        .number()\r\n        .required('Numero serie è obbligatorio')\r\n        .integer('Serie deve essere un numero intero')\r\n        .min(1, 'Minimo 1 serie')\r\n        .max(20, 'Massimo 20 serie'),\r\n    \r\n    reps: yup\r\n        .number()\r\n        .required('Numero ripetizioni è obbligatorio')\r\n        .integer('Ripetizioni deve essere un numero intero')\r\n        .min(1, 'Minimo 1 ripetizione')\r\n        .max(100, 'Massimo 100 ripetizioni'),\r\n    \r\n    weight: yup\r\n        .number()\r\n        .typeError('Peso deve essere un numero')\r\n        .min(0, 'Peso non può essere negativo')\r\n        .max(1000, 'Peso massimo 1000kg')\r\n        .nullable(),\r\n    \r\n    rir: yup\r\n        .number()\r\n        .typeError('RIR deve essere un numero')\r\n        .integer('RIR deve essere un numero intero')\r\n        .min(0, 'RIR minimo 0')\r\n        .max(10, 'RIR massimo 10')\r\n        .nullable(),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(500, 'Note esercizio massimo 500 caratteri')\r\n        .nullable()\r\n});\r\n\r\n// Schema sessione workout\r\nexport const workoutSessionSchema = yup.object({\r\n    name: yup\r\n        .string()\r\n        .required('Nome workout è obbligatorio')\r\n        .min(3, 'Nome workout minimo 3 caratteri')\r\n        .max(100, 'Nome workout massimo 100 caratteri'),\r\n    \r\n    date: dateValidation.required('Data è obbligatoria'),\r\n    \r\n    startTime: yup\r\n        .date()\r\n        .typeError('Orario inizio non valido')\r\n        .nullable(),\r\n    \r\n    endTime: yup\r\n        .date()\r\n        .typeError('Orario fine non valido')\r\n        .min(yup.ref('startTime'), 'Orario fine deve essere dopo l\\'inizio')\r\n        .nullable(),\r\n    \r\n    totalDuration: yup\r\n        .number()\r\n        .typeError('Durata deve essere un numero')\r\n        .min(1, 'Durata minima 1 minuto')\r\n        .max(480, 'Durata massima 8 ore (480 minuti)')\r\n        .nullable(),\r\n    \r\n    exercises: yup\r\n        .array()\r\n        .of(exerciseSchema)\r\n        .min(1, 'Almeno un esercizio è obbligatorio'),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(1000, 'Note workout massimo 1000 caratteri')\r\n        .nullable(),\r\n    \r\n    intensity: yup\r\n        .number()\r\n        .integer('Intensità deve essere un numero intero')\r\n        .min(1, 'Intensità minima 1')\r\n        .max(10, 'Intensità massima 10')\r\n        .nullable()\r\n});\r\n\r\n// ========== USER PROFILE SCHEMAS ==========\r\n\r\n// Schema profilo utente\r\nexport const userProfileSchema = yup.object({\r\n    displayName: yup\r\n        .string()\r\n        .min(2, 'Nome minimo 2 caratteri')\r\n        .max(50, 'Nome massimo 50 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ\\s]+$/, 'Nome può contenere solo lettere e spazi')\r\n        .nullable(),\r\n    \r\n    age: yup\r\n        .number()\r\n        .integer('Età deve essere un numero intero')\r\n        .min(13, 'Età minima 13 anni')\r\n        .max(120, 'Età massima 120 anni')\r\n        .nullable(),\r\n    \r\n    height: yup\r\n        .number()\r\n        .typeError('Altezza deve essere un numero')\r\n        .min(100, 'Altezza minima 100cm')\r\n        .max(250, 'Altezza massima 250cm')\r\n        .nullable(),\r\n    \r\n    activityLevel: yup\r\n        .string()\r\n        .oneOf(['sedentary', 'light', 'moderate', 'active', 'very_active'], 'Livello attività non valido')\r\n        .default('moderate'),\r\n    \r\n    fitnessGoals: yup\r\n        .array()\r\n        .of(yup.string().oneOf([\r\n            'weight_loss', 'muscle_gain', 'strength', 'endurance', \r\n            'flexibility', 'general_health', 'athletic_performance'\r\n        ]))\r\n        .max(5, 'Massimo 5 obiettivi'),\r\n    \r\n    experience: yup\r\n        .string()\r\n        .oneOf(['beginner', 'intermediate', 'advanced', 'expert'], 'Livello esperienza non valido')\r\n        .default('beginner'),\r\n    \r\n    preferences: yup.object({\r\n        units: yup.string().oneOf(['metric', 'imperial']).default('metric'),\r\n        language: yup.string().oneOf(['it', 'en']).default('it'),\r\n        notifications: yup.boolean().default(true),\r\n        darkMode: yup.boolean().default(false),\r\n        publicProfile: yup.boolean().default(false)\r\n    })\r\n});\r\n\r\n// ========== GOALS SCHEMAS ==========\r\n\r\n// Schema obiettivi 12 settimane\r\nexport const goals12WeekSchema = yup.object({\r\n    startWeight: weightValidation.required('Peso iniziale è obbligatorio'),\r\n    \r\n    targetWeight: weightValidation\r\n        .required('Peso target è obbligatorio')\r\n        .test('weight-difference', 'Differenza peso deve essere ragionevole (±30kg)', function(value) {\r\n            const { startWeight } = this.parent;\r\n            if (!startWeight || !value) return true;\r\n            return Math.abs(value - startWeight) <= 30;\r\n        }),\r\n    \r\n    targetBench: yup\r\n        .number()\r\n        .typeError('Target panca deve essere un numero')\r\n        .min(20, 'Target panca minimo 20kg')\r\n        .max(300, 'Target panca massimo 300kg')\r\n        .nullable(),\r\n    \r\n    targetSquat: yup\r\n        .number()\r\n        .typeError('Target squat deve essere un numero')\r\n        .min(30, 'Target squat minimo 30kg')\r\n        .max(500, 'Target squat massimo 500kg')\r\n        .nullable(),\r\n    \r\n    targetDeadlift: yup\r\n        .number()\r\n        .typeError('Target deadlift deve essere un numero')\r\n        .min(40, 'Target deadlift minimo 40kg')\r\n        .max(600, 'Target deadlift massimo 600kg')\r\n        .nullable(),\r\n    \r\n    startDate: yup\r\n        .date()\r\n        .required('Data inizio è obbligatoria')\r\n        .max(new Date(), 'Data inizio non può essere futura'),\r\n    \r\n    targetDate: yup\r\n        .date()\r\n        .required('Data target è obbligatoria')\r\n        .min(yup.ref('startDate'), 'Data target deve essere dopo data inizio')\r\n        .test('12-weeks-max', 'Periodo massimo 16 settimane', function(value) {\r\n            const { startDate } = this.parent;\r\n            if (!startDate || !value) return true;\r\n            const diffWeeks = (value - startDate) / (7 * 24 * 60 * 60 * 1000);\r\n            return diffWeeks <= 16;\r\n        })\r\n});\r\n\r\n// ========== SETTINGS SCHEMAS ==========\r\n\r\n// Schema impostazioni app\r\nexport const appSettingsSchema = yup.object({\r\n    notifications: yup.object({\r\n        workoutReminders: yup.boolean().default(true),\r\n        progressReminders: yup.boolean().default(true),\r\n        achievementAlerts: yup.boolean().default(true),\r\n        emailNotifications: yup.boolean().default(false),\r\n        pushNotifications: yup.boolean().default(true)\r\n    }),\r\n    \r\n    privacy: yup.object({\r\n        profileVisibility: yup.string().oneOf(['private', 'friends', 'public']).default('private'),\r\n        shareProgress: yup.boolean().default(false),\r\n        shareWorkouts: yup.boolean().default(false),\r\n        allowFriendRequests: yup.boolean().default(true)\r\n    }),\r\n    \r\n    display: yup.object({\r\n        theme: yup.string().oneOf(['light', 'dark', 'auto']).default('light'),\r\n        language: yup.string().oneOf(['it', 'en']).default('it'),\r\n        dateFormat: yup.string().oneOf(['DD/MM/YYYY', 'MM/DD/YYYY', 'YYYY-MM-DD']).default('DD/MM/YYYY'),\r\n        timeFormat: yup.string().oneOf(['24h', '12h']).default('24h')\r\n    }),\r\n    \r\n    units: yup.object({\r\n        weight: yup.string().oneOf(['kg', 'lb']).default('kg'),\r\n        distance: yup.string().oneOf(['km', 'mi']).default('km'),\r\n        height: yup.string().oneOf(['cm', 'ft']).default('cm')\r\n    })\r\n});\r\n\r\n// ========== VALIDATION HELPERS ==========\r\n\r\n// Helper per validazione condizionale\r\nexport const conditionalSchema = (condition, schema, fallback = yup.mixed().nullable()) => {\r\n    return yup.mixed().when(condition, {\r\n        is: true,\r\n        then: schema,\r\n        otherwise: fallback\r\n    });\r\n};\r\n\r\n// Helper per validazione campi dinamici\r\nexport const dynamicFieldSchema = (fieldType) => {\r\n    const schemas = {\r\n        text: yup.string().max(100),\r\n        number: yup.number(),\r\n        email: yup.string().email(),\r\n        date: dateValidation,\r\n        boolean: yup.boolean()\r\n    };\r\n    \r\n    return schemas[fieldType] || yup.mixed();\r\n};\r\n\r\n// Validazione personalizzata per form complessi\r\nexport const validateWithSchema = async (schema, data, options = {}) => {\r\n    try {\r\n        const validatedData = await schema.validate(data, {\r\n            abortEarly: false,\r\n            stripUnknown: true,\r\n            ...options\r\n        });\r\n        \r\n        return { isValid: true, data: validatedData, errors: {} };\r\n        \r\n    } catch (error) {\r\n        const errors = {};\r\n        \r\n        if (error.inner) {\r\n            error.inner.forEach(err => {\r\n                if (err.path) {\r\n                    errors[err.path] = err.message;\r\n                }\r\n            });\r\n        } else {\r\n            errors.general = error.message;\r\n        }\r\n        \r\n        return { isValid: false, data: null, errors };\r\n    }\r\n};\r\n\r\n// Export di tutti gli schemi per uso modulare\r\nexport default {\r\n    registrationSchema,\r\n    loginSchema,\r\n    resetPasswordSchema,\r\n    changePasswordSchema,\r\n    progressMeasurementSchema,\r\n    exerciseSchema,\r\n    workoutSessionSchema,\r\n    userProfileSchema,\r\n    goals12WeekSchema,\r\n    appSettingsSchema,\r\n    validateWithSchema\r\n};","// Authentication Modal - Login/Register Interface\r\n// Modale completa per gestire login, registrazione e reset password\r\n\r\nimport React, { useState } from 'react';\r\nimport { useAuth } from './AuthProvider';\r\nimport { validateWithSchema, loginSchema, registrationSchema, resetPasswordSchema } from '../validation/schemas';\r\nimport { logger } from '../firebase/config';\r\n\r\nconst AuthModal = () => {\r\n    const { login, register, loginWithGoogle, resetPassword, error, loading, clearError } = useAuth();\r\n    \r\n    const [mode, setMode] = useState('login'); // 'login', 'register', 'reset'\r\n    const [formData, setFormData] = useState({\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        displayName: '',\r\n        acceptTerms: false\r\n    });\r\n    const [validationErrors, setValidationErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n\r\n    // Reset form quando cambia modalità\r\n    const changeMode = (newMode) => {\r\n        setMode(newMode);\r\n        setFormData({\r\n            email: formData.email, // Mantieni email\r\n            password: '',\r\n            confirmPassword: '',\r\n            displayName: '',\r\n            acceptTerms: false\r\n        });\r\n        setValidationErrors({});\r\n        setSuccessMessage('');\r\n        clearError();\r\n    };\r\n\r\n    // Aggiorna campi form\r\n    const updateField = (field, value) => {\r\n        setFormData(prev => ({ ...prev, [field]: value }));\r\n        \r\n        // Rimuovi errore di validazione per questo campo\r\n        if (validationErrors[field]) {\r\n            setValidationErrors(prev => {\r\n                const newErrors = { ...prev };\r\n                delete newErrors[field];\r\n                return newErrors;\r\n            });\r\n        }\r\n    };\r\n\r\n    // Validazione form\r\n    const validateForm = async () => {\r\n        let schema;\r\n        let dataToValidate = formData;\r\n\r\n        switch (mode) {\r\n            case 'login':\r\n                schema = loginSchema;\r\n                dataToValidate = {\r\n                    email: formData.email,\r\n                    password: formData.password\r\n                };\r\n                break;\r\n            case 'register':\r\n                schema = registrationSchema;\r\n                break;\r\n            case 'reset':\r\n                schema = resetPasswordSchema;\r\n                dataToValidate = { email: formData.email };\r\n                break;\r\n            default:\r\n                return { isValid: false, errors: { general: 'Modalità non valida' } };\r\n        }\r\n\r\n        const validation = await validateWithSchema(schema, dataToValidate);\r\n        setValidationErrors(validation.errors);\r\n        \r\n        return validation;\r\n    };\r\n\r\n    // Handle submit form\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (isSubmitting || loading) return;\r\n\r\n        // Valida form\r\n        const validation = await validateForm();\r\n        if (!validation.isValid) {\r\n            logger.warn('Validazione form fallita', validation.errors);\r\n            return;\r\n        }\r\n\r\n        setIsSubmitting(true);\r\n        clearError();\r\n        setSuccessMessage('');\r\n\r\n        try {\r\n            let result;\r\n\r\n            switch (mode) {\r\n                case 'login':\r\n                    logger.info('Tentativo login...');\r\n                    result = await login(formData.email, formData.password);\r\n                    break;\r\n\r\n                case 'register':\r\n                    logger.info('Tentativo registrazione...');\r\n                    result = await register(formData.email, formData.password, formData.displayName);\r\n                    break;\r\n\r\n                case 'reset':\r\n                    logger.info('Tentativo reset password...');\r\n                    result = await resetPassword(formData.email);\r\n                    if (result.success) {\r\n                        setSuccessMessage('Email di reset inviata! Controlla la tua casella di posta.');\r\n                        setTimeout(() => changeMode('login'), 3000);\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    throw new Error('Modalità non supportata');\r\n            }\r\n\r\n            if (result && result.success) {\r\n                logger.success(`${mode} completato con successo`);\r\n                // Il modale si chiuderà automaticamente quando user state cambia\r\n            }\r\n\r\n        } catch (error) {\r\n            logger.error(`Errore ${mode}`, error);\r\n            setValidationErrors({ general: error.message || 'Errore imprevisto' });\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    // Handle Google login\r\n    const handleGoogleLogin = async () => {\r\n        if (isSubmitting || loading) return;\r\n\r\n        setIsSubmitting(true);\r\n        clearError();\r\n\r\n        try {\r\n            logger.info('Tentativo login Google...');\r\n            const result = await loginWithGoogle();\r\n            \r\n            if (result.success) {\r\n                logger.success('Login Google completato');\r\n            }\r\n        } catch (error) {\r\n            logger.error('Errore Google login', error);\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"auth-modal-overlay\">\r\n            <div className=\"auth-modal\">\r\n                <div className=\"auth-header\">\r\n                    <h2>🏆 Extraordinary Growth</h2>\r\n                    <p className=\"auth-tagline\">\r\n                        {mode === 'login' && 'Bentornato! Accedi al tuo account'}\r\n                        {mode === 'register' && 'Inizia il tuo percorso di crescita'}\r\n                        {mode === 'reset' && 'Recupera il tuo account'}\r\n                    </p>\r\n                </div>\r\n\r\n                {/* Messaggio di successo */}\r\n                {successMessage && (\r\n                    <div className=\"success-message\">\r\n                        ✅ {successMessage}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Errori generali */}\r\n                {(error || validationErrors.general) && (\r\n                    <div className=\"error-message\">\r\n                        ⚠️ {error || validationErrors.general}\r\n                    </div>\r\n                )}\r\n\r\n                <form onSubmit={handleSubmit} className=\"auth-form\">\r\n                    {/* Campo Email (sempre presente) */}\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input\r\n                            id=\"email\"\r\n                            type=\"email\"\r\n                            value={formData.email}\r\n                            onChange={(e) => updateField('email', e.target.value)}\r\n                            className={validationErrors.email ? 'error' : ''}\r\n                            placeholder=\"la.tua@email.com\"\r\n                            disabled={isSubmitting}\r\n                            required\r\n                        />\r\n                        {validationErrors.email && (\r\n                            <span className=\"field-error\">{validationErrors.email}</span>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Campo Password (login e register) */}\r\n                    {mode !== 'reset' && (\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <input\r\n                                id=\"password\"\r\n                                type=\"password\"\r\n                                value={formData.password}\r\n                                onChange={(e) => updateField('password', e.target.value)}\r\n                                className={validationErrors.password ? 'error' : ''}\r\n                                placeholder=\"La tua password sicura\"\r\n                                disabled={isSubmitting}\r\n                                required\r\n                            />\r\n                            {validationErrors.password && (\r\n                                <span className=\"field-error\">{validationErrors.password}</span>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Campi extra per registrazione */}\r\n                    {mode === 'register' && (\r\n                        <>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"confirmPassword\">Conferma Password</label>\r\n                                <input\r\n                                    id=\"confirmPassword\"\r\n                                    type=\"password\"\r\n                                    value={formData.confirmPassword}\r\n                                    onChange={(e) => updateField('confirmPassword', e.target.value)}\r\n                                    className={validationErrors.confirmPassword ? 'error' : ''}\r\n                                    placeholder=\"Ripeti la password\"\r\n                                    disabled={isSubmitting}\r\n                                    required\r\n                                />\r\n                                {validationErrors.confirmPassword && (\r\n                                    <span className=\"field-error\">{validationErrors.confirmPassword}</span>\r\n                                )}\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"displayName\">Nome (opzionale)</label>\r\n                                <input\r\n                                    id=\"displayName\"\r\n                                    type=\"text\"\r\n                                    value={formData.displayName}\r\n                                    onChange={(e) => updateField('displayName', e.target.value)}\r\n                                    className={validationErrors.displayName ? 'error' : ''}\r\n                                    placeholder=\"Il tuo nome\"\r\n                                    disabled={isSubmitting}\r\n                                />\r\n                                {validationErrors.displayName && (\r\n                                    <span className=\"field-error\">{validationErrors.displayName}</span>\r\n                                )}\r\n                            </div>\r\n\r\n                            <div className=\"form-group checkbox-group\">\r\n                                <label>\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        checked={formData.acceptTerms}\r\n                                        onChange={(e) => updateField('acceptTerms', e.target.checked)}\r\n                                        disabled={isSubmitting}\r\n                                        required\r\n                                    />\r\n                                    <span className=\"checkmark\"></span>\r\n                                    Accetto i <a href=\"#terms\" target=\"_blank\">Termini di Servizio</a> e la <a href=\"#privacy\" target=\"_blank\">Privacy Policy</a>\r\n                                </label>\r\n                                {validationErrors.acceptTerms && (\r\n                                    <span className=\"field-error\">{validationErrors.acceptTerms}</span>\r\n                                )}\r\n                            </div>\r\n                        </>\r\n                    )}\r\n\r\n                    {/* Pulsante submit principale */}\r\n                    <button \r\n                        type=\"submit\" \r\n                        className=\"btn-primary btn-auth\"\r\n                        disabled={isSubmitting || loading}\r\n                    >\r\n                        {isSubmitting || loading ? (\r\n                            <span className=\"loading-inline\">\r\n                                <span className=\"spinner-small\"></span>\r\n                                {mode === 'login' && 'Accesso...'}\r\n                                {mode === 'register' && 'Registrazione...'}\r\n                                {mode === 'reset' && 'Invio...'}\r\n                            </span>\r\n                        ) : (\r\n                            <>\r\n                                {mode === 'login' && '🚀 Accedi'}\r\n                                {mode === 'register' && '✨ Registrati'}\r\n                                {mode === 'reset' && '📧 Invia Reset'}\r\n                            </>\r\n                        )}\r\n                    </button>\r\n\r\n                    {/* Google login (solo per login e register) */}\r\n                    {mode !== 'reset' && (\r\n                        <>\r\n                            <div className=\"auth-divider\">\r\n                                <span>oppure</span>\r\n                            </div>\r\n\r\n                            <button \r\n                                type=\"button\"\r\n                                onClick={handleGoogleLogin}\r\n                                className=\"btn-google\"\r\n                                disabled={isSubmitting || loading}\r\n                            >\r\n                                <span className=\"google-icon\">🔍</span>\r\n                                Continua con Google\r\n                            </button>\r\n                        </>\r\n                    )}\r\n                </form>\r\n\r\n                {/* Link cambio modalità */}\r\n                <div className=\"auth-links\">\r\n                    {mode === 'login' && (\r\n                        <>\r\n                            <p>\r\n                                Non hai un account?{' '}\r\n                                <button \r\n                                    type=\"button\" \r\n                                    className=\"link-button\"\r\n                                    onClick={() => changeMode('register')}\r\n                                    disabled={isSubmitting}\r\n                                >\r\n                                    Registrati qui\r\n                                </button>\r\n                            </p>\r\n                            <p>\r\n                                <button \r\n                                    type=\"button\" \r\n                                    className=\"link-button\"\r\n                                    onClick={() => changeMode('reset')}\r\n                                    disabled={isSubmitting}\r\n                                >\r\n                                    Password dimenticata?\r\n                                </button>\r\n                            </p>\r\n                        </>\r\n                    )}\r\n\r\n                    {mode === 'register' && (\r\n                        <p>\r\n                            Hai già un account?{' '}\r\n                            <button \r\n                                type=\"button\" \r\n                                className=\"link-button\"\r\n                                onClick={() => changeMode('login')}\r\n                                disabled={isSubmitting}\r\n                            >\r\n                                Accedi qui\r\n                            </button>\r\n                        </p>\r\n                    )}\r\n\r\n                    {mode === 'reset' && (\r\n                        <p>\r\n                            Ricordi la password?{' '}\r\n                            <button \r\n                                type=\"button\" \r\n                                className=\"link-button\"\r\n                                onClick={() => changeMode('login')}\r\n                                disabled={isSubmitting}\r\n                            >\r\n                                Torna al login\r\n                            </button>\r\n                        </p>\r\n                    )}\r\n                </div>\r\n\r\n                {/* Info app */}\r\n                <div className=\"auth-footer\">\r\n                    <p className=\"app-info\">\r\n                        🔐 I tuoi dati sono protetti con Firebase Authentication.<br/>\r\n                        💪 Inizia oggi il tuo percorso verso il <strong>Fisico della Madonna</strong>!\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AuthModal;","// Migration Modal - Data Migration Interface\r\n// Modale per guidare l'utente nella migrazione dei dati da localStorage a Firebase\r\n\r\nimport React, { useState } from 'react';\r\nimport { useAuth } from './AuthProvider';\r\nimport { logger } from '../firebase/config';\r\n\r\nconst MigrationModal = () => {\r\n    const { startMigration, skipMigration, migrationStatus } = useAuth();\r\n    const [showDetails, setShowDetails] = useState(false);\r\n    const [migrationReport, setMigrationReport] = useState(null);\r\n\r\n    // Avvia processo migrazione\r\n    const handleStartMigration = async () => {\r\n        try {\r\n            logger.info('Avvio migrazione dati utente...');\r\n            const result = await startMigration();\r\n            \r\n            if (result.success) {\r\n                setMigrationReport(result.report);\r\n                logger.success('Migrazione completata con successo');\r\n            } else {\r\n                setMigrationReport(result.report || { success: false, errors: [result.error] });\r\n                logger.error('Migrazione fallita', result.error);\r\n            }\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore durante migrazione', error);\r\n            setMigrationReport({ \r\n                success: false, \r\n                errors: [error.message || 'Errore imprevisto durante la migrazione'] \r\n            });\r\n        }\r\n    };\r\n\r\n    // Skip migrazione\r\n    const handleSkipMigration = () => {\r\n        const confirmed = window.confirm(\r\n            'Sei sicuro di voler saltare la migrazione?\\n\\n' +\r\n            'I tuoi dati locali rimarranno solo su questo dispositivo e potrebbero andare persi. ' +\r\n            'Potrai sempre migrare in seguito dalle impostazioni.'\r\n        );\r\n        \r\n        if (confirmed) {\r\n            skipMigration();\r\n            logger.info('Migrazione saltata dall\\'utente');\r\n        }\r\n    };\r\n\r\n    // Mostra progress migrazione\r\n    if (migrationStatus.inProgress) {\r\n        return (\r\n            <div className=\"migration-modal-overlay\">\r\n                <div className=\"migration-modal\">\r\n                    <div className=\"migration-header\">\r\n                        <h2>🔄 Migrazione in Corso</h2>\r\n                        <p>Stiamo trasferendo i tuoi dati al cloud...</p>\r\n                    </div>\r\n\r\n                    <div className=\"migration-progress\">\r\n                        <div className=\"progress-spinner\">\r\n                            <div className=\"spinner-large\"></div>\r\n                        </div>\r\n                        \r\n                        <div className=\"progress-steps\">\r\n                            <div className=\"progress-step completed\">\r\n                                ✅ Backup dati locali\r\n                            </div>\r\n                            <div className=\"progress-step active\">\r\n                                🔄 Trasferimento al cloud\r\n                            </div>\r\n                            <div className=\"progress-step\">\r\n                                📊 Verifica integrità\r\n                            </div>\r\n                            <div className=\"progress-step\">\r\n                                ✨ Finalizzazione\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"migration-info\">\r\n                        <p>⏱️ <strong>Questo processo può richiedere qualche minuto</strong></p>\r\n                        <p>🔐 I tuoi dati sono al sicuro durante il trasferimento</p>\r\n                        <p>📱 Non chiudere questa finestra fino al completamento</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Mostra risultato migrazione\r\n    if (migrationReport) {\r\n        const isSuccess = migrationReport.success && (!migrationReport.errors || migrationReport.errors.length === 0);\r\n        \r\n        return (\r\n            <div className=\"migration-modal-overlay\">\r\n                <div className=\"migration-modal\">\r\n                    <div className=\"migration-header\">\r\n                        <h2>{isSuccess ? '✅ Migrazione Completata!' : '⚠️ Migrazione Completata con Avvisi'}</h2>\r\n                        <p>\r\n                            {isSuccess \r\n                                ? 'I tuoi dati sono stati trasferiti con successo al cloud!'\r\n                                : 'La migrazione è stata completata ma ci sono alcuni avvisi da verificare.'\r\n                            }\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className=\"migration-results\">\r\n                        <div className=\"results-summary\">\r\n                            <div className=\"result-stat\">\r\n                                <span className=\"stat-value\">{migrationReport.migratedItems || 0}</span>\r\n                                <span className=\"stat-label\">Elementi Migrati</span>\r\n                            </div>\r\n                            <div className=\"result-stat\">\r\n                                <span className=\"stat-value\">{migrationReport.totalItems || 0}</span>\r\n                                <span className=\"stat-label\">Totale Elementi</span>\r\n                            </div>\r\n                            <div className=\"result-stat\">\r\n                                <span className=\"stat-value\">{migrationReport.errors?.length || 0}</span>\r\n                                <span className=\"stat-label\">Errori</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Mostra errori se presenti */}\r\n                        {migrationReport.errors && migrationReport.errors.length > 0 && (\r\n                            <div className=\"migration-errors\">\r\n                                <h4>⚠️ Avvisi e Errori:</h4>\r\n                                <ul>\r\n                                    {migrationReport.errors.slice(0, 5).map((error, index) => (\r\n                                        <li key={index}>{error}</li>\r\n                                    ))}\r\n                                </ul>\r\n                                {migrationReport.errors.length > 5 && (\r\n                                    <p><em>... e altri {migrationReport.errors.length - 5} avvisi</em></p>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Toggle dettagli */}\r\n                        <button \r\n                            className=\"toggle-details\"\r\n                            onClick={() => setShowDetails(!showDetails)}\r\n                        >\r\n                            {showDetails ? '📄 Nascondi Dettagli' : '📄 Mostra Dettagli'}\r\n                        </button>\r\n\r\n                        {showDetails && (\r\n                            <div className=\"migration-details\">\r\n                                <h4>📋 Dettagli Migrazione:</h4>\r\n                                <div className=\"detail-grid\">\r\n                                    <div className=\"detail-item\">\r\n                                        <strong>Inizio:</strong> {migrationReport.startTime ? new Date(migrationReport.startTime).toLocaleString() : 'N/A'}\r\n                                    </div>\r\n                                    <div className=\"detail-item\">\r\n                                        <strong>Fine:</strong> {migrationReport.endTime ? new Date(migrationReport.endTime).toLocaleString() : 'N/A'}\r\n                                    </div>\r\n                                    <div className=\"detail-item\">\r\n                                        <strong>Verifica Integrità:</strong> {migrationReport.verificationPassed ? '✅ Superata' : '❌ Fallita'}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {migrationReport.steps && (\r\n                                    <div className=\"migration-steps-log\">\r\n                                        <h5>Passaggi Eseguiti:</h5>\r\n                                        <ul>\r\n                                            {migrationReport.steps.map((step, index) => (\r\n                                                <li key={index}>{step}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"migration-actions\">\r\n                        <button \r\n                            className=\"btn-primary\"\r\n                            onClick={() => window.location.reload()}\r\n                        >\r\n                            ✨ Continua nell'App\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"migration-footer\">\r\n                        <p>\r\n                            🎉 <strong>Congratulazioni!</strong> I tuoi dati sono ora sincronizzati nel cloud.<br/>\r\n                            💾 Hai accesso automatico ai backup e alla sincronizzazione multi-dispositivo.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Modale iniziale - richiede conferma migrazione\r\n    return (\r\n        <div className=\"migration-modal-overlay\">\r\n            <div className=\"migration-modal\">\r\n                <div className=\"migration-header\">\r\n                    <h2>🚀 Benvenuto nel Cloud!</h2>\r\n                    <p>Abbiamo rilevato dei dati fitness salvati localmente sul tuo dispositivo.</p>\r\n                </div>\r\n\r\n                <div className=\"migration-benefits\">\r\n                    <h3>✨ Vantaggi della Migrazione:</h3>\r\n                    <div className=\"benefits-grid\">\r\n                        <div className=\"benefit-item\">\r\n                            <span className=\"benefit-icon\">☁️</span>\r\n                            <div>\r\n                                <strong>Backup Automatico</strong>\r\n                                <p>I tuoi dati sono sempre al sicuro</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"benefit-item\">\r\n                            <span className=\"benefit-icon\">📱</span>\r\n                            <div>\r\n                                <strong>Multi-Dispositivo</strong>\r\n                                <p>Accedi da qualsiasi dispositivo</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"benefit-item\">\r\n                            <span className=\"benefit-icon\">📊</span>\r\n                            <div>\r\n                                <strong>Analytics Avanzati</strong>\r\n                                <p>Grafici e insights automatici</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"benefit-item\">\r\n                            <span className=\"benefit-icon\">⚡</span>\r\n                            <div>\r\n                                <strong>Performance</strong>\r\n                                <p>Caricamento più veloce</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"migration-info\">\r\n                    <h4>📋 Cosa verrà migrato:</h4>\r\n                    <ul>\r\n                        <li>📈 <strong>Progressi fisici</strong> - Peso, misure, composizione corporea</li>\r\n                        <li>💪 <strong>Allenamenti</strong> - Sessioni, esercizi, performance</li>\r\n                        <li>⏱️ <strong>Statistiche</strong> - Tempo investito, streak, obiettivi</li>\r\n                        <li>⚙️ <strong>Impostazioni</strong> - Preferenze e configurazioni</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div className=\"migration-actions\">\r\n                    <button \r\n                        className=\"btn-primary btn-migration\"\r\n                        onClick={handleStartMigration}\r\n                        disabled={migrationStatus.inProgress}\r\n                    >\r\n                        🚀 Inizia Migrazione\r\n                    </button>\r\n                    \r\n                    <button \r\n                        className=\"btn-secondary\"\r\n                        onClick={handleSkipMigration}\r\n                        disabled={migrationStatus.inProgress}\r\n                    >\r\n                        ⏭️ Salta per Ora\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"migration-footer\">\r\n                    <p className=\"migration-disclaimer\">\r\n                        🔐 <strong>Privacy e Sicurezza:</strong> I tuoi dati sono criptati e protetti da Firebase.<br/>\r\n                        ⚡ <strong>Veloce:</strong> Il processo richiede solo pochi minuti.<br/>\r\n                        🔄 <strong>Reversibile:</strong> Puoi sempre ripristinare i dati locali se necessario.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MigrationModal;","import React, { Suspense, lazy } from 'react';\r\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport { AuthProvider, useAuth } from './components/AuthProvider';\r\nimport Dashboard from './components/Dashboard';\r\nimport Workout from './components/Workout';\r\nimport Nutrition from './components/Nutrition';\r\nimport Supplements from './components/Supplements';\r\nimport Recovery from './components/Recovery';\r\nimport Progress from './components/Progress';\r\nimport AuthModal from './components/AuthModal';\r\nimport MigrationModal from './components/MigrationModal';\r\nimport './styles/main.css';\r\n\r\n// Lazy loading per componenti pesanti\r\nconst LazyAnalytics = lazy(() => import('./components/AdvancedAnalytics'));\r\nconst LazyNutritionTracker = lazy(() => import('./components/SimpleNutritionTracker'));\r\nconst LazyRecoveryTimer = lazy(() => import('./components/SimpleRecoveryTimer'));\r\n\r\n// Componente principale con gestione auth e routing\r\nfunction AppContent() {\r\n    const { user, loading, error, migrationStatus } = useAuth();\r\n\r\n    // Loading spinner durante inizializzazione\r\n    if (loading) {\r\n        return (\r\n            <div className=\"app-loading\">\r\n                <div className=\"loading-container\">\r\n                    <div className=\"loading-spinner\"></div>\r\n                    <h2>🏋️ Extraordinary Growth</h2>\r\n                    <p>Caricamento in corso...</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Mostra errore se presente\r\n    if (error) {\r\n        return (\r\n            <div className=\"app-error\">\r\n                <div className=\"error-container\">\r\n                    <h2>⚠️ Errore</h2>\r\n                    <p>{error}</p>\r\n                    <button onClick={() => window.location.reload()}>\r\n                        Ricarica Pagina\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                {/* Modale autenticazione se utente non loggato */}\r\n                {!user && <AuthModal />}\r\n                \r\n                {/* Modale migrazione se necessaria */}\r\n                {user && migrationStatus.isRequired && <MigrationModal />}\r\n                \r\n                {/* Routing principale */}\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Dashboard />} />\r\n                    <Route path=\"/workout\" element={<Workout />} />\r\n                    <Route path=\"/nutrition\" element={<Nutrition />} />\r\n                    <Route path=\"/supplements\" element={<Supplements />} />\r\n                    <Route path=\"/recovery\" element={<Recovery />} />\r\n                    <Route path=\"/progress\" element={<Progress />} />\r\n                    <Route path=\"/analytics\" element={\r\n                        <Suspense fallback={<div className=\"loading-analytics\">Caricamento Analytics...</div>}>\r\n                            <LazyAnalytics />\r\n                        </Suspense>\r\n                    } />\r\n                    <Route path=\"/nutrition-tracker\" element={\r\n                        <Suspense fallback={<div className=\"loading-nutrition\">Caricamento Nutrition Tracker...</div>}>\r\n                            <LazyNutritionTracker />\r\n                        </Suspense>\r\n                    } />\r\n                    <Route path=\"/recovery-timer\" element={\r\n                        <Suspense fallback={<div className=\"loading-recovery\">Caricamento Recovery Timer...</div>}>\r\n                            <LazyRecoveryTimer />\r\n                        </Suspense>\r\n                    } />\r\n                </Routes>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\n// App wrapper con AuthProvider\r\nfunction App() {\r\n    return (\r\n        <AuthProvider>\r\n            <AppContent />\r\n        </AuthProvider>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/main.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}