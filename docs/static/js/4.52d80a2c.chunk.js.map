{"version":3,"sources":["components/AdvancedAnalytics.js"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","Filler","ArcElement","generateInsights","stats","data","insights","currentStreak","push","type","icon","title","message","concat","totalWorkouts","averageWorkoutDuration","uniqueExercises","totalExercises","nutritionAdherence","recoverySessionsTotal","progress","length","weights","slice","map","p","weight","filter","w","trend","Math","abs","AdvancedAnalytics","user","useAuth","analyticsData","setAnalyticsData","useState","workouts","exercises","nutrition","recovery","loading","setLoading","selectedPeriod","setSelectedPeriod","selectedMetric","setSelectedMetric","useEffect","loadAnalyticsData","async","_progressResult$data","_workoutResult$data","_exerciseResult$data","_nutritionResult$data","_recoveryResult$data","logger","info","endDate","Date","startDate","getPeriodStartDate","progressResult","workoutResult","exerciseResult","nutritionResult","recoveryResult","Promise","all","progressRepo","getUserProgress","toISOString","split","workoutRepo","getUserSessions","exerciseRepo","getWithQuery","nutritionRepo","getUserMeals","recoveryRepo","getUserRecoverySessions","success","error","period","now","subDays","progressChartData","useMemo","sortedData","sort","a","b","date","labels","item","format","locale","it","datasets","label","borderColor","backgroundColor","fill","tension","pointRadius","pointHoverRadius","muscleMass","yAxisID","bodyFat","workoutVolumeData","dailyVolume","eachDayOfInterval","start","end","day","dayStr","dayWorkouts","workout","status","totalDuration","reduce","sum","duration","sessions","d","borderWidth","exerciseDistributionData","exerciseCount","forEach","exercise","name","exerciseName","sortedExercises","Object","entries","_ref","_ref2","colors","_ref3","_ref4","count","color","replace","nutritionAdherenceData","dailyAdherence","dayMeals","meal","completedMeals","adherenceRate","totalProteins","proteins","totalMeals","recoveryDistributionData","recoveryCount","recoveryDuration","session","activityType","activities","sauna","steam_bath","ice_bath","cold_shower","stretching","meditation","sortedActivities","_ref5","_ref6","_ref7","_activities$type","_ref8","_ref9","_activities$type2","_ref0","_activities$type3","weeklyRecoveryData","last4Weeks","i","weekStart","startOfWeek","weekEnd","endOfWeek","weekSessions","sessionDate","s","computedStats","Set","e","size","calculateCurrentStreak","progressEntries","calculateNutritionAdherence","avgRecoveryDuration","calculateAvgRecoveryDuration","round","trends","calculateTrends","completedWorkouts","streak","today","workoutDates","workoutDate","floor","recent","firstWeight","lastWeight","weightChange","toFixed","last14Days","first7Days","second7Days","daysDiff","avgRecent","avgPrevious","volume","volumeChange","chartOptions","responsive","maintainAspectRatio","interaction","mode","intersect","plugins","legend","position","usePointStyle","padding","tooltip","titleColor","bodyColor","cornerRadius","displayColors","scales","x","display","grid","y","beginAtZero","y1","drawOnChartArea","_jsx","className","children","_jsxs","value","onChange","target","m","Line","options","Bar","_objectSpread","Doughnut","boxWidth","max","text","insight","index"],"mappings":"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","file":"static/js/4.52d80a2c.chunk.js","sourcesContent":["// Advanced Analytics Dashboard - Data Visualization Enterprise\r\n// Sistema completo di analytics con grafici interattivi e insights automatici\r\n\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    Filler,\r\n    ArcElement\r\n} from 'chart.js';\r\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\r\nimport { format, subDays, startOfWeek, endOfWeek, eachDayOfInterval } from 'date-fns';\r\nimport { it } from 'date-fns/locale';\r\n\r\nimport { progressRepo, workoutRepo, exerciseRepo, nutritionRepo, recoveryRepo } from '../firebase/firestore';\r\nimport { useAuth } from './AuthProvider';\r\nimport { logger } from '../firebase/config';\r\n\r\n// Registrazione componenti Chart.js\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    Filler,\r\n    ArcElement\r\n);\r\n\r\nconst AdvancedAnalytics = () => {\r\n    const { user } = useAuth();\r\n    const [analyticsData, setAnalyticsData] = useState({\r\n        progress: [],\r\n        workouts: [],\r\n        exercises: [],\r\n        nutrition: [],\r\n        recovery: []\r\n    });\r\n    const [loading, setLoading] = useState(true);\r\n    const [selectedPeriod, setSelectedPeriod] = useState('3months');\r\n    const [selectedMetric, setSelectedMetric] = useState('weight');\r\n\r\n    // Carica tutti i dati per analytics\r\n    useEffect(() => {\r\n        if (!user) return;\r\n        loadAnalyticsData();\r\n    }, [user, selectedPeriod]);\r\n\r\n    const loadAnalyticsData = async () => {\r\n        setLoading(true);\r\n        try {\r\n            logger.info('Caricamento dati analytics...');\r\n\r\n            const endDate = new Date();\r\n            const startDate = getPeriodStartDate(selectedPeriod);\r\n\r\n            // Carica dati paralleli per performance\r\n            const [progressResult, workoutResult, exerciseResult, nutritionResult, recoveryResult] = await Promise.all([\r\n                progressRepo.getUserProgress(\r\n                    startDate.toISOString().split('T')[0],\r\n                    endDate.toISOString().split('T')[0]\r\n                ),\r\n                workoutRepo.getUserSessions(100),\r\n                exerciseRepo.getWithQuery([]),\r\n                nutritionRepo.getUserMeals(\r\n                    startDate.toISOString().split('T')[0],\r\n                    endDate.toISOString().split('T')[0]\r\n                ),\r\n                recoveryRepo.getUserRecoverySessions(\r\n                    startDate.toISOString().split('T')[0],\r\n                    endDate.toISOString().split('T')[0]\r\n                )\r\n            ]);\r\n\r\n            setAnalyticsData({\r\n                progress: progressResult.success ? progressResult.data : [],\r\n                workouts: workoutResult.success ? workoutResult.data : [],\r\n                exercises: exerciseResult.success ? exerciseResult.data : [],\r\n                nutrition: nutritionResult.success ? nutritionResult.data : [],\r\n                recovery: recoveryResult.success ? recoveryResult.data : []\r\n            });\r\n\r\n            logger.success('Dati analytics caricati', {\r\n                progress: progressResult.data?.length || 0,\r\n                workouts: workoutResult.data?.length || 0,\r\n                exercises: exerciseResult.data?.length || 0,\r\n                nutrition: nutritionResult.data?.length || 0,\r\n                recovery: recoveryResult.data?.length || 0\r\n            });\r\n\r\n        } catch (error) {\r\n            logger.error('Errore caricamento analytics', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Utility per calcolo date\r\n    const getPeriodStartDate = (period) => {\r\n        const now = new Date();\r\n        switch (period) {\r\n            case '1month': return subDays(now, 30);\r\n            case '3months': return subDays(now, 90);\r\n            case '6months': return subDays(now, 180);\r\n            case '1year': return subDays(now, 365);\r\n            default: return subDays(now, 90);\r\n        }\r\n    };\r\n\r\n    // ========== PROGRESS ANALYTICS ==========\r\n    \r\n    const progressChartData = useMemo(() => {\r\n        if (!analyticsData.progress.length) return null;\r\n\r\n        const sortedData = [...analyticsData.progress].sort((a, b) => \r\n            new Date(a.date) - new Date(b.date)\r\n        );\r\n\r\n        const labels = sortedData.map(item => \r\n            format(new Date(item.date), 'dd MMM', { locale: it })\r\n        );\r\n\r\n        const datasets = [];\r\n\r\n        // Dataset peso\r\n        if (selectedMetric === 'weight' || selectedMetric === 'all') {\r\n            datasets.push({\r\n                label: 'Peso (kg)',\r\n                data: sortedData.map(item => item.weight || null),\r\n                borderColor: 'rgb(75, 192, 192)',\r\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n                fill: true,\r\n                tension: 0.3,\r\n                pointRadius: 4,\r\n                pointHoverRadius: 6\r\n            });\r\n        }\r\n\r\n        // Dataset massa muscolare\r\n        if (selectedMetric === 'muscle' || selectedMetric === 'all') {\r\n            datasets.push({\r\n                label: 'Massa Muscolare (kg)',\r\n                data: sortedData.map(item => item.muscleMass || null),\r\n                borderColor: 'rgb(255, 99, 132)',\r\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n                fill: true,\r\n                tension: 0.3,\r\n                yAxisID: 'y'\r\n            });\r\n        }\r\n\r\n        // Dataset massa grassa\r\n        if (selectedMetric === 'fat' || selectedMetric === 'all') {\r\n            datasets.push({\r\n                label: 'Massa Grassa (%)',\r\n                data: sortedData.map(item => item.bodyFat || null),\r\n                borderColor: 'rgb(255, 205, 86)',\r\n                backgroundColor: 'rgba(255, 205, 86, 0.2)',\r\n                fill: false,\r\n                tension: 0.3,\r\n                yAxisID: selectedMetric === 'all' ? 'y1' : 'y'\r\n            });\r\n        }\r\n\r\n        return { labels, datasets };\r\n    }, [analyticsData.progress, selectedMetric]);\r\n\r\n    // ========== WORKOUT ANALYTICS ==========\r\n    \r\n    const workoutVolumeData = useMemo(() => {\r\n        if (!analyticsData.workouts.length) return null;\r\n\r\n        const now = new Date();\r\n        const last30Days = eachDayOfInterval({\r\n            start: subDays(now, 29),\r\n            end: now\r\n        });\r\n\r\n        const dailyVolume = last30Days.map(day => {\r\n            const dayStr = format(day, 'yyyy-MM-dd');\r\n            const dayWorkouts = analyticsData.workouts.filter(workout => \r\n                workout.date === dayStr && workout.status === 'completed'\r\n            );\r\n            \r\n            const totalDuration = dayWorkouts.reduce((sum, workout) => \r\n                sum + (workout.totalDuration || 0), 0\r\n            );\r\n\r\n            return {\r\n                date: dayStr,\r\n                label: format(day, 'dd/MM'),\r\n                duration: totalDuration,\r\n                sessions: dayWorkouts.length\r\n            };\r\n        });\r\n\r\n        return {\r\n            labels: dailyVolume.map(d => d.label),\r\n            datasets: [\r\n                {\r\n                    label: 'Durata (minuti)',\r\n                    data: dailyVolume.map(d => d.duration),\r\n                    backgroundColor: 'rgba(54, 162, 235, 0.8)',\r\n                    borderColor: 'rgba(54, 162, 235, 1)',\r\n                    borderWidth: 2\r\n                },\r\n                {\r\n                    label: 'Numero Sessioni',\r\n                    data: dailyVolume.map(d => d.sessions),\r\n                    backgroundColor: 'rgba(255, 159, 64, 0.8)',\r\n                    borderColor: 'rgba(255, 159, 64, 1)',\r\n                    borderWidth: 2,\r\n                    yAxisID: 'y1'\r\n                }\r\n            ]\r\n        };\r\n    }, [analyticsData.workouts]);\r\n\r\n    // ========== EXERCISE DISTRIBUTION ==========\r\n    \r\n    const exerciseDistributionData = useMemo(() => {\r\n        if (!analyticsData.exercises.length) return null;\r\n\r\n        const exerciseCount = {};\r\n        analyticsData.exercises.forEach(exercise => {\r\n            const name = exercise.exerciseName || 'Sconosciuto';\r\n            exerciseCount[name] = (exerciseCount[name] || 0) + 1;\r\n        });\r\n\r\n        // Top 8 esercizi più frequenti\r\n        const sortedExercises = Object.entries(exerciseCount)\r\n            .sort(([,a], [,b]) => b - a)\r\n            .slice(0, 8);\r\n\r\n        const colors = [\r\n            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',\r\n            '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF'\r\n        ];\r\n\r\n        return {\r\n            labels: sortedExercises.map(([name]) => name),\r\n            datasets: [{\r\n                label: 'Frequenza Esercizi',\r\n                data: sortedExercises.map(([, count]) => count),\r\n                backgroundColor: colors,\r\n                borderColor: colors.map(color => color.replace('0.8', '1')),\r\n                borderWidth: 2\r\n            }]\r\n        };\r\n    }, [analyticsData.exercises]);\r\n\r\n    // ========== NUTRITION ANALYTICS ==========\r\n    \r\n    const nutritionAdherenceData = useMemo(() => {\r\n        if (!analyticsData.nutrition.length) return null;\r\n\r\n        const now = new Date();\r\n        const last30Days = eachDayOfInterval({\r\n            start: subDays(now, 29),\r\n            end: now\r\n        });\r\n\r\n        const dailyAdherence = last30Days.map(day => {\r\n            const dayStr = format(day, 'yyyy-MM-dd');\r\n            const dayMeals = analyticsData.nutrition.filter(meal => meal.date === dayStr);\r\n            const completedMeals = dayMeals.filter(meal => meal.status === 'completed');\r\n            \r\n            const adherenceRate = dayMeals.length > 0 ? (completedMeals.length / dayMeals.length) * 100 : 0;\r\n            const totalProteins = completedMeals.reduce((sum, meal) => sum + (meal.proteins || 0), 0);\r\n\r\n            return {\r\n                date: dayStr,\r\n                label: format(day, 'dd/MM'),\r\n                adherenceRate,\r\n                totalProteins,\r\n                completedMeals: completedMeals.length,\r\n                totalMeals: dayMeals.length\r\n            };\r\n        });\r\n\r\n        return {\r\n            labels: dailyAdherence.map(d => d.label),\r\n            datasets: [\r\n                {\r\n                    label: 'Aderenza Dieta (%)',\r\n                    data: dailyAdherence.map(d => d.adherenceRate),\r\n                    borderColor: 'rgb(34, 197, 94)',\r\n                    backgroundColor: 'rgba(34, 197, 94, 0.2)',\r\n                    fill: true,\r\n                    tension: 0.3,\r\n                    yAxisID: 'y'\r\n                },\r\n                {\r\n                    label: 'Proteine Giornaliere (g)',\r\n                    data: dailyAdherence.map(d => d.totalProteins),\r\n                    borderColor: 'rgb(168, 85, 247)',\r\n                    backgroundColor: 'rgba(168, 85, 247, 0.2)',\r\n                    fill: false,\r\n                    tension: 0.3,\r\n                    yAxisID: 'y1'\r\n                }\r\n            ]\r\n        };\r\n    }, [analyticsData.nutrition]);\r\n\r\n    // ========== RECOVERY ANALYTICS ==========\r\n    \r\n    const recoveryDistributionData = useMemo(() => {\r\n        if (!analyticsData.recovery.length) return null;\r\n\r\n        const recoveryCount = {};\r\n        const recoveryDuration = {};\r\n        \r\n        analyticsData.recovery.forEach(session => {\r\n            const type = session.activityType;\r\n            recoveryCount[type] = (recoveryCount[type] || 0) + 1;\r\n            recoveryDuration[type] = (recoveryDuration[type] || 0) + (session.duration || 0);\r\n        });\r\n\r\n        const activities = {\r\n            sauna: { name: '🔥 Sauna', color: '#ef4444' },\r\n            steam_bath: { name: '💨 Bagno Turco', color: '#06b6d4' },\r\n            ice_bath: { name: '🧊 Ice Bath', color: '#3b82f6' },\r\n            cold_shower: { name: '🚿 Doccia Fredda', color: '#6366f1' },\r\n            stretching: { name: '🤸 Stretching', color: '#8b5cf6' },\r\n            meditation: { name: '🧘 Meditazione', color: '#a855f7' }\r\n        };\r\n\r\n        const sortedActivities = Object.entries(recoveryCount)\r\n            .sort(([,a], [,b]) => b - a)\r\n            .slice(0, 6);\r\n\r\n        return {\r\n            labels: sortedActivities.map(([type]) => activities[type]?.name || type),\r\n            datasets: [{\r\n                label: 'Sessioni Recovery',\r\n                data: sortedActivities.map(([, count]) => count),\r\n                backgroundColor: sortedActivities.map(([type]) => activities[type]?.color || '#6b7280'),\r\n                borderColor: sortedActivities.map(([type]) => activities[type]?.color || '#6b7280'),\r\n                borderWidth: 2\r\n            }]\r\n        };\r\n    }, [analyticsData.recovery]);\r\n\r\n    const weeklyRecoveryData = useMemo(() => {\r\n        if (!analyticsData.recovery.length) return null;\r\n\r\n        const now = new Date();\r\n        const last4Weeks = [];\r\n        \r\n        for (let i = 3; i >= 0; i--) {\r\n            const weekStart = startOfWeek(subDays(now, i * 7), { locale: it });\r\n            const weekEnd = endOfWeek(weekStart, { locale: it });\r\n            \r\n            const weekSessions = analyticsData.recovery.filter(session => {\r\n                const sessionDate = new Date(session.date);\r\n                return sessionDate >= weekStart && sessionDate <= weekEnd;\r\n            });\r\n\r\n            const totalDuration = weekSessions.reduce((sum, s) => sum + (s.duration || 0), 0);\r\n            \r\n            last4Weeks.push({\r\n                label: format(weekStart, 'dd MMM', { locale: it }),\r\n                sessions: weekSessions.length,\r\n                duration: totalDuration\r\n            });\r\n        }\r\n\r\n        return {\r\n            labels: last4Weeks.map(w => w.label),\r\n            datasets: [\r\n                {\r\n                    label: 'Sessioni Recovery',\r\n                    data: last4Weeks.map(w => w.sessions),\r\n                    backgroundColor: 'rgba(59, 130, 246, 0.8)',\r\n                    borderColor: 'rgba(59, 130, 246, 1)',\r\n                    borderWidth: 2\r\n                },\r\n                {\r\n                    label: 'Durata Totale (min)',\r\n                    data: last4Weeks.map(w => w.duration),\r\n                    backgroundColor: 'rgba(168, 85, 247, 0.8)',\r\n                    borderColor: 'rgba(168, 85, 247, 1)',\r\n                    borderWidth: 2,\r\n                    yAxisID: 'y1'\r\n                }\r\n            ]\r\n        };\r\n    }, [analyticsData.recovery]);\r\n\r\n    // ========== STATISTICS COMPUTATION ==========\r\n    \r\n    const computedStats = useMemo(() => {\r\n        const stats = {\r\n            totalWorkouts: analyticsData.workouts.filter(w => w.status === 'completed').length,\r\n            totalDuration: analyticsData.workouts.reduce((sum, w) => sum + (w.totalDuration || 0), 0),\r\n            averageWorkoutDuration: 0,\r\n            totalExercises: analyticsData.exercises.length,\r\n            uniqueExercises: new Set(analyticsData.exercises.map(e => e.exerciseName)).size,\r\n            currentStreak: calculateCurrentStreak(),\r\n            progressEntries: analyticsData.progress.length,\r\n            nutritionAdherence: calculateNutritionAdherence(),\r\n            recoverySessionsTotal: analyticsData.recovery.length,\r\n            avgRecoveryDuration: calculateAvgRecoveryDuration()\r\n        };\r\n\r\n        stats.averageWorkoutDuration = stats.totalWorkouts > 0 \r\n            ? Math.round(stats.totalDuration / stats.totalWorkouts) \r\n            : 0;\r\n\r\n        // Trend calcoli\r\n        stats.trends = calculateTrends();\r\n\r\n        return stats;\r\n    }, [analyticsData]);\r\n\r\n    const calculateCurrentStreak = () => {\r\n        const completedWorkouts = analyticsData.workouts\r\n            .filter(w => w.status === 'completed')\r\n            .sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n        if (!completedWorkouts.length) return 0;\r\n\r\n        let streak = 0;\r\n        const today = new Date();\r\n        const workoutDates = [...new Set(completedWorkouts.map(w => w.date))];\r\n\r\n        for (let i = 0; i < workoutDates.length; i++) {\r\n            const workoutDate = new Date(workoutDates[i]);\r\n            const daysDiff = Math.floor((today - workoutDate) / (1000 * 60 * 60 * 24));\r\n            \r\n            if (daysDiff <= i + 1) {\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return streak;\r\n    };\r\n\r\n    const calculateTrends = () => {\r\n        const trends = {};\r\n\r\n        // Trend peso\r\n        if (analyticsData.progress.length >= 2) {\r\n            const sortedProgress = [...analyticsData.progress].sort((a, b) => \r\n                new Date(a.date) - new Date(b.date)\r\n            );\r\n            \r\n            const recent = sortedProgress.slice(-5); // Ultimi 5 punti\r\n            if (recent.length >= 2) {\r\n                const firstWeight = recent[0].weight;\r\n                const lastWeight = recent[recent.length - 1].weight;\r\n                trends.weight = lastWeight > firstWeight ? 'up' : \r\n                               lastWeight < firstWeight ? 'down' : 'stable';\r\n                trends.weightChange = Math.abs(lastWeight - firstWeight).toFixed(1);\r\n            }\r\n        }\r\n\r\n        // Trend volume allenamento\r\n        const last14Days = analyticsData.workouts.filter(w => {\r\n            const workoutDate = new Date(w.date);\r\n            const daysDiff = (new Date() - workoutDate) / (1000 * 60 * 60 * 24);\r\n            return daysDiff <= 14 && w.status === 'completed';\r\n        });\r\n\r\n        const first7Days = last14Days.filter(w => {\r\n            const workoutDate = new Date(w.date);\r\n            const daysDiff = (new Date() - workoutDate) / (1000 * 60 * 60 * 24);\r\n            return daysDiff <= 7;\r\n        });\r\n\r\n        const second7Days = last14Days.filter(w => {\r\n            const workoutDate = new Date(w.date);\r\n            const daysDiff = (new Date() - workoutDate) / (1000 * 60 * 60 * 24);\r\n            return daysDiff > 7 && daysDiff <= 14;\r\n        });\r\n\r\n        if (first7Days.length && second7Days.length) {\r\n            const avgRecent = first7Days.reduce((sum, w) => sum + (w.totalDuration || 0), 0) / first7Days.length;\r\n            const avgPrevious = second7Days.reduce((sum, w) => sum + (w.totalDuration || 0), 0) / second7Days.length;\r\n            \r\n            trends.volume = avgRecent > avgPrevious ? 'up' : \r\n                           avgRecent < avgPrevious ? 'down' : 'stable';\r\n            trends.volumeChange = Math.abs(avgRecent - avgPrevious).toFixed(0);\r\n        }\r\n\r\n        return trends;\r\n    };\r\n\r\n    const calculateNutritionAdherence = () => {\r\n        if (!analyticsData.nutrition.length) return 0;\r\n        const completedMeals = analyticsData.nutrition.filter(meal => meal.status === 'completed');\r\n        return Math.round((completedMeals.length / analyticsData.nutrition.length) * 100);\r\n    };\r\n\r\n    const calculateAvgRecoveryDuration = () => {\r\n        if (!analyticsData.recovery.length) return 0;\r\n        const totalDuration = analyticsData.recovery.reduce((sum, session) => sum + (session.duration || 0), 0);\r\n        return Math.round(totalDuration / analyticsData.recovery.length);\r\n    };\r\n\r\n    // ========== CHART OPTIONS ==========\r\n    \r\n    const chartOptions = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        interaction: {\r\n            mode: 'index',\r\n            intersect: false,\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                position: 'top',\r\n                labels: {\r\n                    usePointStyle: true,\r\n                    padding: 20\r\n                }\r\n            },\r\n            tooltip: {\r\n                backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n                titleColor: 'white',\r\n                bodyColor: 'white',\r\n                borderColor: 'rgba(255, 255, 255, 0.2)',\r\n                borderWidth: 1,\r\n                cornerRadius: 8,\r\n                displayColors: true\r\n            }\r\n        },\r\n        scales: {\r\n            x: {\r\n                display: true,\r\n                grid: {\r\n                    color: 'rgba(0, 0, 0, 0.1)'\r\n                }\r\n            },\r\n            y: {\r\n                display: true,\r\n                grid: {\r\n                    color: 'rgba(0, 0, 0, 0.1)'\r\n                },\r\n                beginAtZero: false\r\n            },\r\n            y1: {\r\n                type: 'linear',\r\n                display: selectedMetric === 'all',\r\n                position: 'right',\r\n                grid: {\r\n                    drawOnChartArea: false,\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"analytics-loading\">\r\n                <div className=\"loading-spinner\">\r\n                    <div className=\"spinner\"></div>\r\n                    <p>Caricamento analytics avanzati...</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"advanced-analytics\">\r\n            <div className=\"analytics-header\">\r\n                <h2>📊 Analytics Avanzati</h2>\r\n                <div className=\"analytics-controls\">\r\n                    <select \r\n                        value={selectedPeriod}\r\n                        onChange={(e) => setSelectedPeriod(e.target.value)}\r\n                        className=\"period-selector\"\r\n                    >\r\n                        <option value=\"1month\">Ultimo Mese</option>\r\n                        <option value=\"3months\">Ultimi 3 Mesi</option>\r\n                        <option value=\"6months\">Ultimi 6 Mesi</option>\r\n                        <option value=\"1year\">Ultimo Anno</option>\r\n                    </select>\r\n                    \r\n                    <select \r\n                        value={selectedMetric}\r\n                        onChange={(e) => setSelectedMetric(e.target.value)}\r\n                        className=\"metric-selector\"\r\n                    >\r\n                        <option value=\"weight\">Solo Peso</option>\r\n                        <option value=\"muscle\">Solo Massa Muscolare</option>\r\n                        <option value=\"fat\">Solo Massa Grassa</option>\r\n                        <option value=\"all\">Tutti i Parametri</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Statistics Cards */}\r\n            <div className=\"stats-overview\">\r\n                <div className=\"stat-card\">\r\n                    <div className=\"stat-icon\">🏋️</div>\r\n                    <div className=\"stat-content\">\r\n                        <h3>{computedStats.totalWorkouts}</h3>\r\n                        <p>Workout Completati</p>\r\n                        {computedStats.trends.volume && (\r\n                            <span className={`trend ${computedStats.trends.volume}`}>\r\n                                {computedStats.trends.volume === 'up' ? '↗️' : \r\n                                 computedStats.trends.volume === 'down' ? '↘️' : '➡️'}\r\n                                {computedStats.trends.volumeChange}min/avg\r\n                            </span>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card\">\r\n                    <div className=\"stat-icon\">⏱️</div>\r\n                    <div className=\"stat-content\">\r\n                        <h3>{Math.round(computedStats.totalDuration / 60)}h</h3>\r\n                        <p>Tempo Totale</p>\r\n                        <span className=\"sub-stat\">\r\n                            Avg: {computedStats.averageWorkoutDuration}min\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card\">\r\n                    <div className=\"stat-icon\">🔥</div>\r\n                    <div className=\"stat-content\">\r\n                        <h3>{computedStats.currentStreak}</h3>\r\n                        <p>Giorni Consecutivi</p>\r\n                        <span className=\"streak-indicator\">\r\n                            {computedStats.currentStreak >= 7 ? '🏆 Ottimo!' : \r\n                             computedStats.currentStreak >= 3 ? '💪 Bene!' : '🎯 Continua!'}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card\">\r\n                    <div className=\"stat-icon\">📈</div>\r\n                    <div className=\"stat-content\">\r\n                        <h3>{computedStats.progressEntries}</h3>\r\n                        <p>Misurazioni</p>\r\n                        {computedStats.trends.weight && (\r\n                            <span className={`trend ${computedStats.trends.weight}`}>\r\n                                {computedStats.trends.weight === 'up' ? '↗️' : \r\n                                 computedStats.trends.weight === 'down' ? '↘️' : '➡️'}\r\n                                {computedStats.trends.weightChange}kg\r\n                            </span>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card\">\r\n                    <div className=\"stat-icon\">🥗</div>\r\n                    <div className=\"stat-content\">\r\n                        <h3>{computedStats.nutritionAdherence}%</h3>\r\n                        <p>Aderenza Dieta</p>\r\n                        <span className=\"sub-stat\">\r\n                            {analyticsData.nutrition.filter(m => m.status === 'completed').length} pasti completati\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card\">\r\n                    <div className=\"stat-icon\">🛁</div>\r\n                    <div className=\"stat-content\">\r\n                        <h3>{computedStats.recoverySessionsTotal}</h3>\r\n                        <p>Sessioni Recovery</p>\r\n                        <span className=\"sub-stat\">\r\n                            Avg: {computedStats.avgRecoveryDuration}min\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Charts Grid */}\r\n            <div className=\"charts-grid\">\r\n                {/* Progress Chart */}\r\n                {progressChartData && (\r\n                    <div className=\"chart-container\">\r\n                        <h3>📈 Progressi Fisici</h3>\r\n                        <div className=\"chart-wrapper\">\r\n                            <Line data={progressChartData} options={chartOptions} />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Workout Volume Chart */}\r\n                {workoutVolumeData && (\r\n                    <div className=\"chart-container\">\r\n                        <h3>💪 Volume Allenamenti (30 giorni)</h3>\r\n                        <div className=\"chart-wrapper\">\r\n                            <Bar data={workoutVolumeData} options={{\r\n                                ...chartOptions,\r\n                                scales: {\r\n                                    ...chartOptions.scales,\r\n                                    y: { ...chartOptions.scales.y, beginAtZero: true }\r\n                                }\r\n                            }} />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Exercise Distribution */}\r\n                {exerciseDistributionData && (\r\n                    <div className=\"chart-container\">\r\n                        <h3>🎯 Distribuzione Esercizi</h3>\r\n                        <div className=\"chart-wrapper\">\r\n                            <Doughnut \r\n                                data={exerciseDistributionData} \r\n                                options={{\r\n                                    responsive: true,\r\n                                    maintainAspectRatio: false,\r\n                                    plugins: {\r\n                                        legend: {\r\n                                            position: 'right',\r\n                                            labels: {\r\n                                                boxWidth: 12,\r\n                                                padding: 10\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }} \r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Nutrition Adherence Chart */}\r\n                {nutritionAdherenceData && (\r\n                    <div className=\"chart-container\">\r\n                        <h3>🥗 Aderenza Dieta & Proteine (30 giorni)</h3>\r\n                        <div className=\"chart-wrapper\">\r\n                            <Line data={nutritionAdherenceData} options={{\r\n                                ...chartOptions,\r\n                                scales: {\r\n                                    x: chartOptions.scales.x,\r\n                                    y: {\r\n                                        ...chartOptions.scales.y,\r\n                                        beginAtZero: true,\r\n                                        max: 100,\r\n                                        title: {\r\n                                            display: true,\r\n                                            text: 'Aderenza (%)'\r\n                                        }\r\n                                    },\r\n                                    y1: {\r\n                                        type: 'linear',\r\n                                        display: true,\r\n                                        position: 'right',\r\n                                        beginAtZero: true,\r\n                                        title: {\r\n                                            display: true,\r\n                                            text: 'Proteine (g)'\r\n                                        },\r\n                                        grid: {\r\n                                            drawOnChartArea: false,\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }} />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Recovery Distribution */}\r\n                {recoveryDistributionData && (\r\n                    <div className=\"chart-container\">\r\n                        <h3>🛁 Distribuzione Pratiche Recovery</h3>\r\n                        <div className=\"chart-wrapper\">\r\n                            <Doughnut \r\n                                data={recoveryDistributionData} \r\n                                options={{\r\n                                    responsive: true,\r\n                                    maintainAspectRatio: false,\r\n                                    plugins: {\r\n                                        legend: {\r\n                                            position: 'bottom',\r\n                                            labels: {\r\n                                                boxWidth: 12,\r\n                                                padding: 15\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }} \r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Weekly Recovery Trends */}\r\n                {weeklyRecoveryData && (\r\n                    <div className=\"chart-container\">\r\n                        <h3>📊 Tendenze Recovery Settimanali</h3>\r\n                        <div className=\"chart-wrapper\">\r\n                            <Bar data={weeklyRecoveryData} options={{\r\n                                ...chartOptions,\r\n                                scales: {\r\n                                    x: chartOptions.scales.x,\r\n                                    y: {\r\n                                        ...chartOptions.scales.y,\r\n                                        beginAtZero: true,\r\n                                        title: {\r\n                                            display: true,\r\n                                            text: 'Sessioni'\r\n                                        }\r\n                                    },\r\n                                    y1: {\r\n                                        type: 'linear',\r\n                                        display: true,\r\n                                        position: 'right',\r\n                                        beginAtZero: true,\r\n                                        title: {\r\n                                            display: true,\r\n                                            text: 'Durata (min)'\r\n                                        },\r\n                                        grid: {\r\n                                            drawOnChartArea: false,\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }} />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Insights Section */}\r\n            <div className=\"insights-section\">\r\n                <h3>💡 Insights Automatici</h3>\r\n                <div className=\"insights-grid\">\r\n                    {generateInsights(computedStats, analyticsData).map((insight, index) => (\r\n                        <div key={index} className={`insight-card ${insight.type}`}>\r\n                            <div className=\"insight-icon\">{insight.icon}</div>\r\n                            <div className=\"insight-content\">\r\n                                <h4>{insight.title}</h4>\r\n                                <p>{insight.message}</p>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Generazione insights automatici\r\nconst generateInsights = (stats, data) => {\r\n    const insights = [];\r\n\r\n    // Insight consistenza\r\n    if (stats.currentStreak >= 7) {\r\n        insights.push({\r\n            type: 'success',\r\n            icon: '🔥',\r\n            title: 'Ottima Consistenza!',\r\n            message: `${stats.currentStreak} giorni consecutivi di allenamento. Continua così!`\r\n        });\r\n    } else if (stats.totalWorkouts === 0) {\r\n        insights.push({\r\n            type: 'warning',\r\n            icon: '🎯',\r\n            title: 'Inizia il Tuo Percorso',\r\n            message: 'È ora di registrare il tuo primo workout!'\r\n        });\r\n    }\r\n\r\n    // Insight volume\r\n    if (stats.averageWorkoutDuration < 30) {\r\n        insights.push({\r\n            type: 'info',\r\n            icon: '⏰',\r\n            title: 'Intensità Workout',\r\n            message: 'Considera di aumentare la durata media degli allenamenti (30+ min).'\r\n        });\r\n    } else if (stats.averageWorkoutDuration > 90) {\r\n        insights.push({\r\n            type: 'warning',\r\n            icon: '🚨',\r\n            title: 'Workout Lunghi',\r\n            message: 'Allenamenti molto lunghi: assicurati di mantenere l\\'intensità.'\r\n        });\r\n    }\r\n\r\n    // Insight varietà esercizi\r\n    if (stats.uniqueExercises < 10 && stats.totalExercises > 20) {\r\n        insights.push({\r\n            type: 'info',\r\n            icon: '🔄',\r\n            title: 'Varietà Esercizi',\r\n            message: 'Prova ad aggiungere più varietà ai tuoi allenamenti.'\r\n        });\r\n    }\r\n\r\n    // Insight nutrition\r\n    if (stats.nutritionAdherence >= 80) {\r\n        insights.push({\r\n            type: 'success',\r\n            icon: '🥗',\r\n            title: 'Ottima Aderenza Dieta!',\r\n            message: `${stats.nutritionAdherence}% di aderenza alla dieta. Eccellente disciplina!`\r\n        });\r\n    } else if (stats.nutritionAdherence < 60) {\r\n        insights.push({\r\n            type: 'warning',\r\n            icon: '🎯',\r\n            title: 'Migliora l\\'Aderenza',\r\n            message: 'Prova a seguire più costantemente il piano alimentare per risultati ottimali.'\r\n        });\r\n    }\r\n\r\n    // Insight recovery\r\n    if (stats.recoverySessionsTotal >= 10) {\r\n        insights.push({\r\n            type: 'success',\r\n            icon: '🛁',\r\n            title: 'Ottimo Recovery!',\r\n            message: `${stats.recoverySessionsTotal} sessioni di recupero. Il riposo è fondamentale!`\r\n        });\r\n    } else if (stats.recoverySessionsTotal === 0 && stats.totalWorkouts > 5) {\r\n        insights.push({\r\n            type: 'info',\r\n            icon: '🧘',\r\n            title: 'Aggiungi Recovery',\r\n            message: 'Considera di integrare pratiche di recupero per migliorare le performance.'\r\n        });\r\n    }\r\n\r\n    // Insight progressi\r\n    if (data.progress.length >= 3) {\r\n        const recent = data.progress.slice(0, 3);\r\n        const weights = recent.map(p => p.weight).filter(w => w);\r\n        if (weights.length >= 2) {\r\n            const trend = weights[0] - weights[weights.length - 1];\r\n            if (Math.abs(trend) < 0.5) {\r\n                insights.push({\r\n                    type: 'info',\r\n                    icon: '⚖️',\r\n                    title: 'Peso Stabile',\r\n                    message: 'Il tuo peso è rimasto stabile. Ottimo per la ricomposizione corporea!'\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return insights.slice(0, 4); // Max 4 insights\r\n};\r\n\r\nexport default AdvancedAnalytics;"],"sourceRoot":""}