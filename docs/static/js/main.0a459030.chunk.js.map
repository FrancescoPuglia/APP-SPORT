{"version":3,"sources":["utils/dataManager.js","components/MotivationalQuotes.js","components/CalendarStreak.js","components/ExerciseTracker.js","components/SupplementStack.js","components/RecoveryProtocol.js","components/Dashboard.js","components/WorkoutSimple.js","components/NutritionBella.js","components/Supplements.js","components/Recovery.js","components/Progress.js","components/Measurements.js","firebase/config.js","firebase/auth.js","firebase/firestore.js","firebase/migration.js","components/AuthProvider.js","validation/schemas.js","App.js","index.js"],"names":["dataManager","constructor","this","storageKeys","workouts","measurements","nutrition","supplements","recovery","saveWorkout","workoutData","getWorkouts","newWorkout","_objectSpread","id","Date","now","toString","date","toISOString","unshift","localStorage","setItem","JSON","stringify","saved","getItem","parse","saveMeasurement","measurementData","getMeasurements","newMeasurement","getNutritionData","completedMeals","nutritionStreak","parseInt","last7Days","toDateString","i","setDate","getDate","dayString","dayMeals","Object","keys","filter","key","startsWith","length","push","mealsCompleted","adherence","Math","min","weeklyAdherence","avgAdherence","reduce","sum","day","getAnalyticsData","stats","totalWorkouts","currentStreak","calculateWorkoutStreak","weightProgress","calculateWeightProgress","strengthProgress","calculateStrengthProgress","nutritionAdherence","supplementCompliance","calculateSupplementCompliance","recoveryFrequency","today","streak","currentDate","sortedWorkouts","map","w","sort","a","b","some","change","trend","latest","oldest","weight","toFixed","exerciseProgress","forEach","workout","exercises","exercise","name","reps","volume","sets","progressSummary","exerciseName","sessions","first","last","initialWeight","currentWeight","improvement","daySupplements","avgDaily","round","clearAllData","values","removeItem","exportData","analytics","MotivationalQuotes","legendaryQuotes","quote","author","context","additionalQuotes","getTodayQuote","getDay","find","q","getRandomAdditionalQuote","floor","random","CalendarStreak","setCurrentDate","React","useState","streakData","setStreakData","monthlyStats","setMonthlyStats","calculateMonthlyStats","data","arguments","undefined","currentMonth","getMonth","currentYear","getFullYear","monthlyWorkouts","dateKey","completed","calculateCurrentStreak","longestStreak","calculateLongestStreak","weeklyAverage","calculateWeeklyAverage","lastUpdated","checkDate","split","maxStreak","sortedDates","prevDate","max","fourWeeksAgo","useEffect","loadStreakData","markWorkoutCompleted","workoutType","updated","timestamp","getDaysInMonth","year","month","firstDay","daysInMonth","startingDayOfWeek","days","currentDay","isCompleted","isToday","navigateMonth","direction","newDate","setMonth","getStreakColor","getWorkoutTypeEmoji","type","monthNames","dayNames","ExerciseTracker","exerciseData","setExerciseData","sessionProgress","setSessionProgress","personalRecords","setPersonalRecords","updatePersonalRecord","oneRepMax","calculateOneRepMax","currentPR","updatedPR","parseFloat","previousRecord","updateSessionProgress","todayExercises","ex","prev","totalCompleted","getExerciseHistory","limit","slice","isExerciseCompletedToday","loadExerciseData","savedPR","markExerciseCompleted","notes","rir","exerciseId","concat","exerciseEntry","getTodayProgress","workoutExercises","total","percentage","remaining","getWeeklyStats","oneWeekAgo","weeklyExercises","totalSets","totalReps","totalVolume","uniqueExercises","Set","size","averageWeight","getMonthlyProgress","oneMonthAgo","monthlyExercises","workoutDays","totalExercises","averageVolume","getExerciseProgressColor","_history$","history","lastWeight","avgWeight","SupplementStack","supplementSchedule","setSupplementSchedule","takenToday","setTakenToday","evidenceBasedSupplements","creatine","dosage","timing","evidence","benefits","mechanism","color","icon","citrulline","betaAlanine","omega3","caffeine","vitaminD","isSupplementTakenToday","supplementKey","entryKey","taken","loadTodaysSupplements","todayData","includes","removedSupplements","hmb","forskolin","rAla","bcaa","glutamine","markSupplementTaken","supplement","getSupplementProgress","totalSupplements","takenCount","getWeeklySupplementStats","weeklyEntries","entry","consistency","supplementEntries","getOptimalTiming","currentTime","hour","getHours","recommendations","reason","workoutHour","createSupplementPlan","workoutSchedule","goals","core","performance","endurance","morning","preWorkout","postWorkout","evening","RecoveryProtocol","recoveryLog","setRecoveryLog","todayRecovery","setTodayRecovery","thermoTherapyProtocols","sauna","temperature","humidity","duration","protocol","precautions","scientificEvidence","steamRoom","iceBath","loadRecoveryData","todaySessions","s","totalTime","contrastTherapy","optimalTiming","immediate","after2h","after4h","nextMorning","restDays","competition","before","after","biohacking","breathwork","preSauna","preIceBath","postBoth","monitoring","heartRate","bodyTemp","subjective","markRecoverySession","therapy","effectiveness","sessionId","session","updatedLog","getRecoveryRecommendation","lastWorkout","workoutIntensity","stressLevel","hoursSinceWorkout","priority","getRecoveryStats","sessionDate","weekAgo","totalSessions","averageEffectiveness","therapyBreakdown","time","Dashboard","_calendarHook$monthly","quotesHook","calendarHook","exerciseHook","supplementsHook","recoveryHook","dashboardData","setDashboardData","muscleGain","workoutSessions","totalWorkoutTime","weeklyTime","daysActive","todayWorkout","setTodayWorkout","goals12Week","setGoals12Week","startWeight","targetWeight","targetBench","targetSquat","targetDeadlift","startDate","weeksCompleted","loadDashboardData","_workoutSessions$","progressData","timeStats","latestProgress","firstProgress","getTime","muscleMass","focus","isDayCompleted","completedWorkouts","todayQuote","todayProgress","supplementProgress","weeklyStats","recoveryStats","_jsxs","className","children","_jsx","style","width","Link","to","background","borderRadius","padding","margin","boxShadow","display","justifyContent","alignItems","marginBottom","fontSize","toLocaleDateString","toUpperCase","textAlign","minWidth","fontWeight","getNutritionStreak","opacity","gridTemplateColumns","gap","generateFullCalendar","startingDay","calendar","index","cursor","border","transform","transition","marginTop","WorkoutSimple","navigate","useNavigate","selectedDay","setSelectedDay","selectedExercise","setSelectedExercise","isWorkoutActive","setIsWorkoutActive","currentWorkout","setCurrentWorkout","startTime","exerciseForm","setExerciseForm","workoutPlan","subtitle","rest","getMuscleGroup","toLowerCase","isExerciseCompleted","onClick","title","finishWorkout","_workoutPlan$currentW","alert","entries","_ref","startWorkout","value","onChange","e","target","placeholder","step","completedExercise","muscleGroup","completeExercise","idx","NutritionBella","setCompletedMeals","setCurrentStreak","weeklyDiet","meals","food","proteins","calories","ingredients","updateStreak","todayMeals","meal","newStreak","isMealCompleted","mealId","getDayProgress","dayOfWeek","generateCalendar","minHeight","fontFamily","backdropFilter","textShadow","maxWidth","overflowX","whiteSpace","getTotalProteins","getTotalCalories","height","overflow","newCompleted","toggleMeal","onMouseOver","onMouseOut","textTransform","letterSpacing","flexWrap","ingredient","textDecoration","Supplements","selectedCategory","setSelectedCategory","currentStack","setCurrentStack","category","cost","description","instructions","categories","all","protein","health","timingLabels","isSupplementTaken","suppId","removeFromStack","newStack","getCompletionRate","stackSupplements","_supplements$suppId","replace","newTaken","toggleSupplement","_ref2","supp","_ref3","inStack","benefit","addToStack","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref0","_ref1","Recovery","activeSession","setActiveSession","sessionHistory","setSessionHistory","currentTimer","setCurrentTimer","isTimerRunning","setIsTimerRunning","selectedProtocol","setSelectedProtocol","recoveryProtocols","difficulty","equipment","contraindications","interval","setInterval","clearInterval","endSession","newHistory","quality","formatTime","seconds","mins","secs","padStart","getSessionStats","thisWeek","totalDuration","avgDuration","totalHours","heat","cold","contrast","manual","movement","mental","_categories$protocol$","instruction","warning","protocolId","disabled","toLocaleTimeString","minute","Progress","setProgressData","newEntry","setNewEntry","bodyFat","chest","arms","waist","thighs","setTimeStats","monthlyTime","sessionsCompleted","saveProgressData","minutes","hours","loadProgressData","savedTimeStats","addEntry","deleteEntry","Measurements","setMeasurements","showForm","setShowForm","formData","setFormData","loadMeasurements","savedMeasurements","getProgressChange","current","previous","unit","abs","onSubmit","preventDefault","required","rows","measurement","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","db","getFirestore","getStorage","isSupported","then","supported","getAnalytics","console","log","process","REACT_APP_USE_FIREBASE_EMULATORS","logger","message","error","warn","googleProvider","GoogleAuthProvider","addScope","authService","currentUser","authStateListeners","initializeAuthListener","onAuthStateChanged","user","notifyAuthStateListeners","uid","email","displayName","updateUserLastSeen","onAuthStateChange","callback","cb","signInWithEmail","password","signInWithEmailAndPassword","success","handleAuthError","signUpWithEmail","createUserWithEmailAndPassword","updateProfile","createUserDocument","signInWithGoogle","signInWithPopup","photoURL","provider","signOutUser","signOut","resetPassword","sendPasswordResetEmail","updateUserPassword","currentPassword","newPassword","Error","credential","EmailAuthProvider","reauthenticateWithCredential","updatePassword","additionalData","userRef","doc","getDoc","exists","setDoc","lastSeen","serverTimestamp","merge","userData","createdAt","settings","units","language","notifications","darkMode","profile","age","activityLevel","experience","isOnline","code","originalError","isAuthenticated","getCurrentUser","deleteAccount","deleteUser","BaseRepository","collectionName","collectionRef","collection","cache","Map","listeners","getById","useCache","has","cached","get","fromCache","docRef","docSnap","set","create","customId","_authService$getCurre","userId","docData","updatedAt","addDoc","newId","invalidateCache","update","updateData","updateDoc","delete","deleteDoc","getWithQuery","queryConstraints","query","querySnapshot","getDocs","docs","count","subscribeToChanges","onSnapshot","clear","progressRepo","super","getUserProgress","_authService$getCurre2","endDate","constraints","where","orderBy","addMeasurement","getPeriodStats","_authService$getCurre3","result","totalEntries","weightChange","muscleMassChange","bodyFatChange","period","workoutRepo","startSession","sessionData","status","completeSession","completionData","endTime","completedAt","getUserSessions","_authService$getCurre4","getWorkoutStats","recentSessions","_session$createdAt","_session$createdAt$to","toDate","call","averageDuration","exerciseStats","_session$exercises","exerciseRepo","logExercise","getPersonalRecords","_authService$getCurre5","prs","userRepo","getCurrentUserProfile","_authService$getCurre6","updateSettings","_authService$getCurre7","profileData","_authService$getCurre8","logMeal","mealData","updateMealStatus","getUserMeals","_authService$getCurre9","getDayMeals","_authService$getCurre0","getNutritionStats","_authService$getCurre1","m","totalMeals","adherenceRate","totalProteins","avgProteinsPerDay","calculateNutritionStreak","mealsByDay","reverse","logRecoverySession","recoveryData","getUserRecoverySessions","_authService$getCurre10","getDayRecoverySessions","_authService$getCurre11","_authService$getCurre12","activityBreakdown","activityType","weeklyFrequency","ceil","migrationKey","backupKey","isMigrationCompleted","markMigrationCompleted","migrationData","version","createBackup","backupData","safeGetLocalStorage","userSettings","backupString","backup","migrateAllData","migrationReport","steps","errors","totalItems","migratedItems","backupResult","progressResult","migrateProgressData","workoutResult","migrateWorkoutSessions","exerciseResult","migrateExerciseData","userResult","migrateUserSettings","verificationResult","verifyMigration","verificationPassed","details","report","item","cleanedData","cleanProgressData","createResult","sleep","cleanWorkoutSession","cleanExerciseData","fitnessStats","preferences","migratedFrom","migrationDate","updateResult","cleaned","validateNumber","validateString","workoutName","Array","isArray","Number","MAX_SAFE_INTEGER","num","isNaN","maxLength","trim","substring","_progressCheck$data","_workoutCheck$data","progressCheck","workoutCheck","userCheck","checks","progress","userProfile","allPassed","every","check","progressCount","workoutCount","hasUserProfile","rollbackMigration","ms","Promise","resolve","setTimeout","getMigrationStatus","hasBackup","AuthProvider","yup","mixed","default","notType","string","number","positive","integer","weightValidation","typeError","percentageValidation","measurementValidation","dateValidation","passwordValidation","matches","exerciseSchema","confirmPassword","oneOf","nullable","acceptTerms","rememberMe","confirmNewPassword","test","of","intensity","fitnessGoals","publicProfile","parent","targetDate","workoutReminders","progressReminders","achievementAlerts","emailNotifications","pushNotifications","privacy","profileVisibility","shareProgress","shareWorkouts","allowFriendRequests","theme","dateFormat","timeFormat","distance","LazyAnalytics","lazy","LazyNutritionTracker","LazyRecoveryTimer","AppContent","Router","Routes","Route","path","element","Suspense","fallback","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a459030.chunk.js","sourcesContent":["// SISTEMA CENTRALE DI GESTIONE DATI REALI\r\n// Tutti i dati dell'utente vengono salvati qui e utilizzati da Analytics\r\n\r\nclass DataManager {\r\n    constructor() {\r\n        this.storageKeys = {\r\n            workouts: 'userData_workouts',\r\n            measurements: 'userData_measurements', \r\n            nutrition: 'userData_nutrition',\r\n            supplements: 'userData_supplements',\r\n            recovery: 'userData_recovery'\r\n        };\r\n    }\r\n\r\n    // ===== WORKOUT DATA =====\r\n    saveWorkout(workoutData) {\r\n        const workouts = this.getWorkouts();\r\n        const newWorkout = {\r\n            id: Date.now().toString(),\r\n            date: new Date().toISOString(),\r\n            ...workoutData\r\n        };\r\n        workouts.unshift(newWorkout);\r\n        localStorage.setItem(this.storageKeys.workouts, JSON.stringify(workouts));\r\n        return newWorkout;\r\n    }\r\n\r\n    getWorkouts() {\r\n        const saved = localStorage.getItem(this.storageKeys.workouts);\r\n        return saved ? JSON.parse(saved) : [];\r\n    }\r\n\r\n    // ===== MEASUREMENTS DATA =====\r\n    saveMeasurement(measurementData) {\r\n        const measurements = this.getMeasurements();\r\n        const newMeasurement = {\r\n            id: Date.now().toString(),\r\n            date: new Date().toISOString(),\r\n            ...measurementData\r\n        };\r\n        measurements.unshift(newMeasurement);\r\n        localStorage.setItem(this.storageKeys.measurements, JSON.stringify(measurements));\r\n        return newMeasurement;\r\n    }\r\n\r\n    getMeasurements() {\r\n        const saved = localStorage.getItem(this.storageKeys.measurements);\r\n        return saved ? JSON.parse(saved) : [];\r\n    }\r\n\r\n    // ===== NUTRITION DATA =====\r\n    getNutritionData() {\r\n        const completedMeals = JSON.parse(localStorage.getItem('completedMeals') || '{}');\r\n        const nutritionStreak = parseInt(localStorage.getItem('nutritionStreak') || '0');\r\n        \r\n        // Calcola aderenza alla dieta basata sui pasti completati\r\n        const today = new Date().toDateString();\r\n        const last7Days = [];\r\n        \r\n        for (let i = 0; i < 7; i++) {\r\n            const date = new Date();\r\n            date.setDate(date.getDate() - i);\r\n            const dayString = date.toDateString();\r\n            \r\n            // Conta pasti completati per ogni giorno\r\n            const dayMeals = Object.keys(completedMeals).filter(key => \r\n                key.startsWith(dayString)\r\n            ).length;\r\n            \r\n            last7Days.push({\r\n                date: dayString,\r\n                mealsCompleted: dayMeals,\r\n                adherence: Math.min((dayMeals / 4) * 100, 100) // Assumiamo 4 pasti al giorno\r\n            });\r\n        }\r\n\r\n        return {\r\n            completedMeals,\r\n            nutritionStreak,\r\n            weeklyAdherence: last7Days,\r\n            avgAdherence: last7Days.reduce((sum, day) => sum + day.adherence, 0) / 7\r\n        };\r\n    }\r\n\r\n    // ===== ANALYTICS DATA COMPILATION =====\r\n    getAnalyticsData() {\r\n        const workouts = this.getWorkouts();\r\n        const measurements = this.getMeasurements();\r\n        const nutrition = this.getNutritionData();\r\n        const supplements = JSON.parse(localStorage.getItem('supplementsTaken') || '{}');\r\n        const recovery = JSON.parse(localStorage.getItem('recoveryHistory') || '[]');\r\n\r\n        return {\r\n            workouts,\r\n            measurements,\r\n            nutrition,\r\n            supplements,\r\n            recovery,\r\n            \r\n            // Stats calcolate\r\n            stats: {\r\n                totalWorkouts: workouts.length,\r\n                currentStreak: this.calculateWorkoutStreak(workouts),\r\n                weightProgress: this.calculateWeightProgress(measurements),\r\n                strengthProgress: this.calculateStrengthProgress(workouts),\r\n                nutritionAdherence: nutrition.avgAdherence,\r\n                supplementCompliance: this.calculateSupplementCompliance(supplements),\r\n                recoveryFrequency: recovery.length\r\n            }\r\n        };\r\n    }\r\n\r\n    calculateWorkoutStreak(workouts) {\r\n        if (!workouts.length) return 0;\r\n        \r\n        const today = new Date();\r\n        let streak = 0;\r\n        let currentDate = new Date(today);\r\n        \r\n        // Ordina workouts per data\r\n        const sortedWorkouts = workouts\r\n            .map(w => new Date(w.date))\r\n            .sort((a, b) => b - a);\r\n\r\n        for (let i = 0; i < 30; i++) { // Controlla ultimi 30 giorni\r\n            const dayString = currentDate.toDateString();\r\n            const hasWorkout = sortedWorkouts.some(date => \r\n                date.toDateString() === dayString\r\n            );\r\n            \r\n            if (hasWorkout) {\r\n                streak++;\r\n            } else if (streak > 0) {\r\n                break; // Fine streak\r\n            }\r\n            \r\n            currentDate.setDate(currentDate.getDate() - 1);\r\n        }\r\n        \r\n        return streak;\r\n    }\r\n\r\n    calculateWeightProgress(measurements) {\r\n        if (measurements.length < 2) return { change: 0, trend: 'stable' };\r\n        \r\n        const latest = measurements[0];\r\n        const oldest = measurements[measurements.length - 1];\r\n        \r\n        const change = latest.weight - oldest.weight;\r\n        const trend = change > 1 ? 'gaining' : change < -1 ? 'losing' : 'stable';\r\n        \r\n        return { change: change.toFixed(1), trend };\r\n    }\r\n\r\n    calculateStrengthProgress(workouts) {\r\n        const exerciseProgress = {};\r\n        \r\n        workouts.forEach(workout => {\r\n            if (workout.exercises) {\r\n                workout.exercises.forEach(exercise => {\r\n                    if (!exerciseProgress[exercise.name]) {\r\n                        exerciseProgress[exercise.name] = [];\r\n                    }\r\n                    \r\n                    exerciseProgress[exercise.name].push({\r\n                        date: workout.date,\r\n                        weight: exercise.weight,\r\n                        reps: exercise.reps,\r\n                        volume: exercise.weight * exercise.reps * exercise.sets\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        // Calcola progresso per ogni esercizio\r\n        const progressSummary = {};\r\n        Object.keys(exerciseProgress).forEach(exerciseName => {\r\n            const sessions = exerciseProgress[exerciseName].sort((a, b) => \r\n                new Date(a.date) - new Date(b.date)\r\n            );\r\n            \r\n            if (sessions.length >= 2) {\r\n                const first = sessions[0];\r\n                const last = sessions[sessions.length - 1];\r\n                \r\n                progressSummary[exerciseName] = {\r\n                    initialWeight: first.weight,\r\n                    currentWeight: last.weight,\r\n                    improvement: ((last.weight - first.weight) / first.weight * 100).toFixed(1),\r\n                    sessions: sessions.length\r\n                };\r\n            }\r\n        });\r\n\r\n        return progressSummary;\r\n    }\r\n\r\n    calculateSupplementCompliance(supplements) {\r\n        const today = new Date().toDateString();\r\n        const last7Days = [];\r\n        \r\n        for (let i = 0; i < 7; i++) {\r\n            const date = new Date();\r\n            date.setDate(date.getDate() - i);\r\n            const dayString = date.toDateString();\r\n            \r\n            const daySupplements = Object.keys(supplements).filter(key => \r\n                key.startsWith(dayString)\r\n            ).length;\r\n            \r\n            last7Days.push(daySupplements);\r\n        }\r\n        \r\n        const avgDaily = last7Days.reduce((sum, day) => sum + day, 0) / 7;\r\n        return Math.round((avgDaily / 5) * 100); // Assumiamo 5 supplementi target\r\n    }\r\n\r\n    // ===== UTILITY METHODS =====\r\n    clearAllData() {\r\n        Object.values(this.storageKeys).forEach(key => {\r\n            localStorage.removeItem(key);\r\n        });\r\n        \r\n        // Pulisci anche altri storage\r\n        localStorage.removeItem('completedMeals');\r\n        localStorage.removeItem('nutritionStreak');\r\n        localStorage.removeItem('supplementsTaken');\r\n        localStorage.removeItem('recoveryHistory');\r\n    }\r\n\r\n    exportData() {\r\n        return {\r\n            workouts: this.getWorkouts(),\r\n            measurements: this.getMeasurements(),\r\n            nutrition: this.getNutritionData(),\r\n            analytics: this.getAnalyticsData()\r\n        };\r\n    }\r\n}\r\n\r\n// Esporta istanza singleton\r\nexport const dataManager = new DataManager();\r\nexport default dataManager;","import React from 'react';\n\nconst MotivationalQuotes = () => {\n    const legendaryQuotes = [\n        {\n            day: 1, // Lunedì\n            quote: \"Champions aren't made in the gyms. Champions are made from something deep inside them: a desire, a dream, a vision.\",\n            author: \"Muhammad Ali\",\n            context: \"Petto + Bicipiti - Inizia la settimana con la forza del campione\"\n        },\n        {\n            day: 2, // Martedì  \n            quote: \"The cave you fear to enter holds the treasure you seek.\",\n            author: \"Arnold Schwarzenegger\",\n            context: \"Dorso + Tricipiti - Affronta la paura, trova la forza\"\n        },\n        {\n            day: 3, // Mercoledì\n            quote: \"Strength does not come from physical capacity. It comes from an indomitable will.\",\n            author: \"Mahatma Gandhi (adattato da Kobe Bryant)\",\n            context: \"Gambe Complete - La vera forza viene dalla mente\"\n        },\n        {\n            day: 4, // Giovedì\n            quote: \"Recovery is not a sign of weakness, it's a strategy of champions.\",\n            author: \"LeBron James\",\n            context: \"Recupero Attivo - Il riposo è parte della vittoria\"\n        },\n        {\n            day: 5, // Venerdì\n            quote: \"Excellence is not a skill, it's an attitude.\",\n            author: \"Ralph Marston (filosofia Michael Jordan)\",\n            context: \"Spalle + Core - L'eccellenza è una scelta quotidiana\"\n        },\n        {\n            day: 6, // Sabato\n            quote: \"The body achieves what the mind believes.\",\n            author: \"Napoleon Hill (ispirato da Serena Williams)\",\n            context: \"Posteriori + Conditioning - Credi e raggiungerai\"\n        },\n        {\n            day: 0, // Domenica\n            quote: \"Rest when you're weary. Refresh and renew yourself, your body, your mind, your spirit. Then get back to work.\",\n            author: \"Ralph Marston\",\n            context: \"Riposo Completo - Rigenera per dominare\"\n        }\n    ];\n\n    const additionalQuotes = [\n        {\n            quote: \"I don't measure a man's success by how high he climbs but how high he bounces when he hits bottom.\",\n            author: \"George S. Patton\",\n            context: \"Per i giorni difficili\"\n        },\n        {\n            quote: \"The will to win, the desire to succeed, the urge to reach your full potential... these are the keys that will unlock the door to personal excellence.\",\n            author: \"Confucio (filosofia Kobe Bryant)\",\n            context: \"Quando manca la motivazione\"\n        },\n        {\n            quote: \"Pain is temporary. Quitting lasts forever.\",\n            author: \"Lance Armstrong\",\n            context: \"Durante l'allenamento intenso\"\n        },\n        {\n            quote: \"You have power over your mind - not outside events. Realize this, and you will find strength.\",\n            author: \"Marcus Aurelius (filosofia Tom Brady)\",\n            context: \"Controllo mentale\"\n        },\n        {\n            quote: \"The brick walls are there for a reason. The brick walls are not there to keep us out. The brick walls are there to give us a chance to show how badly we want something.\",\n            author: \"Randy Pausch (mentalità Cristiano Ronaldo)\",\n            context: \"Superare gli ostacoli\"\n        }\n    ];\n\n    const getTodayQuote = () => {\n        const today = new Date().getDay(); // 0 = Domenica, 1 = Lunedì, etc.\n        return legendaryQuotes.find(q => q.day === today) || legendaryQuotes[0];\n    };\n\n    const getRandomAdditionalQuote = () => {\n        return additionalQuotes[Math.floor(Math.random() * additionalQuotes.length)];\n    };\n\n    return {\n        getTodayQuote,\n        getRandomAdditionalQuote,\n        legendaryQuotes,\n        additionalQuotes\n    };\n};\n\nexport default MotivationalQuotes;","import React from 'react';\n\nconst CalendarStreak = () => {\n    const [currentDate, setCurrentDate] = React.useState(new Date());\n    const [streakData, setStreakData] = React.useState({});\n    const [monthlyStats, setMonthlyStats] = React.useState({});\n\n    const loadStreakData = () => {\n        const saved = localStorage.getItem('streakData');\n        if (saved) {\n            setStreakData(JSON.parse(saved));\n        }\n    };\n\n    const saveStreakData = (data) => {\n        localStorage.setItem('streakData', JSON.stringify(data));\n        setStreakData(data);\n    };\n\n    const markWorkoutCompleted = (date, workoutType, exercises = []) => {\n        const dateKey = date.toISOString().split('T')[0];\n        const updated = {\n            ...streakData,\n            [dateKey]: {\n                completed: true,\n                workoutType,\n                exercises,\n                timestamp: new Date().toISOString()\n            }\n        };\n        saveStreakData(updated);\n        calculateMonthlyStats(updated);\n    };\n\n    const calculateMonthlyStats = (data = streakData) => {\n        const currentMonth = currentDate.getMonth();\n        const currentYear = currentDate.getFullYear();\n        \n        const monthlyWorkouts = Object.keys(data).filter(dateKey => {\n            const date = new Date(dateKey);\n            return date.getMonth() === currentMonth && \n                   date.getFullYear() === currentYear &&\n                   data[dateKey].completed;\n        }).length;\n\n        const currentStreak = calculateCurrentStreak(data);\n        const longestStreak = calculateLongestStreak(data);\n        const weeklyAverage = calculateWeeklyAverage(data);\n\n        setMonthlyStats({\n            monthlyWorkouts,\n            currentStreak,\n            longestStreak,\n            weeklyAverage,\n            lastUpdated: new Date()\n        });\n    };\n\n    const calculateCurrentStreak = (data) => {\n        const today = new Date();\n        let streak = 0;\n        let checkDate = new Date(today);\n\n        while (checkDate) {\n            const dateKey = checkDate.toISOString().split('T')[0];\n            if (data[dateKey] && data[dateKey].completed) {\n                streak++;\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else if (streak === 0 && checkDate.toDateString() === today.toDateString()) {\n                // Se oggi non è completato, controlla ieri\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else {\n                break;\n            }\n            \n            // Evita loop infiniti\n            if (streak > 365) break;\n        }\n        \n        return streak;\n    };\n\n    const calculateLongestStreak = (data) => {\n        let maxStreak = 0;\n        let currentStreak = 0;\n        \n        const sortedDates = Object.keys(data)\n            .filter(key => data[key].completed)\n            .sort();\n        \n        for (let i = 0; i < sortedDates.length; i++) {\n            if (i === 0) {\n                currentStreak = 1;\n            } else {\n                const prevDate = new Date(sortedDates[i - 1]);\n                const currDate = new Date(sortedDates[i]);\n                const daysDiff = (currDate - prevDate) / (1000 * 60 * 60 * 24);\n                \n                if (daysDiff === 1) {\n                    currentStreak++;\n                } else {\n                    maxStreak = Math.max(maxStreak, currentStreak);\n                    currentStreak = 1;\n                }\n            }\n        }\n        \n        return Math.max(maxStreak, currentStreak);\n    };\n\n    const calculateWeeklyAverage = (data) => {\n        const fourWeeksAgo = new Date();\n        fourWeeksAgo.setDate(fourWeeksAgo.getDate() - 28);\n        \n        const recentWorkouts = Object.keys(data).filter(dateKey => {\n            const date = new Date(dateKey);\n            return date >= fourWeeksAgo && data[dateKey].completed;\n        }).length;\n        \n        return (recentWorkouts / 4).toFixed(1);\n    };\n\n    const getDaysInMonth = (date) => {\n        const year = date.getFullYear();\n        const month = date.getMonth();\n        const firstDay = new Date(year, month, 1);\n        const lastDay = new Date(year, month + 1, 0);\n        const daysInMonth = lastDay.getDate();\n        const startingDayOfWeek = firstDay.getDay();\n\n        const days = [];\n        \n        // Aggiungi giorni vuoti per allineare il calendario\n        for (let i = 0; i < startingDayOfWeek; i++) {\n            days.push(null);\n        }\n        \n        // Aggiungi tutti i giorni del mese\n        for (let day = 1; day <= daysInMonth; day++) {\n            const currentDay = new Date(year, month, day);\n            const dateKey = currentDay.toISOString().split('T')[0];\n            days.push({\n                date: currentDay,\n                day,\n                isCompleted: streakData[dateKey] && streakData[dateKey].completed,\n                workoutType: streakData[dateKey] ? streakData[dateKey].workoutType : null,\n                isToday: currentDay.toDateString() === new Date().toDateString()\n            });\n        }\n        \n        return days;\n    };\n\n    const navigateMonth = (direction) => {\n        const newDate = new Date(currentDate);\n        newDate.setMonth(newDate.getMonth() + direction);\n        setCurrentDate(newDate);\n    };\n\n    const getStreakColor = (streak) => {\n        if (streak >= 30) return '#ff006e'; // Rosa intenso\n        if (streak >= 21) return '#ff9500'; // Arancione \n        if (streak >= 14) return '#00ff88'; // Verde\n        if (streak >= 7) return '#00ffff';  // Cyan\n        return '#ffffff'; // Bianco\n    };\n\n    const getWorkoutTypeEmoji = (type) => {\n        const emojiMap = {\n            'Petto + Bicipiti': '💪',\n            'Dorso + Tricipiti + Collo (A)': '🏋️',\n            'Gambe Complete': '🦵',\n            'Recupero Attivo': '🧘',\n            'Spalle Complete + Collo (B)': '💫',\n            'Posteriori + Conditioning': '🔥',\n            'Riposo Completo': '😴'\n        };\n        return emojiMap[type] || '💪';\n    };\n\n    React.useEffect(() => {\n        loadStreakData();\n    }, []);\n\n    React.useEffect(() => {\n        calculateMonthlyStats();\n    }, [streakData, currentDate]);\n\n    const monthNames = [\n        'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n        'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n    ];\n\n    const dayNames = ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab'];\n\n    return {\n        currentDate,\n        streakData,\n        monthlyStats,\n        markWorkoutCompleted,\n        getDaysInMonth,\n        navigateMonth,\n        getStreakColor,\n        getWorkoutTypeEmoji,\n        monthNames,\n        dayNames,\n        calculateCurrentStreak: () => calculateCurrentStreak(streakData)\n    };\n};\n\nexport default CalendarStreak;","import React from 'react';\n\nconst ExerciseTracker = () => {\n    const [exerciseData, setExerciseData] = React.useState({});\n    const [sessionProgress, setSessionProgress] = React.useState({});\n    const [personalRecords, setPersonalRecords] = React.useState({});\n\n    const loadExerciseData = () => {\n        const saved = localStorage.getItem('exerciseData');\n        if (saved) {\n            setExerciseData(JSON.parse(saved));\n        }\n        \n        const savedPR = localStorage.getItem('personalRecords');\n        if (savedPR) {\n            setPersonalRecords(JSON.parse(savedPR));\n        }\n    };\n\n    const saveExerciseData = (data) => {\n        localStorage.setItem('exerciseData', JSON.stringify(data));\n        setExerciseData(data);\n    };\n\n    const savePersonalRecords = (data) => {\n        localStorage.setItem('personalRecords', JSON.stringify(data));\n        setPersonalRecords(data);\n    };\n\n    const markExerciseCompleted = (exerciseName, sets, reps, weight, notes = '', rir = null) => {\n        const today = new Date().toISOString().split('T')[0];\n        const exerciseId = `${exerciseName}_${today}`;\n        \n        const exerciseEntry = {\n            id: exerciseId,\n            exerciseName,\n            date: today,\n            sets: parseInt(sets),\n            reps: parseInt(reps),\n            weight: parseFloat(weight),\n            notes,\n            rir,\n            timestamp: new Date().toISOString(),\n            completed: true\n        };\n\n        const updated = {\n            ...exerciseData,\n            [exerciseId]: exerciseEntry\n        };\n        \n        saveExerciseData(updated);\n        \n        // Aggiorna record personali se necessario\n        updatePersonalRecord(exerciseName, weight, reps);\n        \n        // Aggiorna progresso sessione\n        updateSessionProgress(exerciseName);\n        \n        return exerciseEntry;\n    };\n\n    const updatePersonalRecord = (exerciseName, weight, reps) => {\n        const oneRepMax = calculateOneRepMax(weight, reps);\n        const currentPR = personalRecords[exerciseName] || { weight: 0, reps: 0, oneRepMax: 0, date: null };\n        \n        if (oneRepMax > currentPR.oneRepMax || \n            (weight > currentPR.weight && reps >= currentPR.reps)) {\n            \n            const updatedPR = {\n                ...personalRecords,\n                [exerciseName]: {\n                    weight: parseFloat(weight),\n                    reps: parseInt(reps),\n                    oneRepMax,\n                    date: new Date().toISOString(),\n                    previousRecord: currentPR.oneRepMax\n                }\n            };\n            \n            savePersonalRecords(updatedPR);\n            \n            // Notifica nuovo record\n            return true;\n        }\n        \n        return false;\n    };\n\n    const calculateOneRepMax = (weight, reps) => {\n        // Formula Epley: 1RM = w * (1 + r/30)\n        return Math.round(weight * (1 + reps / 30));\n    };\n\n    const updateSessionProgress = (exerciseName) => {\n        const today = new Date().toISOString().split('T')[0];\n        const todayExercises = Object.values(exerciseData).filter(ex => \n            ex.date === today && ex.completed\n        );\n        \n        setSessionProgress(prev => ({\n            ...prev,\n            [exerciseName]: true,\n            totalCompleted: todayExercises.length + 1\n        }));\n    };\n\n    const getExerciseHistory = (exerciseName, limit = 10) => {\n        return Object.values(exerciseData)\n            .filter(ex => ex.exerciseName === exerciseName)\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .slice(0, limit);\n    };\n\n    const getTodayProgress = (workoutExercises) => {\n        const today = new Date().toISOString().split('T')[0];\n        const completedToday = Object.values(exerciseData).filter(ex => \n            ex.date === today && ex.completed\n        );\n        \n        const completed = completedToday.length;\n        const total = workoutExercises ? workoutExercises.length : 0;\n        const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;\n        \n        return {\n            completed,\n            total,\n            percentage,\n            remaining: Math.max(0, total - completed)\n        };\n    };\n\n    const getWeeklyStats = () => {\n        const oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n        \n        const weeklyExercises = Object.values(exerciseData).filter(ex => \n            new Date(ex.date) >= oneWeekAgo && ex.completed\n        );\n        \n        const totalSets = weeklyExercises.reduce((sum, ex) => sum + ex.sets, 0);\n        const totalReps = weeklyExercises.reduce((sum, ex) => sum + (ex.sets * ex.reps), 0);\n        const totalVolume = weeklyExercises.reduce((sum, ex) => sum + (ex.weight * ex.sets * ex.reps), 0);\n        const uniqueExercises = new Set(weeklyExercises.map(ex => ex.exerciseName)).size;\n        \n        return {\n            sessions: weeklyExercises.length,\n            totalSets,\n            totalReps,\n            totalVolume: Math.round(totalVolume),\n            uniqueExercises,\n            averageWeight: weeklyExercises.length > 0 ? \n                Math.round(weeklyExercises.reduce((sum, ex) => sum + ex.weight, 0) / weeklyExercises.length) : 0\n        };\n    };\n\n    const getMonthlyProgress = () => {\n        const oneMonthAgo = new Date();\n        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\n        \n        const monthlyExercises = Object.values(exerciseData).filter(ex => \n            new Date(ex.date) >= oneMonthAgo && ex.completed\n        );\n        \n        const workoutDays = new Set(monthlyExercises.map(ex => ex.date)).size;\n        const totalVolume = monthlyExercises.reduce((sum, ex) => \n            sum + (ex.weight * ex.sets * ex.reps), 0\n        );\n        \n        return {\n            workoutDays,\n            totalExercises: monthlyExercises.length,\n            totalVolume: Math.round(totalVolume),\n            averageVolume: workoutDays > 0 ? Math.round(totalVolume / workoutDays) : 0\n        };\n    };\n\n    const isExerciseCompletedToday = (exerciseName) => {\n        const today = new Date().toISOString().split('T')[0];\n        return Object.values(exerciseData).some(ex => \n            ex.exerciseName === exerciseName && \n            ex.date === today && \n            ex.completed\n        );\n    };\n\n    const getExerciseProgressColor = (exerciseName) => {\n        if (isExerciseCompletedToday(exerciseName)) {\n            return '#00ff88'; // Verde completato\n        }\n        \n        const history = getExerciseHistory(exerciseName, 3);\n        if (history.length === 0) {\n            return '#ffffff'; // Bianco nuovo esercizio\n        }\n        \n        // Analisi progressione\n        const lastWeight = history[0]?.weight || 0;\n        const avgWeight = history.reduce((sum, ex) => sum + ex.weight, 0) / history.length;\n        \n        if (lastWeight > avgWeight * 1.05) {\n            return '#ff9500'; // Arancione in progressione\n        } else if (lastWeight < avgWeight * 0.95) {\n            return '#ff006e'; // Rosa in calo\n        }\n        \n        return '#00ffff'; // Cyan stabile\n    };\n\n    React.useEffect(() => {\n        loadExerciseData();\n    }, []);\n\n    return {\n        exerciseData,\n        sessionProgress,\n        personalRecords,\n        markExerciseCompleted,\n        getExerciseHistory,\n        getTodayProgress,\n        getWeeklyStats,\n        getMonthlyProgress,\n        isExerciseCompletedToday,\n        getExerciseProgressColor,\n        updatePersonalRecord,\n        calculateOneRepMax\n    };\n};\n\nexport default ExerciseTracker;","import React from 'react';\n\nconst SupplementStack = () => {\n    const [supplementSchedule, setSupplementSchedule] = React.useState({});\n    const [takenToday, setTakenToday] = React.useState({});\n\n    const evidenceBasedSupplements = {\n        creatine: {\n            name: 'Creatina Monoidrato',\n            dosage: '3-5g',\n            timing: 'Post-workout o qualsiasi momento',\n            evidence: 'A+ (Oltre 500 studi)',\n            benefits: ['↑ Forza 5-15%', '↑ Potenza esplosiva', '↑ Volume allenamento', '↑ Massa muscolare'],\n            mechanism: 'Rigenera ATP per contrazioni muscolari ad alta intensità',\n            notes: 'Loading non necessario. Consistenza > timing. Funziona meglio con carboidrati.',\n            color: '#00ff88',\n            icon: '💪'\n        },\n        citrulline: {\n            name: 'L-Citrullina Malato',\n            dosage: '6-8g',\n            timing: '30-45min pre-workout',\n            evidence: 'A (Multipli RCT)',\n            benefits: ['↑ Pump muscolare', '↑ Resistenza', '↓ DOMS', '↑ Ossido nitrico'],\n            mechanism: 'Precursore arginina → NO → vasodilatazione',\n            notes: 'Più efficace della L-Arginina. Sinergia con caffeina.',\n            color: '#ff9500',\n            icon: '🔥'\n        },\n        betaAlanine: {\n            name: 'Beta-Alanina',\n            dosage: '3-5g',\n            timing: 'Divisa in 2-3 dosi giornaliere',\n            evidence: 'A (Evidenza consolidata)',\n            benefits: ['↑ Resistenza muscolare', '↓ Fatica 1-4 min sforzo', '↑ Volume alto-rep'],\n            mechanism: 'Aumenta carnosina muscolare → buffer acido lattico',\n            notes: 'Loading 2-4 settimane. Possibile parestesia (innocua).',\n            color: '#00ffff',\n            icon: '⚡'\n        },\n        omega3: {\n            name: 'Omega-3 EPA/DHA',\n            dosage: '2-3g EPA+DHA',\n            timing: 'Con pasti contenenti grassi',\n            evidence: 'A+ (Migliaia di studi)',\n            benefits: ['↓ Infiammazione', '↑ Recupero', '↑ Sintesi proteica', '↑ Salute cardiovascolare'],\n            mechanism: 'Modulazione cascata infiammatoria e membrane cellulari',\n            notes: 'Ratio EPA:DHA 2:1 ottimale. Qualità > quantità.',\n            color: '#0099ff',\n            icon: '🐟'\n        },\n        caffeine: {\n            name: 'Caffeina',\n            dosage: '200-400mg',\n            timing: '30-45min pre-workout',\n            evidence: 'A+ (Gold standard)',\n            benefits: ['↑ Focus', '↑ Energia', '↑ Performance', '↑ Metabolismo grassi'],\n            mechanism: 'Antagonista adenosina → vigilanza + mobilizzazione grassi',\n            notes: 'Tolleranza sviluppa rapidamente. Ciclare 1-2 settimane ogni mese.',\n            color: '#8B4513',\n            icon: '☕'\n        },\n        vitaminD: {\n            name: 'Vitamina D3',\n            dosage: '2000-4000 IU',\n            timing: 'Con pasto contenente grassi',\n            evidence: 'A (Critico se carente)',\n            benefits: ['↑ Testosterone', '↑ Forza', '↑ Salute ossea', '↑ Sistema immunitario'],\n            mechanism: 'Regolazione ormonale e assorbimento calcio',\n            notes: 'Test ematico raccomandato. Target: 30-50 ng/mL.',\n            color: '#FFD700',\n            icon: '☀️'\n        }\n    };\n\n    const removedSupplements = {\n        hmb: 'Scarsa evidenza per atleti allenati. Solo utile per anziani/principianti.',\n        forskolin: 'Studi inconsistenti. Nessun beneficio provato su composizione corporea.',\n        rAla: 'Evidenza limitata. Costo-beneficio sfavorevole vs omega-3.',\n        bcaa: 'Inutili se assumi proteine complete. Whey protein superiore.',\n        glutamine: 'Non ergogenica in soggetti sani. Solo utile in immunodepressione.'\n    };\n\n    const getOptimalTiming = (currentTime) => {\n        const hour = currentTime.getHours();\n        const recommendations = [];\n\n        // Mattino (6-10)\n        if (hour >= 6 && hour <= 10) {\n            recommendations.push({\n                supplement: 'vitaminD',\n                reason: 'Assorbimento ottimale con prima colazione'\n            });\n            recommendations.push({\n                supplement: 'omega3',\n                reason: 'Con grassi della colazione per biodisponibilità'\n            });\n        }\n\n        // Pre-workout (dipende dall'orario allenamento)\n        const workoutHour = 18; // Assumiamo allenamento serale\n        if (hour === workoutHour - 1) {\n            recommendations.push({\n                supplement: 'caffeine',\n                reason: '30-45min prima allenamento per picco energetico'\n            });\n            recommendations.push({\n                supplement: 'citrulline',\n                reason: 'Pre-workout per pump e resistenza'\n            });\n        }\n\n        // Post-workout\n        if (hour === workoutHour + 1) {\n            recommendations.push({\n                supplement: 'creatine',\n                reason: 'Post-workout con carboidrati per uptake'\n            });\n        }\n\n        // Sera\n        if (hour >= 20) {\n            recommendations.push({\n                supplement: 'betaAlanine',\n                reason: 'Loading serale per evitare parestesia diurna'\n            });\n        }\n\n        return recommendations;\n    };\n\n    const markSupplementTaken = (supplementKey, dosage, timing) => {\n        const today = new Date().toISOString().split('T')[0];\n        const entryKey = `${supplementKey}_${today}`;\n\n        const taken = {\n            ...takenToday,\n            [entryKey]: {\n                supplement: supplementKey,\n                dosage,\n                timing,\n                timestamp: new Date().toISOString(),\n                taken: true\n            }\n        };\n\n        setTakenToday(taken);\n        localStorage.setItem('supplementsTakenToday', JSON.stringify(taken));\n\n        // Salva nello storico\n        const history = JSON.parse(localStorage.getItem('supplementsHistory') || '{}');\n        history[entryKey] = taken[entryKey];\n        localStorage.setItem('supplementsHistory', JSON.stringify(history));\n    };\n\n    const isSupplementTakenToday = (supplementKey) => {\n        const today = new Date().toISOString().split('T')[0];\n        const entryKey = `${supplementKey}_${today}`;\n        return takenToday[entryKey] && takenToday[entryKey].taken;\n    };\n\n    const getSupplementProgress = () => {\n        const totalSupplements = Object.keys(evidenceBasedSupplements).length;\n        const takenCount = Object.keys(evidenceBasedSupplements).filter(key => \n            isSupplementTakenToday(key)\n        ).length;\n        \n        return {\n            taken: takenCount,\n            total: totalSupplements,\n            percentage: Math.round((takenCount / totalSupplements) * 100)\n        };\n    };\n\n    const getWeeklySupplementStats = () => {\n        const history = JSON.parse(localStorage.getItem('supplementsHistory') || '{}');\n        const oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n        const weeklyEntries = Object.values(history).filter(entry => \n            new Date(entry.timestamp) >= oneWeekAgo\n        );\n\n        const consistency = {};\n        Object.keys(evidenceBasedSupplements).forEach(key => {\n            const supplementEntries = weeklyEntries.filter(entry => entry.supplement === key);\n            consistency[key] = {\n                taken: supplementEntries.length,\n                percentage: Math.round((supplementEntries.length / 7) * 100)\n            };\n        });\n\n        return consistency;\n    };\n\n    const createSupplementPlan = (workoutSchedule, goals) => {\n        const plan = {\n            core: ['creatine', 'omega3', 'vitaminD'], // Sempre consigliati\n            performance: ['caffeine', 'citrulline'], // Per performance\n            endurance: ['betaAlanine'], // Per resistenza\n            timing: {\n                morning: ['vitaminD', 'omega3'],\n                preWorkout: ['caffeine', 'citrulline'],\n                postWorkout: ['creatine'],\n                evening: ['betaAlanine']\n            }\n        };\n\n        return plan;\n    };\n\n    const loadTodaysSupplements = () => {\n        const today = new Date().toISOString().split('T')[0];\n        const saved = localStorage.getItem('supplementsTakenToday');\n        if (saved) {\n            const data = JSON.parse(saved);\n            // Filtra solo quelli di oggi\n            const todayData = {};\n            Object.keys(data).forEach(key => {\n                if (key.includes(today)) {\n                    todayData[key] = data[key];\n                }\n            });\n            setTakenToday(todayData);\n        }\n    };\n\n    React.useEffect(() => {\n        loadTodaysSupplements();\n    }, []);\n\n    return {\n        evidenceBasedSupplements,\n        removedSupplements,\n        takenToday,\n        markSupplementTaken,\n        isSupplementTakenToday,\n        getSupplementProgress,\n        getWeeklySupplementStats,\n        getOptimalTiming,\n        createSupplementPlan\n    };\n};\n\nexport default SupplementStack;","import React from 'react';\n\nconst RecoveryProtocol = () => {\n    const [recoveryLog, setRecoveryLog] = React.useState({});\n    const [todayRecovery, setTodayRecovery] = React.useState({});\n\n    const thermoTherapyProtocols = {\n        sauna: {\n            name: 'Sauna Finlandese',\n            temperature: '80-100°C',\n            humidity: '10-20%',\n            duration: '15-20 min',\n            timing: 'Immediatamente post-workout',\n            mechanism: 'Heat Shock Proteins → Anabolismo + Cardiovascolare',\n            benefits: [\n                '↑ Growth Hormone 24x',\n                '↑ Heat Shock Proteins (riparazione)',\n                '↑ Vasodilatazione (nutrienti muscolari)', \n                '↑ Eliminazione metaboliti'\n            ],\n            protocol: [\n                '5-10 min iniziali per adattamento',\n                '2-3 sessioni da 15-20 min',\n                'Pause 2-3 min aria fresca tra sessioni',\n                'Idratazione: 500ml acqua + elettroliti'\n            ],\n            precautions: [\n                'Mai subito dopo pasti abbondanti',\n                'Stop se nausea/vertigini/palpitazioni',\n                'Controindicato: ipertensione non controllata'\n            ],\n            scientificEvidence: 'A+ (Rhonda Patrick, Joyner studies)',\n            color: '#ff6b35',\n            icon: '🔥'\n        },\n        steamRoom: {\n            name: 'Bagno Turco',\n            temperature: '40-50°C',\n            humidity: '90-100%',\n            duration: '10-15 min',\n            timing: 'Giorni rest per mobilità/relax',\n            mechanism: 'Umidità → Idratazione tessuti + Mobilità articolare',\n            benefits: [\n                '↑ Mobilità articolare',\n                '↑ Idratazione tessuto connettivo',\n                '↓ Rigidità muscolare',\n                '↑ Eliminazione tossine via pelle'\n            ],\n            protocol: [\n                '10-15 min sessione unica',\n                'Respirazione profonda (vapori benefici)',\n                'Stretching dolce durante sessione',\n                'Doccia fredda finale (contrasto)'\n            ],\n            precautions: [\n                'Attenzione claustrofobia',\n                'Igiene: sempre su asciugamano',\n                'Idratazione pre/post obbligatoria'\n            ],\n            scientificEvidence: 'B+ (Benefici mobilità documentati)',\n            color: '#4ecdc4',\n            icon: '💨'\n        },\n        iceBath: {\n            name: 'Crioterapia (Ice Bath)',\n            temperature: '8-12°C',\n            humidity: 'N/A',\n            duration: '10-15 min',\n            timing: 'SOLO ≥4h post-workout (mai prima)',\n            mechanism: 'Vasocostrizione → Recovery neurologico + Anti-infiammatorio',\n            benefits: [\n                '↓ Infiammazione acuta',\n                '↑ Recovery Sistema Nervoso',\n                '↑ Resilienza mentale',\n                '↓ Percezione fatica'\n            ],\n            protocol: [\n                'Graduale: inizia 15°C → 10°C → 8°C',\n                '2-3 min prime volte → 10-15 min target',\n                'Respirazione controllata (Wim Hof)',\n                'Riscaldamento graduale post-immersione'\n            ],\n            precautions: [\n                'MAI nelle 4h post-workout (blocca adattamenti)',\n                'Controindicato: problemi cardiaci',\n                'Supervisione iniziale raccomandata'\n            ],\n            scientificEvidence: 'A- (Timing critico per efficacia)',\n            color: '#74b9ff',\n            icon: '🧊'\n        }\n    };\n\n    const contrastTherapy = {\n        name: 'Terapia Contrasto (Hot/Cold)',\n        protocol: [\n            'Sauna 15 min (80-90°C)',\n            'Doccia fredda 1 min (15°C)',\n            'Ripeti ciclo 3-4 volte',\n            'Termina sempre con freddo'\n        ],\n        benefits: [\n            'Pump vascolare (vasodilatazione/costrizione)',\n            'Massimo stimolo circolatorio',\n            'Recovery accelerata',\n            'Resilienza termica'\n        ],\n        timing: 'Post-workout giorni intensi',\n        scientificEvidence: 'A (Scandinavian protocols)',\n        color: '#fd79a8',\n        icon: '🌡️'\n    };\n\n    const optimalTiming = {\n        postWorkout: {\n            immediate: ['sauna'],\n            after2h: ['steamRoom', 'contrastTherapy'],\n            after4h: ['iceBath'],\n            nextMorning: ['sauna leggera', 'steamRoom']\n        },\n        restDays: {\n            morning: ['steamRoom', 'sauna leggera'],\n            evening: ['iceBath', 'contrastTherapy']\n        },\n        competition: {\n            before: 'Evitare ice bath 48h prima',\n            after: 'Full protocol per recovery rapido'\n        }\n    };\n\n    const biohacking = {\n        breathwork: {\n            name: 'Wim Hof Method',\n            protocol: '30 respiri profondi → apnea → ripeti 3 cicli',\n            benefits: 'Adattamento stress termico + controllo SNA',\n            timing: 'Pre ice bath o standalone'\n        },\n        supplements: {\n            preSauna: 'Magnesio 400mg (vasodilatazione)',\n            preIceBath: 'L-Theanina 200mg (calma mentale)',\n            postBoth: 'Elettroliti + Vitamina C'\n        },\n        monitoring: {\n            heartRate: 'HRV pre/post per valutare recovery',\n            bodyTemp: 'Termometro infrarossi per tracking',\n            subjective: 'Scale 1-10 per energia/dolori'\n        }\n    };\n\n    const markRecoverySession = (therapy, duration, temperature, notes, effectiveness) => {\n        const today = new Date().toISOString().split('T')[0];\n        const sessionId = `${therapy}_${Date.now()}`;\n\n        const session = {\n            id: sessionId,\n            date: today,\n            therapy,\n            duration: parseInt(duration),\n            temperature: parseFloat(temperature),\n            notes,\n            effectiveness: parseInt(effectiveness),\n            timestamp: new Date().toISOString()\n        };\n\n        const updatedLog = {\n            ...recoveryLog,\n            [sessionId]: session\n        };\n\n        setRecoveryLog(updatedLog);\n        localStorage.setItem('recoveryLog', JSON.stringify(updatedLog));\n\n        // Aggiorna sessioni di oggi\n        const todaySessions = Object.values(updatedLog).filter(s => s.date === today);\n        setTodayRecovery({\n            ...todayRecovery,\n            sessions: todaySessions,\n            totalTime: todaySessions.reduce((sum, s) => sum + s.duration, 0)\n        });\n    };\n\n    const getRecoveryRecommendation = (lastWorkout, workoutIntensity, stressLevel) => {\n        const recommendations = [];\n\n        // Basato su timing ultimo workout\n        const hoursSinceWorkout = lastWorkout ? \n            (new Date() - new Date(lastWorkout)) / (1000 * 60 * 60) : 24;\n\n        if (hoursSinceWorkout < 2) {\n            recommendations.push({\n                therapy: 'sauna',\n                priority: 'Alta',\n                reason: 'Finestra anabolica ottimale per heat shock proteins'\n            });\n        } else if (hoursSinceWorkout >= 4) {\n            recommendations.push({\n                therapy: 'iceBath',\n                priority: 'Media',\n                reason: 'Recovery Sistema Nervoso senza interferire adattamenti'\n            });\n        }\n\n        // Basato su intensità workout\n        if (workoutIntensity >= 8) {\n            recommendations.push({\n                therapy: 'contrastTherapy',\n                priority: 'Alta',\n                reason: 'Recovery accelerata per sessioni ad alta intensità'\n            });\n        }\n\n        // Basato su stress/recovery\n        if (stressLevel >= 7) {\n            recommendations.push({\n                therapy: 'steamRoom',\n                priority: 'Media',\n                reason: 'Relax parasimpatico per gestione stress'\n            });\n        }\n\n        return recommendations;\n    };\n\n    const getRecoveryStats = () => {\n        const last7Days = Object.values(recoveryLog).filter(session => {\n            const sessionDate = new Date(session.date);\n            const weekAgo = new Date();\n            weekAgo.setDate(weekAgo.getDate() - 7);\n            return sessionDate >= weekAgo;\n        });\n\n        const stats = {\n            totalSessions: last7Days.length,\n            totalTime: last7Days.reduce((sum, s) => sum + s.duration, 0),\n            averageEffectiveness: last7Days.length > 0 ? \n                Math.round(last7Days.reduce((sum, s) => sum + s.effectiveness, 0) / last7Days.length) : 0,\n            therapyBreakdown: {}\n        };\n\n        // Breakdown per terapia\n        Object.keys(thermoTherapyProtocols).forEach(therapy => {\n            const sessions = last7Days.filter(s => s.therapy === therapy);\n            stats.therapyBreakdown[therapy] = {\n                sessions: sessions.length,\n                time: sessions.reduce((sum, s) => sum + s.duration, 0)\n            };\n        });\n\n        return stats;\n    };\n\n    const loadRecoveryData = () => {\n        const saved = localStorage.getItem('recoveryLog');\n        if (saved) {\n            setRecoveryLog(JSON.parse(saved));\n        }\n\n        // Carica sessioni di oggi\n        const today = new Date().toISOString().split('T')[0];\n        const todaySessions = Object.values(JSON.parse(saved || '{}')).filter(s => s.date === today);\n        setTodayRecovery({\n            sessions: todaySessions,\n            totalTime: todaySessions.reduce((sum, s) => sum + s.duration, 0)\n        });\n    };\n\n    React.useEffect(() => {\n        loadRecoveryData();\n    }, []);\n\n    return {\n        thermoTherapyProtocols,\n        contrastTherapy,\n        optimalTiming,\n        biohacking,\n        recoveryLog,\n        todayRecovery,\n        markRecoverySession,\n        getRecoveryRecommendation,\n        getRecoveryStats\n    };\n};\n\nexport default RecoveryProtocol;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MotivationalQuotes from './MotivationalQuotes';\r\nimport CalendarStreak from './CalendarStreak';\r\nimport ExerciseTracker from './ExerciseTracker';\r\nimport SupplementStack from './SupplementStack';\r\nimport RecoveryProtocol from './RecoveryProtocol';\r\n\r\nconst Dashboard = () => {\r\n    const quotesHook = MotivationalQuotes();\r\n    const calendarHook = CalendarStreak();\r\n    const exerciseHook = ExerciseTracker();\r\n    const supplementsHook = SupplementStack();\r\n    const recoveryHook = RecoveryProtocol();\r\n    \r\n    const [dashboardData, setDashboardData] = React.useState({\r\n        currentWeight: 0,\r\n        muscleGain: 0,\r\n        workoutSessions: 0,\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        daysActive: 0,\r\n        lastWorkout: null,\r\n        currentStreak: 0\r\n    });\r\n    \r\n    const [todayWorkout, setTodayWorkout] = React.useState(null);\r\n    const [goals12Week, setGoals12Week] = React.useState({\r\n        startWeight: 75,\r\n        targetWeight: 80,\r\n        targetBench: 100,\r\n        targetSquat: 140,\r\n        targetDeadlift: 160,\r\n        startDate: new Date(),\r\n        weeksCompleted: 0\r\n    });\r\n    \r\n    const getTodayWorkout = () => {\r\n        const workoutPlan = {\r\n            1: { name: 'Petto + Bicipiti', exercises: 7, focus: 'Upper Power' },\r\n            2: { name: 'Dorso + Tricipiti + Collo (A)', exercises: 10, focus: 'Pull Strength' },\r\n            3: { name: 'Gambe Complete', exercises: 7, focus: 'Lower Power' },\r\n            4: { name: 'Recupero Attivo', exercises: 3, focus: 'Recovery' },\r\n            5: { name: 'Spalle Complete + Collo (B)', exercises: 13, focus: 'Delts 3D' },\r\n            6: { name: 'Posteriori + Conditioning', exercises: 7, focus: 'Athletic' },\r\n            0: { name: 'Riposo Completo', exercises: 4, focus: 'Rest' }\r\n        };\r\n        \r\n        const today = new Date().getDay();\r\n        return workoutPlan[today];\r\n    };\r\n    \r\n    const loadDashboardData = () => {\r\n        const progressData = JSON.parse(localStorage.getItem('progressData') || '[]');\r\n        const timeStats = JSON.parse(localStorage.getItem('timeStats') || '{}');\r\n        const workoutSessions = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        const goals = JSON.parse(localStorage.getItem('goals12Week') || '{}');\r\n        \r\n        const latestProgress = progressData[0];\r\n        const firstProgress = progressData[progressData.length - 1];\r\n        \r\n        const today = new Date();\r\n        const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n        const recentSessions = workoutSessions.filter(session => \r\n            new Date(session.date) >= oneWeekAgo\r\n        );\r\n        \r\n        setDashboardData({\r\n            currentWeight: latestProgress?.weight || goals.startWeight || 75,\r\n            muscleGain: latestProgress && firstProgress ? \r\n                (parseFloat(latestProgress.muscleMass) - parseFloat(firstProgress.muscleMass)) : 0,\r\n            workoutSessions: workoutSessions.length,\r\n            totalWorkoutTime: timeStats.totalWorkoutTime || 0,\r\n            weeklyTime: timeStats.weeklyTime || 0,\r\n            daysActive: new Set(workoutSessions.map(s => s.date.split('T')[0])).size,\r\n            lastWorkout: workoutSessions[0]?.date || null,\r\n            currentStreak: calendarHook.calculateCurrentStreak()\r\n        });\r\n        \r\n        setTodayWorkout(getTodayWorkout());\r\n        \r\n        if (goals.startDate) {\r\n            const weeksCompleted = Math.floor((today - new Date(goals.startDate)) / (7 * 24 * 60 * 60 * 1000));\r\n            setGoals12Week({...goals, weeksCompleted});\r\n        }\r\n    };\r\n    \r\n    const calculateStreak = (sessions) => {\r\n        if (sessions.length === 0) return 0;\r\n        \r\n        const today = new Date();\r\n        let streak = 0;\r\n        const sortedDates = [...new Set(sessions.map(s => s.date.split('T')[0]))].sort().reverse();\r\n        \r\n        for (let i = 0; i < sortedDates.length; i++) {\r\n            const sessionDate = new Date(sortedDates[i]);\r\n            const daysDiff = Math.floor((today - sessionDate) / (1000 * 60 * 60 * 24));\r\n            \r\n            if (daysDiff <= i + 1) {\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return streak;\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n    \r\n    // FUNZIONI PER IL CALENDARIO COMPLETO\r\n    const generateFullCalendar = () => {\r\n        const today = new Date();\r\n        const currentMonth = today.getMonth();\r\n        const currentYear = today.getFullYear();\r\n        const firstDay = new Date(currentYear, currentMonth, 1);\r\n        const lastDay = new Date(currentYear, currentMonth + 1, 0);\r\n        const daysInMonth = lastDay.getDate();\r\n        const startingDay = firstDay.getDay();\r\n        \r\n        const calendar = [];\r\n        \r\n        // Giorni vuoti all'inizio\r\n        for (let i = 0; i < startingDay; i++) {\r\n            calendar.push(null);\r\n        }\r\n        \r\n        // Giorni del mese\r\n        for (let day = 1; day <= daysInMonth; day++) {\r\n            calendar.push(day);\r\n        }\r\n        \r\n        return calendar;\r\n    };\r\n\r\n    const isToday = (day) => {\r\n        const today = new Date();\r\n        return day === today.getDate();\r\n    };\r\n\r\n    const isDayCompleted = (day) => {\r\n        if (!day) return false;\r\n        // Simula giorni completati basati su workout sessions\r\n        const completedWorkouts = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        const date = new Date();\r\n        date.setDate(day);\r\n        const dayString = date.toDateString();\r\n        \r\n        return completedWorkouts.some(workout => \r\n            new Date(workout.date).toDateString() === dayString\r\n        );\r\n    };\r\n    \r\n    const getNutritionStreak = () => {\r\n        const saved = localStorage.getItem('nutritionStreak');\r\n        return saved ? parseInt(saved) : 0;\r\n    };\r\n    \r\n    const todayQuote = quotesHook.getTodayQuote();\r\n    const todayProgress = exerciseHook.getTodayProgress(todayWorkout?.exercises);\r\n    const supplementProgress = supplementsHook.getSupplementProgress();\r\n    const weeklyStats = exerciseHook.getWeeklyStats();\r\n    const recoveryStats = recoveryHook.getRecoveryStats();\r\n    \r\n    React.useEffect(() => {\r\n        loadDashboardData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <header className=\"dashboard-header\">\r\n                <h1>🏆 FISICO DELLA MADONNA</h1>\r\n                <p className=\"tagline\">\"L'eccellenza non è un atto, ma un'abitudine\" - Aristotele</p>\r\n            </header>\r\n\r\n            {/* MOTIVATIONAL QUOTE OF THE DAY */}\r\n            <div className=\"daily-motivation\">\r\n                <div className=\"quote-card\">\r\n                    <h3>💭 Frase del Giorno</h3>\r\n                    <blockquote>\r\n                        \"{todayQuote.quote}\"\r\n                        <footer>— {todayQuote.author}</footer>\r\n                    </blockquote>\r\n                    <p className=\"quote-context\">{todayQuote.context}</p>\r\n                </div>\r\n            </div>\r\n\r\n            {/* TODAY'S WORKOUT PREVIEW */}\r\n            <div className=\"today-workout-preview\">\r\n                <h3>🎯 Oggi: {todayWorkout?.name}</h3>\r\n                <div className=\"workout-quick-stats\">\r\n                    <span className=\"workout-focus\">{todayWorkout?.focus}</span>\r\n                    <span className=\"workout-exercises\">{todayWorkout?.exercises} esercizi</span>\r\n                    <span className={`workout-progress ${todayProgress.percentage === 100 ? 'completed' : ''}`}>\r\n                        {todayProgress.completed}/{todayProgress.total} completati ({todayProgress.percentage}%)\r\n                    </span>\r\n                </div>\r\n                <div className=\"progress-bar\">\r\n                    <div \r\n                        className=\"progress-fill\" \r\n                        style={{width: `${todayProgress.percentage}%`}}\r\n                    ></div>\r\n                </div>\r\n                <Link to=\"/workout\" className=\"start-workout-btn\">\r\n                    {todayProgress.percentage === 0 ? '🚀 INIZIA WORKOUT' : \r\n                     todayProgress.percentage === 100 ? '✅ COMPLETATO' : \r\n                     '▶️ CONTINUA WORKOUT'}\r\n                </Link>\r\n            </div>\r\n\r\n            {/* CALENDARIO COMPLETO CON STREAK */}\r\n            <div style={{\r\n                background: 'linear-gradient(135deg, #2d2d2d 0%, #3d3d3d 100%)',\r\n                borderRadius: '20px',\r\n                padding: '30px',\r\n                margin: '30px 0',\r\n                boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)'\r\n            }}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '25px' }}>\r\n                    <h2 style={{ \r\n                        fontSize: '1.8rem',\r\n                        color: '#ff9500',\r\n                        margin: 0\r\n                    }}>\r\n                        📅 {new Date().toLocaleDateString('it-IT', { month: 'long', year: 'numeric' }).toUpperCase()}\r\n                    </h2>\r\n                    \r\n                    {/* STREAK COUNTER PROMINENTE */}\r\n                    <div style={{\r\n                        background: 'linear-gradient(135deg, #ff9500 0%, #ff6b35 100%)',\r\n                        padding: '20px',\r\n                        borderRadius: '20px',\r\n                        textAlign: 'center',\r\n                        boxShadow: '0 5px 15px rgba(255, 149, 0, 0.3)',\r\n                        minWidth: '120px'\r\n                    }}>\r\n                        <div style={{ fontSize: '2rem', marginBottom: '8px' }}>🔥</div>\r\n                        <div style={{ fontSize: '2rem', fontWeight: 'bold', marginBottom: '5px', color: 'white' }}>\r\n                            {Math.max(dashboardData.currentStreak, getNutritionStreak())}\r\n                        </div>\r\n                        <div style={{ fontSize: '0.9rem', color: 'white', opacity: 0.9 }}>STREAK</div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: 'repeat(7, 1fr)',\r\n                    gap: '10px',\r\n                    marginBottom: '20px'\r\n                }}>\r\n                    {['DOM', 'LUN', 'MAR', 'MER', 'GIO', 'VEN', 'SAB'].map(day => (\r\n                        <div key={day} style={{\r\n                            padding: '10px',\r\n                            textAlign: 'center',\r\n                            fontWeight: 'bold',\r\n                            color: '#ff9500',\r\n                            fontSize: '0.9rem'\r\n                        }}>\r\n                            {day}\r\n                        </div>\r\n                    ))}\r\n                    \r\n                    {generateFullCalendar().map((day, index) => (\r\n                        <div key={index} style={{\r\n                            padding: '12px',\r\n                            textAlign: 'center',\r\n                            borderRadius: '10px',\r\n                            cursor: day ? 'pointer' : 'default',\r\n                            background: day ? (\r\n                                isToday(day) ? '#ff9500' :\r\n                                isDayCompleted(day) ? '#22c55e' : \r\n                                'rgba(255, 255, 255, 0.05)'\r\n                            ) : 'transparent',\r\n                            color: day ? (\r\n                                isToday(day) || isDayCompleted(day) ? 'white' : '#ccc'\r\n                            ) : 'transparent',\r\n                            fontWeight: isToday(day) ? 'bold' : 'normal',\r\n                            border: isToday(day) ? '2px solid white' : '1px solid transparent',\r\n                            transform: isToday(day) ? 'scale(1.1)' : 'scale(1)',\r\n                            transition: 'all 0.3s ease',\r\n                            fontSize: '0.9rem'\r\n                        }}>\r\n                            {day}\r\n                            {isDayCompleted(day) && !isToday(day) && (\r\n                                <div style={{ fontSize: '0.7rem', marginTop: '2px' }}>✅</div>\r\n                            )}\r\n                            {isToday(day) && (\r\n                                <div style={{ fontSize: '0.6rem', marginTop: '2px' }}>OGGI</div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                \r\n                <div style={{ \r\n                    display: 'flex', \r\n                    justifyContent: 'space-between', \r\n                    alignItems: 'center',\r\n                    background: 'rgba(255, 149, 0, 0.1)',\r\n                    padding: '15px 20px',\r\n                    borderRadius: '15px'\r\n                }}>\r\n                    <div style={{ color: '#aaa', fontSize: '0.9rem' }}>\r\n                        🟠 Oggi • 🟢 Giorno completato • ⚪ Da completare\r\n                    </div>\r\n                    <div style={{ color: '#ff9500', fontWeight: 'bold' }}>\r\n                        📊 {calendarHook.monthlyStats?.monthlyWorkouts || 0} workout questo mese\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PERFORMANCE DASHBOARD */}\r\n            <div className=\"performance-dashboard\">\r\n                <h3>⚡ Performance Overview</h3>\r\n                <div className=\"perf-grid\">\r\n                    <div className=\"perf-card strength\">\r\n                        <h4>💪 Forza</h4>\r\n                        <p className=\"perf-value\">{weeklyStats.totalVolume || 0}kg</p>\r\n                        <p className=\"perf-label\">Volume Settimanale</p>\r\n                    </div>\r\n                    <div className=\"perf-card volume\">\r\n                        <h4>🏋️ Volume</h4>\r\n                        <p className=\"perf-value\">{weeklyStats.totalSets || 0}</p>\r\n                        <p className=\"perf-label\">Serie Settimanali</p>\r\n                    </div>\r\n                    <div className=\"perf-card consistency\">\r\n                        <h4>🎯 Consistenza</h4>\r\n                        <p className=\"perf-value\">{Math.round(((dashboardData.currentStreak / 30) * 100))}%</p>\r\n                        <p className=\"perf-label\">Streak Rate</p>\r\n                    </div>\r\n                    <div className=\"perf-card supplements\">\r\n                        <h4>💊 Stack</h4>\r\n                        <p className=\"perf-value\">{supplementProgress.percentage}%</p>\r\n                        <p className=\"perf-label\">Integratori Oggi</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* 12-WEEK GOALS PROGRESS */}\r\n            <div className=\"goals-progress\">\r\n                <h3>🎯 Obiettivi 12 Settimane</h3>\r\n                <div className=\"goals-grid\">\r\n                    <div className=\"goal-item\">\r\n                        <h4>Peso Target</h4>\r\n                        <div className=\"goal-bar\">\r\n                            <div className=\"goal-progress\" style={{\r\n                                width: `${Math.min(100, ((dashboardData.currentWeight - goals12Week.startWeight) / (goals12Week.targetWeight - goals12Week.startWeight)) * 100)}%`\r\n                            }}></div>\r\n                        </div>\r\n                        <p>{dashboardData.currentWeight}kg → {goals12Week.targetWeight}kg</p>\r\n                    </div>\r\n                    <div className=\"goal-item\">\r\n                        <h4>Settimane</h4>\r\n                        <div className=\"goal-bar\">\r\n                            <div className=\"goal-progress\" style={{\r\n                                width: `${Math.min(100, (goals12Week.weeksCompleted / 12) * 100)}%`\r\n                            }}></div>\r\n                        </div>\r\n                        <p>{goals12Week.weeksCompleted}/12 settimane</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK ACTIONS */}\r\n            <nav className=\"quick-actions\">\r\n                <Link to=\"/workout\" className=\"action-card workout\">\r\n                    <span className=\"action-icon\">🏋️</span>\r\n                    <h4>Workout</h4>\r\n                    <p>Inizia sessione</p>\r\n                </Link>\r\n                <Link to=\"/progress\" className=\"action-card progress\">\r\n                    <span className=\"action-icon\">📈</span>\r\n                    <h4>Progressi</h4>\r\n                    <p>Traccia misure</p>\r\n                </Link>\r\n                <Link to=\"/measurements\" className=\"action-card measurements\">\r\n                    <span className=\"action-icon\">📏</span>\r\n                    <h4>Misurazioni</h4>\r\n                    <p>Peso & corpo</p>\r\n                </Link>\r\n                <Link to=\"/nutrition\" className=\"action-card nutrition\">\r\n                    <span className=\"action-icon\">🥗</span>\r\n                    <h4>Dieta</h4>\r\n                    <p>Piano settimanale</p>\r\n                </Link>\r\n                <Link to=\"/recovery-timer\" className=\"action-card recovery-timer\">\r\n                    <span className=\"action-icon\">🔥</span>\r\n                    <h4>Recovery</h4>\r\n                    <p>Timer sauna/ice</p>\r\n                </Link>\r\n                <Link to=\"/supplements\" className=\"action-card supplements\">\r\n                    <span className=\"action-icon\">💊</span>\r\n                    <h4>Integratori</h4>\r\n                    <p>{supplementProgress.taken}/{supplementProgress.total} presi</p>\r\n                </Link>\r\n                <Link to=\"/recovery\" className=\"action-card recovery\">\r\n                    <span className=\"action-icon\">🧘</span>\r\n                    <h4>Recovery Info</h4>\r\n                    <p>{recoveryStats.totalTime || 0}min oggi</p>\r\n                </Link>\r\n                <Link to=\"/analytics\" className=\"action-card analytics\">\r\n                    <span className=\"action-icon\">📊</span>\r\n                    <h4>Analytics</h4>\r\n                    <p>Grafici avanzati</p>\r\n                </Link>\r\n            </nav>\r\n\r\n            {/* LEGEND MINDSET */}\r\n            <div className=\"legend-mindset\">\r\n                <h3>👑 Mentalità da Leggenda</h3>\r\n                <p className=\"mindset-text\">\r\n                    \"I campioni non nascono in palestra. I campioni nascono da qualcosa di più profondo: \r\n                    <strong>un desiderio, un sogno, una visione.</strong> Tu hai tutto questo. \r\n                    Oggi è il giorno per dimostrarlo.\"\r\n                </p>\r\n                <div className=\"power-stats\">\r\n                    <span>💀 Disciplina: {Math.min(100, dashboardData.currentStreak * 3)}%</span>\r\n                    <span>⚡ Intensità: {Math.min(100, (weeklyStats.sessions || 0) * 20)}%</span>\r\n                    <span>🔥 Dedizione: {Math.min(100, (goals12Week.weeksCompleted || 0) * 8)}%</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { dataManager } from '../utils/dataManager';\r\n\r\nconst WorkoutSimple = () => {\r\n    const navigate = useNavigate();\r\n    const [selectedDay, setSelectedDay] = React.useState(null);\r\n    const [selectedExercise, setSelectedExercise] = React.useState(null);\r\n    const [isWorkoutActive, setIsWorkoutActive] = React.useState(false);\r\n    const [currentWorkout, setCurrentWorkout] = React.useState({\r\n        exercises: [],\r\n        startTime: null,\r\n        duration: 0,\r\n        day: null\r\n    });\r\n    const [exerciseForm, setExerciseForm] = React.useState({\r\n        sets: '',\r\n        reps: '',\r\n        weight: '',\r\n        rir: '',\r\n        notes: ''\r\n    });\r\n\r\n    const workoutPlan = {\r\n        'Lunedì': {\r\n            focus: 'Petto + Bicipiti',\r\n            subtitle: 'Focus: Petto (fascio alto + globale), Bicipiti',\r\n            exercises: [\r\n                { name: 'Panca Inclinata Bilanciere', sets: '4×6-8', rest: '2min', notes: 'RIR 1-2 | Focus forma e controllo' },\r\n                { name: 'Spinte Manubri Inclinata', sets: '3×8-10', rest: '90sec', notes: 'Angolo 30-45° | ROM completo' },\r\n                { name: 'Croci ai Cavi Alti/Inclinata', sets: '3×12-15', rest: '75sec', notes: 'Stretch massimo petto' },\r\n                { name: 'Curl Bilanciere', sets: '4×8-10', rest: '90sec', notes: 'No cheating | Controllo eccentrica' },\r\n                { name: 'Curl Manubri Inclinati', sets: '3×10-12', rest: '75sec', notes: 'Panca 45° | Stretch bicipiti' }\r\n            ]\r\n        },\r\n        'Martedì': {\r\n            focus: 'Dorso + Tricipiti + Collo (A)',\r\n            subtitle: 'Focus: Larghezza dorsale, spessore scapolare, tricipiti, collo',\r\n            exercises: [\r\n                { name: 'Trazioni Presa Ampia', sets: '4×6-8', rest: '2min', notes: 'Se necessario usa assistenza | Focus larghezza' },\r\n                { name: 'Rematore Bilanciere/Manubrio', sets: '4×8-10', rest: '2min', notes: 'Busto 45° | Squeeze scapole' },\r\n                { name: 'Lat Machine Inversa o Presa Stretta', sets: '3×10-12', rest: '90sec', notes: 'Controllo concentrica/eccentrica' },\r\n                { name: 'Panca Stretta Bilanciere', sets: '4×6-8', rest: '2min', notes: 'Presa larghezza spalle | Gomiti chiusi' },\r\n                { name: 'French Press EZ', sets: '3×8-10', rest: '90sec', notes: 'Solo avambracci si muovono' }\r\n            ]\r\n        },\r\n        'Mercoledì': {\r\n            focus: 'Gambe Complete',\r\n            subtitle: 'Focus: Quadricipiti, glutei, femorali, polpacci',\r\n            exercises: [\r\n                { name: 'Squat', sets: '4×6-8', rest: '3min', notes: 'Profondità completa | RIR 1-2' },\r\n                { name: 'Hip Thrust', sets: '4×8-10', rest: '2min', notes: 'Contrazione glutei al top | Pausa 1 sec' },\r\n                { name: 'Affondi Camminata', sets: '3×10 passi/gamba', rest: '90sec', notes: 'Ginocchio a 90° | Passo lungo' },\r\n                { name: 'Leg Press 45°', sets: '3×10-12', rest: '90sec', notes: 'Piedi larghezza spalle | ROM completo' },\r\n                { name: 'Calf Raise in Piedi', sets: '4×10-12', rest: '60sec', notes: 'Pausa 2 sec al top | Range completo' }\r\n            ]\r\n        },\r\n        'Giovedì': {\r\n            focus: 'Recupero Attivo',\r\n            subtitle: 'Focus: Cardiovascolare leggero, mobilità, recupero',\r\n            exercises: [\r\n                { name: 'LISS (Camminata/Cyclette)', sets: '30-40min', rest: 'Zona 1-2', notes: '60-70% FCMax | Mantieni conversazione' },\r\n                { name: 'Stretching/Mobilità', sets: '15-20min', rest: 'Rilassante', notes: 'Tutti i gruppi muscolari | Respiro profondo' },\r\n                { name: 'Sauna o Bagno Turco', sets: '10-15min', rest: 'Recovery', notes: 'Idratazione costante | Relax mentale' }\r\n            ]\r\n        },\r\n        'Venerdì': {\r\n            focus: 'Spalle Complete + Collo (B)',\r\n            subtitle: 'Focus: Deltoidi laterali/posteriori, trapezio, richiamo braccia, collo',\r\n            exercises: [\r\n                { name: 'Military Press Manubri', sets: '4×6-8', rest: '2min', notes: 'Seduto con schienale | Core attivo' },\r\n                { name: 'Alzate Laterali Cavi/Manubri', sets: '4×12-15', rest: '75sec', notes: 'Controllo eccentrica | No cheating' },\r\n                { name: 'Rear Delt Fly (Pec Deck Inversa o Manubri)', sets: '3×12-15', rest: '75sec', notes: 'Squeeze scapole | Focus deltoidi posteriori' },\r\n                { name: 'Face Pull', sets: '3×12-15', rest: '60sec', notes: 'Corda ai cavi | Gomiti alti' },\r\n                { name: 'Scrollate Manubri/Bilanciere', sets: '3×10-12', rest: '90sec', notes: 'Solo spalle | No rotazione' }\r\n            ]\r\n        },\r\n        'Sabato': {\r\n            focus: 'Posteriori + Conditioning',\r\n            subtitle: 'Focus: Femorali, glutei, polpacci + condizionamento',\r\n            exercises: [\r\n                { name: 'Stacco Rumeno (RDL)', sets: '4×6-8', rest: '2min', notes: 'Focus femorali | Bilanciere vicino corpo' },\r\n                { name: 'Hip Thrust (Variante Mono)', sets: '3×10-12', rest: '2min', notes: 'Una gamba | Controllo stabilità' },\r\n                { name: 'Nordic Curl o Glute Ham Raise', sets: '3×8-10', rest: '90sec', notes: 'Eccentrica lenta | Assistenza se necessaria' },\r\n                { name: 'Leg Curl Seduto', sets: '3×12-15', rest: '75sec', notes: 'Contrazione massima | Pausa 1 sec' },\r\n                { name: 'Calf Raise Multipla', sets: '3×15-20', rest: '60sec', notes: 'Variare angoli piedi | Range massimo' }\r\n            ]\r\n        },\r\n        'Domenica': {\r\n            focus: 'Riposo Completo',\r\n            subtitle: 'Focus: Recupero totale, rigenerazione',\r\n            exercises: [\r\n                { name: 'Passeggiata Tranquilla', sets: '30-60min', rest: 'Libero', notes: 'Aria aperta | Ritmo rilassante' },\r\n                { name: 'Stretching Globale', sets: '20-30min', rest: 'Flow dolce', notes: 'Focus respirazione e relax' },\r\n                { name: 'Sauna/Bagno Turco (Opzionale)', sets: '15-20min', rest: 'Recovery', notes: 'Detossificazione | Idratazione' },\r\n                { name: 'Meditazione/Visualizzazione', sets: '10-20min', rest: 'Mentale', notes: 'Preparazione settimana successiva' }\r\n            ]\r\n        }\r\n    };\r\n\r\n    const getMuscleGroup = (exerciseName) => {\r\n        const name = exerciseName.toLowerCase();\r\n        if (name.includes('panca') || name.includes('petto') || name.includes('spinte') || name.includes('croci') || name.includes('dip')) return 'Petto';\r\n        if (name.includes('curl') || name.includes('bicip')) return 'Bicipiti';\r\n        if (name.includes('trazione') || name.includes('rematore') || name.includes('dorso') || name.includes('pullover')) return 'Dorso';\r\n        if (name.includes('tricip') || name.includes('french') || name.includes('pushdown')) return 'Tricipiti';\r\n        if (name.includes('squat') || name.includes('cosce') || name.includes('quad')) return 'Quadricipiti';\r\n        if (name.includes('stacco') || name.includes('femorali')) return 'Femorali';\r\n        if (name.includes('spalla') || name.includes('shoulder') || name.includes('alzate')) return 'Spalle';\r\n        if (name.includes('polpacci') || name.includes('calf')) return 'Polpacci';\r\n        return 'Altro';\r\n    };\r\n\r\n    const startWorkout = (day) => {\r\n        setCurrentWorkout({\r\n            day: day,\r\n            exercises: [],\r\n            startTime: Date.now(),\r\n            duration: 0\r\n        });\r\n        setIsWorkoutActive(true);\r\n        setSelectedDay(day);\r\n    };\r\n\r\n    const completeExercise = (exercise) => {\r\n        if (!exerciseForm.weight || !exerciseForm.reps || !exerciseForm.sets) {\r\n            alert('Inserisci almeno peso, ripetizioni e serie!');\r\n            return;\r\n        }\r\n\r\n        const completedExercise = {\r\n            name: exercise.name,\r\n            sets: parseInt(exerciseForm.sets),\r\n            reps: parseInt(exerciseForm.reps),\r\n            weight: parseFloat(exerciseForm.weight),\r\n            rir: exerciseForm.rir ? parseInt(exerciseForm.rir) : null,\r\n            notes: exerciseForm.notes,\r\n            muscleGroup: getMuscleGroup(exercise.name),\r\n            completed: true\r\n        };\r\n\r\n        setCurrentWorkout(prev => ({\r\n            ...prev,\r\n            exercises: [...prev.exercises, completedExercise]\r\n        }));\r\n\r\n        // Reset form\r\n        setExerciseForm({\r\n            sets: '',\r\n            reps: '',\r\n            weight: '',\r\n            rir: '',\r\n            notes: ''\r\n        });\r\n        setSelectedExercise(null);\r\n        alert(`Esercizio ${exercise.name} salvato!`);\r\n    };\r\n\r\n    const finishWorkout = () => {\r\n        if (currentWorkout.exercises.length === 0) {\r\n            alert('Aggiungi almeno un esercizio prima di salvare!');\r\n            return;\r\n        }\r\n\r\n        const workoutData = {\r\n            ...currentWorkout,\r\n            duration: Math.round((Date.now() - currentWorkout.startTime) / 1000 / 60), // minuti\r\n            type: workoutPlan[currentWorkout.day]?.focus || 'Workout Generico'\r\n        };\r\n\r\n        // Salva nel dataManager\r\n        dataManager.saveWorkout(workoutData);\r\n\r\n        // Reset stato\r\n        setCurrentWorkout({ exercises: [], startTime: null, duration: 0, day: null });\r\n        setIsWorkoutActive(false);\r\n        setSelectedDay(null);\r\n\r\n        alert(`🎉 Workout salvato! ${workoutData.exercises.length} esercizi completati in ${workoutData.duration} minuti.`);\r\n    };\r\n\r\n    const isExerciseCompleted = (exerciseName) => {\r\n        return currentWorkout.exercises.some(ex => ex.name === exerciseName);\r\n    };\r\n\r\n    return (\r\n        <div className=\"workout-container\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"workout-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                    style={{\r\n                        background: '#ff9500',\r\n                        color: 'white',\r\n                        padding: '10px 15px',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        cursor: 'pointer',\r\n                        marginBottom: '20px'\r\n                    }}\r\n                >\r\n                    <span>←</span> Dashboard\r\n                </button>\r\n                \r\n                <div className=\"header-content\">\r\n                    <h1>🏋️ SCHEDA: FISICO DELLA MADONNA</h1>\r\n                    <p>Programma di allenamento avanzato per trasformazione fisica estrema</p>\r\n                    <div className=\"program-stats\">\r\n                        <span>📅 6 giorni/settimana</span>\r\n                        <span>⏱️ 75-90 min/sessione</span>\r\n                        <span>🎯 Volume: Alto</span>\r\n                        <span>🔥 Intensità: RIR 1-3</span>\r\n                    </div>\r\n                    \r\n                    {/* STATUS WORKOUT ATTIVO */}\r\n                    {isWorkoutActive && (\r\n                        <div style={{\r\n                            background: 'rgba(255, 149, 0, 0.1)',\r\n                            padding: '20px',\r\n                            borderRadius: '10px',\r\n                            margin: '20px 0',\r\n                            border: '2px solid #ff9500'\r\n                        }}>\r\n                            <h3>🔥 Workout in Corso: {currentWorkout.day}</h3>\r\n                            <p>Esercizi completati: {currentWorkout.exercises.length}</p>\r\n                            <button \r\n                                onClick={finishWorkout}\r\n                                style={{ \r\n                                    background: '#22c55e', \r\n                                    color: 'white', \r\n                                    padding: '12px 24px', \r\n                                    borderRadius: '8px',\r\n                                    border: 'none',\r\n                                    cursor: 'pointer',\r\n                                    fontSize: '16px',\r\n                                    fontWeight: 'bold'\r\n                                }}\r\n                            >\r\n                                ✅ Termina e Salva Workout\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* PIANO SETTIMANALE */}\r\n            <div className=\"workout-week\">\r\n                <h2>📅 Piano Settimanale</h2>\r\n                <div className=\"days-grid\">\r\n                    {Object.entries(workoutPlan).map(([day, workout]) => (\r\n                        <div key={day} style={{\r\n                            border: selectedDay === day ? '3px solid #ff9500' : '1px solid #333',\r\n                            borderRadius: '10px',\r\n                            padding: '20px',\r\n                            margin: '10px',\r\n                            background: selectedDay === day ? 'rgba(255, 149, 0, 0.1)' : '#1a1a1a'\r\n                        }}>\r\n                            <div \r\n                                onClick={() => setSelectedDay(selectedDay === day ? null : day)}\r\n                                style={{ cursor: 'pointer' }}\r\n                            >\r\n                                <h3>{day}</h3>\r\n                                <p style={{ color: '#ff9500', fontWeight: 'bold' }}>{workout.focus}</p>\r\n                                <p style={{ color: '#aaa' }}>{workout.subtitle}</p>\r\n                            </div>\r\n                            \r\n                            {selectedDay === day && (\r\n                                <div style={{ marginTop: '20px' }}>\r\n                                    {/* PULSANTE INIZIO WORKOUT */}\r\n                                    {!isWorkoutActive && (\r\n                                        <button \r\n                                            onClick={() => startWorkout(day)}\r\n                                            style={{ \r\n                                                background: '#ff9500', \r\n                                                color: 'white', \r\n                                                padding: '15px 30px', \r\n                                                borderRadius: '10px',\r\n                                                fontSize: '16px',\r\n                                                fontWeight: 'bold',\r\n                                                width: '100%',\r\n                                                marginBottom: '20px',\r\n                                                border: 'none',\r\n                                                cursor: 'pointer'\r\n                                            }}\r\n                                        >\r\n                                            🚀 Inizia Workout - {workout.focus}\r\n                                        </button>\r\n                                    )}\r\n\r\n                                    {/* LISTA ESERCIZI */}\r\n                                    <div className=\"exercises-list\">\r\n                                        {workout.exercises.map((exercise, index) => (\r\n                                            <div key={index} style={{\r\n                                                background: isExerciseCompleted(exercise.name) ? \r\n                                                    'rgba(34, 197, 94, 0.2)' : \r\n                                                    selectedExercise === exercise.name ? 'rgba(255, 149, 0, 0.2)' : '#2a2a2a',\r\n                                                border: selectedExercise === exercise.name ? '2px solid #ff9500' : '1px solid #444',\r\n                                                borderRadius: '8px',\r\n                                                padding: '15px',\r\n                                                margin: '10px 0',\r\n                                                cursor: 'pointer'\r\n                                            }}>\r\n                                                <div onClick={() => \r\n                                                    setSelectedExercise(selectedExercise === exercise.name ? null : exercise.name)\r\n                                                }>\r\n                                                    <h4>\r\n                                                        {isExerciseCompleted(exercise.name) && '✅ '}\r\n                                                        {exercise.name}\r\n                                                    </h4>\r\n                                                    <div style={{ color: '#aaa', fontSize: '14px' }}>\r\n                                                        <span>{exercise.sets}</span> | \r\n                                                        <span> Rest: {exercise.rest}</span>\r\n                                                    </div>\r\n                                                    <p style={{ color: '#ccc', fontSize: '12px', marginTop: '8px' }}>\r\n                                                        {exercise.notes}\r\n                                                    </p>\r\n                                                </div>\r\n                                                \r\n                                                {/* INTERFACCIA TRACKING PESO */}\r\n                                                {selectedExercise === exercise.name && isWorkoutActive && (\r\n                                                    <div style={{\r\n                                                        background: '#333',\r\n                                                        padding: '20px',\r\n                                                        borderRadius: '8px',\r\n                                                        marginTop: '15px'\r\n                                                    }}>\r\n                                                        <h5>🏋️ Inserisci Dati Allenamento</h5>\r\n                                                        \r\n                                                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '15px', marginBottom: '15px' }}>\r\n                                                            <div>\r\n                                                                <label style={{ display: 'block', marginBottom: '5px', color: '#aaa' }}>Serie:</label>\r\n                                                                <input \r\n                                                                    type=\"number\"\r\n                                                                    value={exerciseForm.sets}\r\n                                                                    onChange={(e) => setExerciseForm(prev => ({...prev, sets: e.target.value}))}\r\n                                                                    placeholder=\"es. 3\"\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '8px',\r\n                                                                        borderRadius: '5px',\r\n                                                                        border: '1px solid #555',\r\n                                                                        background: '#222',\r\n                                                                        color: 'white'\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                            <div>\r\n                                                                <label style={{ display: 'block', marginBottom: '5px', color: '#aaa' }}>Ripetizioni:</label>\r\n                                                                <input \r\n                                                                    type=\"number\"\r\n                                                                    value={exerciseForm.reps}\r\n                                                                    onChange={(e) => setExerciseForm(prev => ({...prev, reps: e.target.value}))}\r\n                                                                    placeholder=\"es. 8\"\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '8px',\r\n                                                                        borderRadius: '5px',\r\n                                                                        border: '1px solid #555',\r\n                                                                        background: '#222',\r\n                                                                        color: 'white'\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                            <div>\r\n                                                                <label style={{ display: 'block', marginBottom: '5px', color: '#aaa' }}>Peso (kg):</label>\r\n                                                                <input \r\n                                                                    type=\"number\"\r\n                                                                    step=\"0.5\"\r\n                                                                    value={exerciseForm.weight}\r\n                                                                    onChange={(e) => setExerciseForm(prev => ({...prev, weight: e.target.value}))}\r\n                                                                    placeholder=\"es. 80\"\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '8px',\r\n                                                                        borderRadius: '5px',\r\n                                                                        border: '1px solid #ff9500',\r\n                                                                        background: '#ff9500',\r\n                                                                        color: 'white',\r\n                                                                        fontWeight: 'bold'\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        \r\n                                                        <div style={{ display: 'grid', gridTemplateColumns: '150px 1fr', gap: '15px', marginBottom: '15px' }}>\r\n                                                            <div>\r\n                                                                <label style={{ display: 'block', marginBottom: '5px', color: '#aaa' }}>RIR (opz.):</label>\r\n                                                                <select \r\n                                                                    value={exerciseForm.rir}\r\n                                                                    onChange={(e) => setExerciseForm(prev => ({...prev, rir: e.target.value}))}\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '8px',\r\n                                                                        borderRadius: '5px',\r\n                                                                        border: '1px solid #555',\r\n                                                                        background: '#222',\r\n                                                                        color: 'white'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <option value=\"\">-</option>\r\n                                                                    <option value=\"0\">0 (cedimento)</option>\r\n                                                                    <option value=\"1\">1</option>\r\n                                                                    <option value=\"2\">2</option>\r\n                                                                    <option value=\"3\">3</option>\r\n                                                                </select>\r\n                                                            </div>\r\n                                                            <div>\r\n                                                                <label style={{ display: 'block', marginBottom: '5px', color: '#aaa' }}>Note:</label>\r\n                                                                <input \r\n                                                                    type=\"text\"\r\n                                                                    value={exerciseForm.notes}\r\n                                                                    onChange={(e) => setExerciseForm(prev => ({...prev, notes: e.target.value}))}\r\n                                                                    placeholder=\"Sensazioni, difficoltà, ecc.\"\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '8px',\r\n                                                                        borderRadius: '5px',\r\n                                                                        border: '1px solid #555',\r\n                                                                        background: '#222',\r\n                                                                        color: 'white'\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        \r\n                                                        <button \r\n                                                            onClick={() => completeExercise(exercise)}\r\n                                                            style={{\r\n                                                                background: '#22c55e',\r\n                                                                color: 'white',\r\n                                                                padding: '12px 24px',\r\n                                                                borderRadius: '8px',\r\n                                                                width: '100%',\r\n                                                                border: 'none',\r\n                                                                cursor: 'pointer',\r\n                                                                fontSize: '16px',\r\n                                                                fontWeight: 'bold'\r\n                                                            }}\r\n                                                        >\r\n                                                            ✅ Salva Esercizio\r\n                                                        </button>\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                    \r\n                                    {/* PROGRESSO WORKOUT CORRENTE */}\r\n                                    {isWorkoutActive && currentWorkout.day === day && (\r\n                                        <div style={{\r\n                                            background: 'rgba(34, 197, 94, 0.1)',\r\n                                            padding: '20px',\r\n                                            borderRadius: '10px',\r\n                                            marginTop: '20px',\r\n                                            border: '2px solid #22c55e'\r\n                                        }}>\r\n                                            <h4>🏆 Progresso Workout</h4>\r\n                                            <div style={{ marginBottom: '15px', color: '#aaa' }}>\r\n                                                <span>Esercizi: {currentWorkout.exercises.length}/{workout.exercises.length} | </span>\r\n                                                <span>Completamento: {Math.round((currentWorkout.exercises.length / workout.exercises.length) * 100)}%</span>\r\n                                            </div>\r\n                                            \r\n                                            {currentWorkout.exercises.length > 0 && (\r\n                                                <div>\r\n                                                    <h5 style={{ color: '#22c55e' }}>Esercizi Completati:</h5>\r\n                                                    {currentWorkout.exercises.map((ex, idx) => (\r\n                                                        <div key={idx} style={{\r\n                                                            background: '#2a2a2a',\r\n                                                            padding: '8px',\r\n                                                            borderRadius: '5px',\r\n                                                            margin: '5px 0',\r\n                                                            fontSize: '14px'\r\n                                                        }}>\r\n                                                            <span>{ex.name}: {ex.sets}x{ex.reps} @ {ex.weight}kg</span>\r\n                                                            {ex.rir && <span> (RIR {ex.rir})</span>}\r\n                                                        </div>\r\n                                                    ))}\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* INFO COLLEGAMENTO ANALYTICS */}\r\n            <div style={{\r\n                background: 'rgba(0, 255, 255, 0.1)',\r\n                padding: '20px',\r\n                borderRadius: '10px',\r\n                textAlign: 'center',\r\n                margin: '30px 0',\r\n                border: '2px solid #00ffff'\r\n            }}>\r\n                <h3 style={{ color: '#00ffff' }}>📊 I Tuoi Dati Alimentano gli Analytics!</h3>\r\n                <p>Ogni workout salvato contribuisce ai tuoi grafici di progresso reali.</p>\r\n                <button \r\n                    onClick={() => navigate('/analytics')}\r\n                    style={{\r\n                        background: '#00ffff',\r\n                        color: 'black',\r\n                        padding: '12px 24px',\r\n                        borderRadius: '8px',\r\n                        border: 'none',\r\n                        fontWeight: 'bold',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                >\r\n                    🚀 Vai agli Analytics\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WorkoutSimple;","import React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nconst NutritionBella = () => {\r\n    const navigate = useNavigate();\r\n    const [selectedDay, setSelectedDay] = useState(new Date().getDay());\r\n    const [completedMeals, setCompletedMeals] = useState(() => {\r\n        const saved = localStorage.getItem('completedMeals');\r\n        return saved ? JSON.parse(saved) : {};\r\n    });\r\n    const [currentStreak, setCurrentStreak] = useState(() => {\r\n        const saved = localStorage.getItem('nutritionStreak');\r\n        return saved ? parseInt(saved) : 0;\r\n    });\r\n\r\n    // TUA DIETA PERSONALIZZATA - 7 GIORNI\r\n    const weeklyDiet = {\r\n        0: { // Domenica\r\n            name: \"🔥 DOMENICA - RECOVERY DAY\",\r\n            color: \"#ff6b6b\",\r\n            meals: [\r\n                {\r\n                    id: \"dom-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"dom-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Omelette funzionale con superfood\",\r\n                    proteins: 32,\r\n                    calories: 485,\r\n                    ingredients: [\"3 uova + 3 albumi\", \"spinaci + aglio\", \"1 cucchiaio EVOO\", \"1/4 avocado\", \"porridge quinoa + latte mandorla\", \"mirtilli + semi chia\", \"GOS + inulina + cacao 6g + cannella\"]\r\n                },\r\n                {\r\n                    id: \"dom-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Tacchino curry con superfood bowl\",\r\n                    proteins: 42,\r\n                    calories: 680,\r\n                    ingredients: [\"200g tacchino al curry\", \"curcuma/pepe + zenzero\", \"100g riso integrale\", \"aceto mele prima\", \"cavolini/broccoli + EVOO\", \"semi di zucca + fermentati\", \"150g legumi\"]\r\n                },\r\n                {\r\n                    id: \"dom-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Shake vegano con cacao\",\r\n                    proteins: 28,\r\n                    calories: 350,\r\n                    ingredients: [\"shake veg + spinaci\", \"fragole + burro mandorle\", \"cacao 6g\", \"2 quadretti fondente 90%\"]\r\n                }\r\n            ]\r\n        },\r\n        1: { // Lunedì\r\n            name: \"💪 LUNEDÌ - POWER DAY\",\r\n            color: \"#ff9500\",\r\n            meals: [\r\n                {\r\n                    id: \"lun-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"lun-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Omelette funzionale completa\",\r\n                    proteins: 35,\r\n                    calories: 520,\r\n                    ingredients: [\"3 uova + 3 albumi\", \"spinaci + aglio\", \"1 cucchiaio EVOO\", \"1/4 avocado\", \"porridge quinoa + latte mandorla\", \"mirtilli + semi chia\", \"GOS + inulina + cacao 6g + cannella\"]\r\n                },\r\n                {\r\n                    id: \"lun-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Salmone anti-infiammatorio\",\r\n                    proteins: 45,\r\n                    calories: 650,\r\n                    ingredients: [\"200g salmone\", \"curcuma + pepe + zenzero\", \"3/4 tazza quinoa + patata dolce\", \"broccoli + semi zucca + EVOO\", \"insalata verde + crauti/kimchi\", \"150g ceci/lenticchie\"]\r\n                },\r\n                {\r\n                    id: \"lun-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Power shake al cacao\",\r\n                    proteins: 30,\r\n                    calories: 380,\r\n                    ingredients: [\"shake proteico + banana\", \"spinaci + burro mandorle\", \"cacao 6g\", \"2 quadretti fondente 90%\"]\r\n                }\r\n            ]\r\n        },\r\n        2: { // Martedì\r\n            name: \"🎯 MARTEDÌ - PRECISION DAY\",\r\n            color: \"#4ecdc4\",\r\n            meals: [\r\n                {\r\n                    id: \"mar-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"mar-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Pancake funzionali GF\",\r\n                    proteins: 28,\r\n                    calories: 465,\r\n                    ingredients: [\"pancake avena GF + albume + 1 uovo + cannella\", \"burro d'arachidi\", \"fragole & lamponi\", \"tè verde\", \"1 cucchiaio EVOO a crudo\"]\r\n                },\r\n                {\r\n                    id: \"mar-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Pollo speziato con prebiotici\",\r\n                    proteins: 48,\r\n                    calories: 620,\r\n                    ingredients: [\"200g petto pollo\", \"rosmarino + cumino\", \"100g riso integrale\", \"aceto mele prima\", \"cavolo nero + aglio + EVOO\", \"1/4 avocado\", \"150g legumi + fermentati\"]\r\n                },\r\n                {\r\n                    id: \"mar-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Yogurt proteico con prebiotici\",\r\n                    proteins: 25,\r\n                    calories: 280,\r\n                    ingredients: [\"yogurt vegetale + proteine\", \"noci + inulina\", \"1 mela verde\"]\r\n                }\r\n            ]\r\n        },\r\n        3: { // Mercoledì\r\n            name: \"🔋 MERCOLEDÌ - ENERGY DAY\",\r\n            color: \"#45b7d1\",\r\n            meals: [\r\n                {\r\n                    id: \"mer-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"mer-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Uova strapazzate anti-infiammatorie\",\r\n                    proteins: 30,\r\n                    calories: 480,\r\n                    ingredients: [\"3 uova + 2 albumi\", \"zucchine + curcuma/pepe\", \"EVOO\", \"1/2 tazza quinoa\", \"semi lino + mirtilli + GOS\"]\r\n                },\r\n                {\r\n                    id: \"mer-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Tacchino speziato con prebiotici\",\r\n                    proteins: 45,\r\n                    calories: 650,\r\n                    ingredients: [\"200g tacchino\", \"curcuma + limone + zenzero\", \"200g patata dolce\", \"aceto mele prima\", \"spinaci + sesamo + EVOO\", \"150g legumi + fermentati\"]\r\n                },\r\n                {\r\n                    id: \"mer-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Shake vegano al cacao\",\r\n                    proteins: 28,\r\n                    calories: 360,\r\n                    ingredients: [\"shake veg + latte mandorla\", \"fragole + burro anacardi\", \"cacao 6g\", \"2 quadretti 90%\"]\r\n                }\r\n            ]\r\n        },\r\n        4: { // Giovedì\r\n            name: \"⚡ GIOVEDÌ - THUNDER DAY\",\r\n            color: \"#96ceb4\",\r\n            meals: [\r\n                {\r\n                    id: \"gio-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"gio-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Omelette con superfood\",\r\n                    proteins: 32,\r\n                    calories: 510,\r\n                    ingredients: [\"3 uova + 3 albumi\", \"zucchine/peperoni + aglio + prezzemolo\", \"EVOO\", \"1/2 avocado\", \"porridge amaranto + lamponi\", \"semi chia + inulina + cacao 6g + cannella\"]\r\n                },\r\n                {\r\n                    id: \"gio-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Tonno con crucifere bowl\",\r\n                    proteins: 50,\r\n                    calories: 620,\r\n                    ingredients: [\"200g tonno\", \"bowl crucifere (broccoli+cauli ≥250g)\", \"150g lenticchie nere\", \"cumino + zenzero + EVOO\", \"2-4 cucchiai fermentati\"]\r\n                },\r\n                {\r\n                    id: \"gio-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Yogurt con superseeds\",\r\n                    proteins: 24,\r\n                    calories: 290,\r\n                    ingredients: [\"yogurt vegetale + proteine\", \"mirtilli + 1-2 noci brasiliane\", \"1 kiwi\"]\r\n                }\r\n            ]\r\n        },\r\n        5: { // Venerdì\r\n            name: \"🏆 VENERDÌ - VICTORY DAY\",\r\n            color: \"#feca57\",\r\n            meals: [\r\n                {\r\n                    id: \"ven-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"ven-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Uova strapazzate con prebiotici\",\r\n                    proteins: 30,\r\n                    calories: 480,\r\n                    ingredients: [\"3 uova + 2 albumi\", \"spinaci + curcuma/pepe\", \"EVOO\", \"1/2 tazza quinoa\", \"semi lino + mirtilli\", \"GOS/inulina\", \"tè verde\"]\r\n                },\r\n                {\r\n                    id: \"ven-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Manzo magro con fermentati (1x/sett)\",\r\n                    proteins: 48,\r\n                    calories: 670,\r\n                    ingredients: [\"200g manzo magro\", \"200g patata dolce\", \"aceto mele prima\", \"insalata cavolo + carote\", \"semi girasole + EVOO\", \"150g legumi + fermentati\"]\r\n                },\r\n                {\r\n                    id: \"ven-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Shake proteico al cacao\",\r\n                    proteins: 30,\r\n                    calories: 380,\r\n                    ingredients: [\"shake proteico + latte riso\", \"banana + burro arachidi\", \"cacao 6g\"]\r\n                }\r\n            ]\r\n        },\r\n        6: { // Sabato\r\n            name: \"🎉 SABATO - OMEGA DAY\",\r\n            color: \"#a55eea\",\r\n            meals: [\r\n                {\r\n                    id: \"sab-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"sab-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Pancake proteici con antiossidanti\",\r\n                    proteins: 28,\r\n                    calories: 460,\r\n                    ingredients: [\"pancake avena GF + albume + proteine\", \"≥150g frutti di bosco\", \"burro di mandorle\", \"tè verde + EVOO\"]\r\n                },\r\n                {\r\n                    id: \"sab-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Pesce azzurro con omega-3\",\r\n                    proteins: 45,\r\n                    calories: 650,\r\n                    ingredients: [\"200g sgombro/sardine\", \"3/4 tazza quinoa\", \"aceto mele prima\", \"broccoli + spinaci\", \"semi lino + EVOO\", \"insalata rucola+pomodorini + fermentati\", \"150g legumi\"]\r\n                },\r\n                {\r\n                    id: \"sab-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Yogurt con omega seeds\",\r\n                    proteins: 26,\r\n                    calories: 320,\r\n                    ingredients: [\"yogurt vegetale + proteine\", \"semi di chia + noci\", \"1 mela\"]\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    const dayNames = ['Domenica', 'Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato'];\r\n\r\n    const toggleMeal = (mealId) => {\r\n        const today = new Date().toDateString();\r\n        const key = `${today}-${mealId}`;\r\n        \r\n        const newCompleted = {\r\n            ...completedMeals,\r\n            [key]: !completedMeals[key]\r\n        };\r\n        \r\n        setCompletedMeals(newCompleted);\r\n        localStorage.setItem('completedMeals', JSON.stringify(newCompleted));\r\n        \r\n        // Calcola streak\r\n        updateStreak(newCompleted);\r\n    };\r\n\r\n    const updateStreak = (meals) => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[new Date().getDay()].meals;\r\n        const completedToday = todayMeals.filter(meal => meals[`${today}-${meal.id}`]).length;\r\n        \r\n        if (completedToday === todayMeals.length) {\r\n            const newStreak = currentStreak + 1;\r\n            setCurrentStreak(newStreak);\r\n            localStorage.setItem('nutritionStreak', newStreak.toString());\r\n        }\r\n    };\r\n\r\n    const isMealCompleted = (mealId) => {\r\n        const today = new Date().toDateString();\r\n        return completedMeals[`${today}-${mealId}`] || false;\r\n    };\r\n\r\n    const getDayProgress = () => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[selectedDay].meals;\r\n        const completed = todayMeals.filter(meal => completedMeals[`${today}-${meal.id}`]).length;\r\n        return Math.round((completed / todayMeals.length) * 100);\r\n    };\r\n\r\n    const getTotalProteins = () => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[selectedDay].meals;\r\n        return todayMeals\r\n            .filter(meal => completedMeals[`${today}-${meal.id}`])\r\n            .reduce((total, meal) => total + meal.proteins, 0);\r\n    };\r\n\r\n    const getTotalCalories = () => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[selectedDay].meals;\r\n        return todayMeals\r\n            .filter(meal => completedMeals[`${today}-${meal.id}`])\r\n            .reduce((total, meal) => total + meal.calories, 0);\r\n    };\r\n\r\n    // Genera calendario del mese corrente\r\n    const generateCalendar = () => {\r\n        const today = new Date();\r\n        const currentMonth = today.getMonth();\r\n        const currentYear = today.getFullYear();\r\n        const firstDay = new Date(currentYear, currentMonth, 1);\r\n        const lastDay = new Date(currentYear, currentMonth + 1, 0);\r\n        const daysInMonth = lastDay.getDate();\r\n        const startingDay = firstDay.getDay();\r\n        \r\n        const calendar = [];\r\n        \r\n        // Giorni vuoti all'inizio\r\n        for (let i = 0; i < startingDay; i++) {\r\n            calendar.push(null);\r\n        }\r\n        \r\n        // Giorni del mese\r\n        for (let day = 1; day <= daysInMonth; day++) {\r\n            calendar.push(day);\r\n        }\r\n        \r\n        return calendar;\r\n    };\r\n\r\n    const isToday = (day) => {\r\n        const today = new Date();\r\n        return day === today.getDate();\r\n    };\r\n\r\n    const isDayCompleted = (day) => {\r\n        if (!day) return false;\r\n        const date = new Date();\r\n        date.setDate(day);\r\n        const dayString = date.toDateString();\r\n        const dayOfWeek = date.getDay();\r\n        const dayMeals = weeklyDiet[dayOfWeek].meals;\r\n        \r\n        const completedMealsForDay = dayMeals.filter(meal => \r\n            completedMeals[`${dayString}-${meal.id}`]\r\n        ).length;\r\n        \r\n        return completedMealsForDay === dayMeals.length;\r\n    };\r\n\r\n    const calendar = generateCalendar();\r\n    const today = new Date();\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)',\r\n            color: 'white',\r\n            fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif'\r\n        }}>\r\n            {/* HEADER PROFESSIONALE */}\r\n            <div style={{\r\n                background: 'linear-gradient(135deg, #ff9500 0%, #ff6b35 100%)',\r\n                padding: '30px 20px',\r\n                boxShadow: '0 4px 20px rgba(255, 149, 0, 0.3)'\r\n            }}>\r\n                <button \r\n                    onClick={() => navigate('/')}\r\n                    style={{\r\n                        background: 'rgba(255, 255, 255, 0.2)',\r\n                        border: 'none',\r\n                        color: 'white',\r\n                        padding: '12px 20px',\r\n                        borderRadius: '25px',\r\n                        cursor: 'pointer',\r\n                        fontSize: '16px',\r\n                        fontWeight: 'bold',\r\n                        marginBottom: '20px',\r\n                        backdropFilter: 'blur(10px)'\r\n                    }}\r\n                >\r\n                    ← Dashboard\r\n                </button>\r\n                \r\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    <div>\r\n                        <h1 style={{ \r\n                            fontSize: '2.5rem', \r\n                            margin: '0 0 10px 0',\r\n                            textShadow: '2px 2px 4px rgba(0,0,0,0.3)'\r\n                        }}>\r\n                            🍽️ NUTRITION TRACKER PRO\r\n                        </h1>\r\n                        <p style={{ \r\n                            fontSize: '1.2rem', \r\n                            opacity: 0.9, \r\n                            margin: 0 \r\n                        }}>\r\n                            Piano alimentare settimanale personalizzato\r\n                        </p>\r\n                    </div>\r\n                    \r\n                    {/* STREAK COUNTER PROMINENTE */}\r\n                    <div style={{\r\n                        background: 'rgba(255, 255, 255, 0.15)',\r\n                        padding: '20px',\r\n                        borderRadius: '20px',\r\n                        textAlign: 'center',\r\n                        backdropFilter: 'blur(10px)',\r\n                        border: '2px solid rgba(255, 255, 255, 0.2)'\r\n                    }}>\r\n                        <div style={{ fontSize: '3rem', marginBottom: '10px' }}>🔥</div>\r\n                        <div style={{ fontSize: '2.5rem', fontWeight: 'bold', marginBottom: '5px' }}>\r\n                            {currentStreak}\r\n                        </div>\r\n                        <div style={{ fontSize: '1rem', opacity: 0.8 }}>GIORNI STREAK</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '30px 20px' }}>\r\n                {/* CALENDARIO DEL MESE */}\r\n                <div style={{\r\n                    background: 'linear-gradient(135deg, #2d2d2d 0%, #3d3d3d 100%)',\r\n                    borderRadius: '20px',\r\n                    padding: '30px',\r\n                    marginBottom: '30px',\r\n                    boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)'\r\n                }}>\r\n                    <h2 style={{ \r\n                        textAlign: 'center', \r\n                        marginBottom: '25px',\r\n                        fontSize: '1.8rem',\r\n                        color: '#ff9500'\r\n                    }}>\r\n                        📅 {today.toLocaleDateString('it-IT', { month: 'long', year: 'numeric' }).toUpperCase()}\r\n                    </h2>\r\n                    \r\n                    <div style={{\r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'repeat(7, 1fr)',\r\n                        gap: '10px',\r\n                        marginBottom: '20px'\r\n                    }}>\r\n                        {['DOM', 'LUN', 'MAR', 'MER', 'GIO', 'VEN', 'SAB'].map(day => (\r\n                            <div key={day} style={{\r\n                                padding: '10px',\r\n                                textAlign: 'center',\r\n                                fontWeight: 'bold',\r\n                                color: '#ff9500',\r\n                                fontSize: '0.9rem'\r\n                            }}>\r\n                                {day}\r\n                            </div>\r\n                        ))}\r\n                        \r\n                        {calendar.map((day, index) => (\r\n                            <div key={index} style={{\r\n                                padding: '12px',\r\n                                textAlign: 'center',\r\n                                borderRadius: '10px',\r\n                                cursor: day ? 'pointer' : 'default',\r\n                                background: day ? (\r\n                                    isToday(day) ? '#ff9500' :\r\n                                    isDayCompleted(day) ? '#22c55e' : \r\n                                    'rgba(255, 255, 255, 0.05)'\r\n                                ) : 'transparent',\r\n                                color: day ? (\r\n                                    isToday(day) || isDayCompleted(day) ? 'white' : '#ccc'\r\n                                ) : 'transparent',\r\n                                fontWeight: isToday(day) ? 'bold' : 'normal',\r\n                                border: isToday(day) ? '2px solid white' : '1px solid transparent',\r\n                                transform: isToday(day) ? 'scale(1.1)' : 'scale(1)',\r\n                                transition: 'all 0.3s ease'\r\n                            }}>\r\n                                {day}\r\n                                {isDayCompleted(day) && !isToday(day) && (\r\n                                    <div style={{ fontSize: '0.8rem', marginTop: '2px' }}>✅</div>\r\n                                )}\r\n                                {isToday(day) && (\r\n                                    <div style={{ fontSize: '0.7rem', marginTop: '2px' }}>OGGI</div>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    \r\n                    <div style={{ textAlign: 'center', color: '#aaa', fontSize: '0.9rem' }}>\r\n                        🟠 Oggi • 🟢 Giorno completato • ⚪ Da completare\r\n                    </div>\r\n                </div>\r\n\r\n                {/* SELECTOR GIORNI DELLA SETTIMANA */}\r\n                <div style={{\r\n                    display: 'flex',\r\n                    gap: '10px',\r\n                    marginBottom: '30px',\r\n                    overflowX: 'auto',\r\n                    padding: '10px 0'\r\n                }}>\r\n                    {dayNames.map((day, index) => (\r\n                        <button\r\n                            key={index}\r\n                            onClick={() => setSelectedDay(index)}\r\n                            style={{\r\n                                padding: '15px 25px',\r\n                                borderRadius: '25px',\r\n                                border: 'none',\r\n                                cursor: 'pointer',\r\n                                fontSize: '1rem',\r\n                                fontWeight: 'bold',\r\n                                minWidth: '140px',\r\n                                whiteSpace: 'nowrap',\r\n                                background: selectedDay === index ? weeklyDiet[index].color : 'rgba(255, 255, 255, 0.1)',\r\n                                color: selectedDay === index ? 'white' : '#ccc',\r\n                                transform: selectedDay === index ? 'scale(1.05)' : 'scale(1)',\r\n                                transition: 'all 0.3s ease',\r\n                                boxShadow: selectedDay === index ? `0 5px 15px ${weeklyDiet[index].color}40` : 'none'\r\n                            }}\r\n                        >\r\n                            {day}\r\n                            {index === new Date().getDay() && (\r\n                                <div style={{ fontSize: '0.7rem', marginTop: '3px', opacity: 0.8 }}>\r\n                                    OGGI\r\n                                </div>\r\n                            )}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* PROGRESS BAR GIORNALIERA */}\r\n                <div style={{\r\n                    background: 'linear-gradient(135deg, #2d2d2d 0%, #3d3d3d 100%)',\r\n                    borderRadius: '20px',\r\n                    padding: '25px',\r\n                    marginBottom: '30px',\r\n                    boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)'\r\n                }}>\r\n                    <h3 style={{ \r\n                        color: weeklyDiet[selectedDay].color,\r\n                        marginBottom: '20px',\r\n                        fontSize: '1.5rem'\r\n                    }}>\r\n                        {weeklyDiet[selectedDay].name}\r\n                    </h3>\r\n                    \r\n                    <div style={{\r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',\r\n                        gap: '20px',\r\n                        marginBottom: '20px'\r\n                    }}>\r\n                        <div style={{ textAlign: 'center' }}>\r\n                            <div style={{ fontSize: '2rem', fontWeight: 'bold', color: weeklyDiet[selectedDay].color }}>\r\n                                {getDayProgress()}%\r\n                            </div>\r\n                            <div style={{ color: '#aaa', fontSize: '0.9rem' }}>Completato</div>\r\n                        </div>\r\n                        <div style={{ textAlign: 'center' }}>\r\n                            <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#22c55e' }}>\r\n                                {getTotalProteins()}g\r\n                            </div>\r\n                            <div style={{ color: '#aaa', fontSize: '0.9rem' }}>Proteine</div>\r\n                        </div>\r\n                        <div style={{ textAlign: 'center' }}>\r\n                            <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#f59e0b' }}>\r\n                                {getTotalCalories()}\r\n                            </div>\r\n                            <div style={{ color: '#aaa', fontSize: '0.9rem' }}>Kcal</div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div style={{\r\n                        background: 'rgba(255, 255, 255, 0.1)',\r\n                        borderRadius: '25px',\r\n                        height: '12px',\r\n                        overflow: 'hidden'\r\n                    }}>\r\n                        <div style={{\r\n                            background: `linear-gradient(90deg, ${weeklyDiet[selectedDay].color} 0%, ${weeklyDiet[selectedDay].color}aa 100%)`,\r\n                            height: '100%',\r\n                            width: `${getDayProgress()}%`,\r\n                            borderRadius: '25px',\r\n                            transition: 'width 0.5s ease'\r\n                        }} />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* PASTI DEL GIORNO */}\r\n                <div style={{\r\n                    display: 'grid',\r\n                    gap: '20px'\r\n                }}>\r\n                    {weeklyDiet[selectedDay].meals.map((meal, index) => (\r\n                        <div key={meal.id} style={{\r\n                            background: isMealCompleted(meal.id) ? \r\n                                'linear-gradient(135deg, #22c55e20 0%, #22c55e10 100%)' :\r\n                                'linear-gradient(135deg, #2d2d2d 0%, #3d3d3d 100%)',\r\n                            borderRadius: '20px',\r\n                            padding: '25px',\r\n                            border: isMealCompleted(meal.id) ? '2px solid #22c55e' : '1px solid rgba(255, 255, 255, 0.1)',\r\n                            boxShadow: '0 10px 30px rgba(0, 0, 0, 0.2)',\r\n                            transition: 'all 0.3s ease'\r\n                        }}>\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                justifyContent: 'space-between',\r\n                                alignItems: 'flex-start',\r\n                                marginBottom: '20px'\r\n                            }}>\r\n                                <div>\r\n                                    <div style={{\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        gap: '15px',\r\n                                        marginBottom: '10px'\r\n                                    }}>\r\n                                        <h4 style={{\r\n                                            fontSize: '1.3rem',\r\n                                            margin: 0,\r\n                                            color: weeklyDiet[selectedDay].color\r\n                                        }}>\r\n                                            {meal.type}\r\n                                        </h4>\r\n                                        <span style={{\r\n                                            background: 'rgba(255, 149, 0, 0.2)',\r\n                                            color: '#ff9500',\r\n                                            padding: '5px 12px',\r\n                                            borderRadius: '15px',\r\n                                            fontSize: '0.9rem',\r\n                                            fontWeight: 'bold'\r\n                                        }}>\r\n                                            {meal.time}\r\n                                        </span>\r\n                                    </div>\r\n                                    \r\n                                    <h5 style={{\r\n                                        fontSize: '1.1rem',\r\n                                        margin: '0 0 15px 0',\r\n                                        color: 'white'\r\n                                    }}>\r\n                                        {meal.food}\r\n                                    </h5>\r\n                                    \r\n                                    <div style={{\r\n                                        display: 'flex',\r\n                                        gap: '20px',\r\n                                        marginBottom: '15px'\r\n                                    }}>\r\n                                        <div style={{\r\n                                            background: 'rgba(34, 197, 94, 0.2)',\r\n                                            color: '#22c55e',\r\n                                            padding: '8px 15px',\r\n                                            borderRadius: '15px',\r\n                                            fontSize: '0.9rem',\r\n                                            fontWeight: 'bold'\r\n                                        }}>\r\n                                            💪 {meal.proteins}g proteine\r\n                                        </div>\r\n                                        <div style={{\r\n                                            background: 'rgba(245, 158, 11, 0.2)',\r\n                                            color: '#f59e0b',\r\n                                            padding: '8px 15px',\r\n                                            borderRadius: '15px',\r\n                                            fontSize: '0.9rem',\r\n                                            fontWeight: 'bold'\r\n                                        }}>\r\n                                            🔥 {meal.calories} kcal\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <button\r\n                                    onClick={() => toggleMeal(meal.id)}\r\n                                    style={{\r\n                                        background: isMealCompleted(meal.id) ? '#22c55e' : weeklyDiet[selectedDay].color,\r\n                                        border: 'none',\r\n                                        color: 'white',\r\n                                        padding: '15px 25px',\r\n                                        borderRadius: '25px',\r\n                                        cursor: 'pointer',\r\n                                        fontSize: '1rem',\r\n                                        fontWeight: 'bold',\r\n                                        transition: 'all 0.3s ease',\r\n                                        transform: 'scale(1)',\r\n                                        boxShadow: '0 5px 15px rgba(0, 0, 0, 0.2)'\r\n                                    }}\r\n                                    onMouseOver={(e) => e.target.style.transform = 'scale(1.05)'}\r\n                                    onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                                >\r\n                                    {isMealCompleted(meal.id) ? '✅ Completato' : '⭕ Completa'}\r\n                                </button>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <h6 style={{\r\n                                    color: '#aaa',\r\n                                    fontSize: '0.9rem',\r\n                                    marginBottom: '10px',\r\n                                    textTransform: 'uppercase',\r\n                                    letterSpacing: '1px'\r\n                                }}>\r\n                                    Ingredienti:\r\n                                </h6>\r\n                                <div style={{\r\n                                    display: 'flex',\r\n                                    flexWrap: 'wrap',\r\n                                    gap: '8px'\r\n                                }}>\r\n                                    {meal.ingredients.map((ingredient, idx) => (\r\n                                        <span key={idx} style={{\r\n                                            background: 'rgba(255, 255, 255, 0.1)',\r\n                                            color: '#ccc',\r\n                                            padding: '5px 12px',\r\n                                            borderRadius: '12px',\r\n                                            fontSize: '0.8rem'\r\n                                        }}>\r\n                                            {ingredient}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* QUICK ACTIONS */}\r\n                <div style={{\r\n                    display: 'flex',\r\n                    gap: '15px',\r\n                    marginTop: '40px',\r\n                    flexWrap: 'wrap'\r\n                }}>\r\n                    <Link to=\"/analytics\" style={{\r\n                        background: 'linear-gradient(135deg, #00ffff 0%, #0ea5e9 100%)',\r\n                        color: 'black',\r\n                        textDecoration: 'none',\r\n                        padding: '15px 25px',\r\n                        borderRadius: '25px',\r\n                        fontWeight: 'bold',\r\n                        fontSize: '1rem',\r\n                        transition: 'transform 0.3s ease',\r\n                        boxShadow: '0 5px 15px rgba(0, 255, 255, 0.3)'\r\n                    }}>\r\n                        📊 Vai agli Analytics\r\n                    </Link>\r\n                    \r\n                    <Link to=\"/supplements\" style={{\r\n                        background: 'linear-gradient(135deg, #a855f7 0%, #8b5cf6 100%)',\r\n                        color: 'white',\r\n                        textDecoration: 'none',\r\n                        padding: '15px 25px',\r\n                        borderRadius: '25px',\r\n                        fontWeight: 'bold',\r\n                        fontSize: '1rem',\r\n                        transition: 'transform 0.3s ease',\r\n                        boxShadow: '0 5px 15px rgba(168, 85, 247, 0.3)'\r\n                    }}>\r\n                        💊 Gestione Integratori\r\n                    </Link>\r\n                    \r\n                    <button \r\n                        onClick={() => {\r\n                            setCompletedMeals({});\r\n                            setCurrentStreak(0);\r\n                            localStorage.removeItem('completedMeals');\r\n                            localStorage.removeItem('nutritionStreak');\r\n                        }}\r\n                        style={{\r\n                            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            padding: '15px 25px',\r\n                            borderRadius: '25px',\r\n                            fontWeight: 'bold',\r\n                            fontSize: '1rem',\r\n                            cursor: 'pointer',\r\n                            transition: 'transform 0.3s ease',\r\n                            boxShadow: '0 5px 15px rgba(239, 68, 68, 0.3)'\r\n                        }}\r\n                    >\r\n                        🔄 Reset Progresso\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NutritionBella;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Supplements = () => {\r\n    const navigate = useNavigate();\r\n    const [selectedCategory, setSelectedCategory] = useState('all');\r\n    const [takenToday, setTakenToday] = useState(() => {\r\n        const saved = localStorage.getItem('supplementsTaken');\r\n        return saved ? JSON.parse(saved) : {};\r\n    });\r\n    const [currentStack, setCurrentStack] = useState(() => {\r\n        const saved = localStorage.getItem('currentStack');\r\n        return saved ? JSON.parse(saved) : [\r\n            'whey-protein', 'creatine', 'multivitamin', 'omega3', 'vitamin-d'\r\n        ];\r\n    });\r\n\r\n    // SUPPLEMENTI COMPLETI CON TIMING E DOSAGGI\r\n    const supplements = {\r\n        'whey-protein': {\r\n            name: 'Whey Protein',\r\n            category: 'protein',\r\n            icon: '💪',\r\n            dosage: '25-30g',\r\n            timing: ['post-workout', 'snack'],\r\n            benefits: ['Crescita muscolare', 'Recovery', 'Sintesi proteica'],\r\n            priority: 'essential',\r\n            cost: '€35/mese',\r\n            description: 'Proteine del siero ad alto valore biologico per massimizzare la crescita muscolare',\r\n            instructions: 'Assumere 1 scoop (25g) in 250ml acqua/latte entro 30min dal workout'\r\n        },\r\n        'creatine': {\r\n            name: 'Creatina Monoidrata',\r\n            category: 'performance',\r\n            icon: '⚡',\r\n            dosage: '3-5g',\r\n            timing: ['pre-workout', 'post-workout'],\r\n            benefits: ['Forza', 'Potenza', 'Volume muscolare'],\r\n            priority: 'essential',\r\n            cost: '€15/mese',\r\n            description: 'Aumenta ATP per performance esplosive e volume cellulare',\r\n            instructions: '5g al giorno, possibile loading di 20g per 5 giorni iniziali'\r\n        },\r\n        'multivitamin': {\r\n            name: 'Multivitaminico Premium',\r\n            category: 'health',\r\n            icon: '🌟',\r\n            dosage: '1 tablet',\r\n            timing: ['breakfast'],\r\n            benefits: ['Salute generale', 'Sistema immunitario', 'Energia'],\r\n            priority: 'important',\r\n            cost: '€25/mese',\r\n            description: 'Formula completa di vitamine e minerali per atleti',\r\n            instructions: '1 compressa al mattino a stomaco pieno'\r\n        },\r\n        'omega3': {\r\n            name: 'Omega-3 EPA/DHA',\r\n            category: 'health',\r\n            icon: '🐟',\r\n            dosage: '1-2g',\r\n            timing: ['meals'],\r\n            benefits: ['Antinfiammatorio', 'Salute cuore', 'Recovery'],\r\n            priority: 'important',\r\n            cost: '€20/mese',\r\n            description: 'Acidi grassi essenziali per ridurre infiammazione e supportare il recovery',\r\n            instructions: '1-2 capsule ai pasti principali'\r\n        },\r\n        'vitamin-d': {\r\n            name: 'Vitamina D3',\r\n            category: 'health',\r\n            icon: '☀️',\r\n            dosage: '2000-4000 IU',\r\n            timing: ['breakfast'],\r\n            benefits: ['Salute ossa', 'Sistema immunitario', 'Testosterone'],\r\n            priority: 'important',\r\n            cost: '€12/mese',\r\n            description: 'Supporta salute ossea, sistema immunitario e produzione ormonale',\r\n            instructions: '2000 IU al mattino con grassi per migliore assorbimento'\r\n        },\r\n        'bcaa': {\r\n            name: 'BCAA 2:1:1',\r\n            category: 'recovery',\r\n            icon: '🔄',\r\n            dosage: '10-15g',\r\n            timing: ['intra-workout', 'between-meals'],\r\n            benefits: ['Riduce catabolismo', 'Energia durante workout', 'Recovery'],\r\n            priority: 'optional',\r\n            cost: '€30/mese',\r\n            description: 'Aminoacidi ramificati per preservare massa muscolare durante workout',\r\n            instructions: '10g durante workout lunghi o tra i pasti'\r\n        },\r\n        'beta-alanine': {\r\n            name: 'Beta-Alanina',\r\n            category: 'performance',\r\n            icon: '🔥',\r\n            dosage: '3-5g',\r\n            timing: ['pre-workout'],\r\n            benefits: ['Resistenza muscolare', 'Riduce fatica', 'Performance'],\r\n            priority: 'optional',\r\n            cost: '€18/mese',\r\n            description: 'Aumenta capacità di buffer muscolare per allenamenti intensi',\r\n            instructions: '3g 30min pre-workout, possibile formicolio normale'\r\n        },\r\n        'magnesium': {\r\n            name: 'Magnesio Glicinato',\r\n            category: 'recovery',\r\n            icon: '😴',\r\n            dosage: '200-400mg',\r\n            timing: ['evening'],\r\n            benefits: ['Rilassamento muscolare', 'Sonno', 'Recovery'],\r\n            priority: 'important',\r\n            cost: '€15/mese',\r\n            description: 'Supporta rilassamento muscolare e qualità del sonno',\r\n            instructions: '200-300mg la sera prima di dormire'\r\n        },\r\n        'caffeine': {\r\n            name: 'Caffeina Anidra',\r\n            category: 'performance',\r\n            icon: '☕',\r\n            dosage: '100-200mg',\r\n            timing: ['pre-workout'],\r\n            benefits: ['Energia', 'Focus', 'Performance'],\r\n            priority: 'optional',\r\n            cost: '€10/mese',\r\n            description: 'Stimolante per energia e focus durante allenamenti intensi',\r\n            instructions: '100-200mg 30-45min pre-workout, non oltre le 16:00'\r\n        },\r\n        'zinc': {\r\n            name: 'Zinco + Rame',\r\n            category: 'health',\r\n            icon: '⚡',\r\n            dosage: '15-30mg',\r\n            timing: ['evening'],\r\n            benefits: ['Testosterone', 'Sistema immunitario', 'Recovery'],\r\n            priority: 'important',\r\n            cost: '€12/mese',\r\n            description: 'Supporta produzione ormonale e sistema immunitario',\r\n            instructions: '15mg la sera a stomaco vuoto con rame 1-2mg'\r\n        }\r\n    };\r\n\r\n    const categories = {\r\n        all: { name: 'Tutti', icon: '🔮', color: '#00ffff' },\r\n        protein: { name: 'Proteine', icon: '💪', color: '#ff9500' },\r\n        performance: { name: 'Performance', icon: '⚡', color: '#ff6b6b' },\r\n        health: { name: 'Salute', icon: '🌟', color: '#4ecdc4' },\r\n        recovery: { name: 'Recovery', icon: '😴', color: '#a8e6cf' }\r\n    };\r\n\r\n    const timingLabels = {\r\n        'breakfast': '🌅 Colazione',\r\n        'pre-workout': '🏋️ Pre-Workout',\r\n        'intra-workout': '💪 Intra-Workout',\r\n        'post-workout': '🔥 Post-Workout',\r\n        'meals': '🍽️ Ai pasti',\r\n        'snack': '🥤 Snack',\r\n        'evening': '🌙 Sera',\r\n        'between-meals': '⏰ Tra pasti'\r\n    };\r\n\r\n    const toggleSupplement = (suppId) => {\r\n        const today = new Date().toDateString();\r\n        const key = `${today}-${suppId}`;\r\n        \r\n        const newTaken = {\r\n            ...takenToday,\r\n            [key]: !takenToday[key]\r\n        };\r\n        \r\n        setTakenToday(newTaken);\r\n        localStorage.setItem('supplementsTaken', JSON.stringify(newTaken));\r\n    };\r\n\r\n    const isSupplementTaken = (suppId) => {\r\n        const today = new Date().toDateString();\r\n        return takenToday[`${today}-${suppId}`] || false;\r\n    };\r\n\r\n    const addToStack = (suppId) => {\r\n        if (!currentStack.includes(suppId)) {\r\n            const newStack = [...currentStack, suppId];\r\n            setCurrentStack(newStack);\r\n            localStorage.setItem('currentStack', JSON.stringify(newStack));\r\n        }\r\n    };\r\n\r\n    const removeFromStack = (suppId) => {\r\n        const newStack = currentStack.filter(id => id !== suppId);\r\n        setCurrentStack(newStack);\r\n        localStorage.setItem('currentStack', JSON.stringify(newStack));\r\n    };\r\n\r\n    const getCompletionRate = () => {\r\n        const today = new Date().toDateString();\r\n        const stackSupplements = currentStack.length;\r\n        const takenCount = currentStack.filter(suppId => \r\n            takenToday[`${today}-${suppId}`]\r\n        ).length;\r\n        return stackSupplements > 0 ? Math.round((takenCount / stackSupplements) * 100) : 0;\r\n    };\r\n\r\n    const getFilteredSupplements = () => {\r\n        return Object.entries(supplements).filter(([id, supp]) => \r\n            selectedCategory === 'all' || supp.category === selectedCategory\r\n        );\r\n    };\r\n\r\n    const getTotalMonthlyCost = () => {\r\n        return currentStack.reduce((total, suppId) => {\r\n            const cost = supplements[suppId]?.cost || '€0/mese';\r\n            const amount = parseInt(cost.replace('€', '').replace('/mese', ''));\r\n            return total + amount;\r\n        }, 0);\r\n    };\r\n\r\n    return (\r\n        <div className=\"supplements-premium\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"supplements-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-title\">\r\n                    <h1>💊 SUPPLEMENT STACK PRO</h1>\r\n                    <p className=\"subtitle\">Gestione intelligente degli integratori</p>\r\n                </div>\r\n\r\n                <div className=\"completion-badge\">\r\n                    <div className=\"completion-circle\">\r\n                        <span className=\"completion-percentage\">{getCompletionRate()}%</span>\r\n                    </div>\r\n                    <div className=\"completion-label\">Oggi</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK STATS */}\r\n            <div className=\"stack-overview\">\r\n                <div className=\"overview-card\">\r\n                    <div className=\"card-icon\">📦</div>\r\n                    <div className=\"card-data\">\r\n                        <span className=\"card-value\">{currentStack.length}</span>\r\n                        <span className=\"card-label\">Nel tuo stack</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"overview-card\">\r\n                    <div className=\"card-icon\">✅</div>\r\n                    <div className=\"card-data\">\r\n                        <span className=\"card-value\">{currentStack.filter(id => isSupplementTaken(id)).length}</span>\r\n                        <span className=\"card-label\">Assunti oggi</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"overview-card\">\r\n                    <div className=\"card-icon\">💰</div>\r\n                    <div className=\"card-data\">\r\n                        <span className=\"card-value\">€{getTotalMonthlyCost()}</span>\r\n                        <span className=\"card-label\">Costo mensile</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* CURRENT STACK */}\r\n            <div className=\"current-stack-section\">\r\n                <h2>🔥 IL TUO STACK ATTUALE</h2>\r\n                <div className=\"stack-grid\">\r\n                    {currentStack.map(suppId => {\r\n                        const supplement = supplements[suppId];\r\n                        if (!supplement) return null;\r\n                        \r\n                        return (\r\n                            <div \r\n                                key={suppId}\r\n                                className={`stack-card ${isSupplementTaken(suppId) ? 'taken' : ''}`}\r\n                            >\r\n                                <div className=\"stack-card-header\">\r\n                                    <div className=\"stack-info\">\r\n                                        <span className=\"stack-icon\">{supplement.icon}</span>\r\n                                        <div className=\"stack-details\">\r\n                                            <h4>{supplement.name}</h4>\r\n                                            <span className=\"stack-dosage\">{supplement.dosage}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <button\r\n                                        className={`take-button ${isSupplementTaken(suppId) ? 'taken' : ''}`}\r\n                                        onClick={() => toggleSupplement(suppId)}\r\n                                    >\r\n                                        {isSupplementTaken(suppId) ? '✅' : '⭕'}\r\n                                    </button>\r\n                                </div>\r\n                                \r\n                                <div className=\"stack-timing\">\r\n                                    {supplement.timing.map(time => (\r\n                                        <span key={time} className=\"timing-tag\">\r\n                                            {timingLabels[time]}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                                \r\n                                <div className=\"stack-actions\">\r\n                                    <span className=\"stack-cost\">{supplement.cost}</span>\r\n                                    <button\r\n                                        className=\"remove-button\"\r\n                                        onClick={() => removeFromStack(suppId)}\r\n                                        title=\"Rimuovi dallo stack\"\r\n                                    >\r\n                                        🗑️\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            {/* CATEGORY FILTER */}\r\n            <div className=\"category-filter\">\r\n                <h2>🔍 ESPLORA SUPPLEMENTI</h2>\r\n                <div className=\"filter-buttons\">\r\n                    {Object.entries(categories).map(([key, category]) => (\r\n                        <button\r\n                            key={key}\r\n                            className={`filter-btn ${selectedCategory === key ? 'active' : ''}`}\r\n                            onClick={() => setSelectedCategory(key)}\r\n                            style={{ '--category-color': category.color }}\r\n                        >\r\n                            <span className=\"filter-icon\">{category.icon}</span>\r\n                            <span className=\"filter-name\">{category.name}</span>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* SUPPLEMENTS CATALOG */}\r\n            <div className=\"supplements-catalog\">\r\n                <div className=\"catalog-grid\">\r\n                    {getFilteredSupplements().map(([suppId, supplement]) => {\r\n                        const inStack = currentStack.includes(suppId);\r\n                        \r\n                        return (\r\n                            <div key={suppId} className={`supplement-card ${supplement.priority}`}>\r\n                                <div className=\"supplement-header\">\r\n                                    <div className=\"supplement-main\">\r\n                                        <span className=\"supplement-icon\">{supplement.icon}</span>\r\n                                        <div className=\"supplement-info\">\r\n                                            <h3>{supplement.name}</h3>\r\n                                            <span className=\"supplement-category\">\r\n                                                {categories[supplement.category].name}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"supplement-priority\">\r\n                                        {supplement.priority === 'essential' && <span className=\"priority-badge essential\">Essential</span>}\r\n                                        {supplement.priority === 'important' && <span className=\"priority-badge important\">Important</span>}\r\n                                        {supplement.priority === 'optional' && <span className=\"priority-badge optional\">Optional</span>}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-description\">\r\n                                    <p>{supplement.description}</p>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-details\">\r\n                                    <div className=\"detail-row\">\r\n                                        <span className=\"detail-label\">💊 Dosaggio:</span>\r\n                                        <span className=\"detail-value\">{supplement.dosage}</span>\r\n                                    </div>\r\n                                    <div className=\"detail-row\">\r\n                                        <span className=\"detail-label\">💰 Costo:</span>\r\n                                        <span className=\"detail-value\">{supplement.cost}</span>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-benefits\">\r\n                                    <h4>Benefici:</h4>\r\n                                    <div className=\"benefits-tags\">\r\n                                        {supplement.benefits.map((benefit, index) => (\r\n                                            <span key={index} className=\"benefit-tag\">\r\n                                                {benefit}\r\n                                            </span>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-timing\">\r\n                                    <h4>Quando assumere:</h4>\r\n                                    <div className=\"timing-tags\">\r\n                                        {supplement.timing.map(time => (\r\n                                            <span key={time} className=\"timing-tag\">\r\n                                                {timingLabels[time]}\r\n                                            </span>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-instructions\">\r\n                                    <p><strong>Istruzioni:</strong> {supplement.instructions}</p>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-actions\">\r\n                                    {inStack ? (\r\n                                        <button\r\n                                            className=\"action-button remove\"\r\n                                            onClick={() => removeFromStack(suppId)}\r\n                                        >\r\n                                            ❌ Rimuovi dal Stack\r\n                                        </button>\r\n                                    ) : (\r\n                                        <button\r\n                                            className=\"action-button add\"\r\n                                            onClick={() => addToStack(suppId)}\r\n                                        >\r\n                                            ➕ Aggiungi al Stack\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            {/* TIMING GUIDE */}\r\n            <div className=\"timing-guide\">\r\n                <h2>⏰ GUIDA AI TIMING</h2>\r\n                <div className=\"timing-schedule\">\r\n                    <div className=\"time-slot\">\r\n                        <h3>🌅 Mattino (7:00-9:00)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('breakfast'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"time-slot\">\r\n                        <h3>🏋️ Pre-Workout (30-45min prima)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('pre-workout'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"time-slot\">\r\n                        <h3>🔥 Post-Workout (0-30min dopo)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('post-workout'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"time-slot\">\r\n                        <h3>🌙 Sera (prima di dormire)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('evening'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK ACTIONS */}\r\n            <div className=\"supplements-actions\">\r\n                <button \r\n                    className=\"action-button reset\"\r\n                    onClick={() => {\r\n                        setTakenToday({});\r\n                        localStorage.removeItem('supplementsTaken');\r\n                    }}\r\n                >\r\n                    🔄 Reset Giorno\r\n                </button>\r\n                <button \r\n                    className=\"action-button clear\"\r\n                    onClick={() => {\r\n                        setCurrentStack([]);\r\n                        localStorage.removeItem('currentStack');\r\n                    }}\r\n                >\r\n                    🗑️ Svuota Stack\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Supplements;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Recovery = () => {\r\n    const navigate = useNavigate();\r\n    const [activeSession, setActiveSession] = useState(null);\r\n    const [sessionHistory, setSessionHistory] = useState(() => {\r\n        const saved = localStorage.getItem('recoveryHistory');\r\n        return saved ? JSON.parse(saved) : [];\r\n    });\r\n    const [currentTimer, setCurrentTimer] = useState(0);\r\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n    const [selectedProtocol, setSelectedProtocol] = useState('sauna');\r\n\r\n    // PROTOCOLLI RECOVERY PROFESSIONALI\r\n    const recoveryProtocols = {\r\n        'sauna': {\r\n            name: 'Sauna Finlandese',\r\n            icon: '🔥',\r\n            category: 'heat',\r\n            temperature: '80-90°C',\r\n            duration: '15-20 min',\r\n            benefits: ['Vasodilatazione', 'Rilascio endorfine', 'Detox', 'Riduce stress'],\r\n            difficulty: 'facile',\r\n            equipment: 'Sauna',\r\n            calories: 150,\r\n            description: 'Terapia del calore per rilassamento profondo e recupero muscolare',\r\n            instructions: [\r\n                'Riscalda la sauna a 80-90°C',\r\n                'Entra con asciugamano pulito',\r\n                'Siediti rilassato per 15-20 minuti',\r\n                'Bevi acqua frequentemente',\r\n                'Doccia fredda finale per shock termico'\r\n            ],\r\n            contraindications: ['Problemi cardiaci', 'Pressione alta', 'Gravidanza']\r\n        },\r\n        'ice-bath': {\r\n            name: 'Ice Bath (Crioterapia)',\r\n            icon: '🧊',\r\n            category: 'cold',\r\n            temperature: '10-15°C',\r\n            duration: '3-5 min',\r\n            benefits: ['Riduce infiammazione', 'Accelera recovery', 'Migliora circolazione'],\r\n            difficulty: 'difficile',\r\n            equipment: 'Vasca + ghiaccio',\r\n            calories: 50,\r\n            description: 'Immersione in acqua fredda per ridurre infiammazione e accelerare il recupero',\r\n            instructions: [\r\n                'Riempie vasca con acqua 10-15°C',\r\n                'Respirazione controllata prima di entrare',\r\n                'Immersione graduale fino al petto',\r\n                'Rimani calmo per 3-5 minuti',\r\n                'Uscita graduale e riscaldamento naturale'\r\n            ],\r\n            contraindications: ['Problemi circolatori', 'Ipotermia', 'Ferite aperte']\r\n        },\r\n        'contrast-shower': {\r\n            name: 'Doccia Contrastante',\r\n            icon: '🚿',\r\n            category: 'contrast',\r\n            temperature: '40°C / 15°C',\r\n            duration: '10-15 min',\r\n            benefits: ['Migliora circolazione', 'Energizza', 'Recovery veloce'],\r\n            difficulty: 'medio',\r\n            equipment: 'Doccia',\r\n            calories: 30,\r\n            description: 'Alternanza di acqua calda e fredda per stimolare la circolazione',\r\n            instructions: [\r\n                '3 min acqua calda (40°C)',\r\n                '30 sec acqua fredda (15°C)',\r\n                'Ripeti il ciclo 3-4 volte',\r\n                'Termina sempre con acqua fredda',\r\n                'Asciugatura energica con asciugamano'\r\n            ],\r\n            contraindications: ['Pressione alta instabile']\r\n        },\r\n        'massage': {\r\n            name: 'Massaggio Sportivo',\r\n            icon: '🙌',\r\n            category: 'manual',\r\n            temperature: 'Ambiente',\r\n            duration: '30-60 min',\r\n            benefits: ['Riduce tensione', 'Migliora flessibilità', 'Rilassamento profondo'],\r\n            difficulty: 'facile',\r\n            equipment: 'Olio da massaggio',\r\n            calories: 0,\r\n            description: 'Manipolazione manuale dei tessuti molli per rilassamento muscolare',\r\n            instructions: [\r\n                'Usa olio da massaggio di qualità',\r\n                'Movimenti lenti e profondi',\r\n                'Concentrati su aree tense',\r\n                'Pressione gradualmente crescente',\r\n                'Termina con movimenti rilassanti'\r\n            ],\r\n            contraindications: ['Lesioni acute', 'Infiammazioni acute']\r\n        },\r\n        'stretching': {\r\n            name: 'Stretching Profondo',\r\n            icon: '🤸',\r\n            category: 'movement',\r\n            temperature: 'Ambiente',\r\n            duration: '20-30 min',\r\n            benefits: ['Aumenta flessibilità', 'Riduce tensione', 'Migliora mobilità'],\r\n            difficulty: 'facile',\r\n            equipment: 'Tappetino yoga',\r\n            calories: 80,\r\n            description: 'Allungamento muscolare per migliorare flessibilità e ridurre tensioni',\r\n            instructions: [\r\n                'Riscaldamento leggero 5 minuti',\r\n                'Stretching statico 30 sec per gruppo muscolare',\r\n                'Respirazione profonda durante allungamento',\r\n                'Non forzare mai il movimento',\r\n                'Rilassamento finale 5 minuti'\r\n            ],\r\n            contraindications: ['Lesioni muscolari acute']\r\n        },\r\n        'meditation': {\r\n            name: 'Meditazione Mindfulness',\r\n            icon: '🧘',\r\n            category: 'mental',\r\n            temperature: 'Ambiente',\r\n            duration: '10-20 min',\r\n            benefits: ['Riduce stress', 'Migliora focus', 'Equilibrio mentale'],\r\n            difficulty: 'medio',\r\n            equipment: 'Silenzio',\r\n            calories: 0,\r\n            description: 'Pratica di consapevolezza per recupero mentale e riduzione dello stress',\r\n            instructions: [\r\n                'Trova posizione comoda e silenziosa',\r\n                'Chiudi gli occhi e respira naturalmente',\r\n                'Concentrati sul respiro',\r\n                'Osserva pensieri senza giudicare',\r\n                'Ritorna al respiro quando ti distrai'\r\n            ],\r\n            contraindications: ['Disturbi psichiatrici gravi']\r\n        },\r\n        'foam-rolling': {\r\n            name: 'Foam Rolling',\r\n            icon: '🌊',\r\n            category: 'self-massage',\r\n            temperature: 'Ambiente',\r\n            duration: '15-25 min',\r\n            benefits: ['Rilascia trigger points', 'Migliora mobilità', 'Self-massage'],\r\n            difficulty: 'facile',\r\n            equipment: 'Foam roller',\r\n            calories: 60,\r\n            description: 'Auto-massaggio con rullo per rilasciare tensioni e trigger points',\r\n            instructions: [\r\n                'Inizia con pressione leggera',\r\n                'Rotola lentamente ogni gruppo muscolare',\r\n                'Fermati sui punti dolorosi 30-60 sec',\r\n                'Mantieni respirazione regolare',\r\n                'Termina con movimenti rilassanti'\r\n            ],\r\n            contraindications: ['Lesioni acute', 'Osteoporosi severa']\r\n        },\r\n        'yoga': {\r\n            name: 'Yoga Restorative',\r\n            icon: '🕉️',\r\n            category: 'movement',\r\n            temperature: 'Ambiente',\r\n            duration: '30-45 min',\r\n            benefits: ['Flessibilità', 'Equilibrio', 'Rilassamento profondo'],\r\n            difficulty: 'medio',\r\n            equipment: 'Tappetino yoga',\r\n            calories: 120,\r\n            description: 'Pratica yoga dolce focalizzata sul recupero e rilassamento',\r\n            instructions: [\r\n                'Inizia con respirazione profonda',\r\n                'Posizioni dolci e sostenute',\r\n                'Mantieni ogni asana 1-3 minuti',\r\n                'Focus sul rilascio delle tensioni',\r\n                'Chiudi con Savasana 10 minuti'\r\n            ],\r\n            contraindications: ['Lesioni spinali acute']\r\n        }\r\n    };\r\n\r\n    // TIMER LOGIC\r\n    useEffect(() => {\r\n        let interval;\r\n        if (isTimerRunning) {\r\n            interval = setInterval(() => {\r\n                setCurrentTimer(prev => prev + 1);\r\n            }, 1000);\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isTimerRunning]);\r\n\r\n    const startSession = (protocolId) => {\r\n        setActiveSession(protocolId);\r\n        setSelectedProtocol(protocolId);\r\n        setCurrentTimer(0);\r\n        setIsTimerRunning(true);\r\n    };\r\n\r\n    const endSession = () => {\r\n        if (activeSession) {\r\n            const session = {\r\n                id: Date.now().toString(),\r\n                protocol: activeSession,\r\n                duration: currentTimer,\r\n                date: new Date().toISOString(),\r\n                quality: null // Verrà impostato dopo\r\n            };\r\n            \r\n            const newHistory = [session, ...sessionHistory.slice(0, 19)]; // Max 20 sessioni\r\n            setSessionHistory(newHistory);\r\n            localStorage.setItem('recoveryHistory', JSON.stringify(newHistory));\r\n        }\r\n        \r\n        setActiveSession(null);\r\n        setIsTimerRunning(false);\r\n        setCurrentTimer(0);\r\n    };\r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    const getSessionStats = () => {\r\n        const thisWeek = sessionHistory.filter(session => {\r\n            const sessionDate = new Date(session.date);\r\n            const weekAgo = new Date();\r\n            weekAgo.setDate(weekAgo.getDate() - 7);\r\n            return sessionDate >= weekAgo;\r\n        });\r\n\r\n        const totalDuration = sessionHistory.reduce((sum, session) => sum + session.duration, 0);\r\n        const avgDuration = sessionHistory.length > 0 ? Math.round(totalDuration / sessionHistory.length) : 0;\r\n\r\n        return {\r\n            totalSessions: sessionHistory.length,\r\n            thisWeek: thisWeek.length,\r\n            avgDuration: Math.floor(avgDuration / 60),\r\n            totalHours: Math.floor(totalDuration / 3600)\r\n        };\r\n    };\r\n\r\n    const stats = getSessionStats();\r\n\r\n    const categories = {\r\n        heat: { name: 'Calore', icon: '🔥', color: '#ff6b6b' },\r\n        cold: { name: 'Freddo', icon: '🧊', color: '#4ecdc4' },\r\n        contrast: { name: 'Contrasto', icon: '🌊', color: '#45b7d1' },\r\n        manual: { name: 'Manuale', icon: '🙌', color: '#f7b267' },\r\n        movement: { name: 'Movimento', icon: '🤸', color: '#a8e6cf' },\r\n        mental: { name: 'Mentale', icon: '🧘', color: '#dcc7e8' },\r\n        'self-massage': { name: 'Auto-massaggio', icon: '🌊', color: '#ffd93d' }\r\n    };\r\n\r\n    return (\r\n        <div className=\"recovery-luxury\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"recovery-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-title\">\r\n                    <h1>🛌 RECOVERY CENTER PRO</h1>\r\n                    <p className=\"subtitle\">Centro benessere digitale per il recupero ottimale</p>\r\n                </div>\r\n\r\n                <div className=\"recovery-streak\">\r\n                    <div className=\"streak-number\">{stats.thisWeek}</div>\r\n                    <div className=\"streak-label\">Questa Settimana</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* TIMER SESSIONE ATTIVA */}\r\n            {activeSession && (\r\n                <div className=\"active-session-timer\">\r\n                    <div className=\"timer-container\">\r\n                        <div className=\"timer-protocol\">\r\n                            <span className=\"timer-icon\">{recoveryProtocols[activeSession].icon}</span>\r\n                            <div className=\"timer-info\">\r\n                                <h3>{recoveryProtocols[activeSession].name}</h3>\r\n                                <span className=\"timer-duration\">Durata consigliata: {recoveryProtocols[activeSession].duration}</span>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"timer-display\">\r\n                            <span className=\"timer-time\">{formatTime(currentTimer)}</span>\r\n                        </div>\r\n\r\n                        <div className=\"timer-controls\">\r\n                            <button \r\n                                className=\"timer-btn pause\"\r\n                                onClick={() => setIsTimerRunning(!isTimerRunning)}\r\n                            >\r\n                                {isTimerRunning ? '⏸️' : '▶️'}\r\n                            </button>\r\n                            <button \r\n                                className=\"timer-btn stop\"\r\n                                onClick={endSession}\r\n                            >\r\n                                🛑 Fine Sessione\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"session-progress\">\r\n                        <div className=\"progress-info\">\r\n                            <span>Temperatura: {recoveryProtocols[activeSession].temperature}</span>\r\n                            <span>Calorie bruciate: ~{Math.round((currentTimer / 60) * (recoveryProtocols[activeSession].calories / 60))}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* STATISTICS OVERVIEW */}\r\n            <div className=\"recovery-stats\">\r\n                <div className=\"stat-card primary\">\r\n                    <div className=\"stat-icon\">📊</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.totalSessions}</span>\r\n                        <span className=\"stat-label\">Sessioni Totali</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card success\">\r\n                    <div className=\"stat-icon\">⏱️</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.avgDuration}min</span>\r\n                        <span className=\"stat-label\">Durata Media</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card info\">\r\n                    <div className=\"stat-icon\">🕐</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.totalHours}h</span>\r\n                        <span className=\"stat-label\">Ore Totali</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card warning\">\r\n                    <div className=\"stat-icon\">🔥</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.thisWeek}</span>\r\n                        <span className=\"stat-label\">Questa Settimana</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PROTOCOLLI RECOVERY */}\r\n            <div className=\"protocols-section\">\r\n                <h2>🎯 PROTOCOLLI PROFESSIONALI</h2>\r\n                \r\n                <div className=\"protocols-grid\">\r\n                    {Object.entries(recoveryProtocols).map(([id, protocol]) => (\r\n                        <div key={id} className={`protocol-card ${protocol.difficulty}`}>\r\n                            <div className=\"protocol-header\">\r\n                                <div className=\"protocol-main\">\r\n                                    <span className=\"protocol-icon\">{protocol.icon}</span>\r\n                                    <div className=\"protocol-info\">\r\n                                        <h3>{protocol.name}</h3>\r\n                                        <span className=\"protocol-category\">\r\n                                            {categories[protocol.category]?.name}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"protocol-difficulty\">\r\n                                    <span className={`difficulty-badge ${protocol.difficulty}`}>\r\n                                        {protocol.difficulty}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-description\">\r\n                                <p>{protocol.description}</p>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-details\">\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">🌡️ Temperatura:</span>\r\n                                    <span className=\"detail-value\">{protocol.temperature}</span>\r\n                                </div>\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">⏱️ Durata:</span>\r\n                                    <span className=\"detail-value\">{protocol.duration}</span>\r\n                                </div>\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">🔥 Calorie:</span>\r\n                                    <span className=\"detail-value\">~{protocol.calories}/sessione</span>\r\n                                </div>\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">🛠️ Equipment:</span>\r\n                                    <span className=\"detail-value\">{protocol.equipment}</span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-benefits\">\r\n                                <h4>💎 Benefici:</h4>\r\n                                <div className=\"benefits-tags\">\r\n                                    {protocol.benefits.map((benefit, index) => (\r\n                                        <span key={index} className=\"benefit-tag\">\r\n                                            {benefit}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-instructions\">\r\n                                <h4>📋 Istruzioni:</h4>\r\n                                <ol className=\"instructions-list\">\r\n                                    {protocol.instructions.map((instruction, index) => (\r\n                                        <li key={index}>{instruction}</li>\r\n                                    ))}\r\n                                </ol>\r\n                            </div>\r\n\r\n                            {protocol.contraindications.length > 0 && (\r\n                                <div className=\"protocol-warnings\">\r\n                                    <h4>⚠️ Controindicazioni:</h4>\r\n                                    <ul className=\"warnings-list\">\r\n                                        {protocol.contraindications.map((warning, index) => (\r\n                                            <li key={index}>{warning}</li>\r\n                                        ))}\r\n                                    </ul>\r\n                                </div>\r\n                            )}\r\n\r\n                            <div className=\"protocol-action\">\r\n                                <button\r\n                                    className={`protocol-btn ${activeSession === id ? 'active' : ''}`}\r\n                                    onClick={() => activeSession === id ? endSession() : startSession(id)}\r\n                                    disabled={activeSession && activeSession !== id}\r\n                                >\r\n                                    {activeSession === id ? '🛑 Ferma Sessione' : '▶️ Inizia Sessione'}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* HISTORY SESSIONI */}\r\n            {sessionHistory.length > 0 && (\r\n                <div className=\"recovery-history\">\r\n                    <h2>📈 CRONOLOGIA SESSIONI</h2>\r\n                    <div className=\"history-list\">\r\n                        {sessionHistory.slice(0, 10).map((session) => {\r\n                            const protocol = recoveryProtocols[session.protocol];\r\n                            const sessionDate = new Date(session.date);\r\n                            \r\n                            return (\r\n                                <div key={session.id} className=\"history-item\">\r\n                                    <div className=\"history-protocol\">\r\n                                        <span className=\"history-icon\">{protocol.icon}</span>\r\n                                        <div className=\"history-info\">\r\n                                            <h4>{protocol.name}</h4>\r\n                                            <span className=\"history-date\">\r\n                                                {sessionDate.toLocaleDateString('it-IT')} - {sessionDate.toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' })}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"history-stats\">\r\n                                        <span className=\"history-duration\">{formatTime(session.duration)}</span>\r\n                                        <span className=\"history-calories\">\r\n                                            ~{Math.round((session.duration / 60) * (protocol.calories / 60))} cal\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    \r\n                    {sessionHistory.length > 10 && (\r\n                        <button className=\"show-more-btn\">\r\n                            Mostra altre {sessionHistory.length - 10} sessioni\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            )}\r\n\r\n            {/* RECOVERY TIPS */}\r\n            <div className=\"recovery-tips\">\r\n                <h2>💡 CONSIGLI PROFESSIONALI</h2>\r\n                <div className=\"tips-grid\">\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">🌡️</div>\r\n                        <h4>Contrasto Termico</h4>\r\n                        <p>Alterna calore e freddo per massimizzare la circolazione e accelerare il recupero muscolare.</p>\r\n                    </div>\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">💧</div>\r\n                        <h4>Idratazione</h4>\r\n                        <p>Bevi acqua abbondante durante e dopo ogni sessione per mantenere l'equilibrio idro-salino.</p>\r\n                    </div>\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">⏰</div>\r\n                        <h4>Timing Ottimale</h4>\r\n                        <p>Le sessioni di recovery sono più efficaci entro 2-6 ore dopo l'allenamento intenso.</p>\r\n                    </div>\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">🎯</div>\r\n                        <h4>Consistenza</h4>\r\n                        <p>3-4 sessioni settimanali regolari sono più efficaci di sessioni sporadiche intense.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recovery;","import React from 'react';\r\n\r\nconst Progress = () => {\r\n    const [progressData, setProgressData] = React.useState([]);\r\n    const [newEntry, setNewEntry] = React.useState({\r\n        weight: '',\r\n        bodyFat: '',\r\n        muscleMass: '',\r\n        chest: '',\r\n        arms: '',\r\n        waist: '',\r\n        thighs: '',\r\n        notes: ''\r\n    });\r\n    const [timeStats, setTimeStats] = React.useState({\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        monthlyTime: 0,\r\n        sessionsCompleted: 0\r\n    });\r\n    \r\n    const loadProgressData = () => {\r\n        const saved = localStorage.getItem('progressData');\r\n        if (saved) {\r\n            setProgressData(JSON.parse(saved));\r\n        }\r\n        \r\n        const savedTimeStats = localStorage.getItem('timeStats');\r\n        if (savedTimeStats) {\r\n            setTimeStats(JSON.parse(savedTimeStats));\r\n        }\r\n    };\r\n    \r\n    const saveProgressData = (data) => {\r\n        localStorage.setItem('progressData', JSON.stringify(data));\r\n    };\r\n    \r\n    const addEntry = () => {\r\n        if (!newEntry.weight) return;\r\n        \r\n        const entry = {\r\n            ...newEntry,\r\n            date: new Date().toISOString().split('T')[0],\r\n            id: Date.now()\r\n        };\r\n        \r\n        const updated = [entry, ...progressData];\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n        \r\n        setNewEntry({\r\n            weight: '',\r\n            bodyFat: '',\r\n            muscleMass: '',\r\n            chest: '',\r\n            arms: '',\r\n            waist: '',\r\n            thighs: '',\r\n            notes: ''\r\n        });\r\n    };\r\n    \r\n    const deleteEntry = (id) => {\r\n        const updated = progressData.filter(entry => entry.id !== id);\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadProgressData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"progress-container\">\r\n            <h2>🎯 Progress Tracker Avanzato</h2>\r\n            \r\n            <div className=\"time-stats\">\r\n                <h3>📊 Statistiche Tempo Investito</h3>\r\n                <div className=\"stats-grid\">\r\n                    <div className=\"stat-card\">\r\n                        <h4>Tempo Totale</h4>\r\n                        <p>{formatTime(timeStats.totalWorkoutTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questa Settimana</h4>\r\n                        <p>{formatTime(timeStats.weeklyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questo Mese</h4>\r\n                        <p>{formatTime(timeStats.monthlyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Sessioni Completate</h4>\r\n                        <p>{timeStats.sessionsCompleted}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"add-entry-form\">\r\n                <h3>➕ Aggiungi Nuove Misurazioni</h3>\r\n                <div className=\"form-grid\">\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Peso (kg)\"\r\n                        value={newEntry.weight}\r\n                        onChange={(e) => setNewEntry({...newEntry, weight: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Grassa (%)\"\r\n                        value={newEntry.bodyFat}\r\n                        onChange={(e) => setNewEntry({...newEntry, bodyFat: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Muscolare (kg)\"\r\n                        value={newEntry.muscleMass}\r\n                        onChange={(e) => setNewEntry({...newEntry, muscleMass: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Petto (cm)\"\r\n                        value={newEntry.chest}\r\n                        onChange={(e) => setNewEntry({...newEntry, chest: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Braccia (cm)\"\r\n                        value={newEntry.arms}\r\n                        onChange={(e) => setNewEntry({...newEntry, arms: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Vita (cm)\"\r\n                        value={newEntry.waist}\r\n                        onChange={(e) => setNewEntry({...newEntry, waist: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Cosce (cm)\"\r\n                        value={newEntry.thighs}\r\n                        onChange={(e) => setNewEntry({...newEntry, thighs: e.target.value})}\r\n                    />\r\n                    <textarea\r\n                        placeholder=\"Note (sensazioni, obiettivi, etc.)\"\r\n                        value={newEntry.notes}\r\n                        onChange={(e) => setNewEntry({...newEntry, notes: e.target.value})}\r\n                    />\r\n                </div>\r\n                <button className=\"button\" onClick={addEntry}>Aggiungi Misurazione</button>\r\n            </div>\r\n            \r\n            <div className=\"progress-table\">\r\n                <h3>📈 Storico Progressi</h3>\r\n                {progressData.length === 0 ? (\r\n                    <p>Nessuna misurazione ancora. Inizia ad aggiungere i tuoi progressi!</p>\r\n                ) : (\r\n                    <div className=\"table-responsive\">\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Data</th>\r\n                                    <th>Peso</th>\r\n                                    <th>Grasso</th>\r\n                                    <th>Muscolo</th>\r\n                                    <th>Petto</th>\r\n                                    <th>Braccia</th>\r\n                                    <th>Vita</th>\r\n                                    <th>Cosce</th>\r\n                                    <th>Note</th>\r\n                                    <th>Azioni</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {progressData.map((entry) => (\r\n                                    <tr key={entry.id}>\r\n                                        <td>{entry.date}</td>\r\n                                        <td>{entry.weight} kg</td>\r\n                                        <td>{entry.bodyFat}%</td>\r\n                                        <td>{entry.muscleMass} kg</td>\r\n                                        <td>{entry.chest} cm</td>\r\n                                        <td>{entry.arms} cm</td>\r\n                                        <td>{entry.waist} cm</td>\r\n                                        <td>{entry.thighs} cm</td>\r\n                                        <td className=\"notes-cell\">{entry.notes}</td>\r\n                                        <td>\r\n                                            <button \r\n                                                className=\"delete-btn\"\r\n                                                onClick={() => deleteEntry(entry.id)}\r\n                                            >\r\n                                                🗑️\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Progress;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { dataManager } from '../utils/dataManager';\r\n\r\nconst Measurements = () => {\r\n    const navigate = useNavigate();\r\n    const [measurements, setMeasurements] = useState([]);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [formData, setFormData] = useState({\r\n        weight: '',\r\n        height: '',\r\n        bodyFat: '',\r\n        muscleMass: '',\r\n        waist: '',\r\n        chest: '',\r\n        arms: '',\r\n        thighs: '',\r\n        notes: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        loadMeasurements();\r\n    }, []);\r\n\r\n    const loadMeasurements = () => {\r\n        const savedMeasurements = dataManager.getMeasurements();\r\n        setMeasurements(savedMeasurements);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (!formData.weight) {\r\n            alert('Inserisci almeno il peso!');\r\n            return;\r\n        }\r\n\r\n        const measurementData = {\r\n            weight: parseFloat(formData.weight),\r\n            height: formData.height ? parseFloat(formData.height) : null,\r\n            bodyFat: formData.bodyFat ? parseFloat(formData.bodyFat) : null,\r\n            muscleMass: formData.muscleMass ? parseFloat(formData.muscleMass) : null,\r\n            waist: formData.waist ? parseFloat(formData.waist) : null,\r\n            chest: formData.chest ? parseFloat(formData.chest) : null,\r\n            arms: formData.arms ? parseFloat(formData.arms) : null,\r\n            thighs: formData.thighs ? parseFloat(formData.thighs) : null,\r\n            notes: formData.notes\r\n        };\r\n\r\n        dataManager.saveMeasurement(measurementData);\r\n        \r\n        // Reset form\r\n        setFormData({\r\n            weight: '',\r\n            height: '',\r\n            bodyFat: '',\r\n            muscleMass: '',\r\n            waist: '',\r\n            chest: '',\r\n            arms: '',\r\n            thighs: '',\r\n            notes: ''\r\n        });\r\n        \r\n        setShowForm(false);\r\n        loadMeasurements();\r\n        \r\n        alert('Misurazione salvata con successo!');\r\n    };\r\n\r\n    const getProgressChange = (current, previous, unit = 'kg') => {\r\n        if (!previous) return { change: 0, trend: 'stable' };\r\n        const change = current - previous;\r\n        const trend = change > 0 ? 'up' : change < 0 ? 'down' : 'stable';\r\n        return { change: Math.abs(change).toFixed(1) + unit, trend };\r\n    };\r\n\r\n    const getLatestMeasurement = () => measurements[0] || null;\r\n    const getPreviousMeasurement = () => measurements[1] || null;\r\n\r\n    const latest = getLatestMeasurement();\r\n    const previous = getPreviousMeasurement();\r\n\r\n    return (\r\n        <div className=\"measurements-container\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"measurements-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-content\">\r\n                    <h1>📏 MISURAZIONI CORPOREE</h1>\r\n                    <p className=\"subtitle\">Traccia i tuoi progressi fisici nel tempo</p>\r\n                </div>\r\n\r\n                <button \r\n                    className=\"add-measurement-btn\"\r\n                    onClick={() => setShowForm(true)}\r\n                    style={{\r\n                        background: '#ff9500',\r\n                        color: 'white',\r\n                        padding: '12px 24px',\r\n                        borderRadius: '8px',\r\n                        border: 'none',\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    ➕ Nuova Misurazione\r\n                </button>\r\n            </div>\r\n\r\n            {/* FORM NUOVA MISURAZIONE */}\r\n            {showForm && (\r\n                <div className=\"measurement-form-overlay\">\r\n                    <div className=\"measurement-form\">\r\n                        <div className=\"form-header\">\r\n                            <h3>📊 Nuova Misurazione</h3>\r\n                            <button onClick={() => setShowForm(false)}>✕</button>\r\n                        </div>\r\n                        \r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"form-grid\">\r\n                                <div className=\"form-group\">\r\n                                    <label>🏋️ Peso (kg) *</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.1\"\r\n                                        value={formData.weight}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, weight: e.target.value}))}\r\n                                        placeholder=\"es. 75.5\"\r\n                                        required\r\n                                        style={{ background: '#ff9500', color: 'white' }}\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>📏 Altezza (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        value={formData.height}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, height: e.target.value}))}\r\n                                        placeholder=\"es. 175\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>📊 Grasso Corporeo (%)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.1\"\r\n                                        value={formData.bodyFat}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, bodyFat: e.target.value}))}\r\n                                        placeholder=\"es. 12.5\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>💪 Massa Muscolare (kg)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.1\"\r\n                                        value={formData.muscleMass}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, muscleMass: e.target.value}))}\r\n                                        placeholder=\"es. 35.2\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>⚖️ Girovita (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        value={formData.waist}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, waist: e.target.value}))}\r\n                                        placeholder=\"es. 82\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>🫁 Petto (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        value={formData.chest}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, chest: e.target.value}))}\r\n                                        placeholder=\"es. 105\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>💪 Braccia (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        value={formData.arms}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, arms: e.target.value}))}\r\n                                        placeholder=\"es. 38\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>🦵 Cosce (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        value={formData.thighs}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, thighs: e.target.value}))}\r\n                                        placeholder=\"es. 58\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group full-width\">\r\n                                    <label>📝 Note</label>\r\n                                    <textarea \r\n                                        value={formData.notes}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, notes: e.target.value}))}\r\n                                        placeholder=\"Condizioni, sensazioni, obiettivi...\"\r\n                                        rows=\"3\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"form-actions\">\r\n                                <button type=\"button\" onClick={() => setShowForm(false)}>\r\n                                    Annulla\r\n                                </button>\r\n                                <button type=\"submit\" style={{ background: '#22c55e', color: 'white' }}>\r\n                                    ✅ Salva Misurazione\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* STATISTICHE CURRENT */}\r\n            {latest && (\r\n                <div className=\"current-stats\">\r\n                    <h3>📊 Stato Attuale</h3>\r\n                    <div className=\"stats-grid\">\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-icon\">🏋️</div>\r\n                            <div className=\"stat-info\">\r\n                                <span className=\"stat-value\">{latest.weight}kg</span>\r\n                                <span className=\"stat-label\">Peso</span>\r\n                                {previous && (\r\n                                    <span className={`stat-change ${getProgressChange(latest.weight, previous.weight).trend}`}>\r\n                                        {getProgressChange(latest.weight, previous.weight).trend === 'up' ? '↗' : \r\n                                         getProgressChange(latest.weight, previous.weight).trend === 'down' ? '↘' : '→'} \r\n                                        {getProgressChange(latest.weight, previous.weight).change}\r\n                                    </span>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {latest.bodyFat && (\r\n                            <div className=\"stat-card\">\r\n                                <div className=\"stat-icon\">📊</div>\r\n                                <div className=\"stat-info\">\r\n                                    <span className=\"stat-value\">{latest.bodyFat}%</span>\r\n                                    <span className=\"stat-label\">Grasso</span>\r\n                                    {previous?.bodyFat && (\r\n                                        <span className={`stat-change ${getProgressChange(latest.bodyFat, previous.bodyFat, '%').trend}`}>\r\n                                            {getProgressChange(latest.bodyFat, previous.bodyFat, '%').trend === 'down' ? '↘' : '↗'} \r\n                                            {getProgressChange(latest.bodyFat, previous.bodyFat, '%').change}\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {latest.muscleMass && (\r\n                            <div className=\"stat-card\">\r\n                                <div className=\"stat-icon\">💪</div>\r\n                                <div className=\"stat-info\">\r\n                                    <span className=\"stat-value\">{latest.muscleMass}kg</span>\r\n                                    <span className=\"stat-label\">Muscoli</span>\r\n                                    {previous?.muscleMass && (\r\n                                        <span className={`stat-change ${getProgressChange(latest.muscleMass, previous.muscleMass).trend}`}>\r\n                                            {getProgressChange(latest.muscleMass, previous.muscleMass).trend === 'up' ? '↗' : '↘'} \r\n                                            {getProgressChange(latest.muscleMass, previous.muscleMass).change}\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {latest.waist && (\r\n                            <div className=\"stat-card\">\r\n                                <div className=\"stat-icon\">⚖️</div>\r\n                                <div className=\"stat-info\">\r\n                                    <span className=\"stat-value\">{latest.waist}cm</span>\r\n                                    <span className=\"stat-label\">Girovita</span>\r\n                                    {previous?.waist && (\r\n                                        <span className={`stat-change ${getProgressChange(latest.waist, previous.waist, 'cm').trend}`}>\r\n                                            {getProgressChange(latest.waist, previous.waist, 'cm').trend === 'down' ? '↘' : '↗'} \r\n                                            {getProgressChange(latest.waist, previous.waist, 'cm').change}\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* STORICO MISURAZIONI */}\r\n            <div className=\"measurements-history\">\r\n                <h3>📈 Storico Misurazioni</h3>\r\n                {measurements.length > 0 ? (\r\n                    <div className=\"measurements-list\">\r\n                        {measurements.map((measurement, index) => (\r\n                            <div key={measurement.id} className=\"measurement-item\">\r\n                                <div className=\"measurement-date\">\r\n                                    {new Date(measurement.date).toLocaleDateString('it-IT', {\r\n                                        day: 'numeric',\r\n                                        month: 'long',\r\n                                        year: 'numeric'\r\n                                    })}\r\n                                </div>\r\n                                \r\n                                <div className=\"measurement-data\">\r\n                                    <div className=\"data-group\">\r\n                                        <span className=\"data-label\">Peso:</span>\r\n                                        <span className=\"data-value\">{measurement.weight}kg</span>\r\n                                    </div>\r\n                                    \r\n                                    {measurement.bodyFat && (\r\n                                        <div className=\"data-group\">\r\n                                            <span className=\"data-label\">Grasso:</span>\r\n                                            <span className=\"data-value\">{measurement.bodyFat}%</span>\r\n                                        </div>\r\n                                    )}\r\n                                    \r\n                                    {measurement.muscleMass && (\r\n                                        <div className=\"data-group\">\r\n                                            <span className=\"data-label\">Muscoli:</span>\r\n                                            <span className=\"data-value\">{measurement.muscleMass}kg</span>\r\n                                        </div>\r\n                                    )}\r\n                                    \r\n                                    {measurement.waist && (\r\n                                        <div className=\"data-group\">\r\n                                            <span className=\"data-label\">Girovita:</span>\r\n                                            <span className=\"data-value\">{measurement.waist}cm</span>\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    {measurement.notes && (\r\n                                        <div className=\"measurement-notes\">\r\n                                            <strong>Note:</strong> {measurement.notes}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"no-measurements\">\r\n                        <h4>📏 Nessuna Misurazione</h4>\r\n                        <p>Inizia a tracciare i tuoi progressi fisici!</p>\r\n                        <button \r\n                            onClick={() => setShowForm(true)}\r\n                            className=\"start-measuring-btn\"\r\n                        >\r\n                            📊 Inizia a Misurare\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* COLLEGAMENTO AD ANALYTICS */}\r\n            <div className=\"analytics-link\" style={{\r\n                padding: '20px',\r\n                background: 'rgba(0, 255, 255, 0.1)',\r\n                borderRadius: '10px',\r\n                textAlign: 'center',\r\n                marginTop: '20px'\r\n            }}>\r\n                <h3 style={{ color: '#00ffff' }}>📊 Visualizza i Progressi</h3>\r\n                <p>Le tue misurazioni alimentano gli analytics in tempo reale!</p>\r\n                <button \r\n                    onClick={() => navigate('/analytics')}\r\n                    style={{\r\n                        background: '#00ffff',\r\n                        color: 'black',\r\n                        padding: '12px 24px',\r\n                        borderRadius: '8px',\r\n                        border: 'none',\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    🚀 Vai agli Analytics\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Measurements;","// Firebase Configuration - GitHub Pages Compatible\r\n// Configurazione inline per GitHub Pages (non supporta variabili .env a runtime)\r\n\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, connectAuthEmulator } from 'firebase/auth';\r\nimport { getFirestore, connectFirestoreEmulator, enableNetwork, disableNetwork } from 'firebase/firestore';\r\nimport { getStorage, connectStorageEmulator } from 'firebase/storage';\r\nimport { getAnalytics, isSupported } from 'firebase/analytics';\r\n\r\n// Configurazione Firebase - DEMO/LOCALE\r\nconst firebaseConfig = {\r\n    apiKey: \"demo-key\",\r\n    authDomain: \"demo-project.firebaseapp.com\",\r\n    projectId: \"demo-project\",\r\n    storageBucket: \"demo-project.appspot.com\",\r\n    messagingSenderId: \"123456789\",\r\n    appId: \"1:123456789:web:demo\",\r\n    measurementId: \"G-DEMO\"\r\n};\r\n\r\n\r\n// Inizializzazione app\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Inizializzazione servizi Firebase\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\nexport const storage = getStorage(app);\r\n\r\n// Inizializzazione Analytics condizionale\r\nlet analytics = null;\r\nisSupported().then(supported => {\r\n    if (supported) {\r\n        analytics = getAnalytics(app);\r\n        console.log('📊 Firebase Analytics inizializzato');\r\n    } else {\r\n        console.log('📊 Firebase Analytics non supportato in questo ambiente');\r\n    }\r\n});\r\n\r\nexport { analytics };\r\n\r\n// Configurazione ambiente sviluppo\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\nconst useEmulators = process.env.REACT_APP_USE_FIREBASE_EMULATORS === 'true';\r\n\r\nif (isDevelopment && useEmulators) {\r\n    console.log('🔧 Connessione agli emulatori Firebase...');\r\n    \r\n    // Connessione agli emulatori solo se non già connessi\r\n    if (!auth._delegate._config?.emulator) {\r\n        connectAuthEmulator(auth, 'http://localhost:9099');\r\n    }\r\n    \r\n    if (!db._delegate._databaseId?.database.includes('localhost')) {\r\n        connectFirestoreEmulator(db, 'localhost', 8080);\r\n    }\r\n    \r\n    if (!storage._delegate._host.includes('localhost')) {\r\n        connectStorageEmulator(storage, 'localhost', 9199);\r\n    }\r\n    \r\n    console.log('✅ Emulatori Firebase connessi');\r\n}\r\n\r\n// Utility per gestione connessione\r\nexport const connectionManager = {\r\n    enable: () => enableNetwork(db),\r\n    disable: () => disableNetwork(db),\r\n    \r\n    // Controlla stato connessione\r\n    checkConnection: async () => {\r\n        try {\r\n            await enableNetwork(db);\r\n            return true;\r\n        } catch (error) {\r\n            console.error('❌ Errore connessione Firebase:', error);\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\n// Configurazioni ottimizzate per performance\r\nexport const firestoreSettings = {\r\n    cacheSizeBytes: 50 * 1024 * 1024, // 50MB cache\r\n    experimentalForceLongPolling: false, // Usa WebSocket quando possibile\r\n    merge: true, // Abilita merge automatico\r\n    ignoreUndefinedProperties: true // Ignora proprietà undefined\r\n};\r\n\r\n// Helper per logging strutturato\r\nexport const logger = {\r\n    info: (message, data = null) => {\r\n        console.log(`ℹ️ [Firebase] ${message}`, data || '');\r\n    },\r\n    \r\n    error: (message, error = null) => {\r\n        console.error(`❌ [Firebase] ${message}`, error || '');\r\n    },\r\n    \r\n    warn: (message, data = null) => {\r\n        console.warn(`⚠️ [Firebase] ${message}`, data || '');\r\n    },\r\n    \r\n    success: (message, data = null) => {\r\n        console.log(`✅ [Firebase] ${message}`, data || '');\r\n    }\r\n};\r\n\r\n// Export dell'app per usi avanzati\r\nexport default app;\r\n\r\nlogger.success('Firebase configurato con successo');","// Firebase Authentication Service - Enterprise Grade\r\n// Gestione completa autenticazione con error handling avanzato\r\n\r\nimport { \r\n    signInWithEmailAndPassword,\r\n    createUserWithEmailAndPassword,\r\n    signInWithPopup,\r\n    GoogleAuthProvider,\r\n    signOut,\r\n    onAuthStateChanged,\r\n    sendPasswordResetEmail,\r\n    updateProfile,\r\n    updatePassword,\r\n    deleteUser,\r\n    reauthenticateWithCredential,\r\n    EmailAuthProvider\r\n} from 'firebase/auth';\r\n\r\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { auth, db, logger } from './config';\r\n\r\n// Provider Google configurato\r\nconst googleProvider = new GoogleAuthProvider();\r\ngoogleProvider.addScope('profile');\r\ngoogleProvider.addScope('email');\r\n\r\n// Classe per gestire l'autenticazione\r\nclass AuthService {\r\n    constructor() {\r\n        this.currentUser = null;\r\n        this.authStateListeners = [];\r\n        this.initializeAuthListener();\r\n    }\r\n\r\n    // Inizializza listener per cambio stato auth\r\n    initializeAuthListener() {\r\n        onAuthStateChanged(auth, (user) => {\r\n            this.currentUser = user;\r\n            this.notifyAuthStateListeners(user);\r\n            \r\n            if (user) {\r\n                logger.success('Utente autenticato', { \r\n                    uid: user.uid, \r\n                    email: user.email,\r\n                    displayName: user.displayName \r\n                });\r\n                this.updateUserLastSeen(user);\r\n            } else {\r\n                logger.info('Utente disconnesso');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Registra listener per cambio stato\r\n    onAuthStateChange(callback) {\r\n        this.authStateListeners.push(callback);\r\n        \r\n        // Rimuovi listener\r\n        return () => {\r\n            this.authStateListeners = this.authStateListeners.filter(cb => cb !== callback);\r\n        };\r\n    }\r\n\r\n    // Notifica tutti i listener del cambio stato\r\n    notifyAuthStateListeners(user) {\r\n        this.authStateListeners.forEach(callback => {\r\n            try {\r\n                callback(user);\r\n            } catch (error) {\r\n                logger.error('Errore nel listener auth state', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Login con email e password\r\n    async signInWithEmail(email, password) {\r\n        try {\r\n            logger.info('Tentativo login con email...');\r\n            \r\n            const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n            \r\n            await this.updateUserLastSeen(user);\r\n            logger.success('Login completato', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore login email', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Registrazione con email e password\r\n    async signUpWithEmail(email, password, displayName = null) {\r\n        try {\r\n            logger.info('Tentativo registrazione con email...');\r\n            \r\n            const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n            \r\n            // Aggiorna profilo se fornito displayName\r\n            if (displayName) {\r\n                await updateProfile(user, { displayName });\r\n            }\r\n            \r\n            // Crea documento utente in Firestore\r\n            await this.createUserDocument(user, { displayName });\r\n            \r\n            logger.success('Registrazione completata', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore registrazione email', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Login con Google\r\n    async signInWithGoogle() {\r\n        try {\r\n            logger.info('Tentativo login con Google...');\r\n            \r\n            const userCredential = await signInWithPopup(auth, googleProvider);\r\n            const user = userCredential.user;\r\n            \r\n            // Crea o aggiorna documento utente\r\n            await this.createUserDocument(user, {\r\n                displayName: user.displayName,\r\n                photoURL: user.photoURL,\r\n                provider: 'google'\r\n            });\r\n            \r\n            logger.success('Login Google completato', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore login Google', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Logout\r\n    async signOutUser() {\r\n        try {\r\n            logger.info('Logout utente...');\r\n            await signOut(auth);\r\n            logger.success('Logout completato');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore logout', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Reset password\r\n    async resetPassword(email) {\r\n        try {\r\n            logger.info('Invio reset password...');\r\n            await sendPasswordResetEmail(auth, email);\r\n            logger.success('Email reset password inviata');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore reset password', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Aggiorna password (richiede riautenticazione recente)\r\n    async updateUserPassword(currentPassword, newPassword) {\r\n        try {\r\n            if (!this.currentUser) {\r\n                throw new Error('Nessun utente autenticato');\r\n            }\r\n\r\n            logger.info('Aggiornamento password...');\r\n            \r\n            // Riautentica utente\r\n            const credential = EmailAuthProvider.credential(\r\n                this.currentUser.email,\r\n                currentPassword\r\n            );\r\n            await reauthenticateWithCredential(this.currentUser, credential);\r\n            \r\n            // Aggiorna password\r\n            await updatePassword(this.currentUser, newPassword);\r\n            \r\n            logger.success('Password aggiornata');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore aggiornamento password', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Crea documento utente in Firestore\r\n    async createUserDocument(user, additionalData = {}) {\r\n        if (!user) return;\r\n        \r\n        try {\r\n            const userRef = doc(db, 'users', user.uid);\r\n            const userDoc = await getDoc(userRef);\r\n            \r\n            if (!userDoc.exists()) {\r\n                const userData = {\r\n                    uid: user.uid,\r\n                    email: user.email,\r\n                    displayName: user.displayName || additionalData.displayName || 'Utente',\r\n                    photoURL: user.photoURL || additionalData.photoURL || null,\r\n                    provider: additionalData.provider || 'email',\r\n                    createdAt: serverTimestamp(),\r\n                    lastSeen: serverTimestamp(),\r\n                    settings: {\r\n                        units: 'metric', // metric/imperial\r\n                        language: 'it',\r\n                        notifications: true,\r\n                        darkMode: false\r\n                    },\r\n                    profile: {\r\n                        age: null,\r\n                        height: null,\r\n                        activityLevel: 'moderate',\r\n                        goals: [],\r\n                        experience: 'beginner'\r\n                    },\r\n                    ...additionalData\r\n                };\r\n                \r\n                await setDoc(userRef, userData);\r\n                logger.success('Documento utente creato');\r\n            } else {\r\n                // Aggiorna solo lastSeen se utente esiste\r\n                await setDoc(userRef, { lastSeen: serverTimestamp() }, { merge: true });\r\n                logger.info('LastSeen aggiornato');\r\n            }\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore creazione documento utente', error);\r\n        }\r\n    }\r\n\r\n    // Aggiorna ultimo accesso\r\n    async updateUserLastSeen(user) {\r\n        if (!user) return;\r\n        \r\n        try {\r\n            const userRef = doc(db, 'users', user.uid);\r\n            await setDoc(userRef, { \r\n                lastSeen: serverTimestamp(),\r\n                isOnline: true \r\n            }, { merge: true });\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore aggiornamento lastSeen', error);\r\n        }\r\n    }\r\n\r\n    // Gestione errori Firebase Auth\r\n    handleAuthError(error) {\r\n        const errorMessages = {\r\n            'auth/user-not-found': 'Utente non trovato. Verifica l\\'email inserita.',\r\n            'auth/wrong-password': 'Password non corretta. Riprova.',\r\n            'auth/email-already-in-use': 'Email già registrata. Prova ad effettuare il login.',\r\n            'auth/weak-password': 'Password troppo debole. Usa almeno 6 caratteri.',\r\n            'auth/invalid-email': 'Email non valida. Verifica il formato.',\r\n            'auth/user-disabled': 'Account disabilitato. Contatta l\\'assistenza.',\r\n            'auth/too-many-requests': 'Troppi tentativi. Riprova più tardi.',\r\n            'auth/network-request-failed': 'Errore di connessione. Verifica la rete.',\r\n            'auth/popup-closed-by-user': 'Login annullato dall\\'utente.',\r\n            'auth/cancelled-popup-request': 'Popup già aperto. Completa il login.',\r\n            'auth/popup-blocked': 'Popup bloccato dal browser. Abilita i popup.',\r\n            'auth/requires-recent-login': 'Operazione sensibile. Effettua nuovamente il login.'\r\n        };\r\n\r\n        return {\r\n            code: error.code,\r\n            message: errorMessages[error.code] || error.message || 'Errore sconosciuto',\r\n            originalError: error\r\n        };\r\n    }\r\n\r\n    // Utility per controllo stato\r\n    isAuthenticated() {\r\n        return !!this.currentUser;\r\n    }\r\n\r\n    getCurrentUser() {\r\n        return this.currentUser;\r\n    }\r\n\r\n    // Elimina account (operazione irreversibile)\r\n    async deleteAccount(password = null) {\r\n        try {\r\n            if (!this.currentUser) {\r\n                throw new Error('Nessun utente autenticato');\r\n            }\r\n\r\n            logger.warn('Tentativo eliminazione account...');\r\n            \r\n            // Riautentica se password fornita\r\n            if (password) {\r\n                const credential = EmailAuthProvider.credential(\r\n                    this.currentUser.email,\r\n                    password\r\n                );\r\n                await reauthenticateWithCredential(this.currentUser, credential);\r\n            }\r\n            \r\n            const uid = this.currentUser.uid;\r\n            \r\n            // Elimina account\r\n            await deleteUser(this.currentUser);\r\n            \r\n            logger.warn('Account eliminato', { uid });\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore eliminazione account', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n}\r\n\r\n// Instanza singleton del servizio\r\nconst authService = new AuthService();\r\n\r\nexport default authService;\r\n\r\n// Export delle funzioni principali per retrocompatibilità\r\nexport {\r\n    authService,\r\n    auth,\r\n    GoogleAuthProvider\r\n};","// Firestore Database Service - Enterprise Architecture\r\n// Gestione dati fitness con pattern Repository e caching intelligente\r\n\r\nimport {\r\n    collection,\r\n    doc,\r\n    getDocs,\r\n    getDoc,\r\n    setDoc,\r\n    addDoc,\r\n    updateDoc,\r\n    deleteDoc,\r\n    query,\r\n    where,\r\n    orderBy,\r\n    limit,\r\n    startAfter,\r\n    onSnapshot,\r\n    serverTimestamp,\r\n    increment,\r\n    arrayUnion,\r\n    arrayRemove,\r\n    writeBatch,\r\n    runTransaction\r\n} from 'firebase/firestore';\r\n\r\nimport { db, logger } from './config';\r\nimport authService from './auth';\r\n\r\n// Base Repository Class per operazioni CRUD standardizzate\r\nclass BaseRepository {\r\n    constructor(collectionName) {\r\n        this.collectionName = collectionName;\r\n        this.collectionRef = collection(db, collectionName);\r\n        this.cache = new Map(); // Cache locale per performance\r\n        this.listeners = new Map(); // Gestione listener real-time\r\n    }\r\n\r\n    // Ottieni documento per ID\r\n    async getById(id, useCache = true) {\r\n        try {\r\n            // Controlla cache prima\r\n            if (useCache && this.cache.has(id)) {\r\n                const cached = this.cache.get(id);\r\n                // Cache valida per 5 minuti\r\n                if (Date.now() - cached.timestamp < 5 * 60 * 1000) {\r\n                    logger.info(`Cache hit per ${this.collectionName}/${id}`);\r\n                    return { success: true, data: cached.data, fromCache: true };\r\n                }\r\n            }\r\n\r\n            const docRef = doc(db, this.collectionName, id);\r\n            const docSnap = await getDoc(docRef);\r\n            \r\n            if (docSnap.exists()) {\r\n                const data = { id: docSnap.id, ...docSnap.data() };\r\n                \r\n                // Aggiorna cache\r\n                if (useCache) {\r\n                    this.cache.set(id, { data, timestamp: Date.now() });\r\n                }\r\n                \r\n                return { success: true, data, fromCache: false };\r\n            } else {\r\n                return { success: false, error: 'Documento non trovato', data: null };\r\n            }\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore getById ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, data: null };\r\n        }\r\n    }\r\n\r\n    // Crea nuovo documento\r\n    async create(data, customId = null) {\r\n        try {\r\n            const userId = authService.getCurrentUser()?.uid;\r\n            if (!userId) {\r\n                throw new Error('Utente non autenticato');\r\n            }\r\n\r\n            const docData = {\r\n                ...data,\r\n                userId,\r\n                createdAt: serverTimestamp(),\r\n                updatedAt: serverTimestamp()\r\n            };\r\n\r\n            let docRef;\r\n            if (customId) {\r\n                docRef = doc(db, this.collectionName, customId);\r\n                await setDoc(docRef, docData);\r\n            } else {\r\n                docRef = await addDoc(this.collectionRef, docData);\r\n            }\r\n\r\n            const newId = customId || docRef.id;\r\n            \r\n            // Invalida cache\r\n            this.invalidateCache();\r\n            \r\n            logger.success(`Documento creato in ${this.collectionName}`, { id: newId });\r\n            return { success: true, id: newId, data: { id: newId, ...docData } };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore create ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, id: null };\r\n        }\r\n    }\r\n\r\n    // Aggiorna documento\r\n    async update(id, data, merge = true) {\r\n        try {\r\n            const docRef = doc(db, this.collectionName, id);\r\n            const updateData = {\r\n                ...data,\r\n                updatedAt: serverTimestamp()\r\n            };\r\n\r\n            if (merge) {\r\n                await updateDoc(docRef, updateData);\r\n            } else {\r\n                await setDoc(docRef, updateData);\r\n            }\r\n\r\n            // Invalida cache per questo documento\r\n            this.cache.delete(id);\r\n            \r\n            logger.success(`Documento aggiornato in ${this.collectionName}`, { id });\r\n            return { success: true, id };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore update ${this.collectionName}`, error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Elimina documento\r\n    async delete(id) {\r\n        try {\r\n            const docRef = doc(db, this.collectionName, id);\r\n            await deleteDoc(docRef);\r\n            \r\n            // Rimuovi da cache\r\n            this.cache.delete(id);\r\n            \r\n            logger.success(`Documento eliminato da ${this.collectionName}`, { id });\r\n            return { success: true };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore delete ${this.collectionName}`, error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Query personalizzata\r\n    async getWithQuery(queryConstraints = [], useCache = false) {\r\n        try {\r\n            const q = query(this.collectionRef, ...queryConstraints);\r\n            const querySnapshot = await getDocs(q);\r\n            \r\n            const docs = [];\r\n            querySnapshot.forEach((doc) => {\r\n                docs.push({ id: doc.id, ...doc.data() });\r\n            });\r\n            \r\n            return { success: true, data: docs, count: docs.length };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore query ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, data: [], count: 0 };\r\n        }\r\n    }\r\n\r\n    // Listener real-time\r\n    subscribeToChanges(queryConstraints = [], callback = () => {}) {\r\n        try {\r\n            const q = query(this.collectionRef, ...queryConstraints);\r\n            const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n                const docs = [];\r\n                querySnapshot.forEach((doc) => {\r\n                    docs.push({ id: doc.id, ...doc.data() });\r\n                });\r\n                callback(docs);\r\n            });\r\n\r\n            return unsubscribe;\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore subscription ${this.collectionName}`, error);\r\n            return () => {};\r\n        }\r\n    }\r\n\r\n    // Invalidazione cache\r\n    invalidateCache() {\r\n        this.cache.clear();\r\n        logger.info(`Cache invalidata per ${this.collectionName}`);\r\n    }\r\n}\r\n\r\n// Repository specializzato per Progress Data\r\nclass ProgressRepository extends BaseRepository {\r\n    constructor() {\r\n        super('progress');\r\n    }\r\n\r\n    // Ottieni progressi utente corrente\r\n    async getUserProgress(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Aggiungi misurazione\r\n    async addMeasurement(measurementData) {\r\n        const data = {\r\n            ...measurementData,\r\n            date: measurementData.date || new Date().toISOString().split('T')[0],\r\n            type: 'measurement'\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Ottieni statistiche periodo\r\n    async getPeriodStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserProgress(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (result.success && result.data.length > 0) {\r\n            const data = result.data;\r\n            const latest = data[0];\r\n            const oldest = data[data.length - 1];\r\n\r\n            return {\r\n                success: true,\r\n                stats: {\r\n                    totalEntries: data.length,\r\n                    weightChange: latest.weight - oldest.weight,\r\n                    muscleMassChange: latest.muscleMass - oldest.muscleMass,\r\n                    bodyFatChange: latest.bodyFat - oldest.bodyFat,\r\n                    averageWeight: data.reduce((sum, entry) => sum + (entry.weight || 0), 0) / data.length,\r\n                    period: { startDate, endDate, days }\r\n                }\r\n            };\r\n        }\r\n\r\n        return { success: false, error: 'Dati insufficienti per calcolare statistiche' };\r\n    }\r\n}\r\n\r\n// Repository per Workout Sessions\r\nclass WorkoutRepository extends BaseRepository {\r\n    constructor() {\r\n        super('workouts');\r\n    }\r\n\r\n    // Inizio sessione workout\r\n    async startSession(workoutData) {\r\n        const sessionData = {\r\n            ...workoutData,\r\n            status: 'in_progress',\r\n            startTime: serverTimestamp(),\r\n            exercises: workoutData.exercises || [],\r\n            totalDuration: 0\r\n        };\r\n        \r\n        return this.create(sessionData);\r\n    }\r\n\r\n    // Completa sessione\r\n    async completeSession(sessionId, completionData) {\r\n        const updateData = {\r\n            ...completionData,\r\n            status: 'completed',\r\n            endTime: serverTimestamp(),\r\n            completedAt: serverTimestamp()\r\n        };\r\n        \r\n        return this.update(sessionId, updateData);\r\n    }\r\n\r\n    // Ottieni sessioni utente\r\n    async getUserSessions(limit = 50) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            orderBy('createdAt', 'desc'),\r\n            limit(limit)\r\n        ]);\r\n    }\r\n\r\n    // Statistiche workout\r\n    async getWorkoutStats(days = 7) {\r\n        const sessions = await this.getUserSessions(100);\r\n        \r\n        if (!sessions.success) return sessions;\r\n\r\n        const now = new Date();\r\n        const weekAgo = new Date(now.getTime() - (days * 24 * 60 * 60 * 1000));\r\n        \r\n        const recentSessions = sessions.data.filter(session => {\r\n            const sessionDate = session.createdAt?.toDate?.() || new Date(session.createdAt);\r\n            return sessionDate >= weekAgo && session.status === 'completed';\r\n        });\r\n\r\n        const totalSessions = recentSessions.length;\r\n        const totalDuration = recentSessions.reduce((sum, session) => sum + (session.totalDuration || 0), 0);\r\n        const averageDuration = totalSessions > 0 ? totalDuration / totalSessions : 0;\r\n        \r\n        const exerciseStats = {};\r\n        recentSessions.forEach(session => {\r\n            session.exercises?.forEach(exercise => {\r\n                if (!exerciseStats[exercise.name]) {\r\n                    exerciseStats[exercise.name] = { count: 0, totalVolume: 0 };\r\n                }\r\n                exerciseStats[exercise.name].count++;\r\n                exerciseStats[exercise.name].totalVolume += (exercise.sets * exercise.reps * exercise.weight) || 0;\r\n            });\r\n        });\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalSessions,\r\n                totalDuration,\r\n                averageDuration,\r\n                exerciseStats,\r\n                period: { days, startDate: weekAgo, endDate: now }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Repository per Exercise Tracking\r\nclass ExerciseRepository extends BaseRepository {\r\n    constructor() {\r\n        super('exercises');\r\n    }\r\n\r\n    // Aggiungi esercizio completato\r\n    async logExercise(exerciseData) {\r\n        const data = {\r\n            ...exerciseData,\r\n            date: exerciseData.date || new Date().toISOString().split('T')[0],\r\n            volume: (exerciseData.sets * exerciseData.reps * exerciseData.weight) || 0,\r\n            oneRepMax: this.calculateOneRepMax(exerciseData.weight, exerciseData.reps)\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Calcola 1RM stimato (formula Epley)\r\n    calculateOneRepMax(weight, reps) {\r\n        if (!weight || !reps || reps <= 0) return 0;\r\n        if (reps === 1) return weight;\r\n        return Math.round(weight * (1 + reps / 30));\r\n    }\r\n\r\n    // Ottieni PR per esercizio\r\n    async getPersonalRecords(exerciseName = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('weight', 'desc')\r\n        ];\r\n\r\n        if (exerciseName) {\r\n            constraints.unshift(where('exerciseName', '==', exerciseName));\r\n        }\r\n\r\n        const result = await this.getWithQuery(constraints);\r\n        \r\n        if (result.success) {\r\n            // Raggruppa per esercizio e prendi il massimo\r\n            const prs = {};\r\n            result.data.forEach(exercise => {\r\n                const name = exercise.exerciseName;\r\n                if (!prs[name] || exercise.weight > prs[name].weight) {\r\n                    prs[name] = exercise;\r\n                }\r\n            });\r\n            \r\n            return { success: true, data: Object.values(prs) };\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n\r\n// Repository per User Settings\r\nclass UserRepository extends BaseRepository {\r\n    constructor() {\r\n        super('users');\r\n    }\r\n\r\n    // Ottieni profilo utente corrente\r\n    async getCurrentUserProfile() {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.getById(userId);\r\n    }\r\n\r\n    // Aggiorna impostazioni utente\r\n    async updateSettings(settings) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.update(userId, { settings }, true);\r\n    }\r\n\r\n    // Aggiorna profilo utente\r\n    async updateProfile(profileData) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.update(userId, { profile: profileData }, true);\r\n    }\r\n}\r\n\r\n// Repository per Nutrition Tracking\r\nclass NutritionRepository extends BaseRepository {\r\n    constructor() {\r\n        super('nutrition');\r\n    }\r\n\r\n    // Registra pasto completato/saltato\r\n    async logMeal(mealData) {\r\n        const data = {\r\n            ...mealData,\r\n            date: mealData.date || new Date().toISOString().split('T')[0],\r\n            completedAt: mealData.status === 'completed' ? new Date() : null\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Aggiorna stato pasto\r\n    async updateMealStatus(mealId, status, notes = null) {\r\n        const updateData = {\r\n            status,\r\n            notes,\r\n            completedAt: status === 'completed' ? new Date() : null\r\n        };\r\n        \r\n        return this.update(mealId, updateData);\r\n    }\r\n\r\n    // Ottieni pasti utente per data/range\r\n    async getUserMeals(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Ottieni pasti per giorno specifico\r\n    async getDayMeals(date) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            where('date', '==', date),\r\n            orderBy('mealType', 'asc')\r\n        ]);\r\n    }\r\n\r\n    // Statistiche nutrizionali periodo\r\n    async getNutritionStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserMeals(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (!result.success) return result;\r\n\r\n        const meals = result.data;\r\n        const completedMeals = meals.filter(m => m.status === 'completed');\r\n        const totalMeals = meals.length;\r\n        const adherenceRate = totalMeals > 0 ? (completedMeals.length / totalMeals) * 100 : 0;\r\n\r\n        // Calcola proteine totali (se tracked)\r\n        const totalProteins = completedMeals.reduce((sum, meal) => sum + (meal.proteins || 0), 0);\r\n        const avgProteinsPerDay = days > 0 ? totalProteins / days : 0;\r\n\r\n        // Calcola streak\r\n        const streak = this.calculateNutritionStreak(meals);\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalMeals,\r\n                completedMeals: completedMeals.length,\r\n                adherenceRate: Math.round(adherenceRate),\r\n                totalProteins,\r\n                avgProteinsPerDay: Math.round(avgProteinsPerDay),\r\n                currentStreak: streak,\r\n                period: { startDate, endDate, days }\r\n            }\r\n        };\r\n    }\r\n\r\n    // Calcola streak nutrizionale\r\n    calculateNutritionStreak(meals) {\r\n        if (!meals.length) return 0;\r\n\r\n        // Raggruppa pasti per giorno\r\n        const mealsByDay = {};\r\n        meals.forEach(meal => {\r\n            if (!mealsByDay[meal.date]) {\r\n                mealsByDay[meal.date] = [];\r\n            }\r\n            mealsByDay[meal.date].push(meal);\r\n        });\r\n\r\n        // Calcola streak giorni consecutivi con adherence > 66%\r\n        let streak = 0;\r\n        const sortedDates = Object.keys(mealsByDay).sort().reverse();\r\n\r\n        for (const date of sortedDates) {\r\n            const dayMeals = mealsByDay[date];\r\n            const completedMeals = dayMeals.filter(m => m.status === 'completed');\r\n            const adherence = completedMeals.length / dayMeals.length;\r\n\r\n            if (adherence >= 0.66) { // Almeno 2/3 dei pasti completati\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return streak;\r\n    }\r\n}\r\n\r\n// Repository per Recovery Tracking\r\nclass RecoveryRepository extends BaseRepository {\r\n    constructor() {\r\n        super('recovery');\r\n    }\r\n\r\n    // Registra sessione recovery\r\n    async logRecoverySession(recoveryData) {\r\n        const data = {\r\n            ...recoveryData,\r\n            date: recoveryData.date || new Date().toISOString().split('T')[0],\r\n            completedAt: new Date()\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Ottieni sessioni recovery utente\r\n    async getUserRecoverySessions(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Ottieni sessioni per giorno\r\n    async getDayRecoverySessions(date) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            where('date', '==', date),\r\n            orderBy('createdAt', 'desc')\r\n        ]);\r\n    }\r\n\r\n    // Statistiche recovery\r\n    async getRecoveryStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserRecoverySessions(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (!result.success) return result;\r\n\r\n        const sessions = result.data;\r\n        const totalSessions = sessions.length;\r\n        const totalDuration = sessions.reduce((sum, s) => sum + (s.duration || 0), 0);\r\n        const avgDuration = totalSessions > 0 ? totalDuration / totalSessions : 0;\r\n\r\n        // Breakdown per tipo attività\r\n        const activityBreakdown = {};\r\n        sessions.forEach(session => {\r\n            const type = session.activityType;\r\n            if (!activityBreakdown[type]) {\r\n                activityBreakdown[type] = { count: 0, totalDuration: 0 };\r\n            }\r\n            activityBreakdown[type].count++;\r\n            activityBreakdown[type].totalDuration += session.duration || 0;\r\n        });\r\n\r\n        // Calcola frequenza settimanale\r\n        const weeksInPeriod = Math.ceil(days / 7);\r\n        const weeklyFrequency = totalSessions / weeksInPeriod;\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalSessions,\r\n                totalDuration,\r\n                avgDuration: Math.round(avgDuration),\r\n                weeklyFrequency: Math.round(weeklyFrequency * 10) / 10,\r\n                activityBreakdown,\r\n                period: { startDate, endDate, days }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Istanze singleton dei repository\r\nexport const progressRepo = new ProgressRepository();\r\nexport const workoutRepo = new WorkoutRepository();\r\nexport const exerciseRepo = new ExerciseRepository();\r\nexport const userRepo = new UserRepository();\r\nexport const nutritionRepo = new NutritionRepository();\r\nexport const recoveryRepo = new RecoveryRepository();\r\n\r\n// Utility per operazioni batch\r\nexport const batchOperations = {\r\n    // Esegui multiple operazioni in una transazione\r\n    async executeTransaction(operations) {\r\n        try {\r\n            const result = await runTransaction(db, async (transaction) => {\r\n                const results = [];\r\n                \r\n                for (const operation of operations) {\r\n                    const { type, ref, data } = operation;\r\n                    \r\n                    switch (type) {\r\n                        case 'set':\r\n                            transaction.set(ref, data);\r\n                            break;\r\n                        case 'update':\r\n                            transaction.update(ref, data);\r\n                            break;\r\n                        case 'delete':\r\n                            transaction.delete(ref);\r\n                            break;\r\n                        default:\r\n                            throw new Error(`Operazione non supportata: ${type}`);\r\n                    }\r\n                    \r\n                    results.push({ success: true, operation: type });\r\n                }\r\n                \r\n                return results;\r\n            });\r\n            \r\n            logger.success('Transazione completata', { operations: result.length });\r\n            return { success: true, results: result };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore transazione batch', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    // Operazioni batch (fino a 500 operazioni)\r\n    async executeBatch(operations) {\r\n        try {\r\n            const batch = writeBatch(db);\r\n            \r\n            operations.forEach(operation => {\r\n                const { type, ref, data } = operation;\r\n                \r\n                switch (type) {\r\n                    case 'set':\r\n                        batch.set(ref, data);\r\n                        break;\r\n                    case 'update':\r\n                        batch.update(ref, data);\r\n                        break;\r\n                    case 'delete':\r\n                        batch.delete(ref);\r\n                        break;\r\n                    default:\r\n                        throw new Error(`Operazione non supportata: ${type}`);\r\n                }\r\n            });\r\n            \r\n            await batch.commit();\r\n            \r\n            logger.success('Batch completato', { operations: operations.length });\r\n            return { success: true, count: operations.length };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore batch operations', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n};\r\n\r\n// Export per retrocompatibilità\r\nexport default {\r\n    progressRepo,\r\n    workoutRepo,\r\n    exerciseRepo,\r\n    userRepo,\r\n    nutritionRepo,\r\n    recoveryRepo,\r\n    batchOperations\r\n};","// Data Migration Service - localStorage to Firestore\r\n// Sistema di migrazione intelligente con backup e rollback\r\n\r\nimport { progressRepo, workoutRepo, exerciseRepo, userRepo, batchOperations } from './firestore';\r\nimport authService from './auth';\r\nimport { logger } from './config';\r\n\r\nclass MigrationService {\r\n    constructor() {\r\n        this.migrationKey = 'firebase_migration_status';\r\n        this.backupKey = 'firebase_migration_backup';\r\n    }\r\n\r\n    // Controlla se la migrazione è già stata eseguita\r\n    isMigrationCompleted() {\r\n        try {\r\n            const status = localStorage.getItem(this.migrationKey);\r\n            return status === 'completed';\r\n        } catch (error) {\r\n            logger.error('Errore verifica migrazione', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Segna migrazione come completata\r\n    markMigrationCompleted() {\r\n        try {\r\n            const migrationData = {\r\n                status: 'completed',\r\n                timestamp: new Date().toISOString(),\r\n                version: '1.0.0'\r\n            };\r\n            localStorage.setItem(this.migrationKey, 'completed');\r\n            localStorage.setItem(`${this.migrationKey}_details`, JSON.stringify(migrationData));\r\n            logger.success('Migrazione marcata come completata');\r\n        } catch (error) {\r\n            logger.error('Errore marcamento migrazione', error);\r\n        }\r\n    }\r\n\r\n    // Crea backup completo dei dati localStorage\r\n    createBackup() {\r\n        try {\r\n            const backupData = {\r\n                timestamp: new Date().toISOString(),\r\n                data: {\r\n                    progressData: this.safeGetLocalStorage('progressData'),\r\n                    workoutSessions: this.safeGetLocalStorage('workoutSessions'),\r\n                    exerciseData: this.safeGetLocalStorage('exerciseData'),\r\n                    timeStats: this.safeGetLocalStorage('timeStats'),\r\n                    streakData: this.safeGetLocalStorage('streakData'),\r\n                    personalRecords: this.safeGetLocalStorage('personalRecords'),\r\n                    goals12Week: this.safeGetLocalStorage('goals12Week'),\r\n                    userSettings: this.safeGetLocalStorage('userSettings')\r\n                }\r\n            };\r\n\r\n            // Comprimi backup se troppo grande\r\n            const backupString = JSON.stringify(backupData);\r\n            if (backupString.length > 2 * 1024 * 1024) { // 2MB\r\n                logger.warn('Backup molto grande, compressione necessaria');\r\n                // In un'implementazione reale, potresti voler comprimere i dati\r\n            }\r\n\r\n            localStorage.setItem(this.backupKey, backupString);\r\n            logger.success('Backup creato', { size: `${Math.round(backupString.length / 1024)}KB` });\r\n            \r\n            return { success: true, backup: backupData };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore creazione backup', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Sicuro get da localStorage con fallback\r\n    safeGetLocalStorage(key) {\r\n        try {\r\n            const data = localStorage.getItem(key);\r\n            return data ? JSON.parse(data) : null;\r\n        } catch (error) {\r\n            logger.warn(`Errore parsing ${key}`, error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Migrazione completa con controlli e validazioni\r\n    async migrateAllData() {\r\n        if (!authService.isAuthenticated()) {\r\n            return { success: false, error: 'Utente non autenticato' };\r\n        }\r\n\r\n        if (this.isMigrationCompleted()) {\r\n            logger.info('Migrazione già completata');\r\n            return { success: true, message: 'Migrazione già completata' };\r\n        }\r\n\r\n        const migrationReport = {\r\n            startTime: new Date().toISOString(),\r\n            steps: [],\r\n            errors: [],\r\n            totalItems: 0,\r\n            migratedItems: 0\r\n        };\r\n\r\n        try {\r\n            logger.info('🚀 Inizio migrazione dati localStorage → Firestore');\r\n\r\n            // STEP 1: Crea backup\r\n            migrationReport.steps.push('Creazione backup...');\r\n            const backupResult = this.createBackup();\r\n            if (!backupResult.success) {\r\n                throw new Error(`Backup fallito: ${backupResult.error}`);\r\n            }\r\n\r\n            // STEP 2: Migra dati progress\r\n            migrationReport.steps.push('Migrazione dati progress...');\r\n            const progressResult = await this.migrateProgressData();\r\n            migrationReport.totalItems += progressResult.totalItems;\r\n            migrationReport.migratedItems += progressResult.migratedItems;\r\n            if (progressResult.errors.length > 0) {\r\n                migrationReport.errors.push(...progressResult.errors);\r\n            }\r\n\r\n            // STEP 3: Migra sessioni workout\r\n            migrationReport.steps.push('Migrazione sessioni workout...');\r\n            const workoutResult = await this.migrateWorkoutSessions();\r\n            migrationReport.totalItems += workoutResult.totalItems;\r\n            migrationReport.migratedItems += workoutResult.migratedItems;\r\n            if (workoutResult.errors.length > 0) {\r\n                migrationReport.errors.push(...workoutResult.errors);\r\n            }\r\n\r\n            // STEP 4: Migra dati esercizi\r\n            migrationReport.steps.push('Migrazione dati esercizi...');\r\n            const exerciseResult = await this.migrateExerciseData();\r\n            migrationReport.totalItems += exerciseResult.totalItems;\r\n            migrationReport.migratedItems += exerciseResult.migratedItems;\r\n            if (exerciseResult.errors.length > 0) {\r\n                migrationReport.errors.push(...exerciseResult.errors);\r\n            }\r\n\r\n            // STEP 5: Migra impostazioni utente\r\n            migrationReport.steps.push('Migrazione impostazioni utente...');\r\n            const userResult = await this.migrateUserSettings();\r\n            if (!userResult.success) {\r\n                migrationReport.errors.push(`Errore migrazione utente: ${userResult.error}`);\r\n            }\r\n\r\n            // STEP 6: Verifica integrità\r\n            migrationReport.steps.push('Verifica integrità dati...');\r\n            const verificationResult = await this.verifyMigration();\r\n            migrationReport.verificationPassed = verificationResult.success;\r\n\r\n            // STEP 7: Completa migrazione se tutto ok\r\n            if (migrationReport.errors.length === 0 && verificationResult.success) {\r\n                this.markMigrationCompleted();\r\n                migrationReport.steps.push('Migrazione completata con successo');\r\n                logger.success('✅ Migrazione completata', {\r\n                    totalItems: migrationReport.totalItems,\r\n                    migratedItems: migrationReport.migratedItems,\r\n                    duration: `${Date.now() - new Date(migrationReport.startTime).getTime()}ms`\r\n                });\r\n            } else {\r\n                logger.warn('⚠️ Migrazione completata con errori', {\r\n                    errors: migrationReport.errors.length,\r\n                    details: migrationReport.errors\r\n                });\r\n            }\r\n\r\n            migrationReport.endTime = new Date().toISOString();\r\n            migrationReport.success = migrationReport.errors.length === 0;\r\n\r\n            return { success: true, report: migrationReport };\r\n\r\n        } catch (error) {\r\n            migrationReport.endTime = new Date().toISOString();\r\n            migrationReport.success = false;\r\n            migrationReport.errors.push(`Errore fatale: ${error.message}`);\r\n            \r\n            logger.error('❌ Migrazione fallita', error);\r\n            return { success: false, error: error.message, report: migrationReport };\r\n        }\r\n    }\r\n\r\n    // Migrazione dati progress\r\n    async migrateProgressData() {\r\n        const progressData = this.safeGetLocalStorage('progressData') || [];\r\n        const result = { totalItems: progressData.length, migratedItems: 0, errors: [] };\r\n\r\n        if (progressData.length === 0) {\r\n            logger.info('Nessun dato progress da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${progressData.length} record progress...`);\r\n\r\n        for (const item of progressData) {\r\n            try {\r\n                // Validazione e pulizia dati\r\n                const cleanedData = this.cleanProgressData(item);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Dato progress non valido: ${JSON.stringify(item)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await progressRepo.addMeasurement(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Progress migrato: ${cleanedData.date}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione progress: ${createResult.error}`);\r\n                }\r\n\r\n                // Throttling per non sovraccaricare Firestore\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore progress item: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Progress migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione sessioni workout\r\n    async migrateWorkoutSessions() {\r\n        const workoutSessions = this.safeGetLocalStorage('workoutSessions') || [];\r\n        const result = { totalItems: workoutSessions.length, migratedItems: 0, errors: [] };\r\n\r\n        if (workoutSessions.length === 0) {\r\n            logger.info('Nessuna sessione workout da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${workoutSessions.length} sessioni workout...`);\r\n\r\n        for (const session of workoutSessions) {\r\n            try {\r\n                const cleanedData = this.cleanWorkoutSession(session);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Sessione workout non valida: ${JSON.stringify(session)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await workoutRepo.create(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Workout migrato: ${cleanedData.date}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione workout: ${createResult.error}`);\r\n                }\r\n\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore workout session: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Workout migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione dati esercizi\r\n    async migrateExerciseData() {\r\n        const exerciseData = this.safeGetLocalStorage('exerciseData') || {};\r\n        const exercises = Object.values(exerciseData);\r\n        const result = { totalItems: exercises.length, migratedItems: 0, errors: [] };\r\n\r\n        if (exercises.length === 0) {\r\n            logger.info('Nessun dato esercizio da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${exercises.length} record esercizi...`);\r\n\r\n        for (const exercise of exercises) {\r\n            try {\r\n                const cleanedData = this.cleanExerciseData(exercise);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Dato esercizio non valido: ${JSON.stringify(exercise)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await exerciseRepo.logExercise(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Esercizio migrato: ${cleanedData.exerciseName}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione esercizio: ${createResult.error}`);\r\n                }\r\n\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore exercise item: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Exercise migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione impostazioni utente\r\n    async migrateUserSettings() {\r\n        try {\r\n            const timeStats = this.safeGetLocalStorage('timeStats') || {};\r\n            const goals12Week = this.safeGetLocalStorage('goals12Week') || {};\r\n            const userSettings = this.safeGetLocalStorage('userSettings') || {};\r\n\r\n            const profileData = {\r\n                fitnessStats: timeStats,\r\n                goals: goals12Week,\r\n                preferences: userSettings,\r\n                migratedFrom: 'localStorage',\r\n                migrationDate: new Date().toISOString()\r\n            };\r\n\r\n            const updateResult = await userRepo.updateProfile(profileData);\r\n            if (updateResult.success) {\r\n                logger.success('Impostazioni utente migrate');\r\n                return { success: true };\r\n            } else {\r\n                return { success: false, error: updateResult.error };\r\n            }\r\n\r\n        } catch (error) {\r\n            logger.error('Errore migrazione impostazioni utente', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Pulizia e validazione dati progress\r\n    cleanProgressData(data) {\r\n        if (!data || typeof data !== 'object') return null;\r\n\r\n        const cleaned = {\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            weight: this.validateNumber(data.weight, 30, 300),\r\n            bodyFat: this.validateNumber(data.bodyFat, 1, 50),\r\n            muscleMass: this.validateNumber(data.muscleMass, 10, 150),\r\n            chest: this.validateNumber(data.chest, 50, 200),\r\n            arms: this.validateNumber(data.arms, 20, 100),\r\n            waist: this.validateNumber(data.waist, 50, 150),\r\n            thighs: this.validateNumber(data.thighs, 30, 100),\r\n            notes: this.validateString(data.notes, 1000)\r\n        };\r\n\r\n        // Rimuovi campi null/undefined\r\n        Object.keys(cleaned).forEach(key => {\r\n            if (cleaned[key] === null || cleaned[key] === undefined) {\r\n                delete cleaned[key];\r\n            }\r\n        });\r\n\r\n        // Deve avere almeno peso o data\r\n        return (cleaned.weight || cleaned.date) ? cleaned : null;\r\n    }\r\n\r\n    // Pulizia dati workout session\r\n    cleanWorkoutSession(data) {\r\n        if (!data || typeof data !== 'object') return null;\r\n\r\n        return {\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            name: this.validateString(data.name || data.workoutName, 100),\r\n            status: ['planned', 'in_progress', 'completed'].includes(data.status) ? data.status : 'completed',\r\n            totalDuration: this.validateNumber(data.totalDuration || data.duration, 0, 480),\r\n            exercises: Array.isArray(data.exercises) ? data.exercises : [],\r\n            notes: this.validateString(data.notes, 1000)\r\n        };\r\n    }\r\n\r\n    // Pulizia dati esercizio\r\n    cleanExerciseData(data) {\r\n        if (!data || typeof data !== 'object' || !data.exerciseName) return null;\r\n\r\n        return {\r\n            exerciseName: this.validateString(data.exerciseName, 100),\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            sets: this.validateNumber(data.sets, 1, 20),\r\n            reps: this.validateNumber(data.reps, 1, 100),\r\n            weight: this.validateNumber(data.weight, 0, 1000),\r\n            rir: this.validateNumber(data.rir, 0, 10),\r\n            notes: this.validateString(data.notes, 500)\r\n        };\r\n    }\r\n\r\n    // Validazione numeri con range\r\n    validateNumber(value, min = 0, max = Number.MAX_SAFE_INTEGER) {\r\n        const num = parseFloat(value);\r\n        return (!isNaN(num) && num >= min && num <= max) ? num : null;\r\n    }\r\n\r\n    // Validazione stringhe con lunghezza massima\r\n    validateString(value, maxLength = 1000) {\r\n        if (typeof value !== 'string') return null;\r\n        return value.length <= maxLength ? value.trim() : value.substring(0, maxLength).trim();\r\n    }\r\n\r\n    // Verifica integrità post-migrazione\r\n    async verifyMigration() {\r\n        try {\r\n            logger.info('Verifica integrità dati migrati...');\r\n\r\n            // Controlla se i dati sono stati creati correttamente\r\n            const progressCheck = await progressRepo.getUserProgress();\r\n            const workoutCheck = await workoutRepo.getUserSessions(10);\r\n            const userCheck = await userRepo.getCurrentUserProfile();\r\n\r\n            const checks = {\r\n                progress: progressCheck.success,\r\n                workouts: workoutCheck.success,\r\n                userProfile: userCheck.success\r\n            };\r\n\r\n            const allPassed = Object.values(checks).every(check => check === true);\r\n\r\n            logger.info('Risultati verifica', checks);\r\n            \r\n            return { \r\n                success: allPassed, \r\n                checks,\r\n                details: {\r\n                    progressCount: progressCheck.data?.length || 0,\r\n                    workoutCount: workoutCheck.data?.length || 0,\r\n                    hasUserProfile: !!userCheck.data\r\n                }\r\n            };\r\n\r\n        } catch (error) {\r\n            logger.error('Errore verifica migrazione', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Rollback migrazione (ripristina da backup)\r\n    async rollbackMigration() {\r\n        try {\r\n            logger.warn('🔄 Inizio rollback migrazione...');\r\n\r\n            const backupData = localStorage.getItem(this.backupKey);\r\n            if (!backupData) {\r\n                throw new Error('Nessun backup disponibile per il rollback');\r\n            }\r\n\r\n            const backup = JSON.parse(backupData);\r\n            \r\n            // Ripristina tutti i dati localStorage dal backup\r\n            Object.keys(backup.data).forEach(key => {\r\n                if (backup.data[key] !== null) {\r\n                    localStorage.setItem(key, JSON.stringify(backup.data[key]));\r\n                }\r\n            });\r\n\r\n            // Rimuovi flag migrazione completata\r\n            localStorage.removeItem(this.migrationKey);\r\n            localStorage.removeItem(`${this.migrationKey}_details`);\r\n\r\n            logger.success('✅ Rollback completato');\r\n            return { success: true, message: 'Dati ripristinati da backup' };\r\n\r\n        } catch (error) {\r\n            logger.error('❌ Errore rollback', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Utility per throttling\r\n    sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    // Ottieni stato migrazione dettagliato\r\n    getMigrationStatus() {\r\n        try {\r\n            const status = localStorage.getItem(this.migrationKey);\r\n            const details = localStorage.getItem(`${this.migrationKey}_details`);\r\n            \r\n            return {\r\n                isCompleted: status === 'completed',\r\n                status,\r\n                details: details ? JSON.parse(details) : null,\r\n                hasBackup: !!localStorage.getItem(this.backupKey)\r\n            };\r\n\r\n        } catch (error) {\r\n            logger.error('Errore stato migrazione', error);\r\n            return {\r\n                isCompleted: false,\r\n                status: 'unknown',\r\n                details: null,\r\n                hasBackup: false,\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n// Istanza singleton del servizio migrazione\r\nconst migrationService = new MigrationService();\r\n\r\nexport default migrationService;\r\nexport { MigrationService };","// AuthProvider - Context Provider per gestione autenticazione\r\n// Wrapper completo per gestire stato auth in tutta l'applicazione\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport authService from '../firebase/auth';\r\nimport migrationService from '../firebase/migration';\r\nimport { logger } from '../firebase/config';\r\n\r\n// Context per l'autenticazione\r\nconst AuthContext = createContext({});\r\n\r\n// Hook per utilizzare il context auth\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth deve essere utilizzato all\\'interno di AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\n// Provider componente principale\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [migrationStatus, setMigrationStatus] = useState({\r\n        isRequired: false,\r\n        inProgress: false,\r\n        completed: false\r\n    });\r\n\r\n    // Inizializza listener auth state\r\n    useEffect(() => {\r\n        logger.info('Inizializzazione AuthProvider...');\r\n\r\n        const unsubscribe = authService.onAuthStateChange(async (firebaseUser) => {\r\n            setLoading(true);\r\n            setError(null);\r\n\r\n            try {\r\n                if (firebaseUser) {\r\n                    logger.success('Utente autenticato', { \r\n                        uid: firebaseUser.uid, \r\n                        email: firebaseUser.email \r\n                    });\r\n                    \r\n                    setUser({\r\n                        uid: firebaseUser.uid,\r\n                        email: firebaseUser.email,\r\n                        displayName: firebaseUser.displayName,\r\n                        photoURL: firebaseUser.photoURL,\r\n                        emailVerified: firebaseUser.emailVerified,\r\n                        isAnonymous: firebaseUser.isAnonymous,\r\n                        createdAt: firebaseUser.metadata.creationTime,\r\n                        lastLoginAt: firebaseUser.metadata.lastSignInTime\r\n                    });\r\n\r\n                    // Controlla se serve migrazione dati\r\n                    await checkMigrationRequired();\r\n\r\n                } else {\r\n                    logger.info('Utente non autenticato');\r\n                    setUser(null);\r\n                    setMigrationStatus({\r\n                        isRequired: false,\r\n                        inProgress: false,\r\n                        completed: false\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                logger.error('Errore gestione auth state', error);\r\n                setError('Errore durante l\\'autenticazione. Riprova.');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        });\r\n\r\n        return unsubscribe;\r\n    }, []);\r\n\r\n    // Controlla se è necessaria la migrazione\r\n    const checkMigrationRequired = async () => {\r\n        try {\r\n            const migrationStatusData = migrationService.getMigrationStatus();\r\n            \r\n            // Controlla se ci sono dati localStorage da migrare\r\n            const hasLocalData = (\r\n                localStorage.getItem('progressData') ||\r\n                localStorage.getItem('workoutSessions') ||\r\n                localStorage.getItem('exerciseData')\r\n            );\r\n\r\n            const isRequired = hasLocalData && !migrationStatusData.isCompleted;\r\n\r\n            setMigrationStatus({\r\n                isRequired,\r\n                inProgress: false,\r\n                completed: migrationStatusData.isCompleted,\r\n                details: migrationStatusData\r\n            });\r\n\r\n            logger.info('Status migrazione controllato', { \r\n                isRequired, \r\n                hasLocalData,\r\n                completed: migrationStatusData.isCompleted \r\n            });\r\n\r\n        } catch (error) {\r\n            logger.error('Errore controllo migrazione', error);\r\n        }\r\n    };\r\n\r\n    // Funzioni di autenticazione con error handling\r\n\r\n    const login = async (email, password) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signInWithEmail(email, password);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Login completato');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il login. Riprova.';\r\n            logger.error('Errore login wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const register = async (email, password, displayName = null) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signUpWithEmail(email, password, displayName);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Registrazione completata');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante la registrazione. Riprova.';\r\n            logger.error('Errore registrazione wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const loginWithGoogle = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signInWithGoogle();\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Login Google completato');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il login con Google. Riprova.';\r\n            logger.error('Errore Google login wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signOutUser();\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Logout completato');\r\n            return { success: true };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il logout. Riprova.';\r\n            logger.error('Errore logout wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const resetPassword = async (email) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.resetPassword(email);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Email reset password inviata');\r\n            return { success: true };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore invio email reset. Riprova.';\r\n            logger.error('Errore reset password wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Gestione migrazione dati\r\n    const startMigration = async () => {\r\n        if (!user || migrationStatus.inProgress) {\r\n            return { success: false, error: 'Migrazione non possibile al momento' };\r\n        }\r\n\r\n        setMigrationStatus(prev => ({ ...prev, inProgress: true }));\r\n\r\n        try {\r\n            logger.info('Avvio migrazione dati...');\r\n            const result = await migrationService.migrateAllData();\r\n\r\n            if (result.success) {\r\n                setMigrationStatus({\r\n                    isRequired: false,\r\n                    inProgress: false,\r\n                    completed: true,\r\n                    report: result.report\r\n                });\r\n                logger.success('Migrazione completata con successo');\r\n                return { success: true, report: result.report };\r\n            } else {\r\n                setMigrationStatus(prev => ({ ...prev, inProgress: false }));\r\n                setError('Errore durante la migrazione dati');\r\n                return { success: false, error: result.error, report: result.report };\r\n            }\r\n\r\n        } catch (error) {\r\n            logger.error('Errore migrazione wrapper', error);\r\n            setMigrationStatus(prev => ({ ...prev, inProgress: false }));\r\n            setError('Errore imprevisto durante la migrazione');\r\n            return { success: false, error: error.message };\r\n        }\r\n    };\r\n\r\n    const skipMigration = () => {\r\n        setMigrationStatus({\r\n            isRequired: false,\r\n            inProgress: false,\r\n            completed: false,\r\n            skipped: true\r\n        });\r\n        logger.info('Migrazione saltata dall\\'utente');\r\n    };\r\n\r\n    // Utility functions\r\n    const isAuthenticated = () => !!user;\r\n    \r\n    const hasRole = (role) => {\r\n        // Implementazione futura per ruoli utente\r\n        return user?.customClaims?.[role] || false;\r\n    };\r\n\r\n    const clearError = () => setError(null);\r\n\r\n    // Context value\r\n    const contextValue = {\r\n        // Stato auth\r\n        user,\r\n        loading,\r\n        error,\r\n        migrationStatus,\r\n\r\n        // Funzioni auth\r\n        login,\r\n        register,\r\n        loginWithGoogle,\r\n        logout,\r\n        resetPassword,\r\n\r\n        // Migrazione\r\n        startMigration,\r\n        skipMigration,\r\n\r\n        // Utility\r\n        isAuthenticated,\r\n        hasRole,\r\n        clearError,\r\n        \r\n        // Servizi diretti (per casi avanzati)\r\n        authService,\r\n        migrationService\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Hook specializzati per casi d'uso comuni\r\n\r\n// Hook per proteggere componenti (richiede autenticazione)\r\nexport const useRequireAuth = (redirectTo = '/login') => {\r\n    const { user, loading } = useAuth();\r\n    \r\n    useEffect(() => {\r\n        if (!loading && !user && window.location.pathname !== redirectTo) {\r\n            window.location.href = redirectTo;\r\n        }\r\n    }, [user, loading, redirectTo]);\r\n\r\n    return { user, loading, isAuthenticated: !!user };\r\n};\r\n\r\n// Hook per redirect dopo login\r\nexport const useAuthRedirect = (redirectTo = '/') => {\r\n    const { user, loading } = useAuth();\r\n    \r\n    useEffect(() => {\r\n        if (!loading && user && window.location.pathname === '/login') {\r\n            window.location.href = redirectTo;\r\n        }\r\n    }, [user, loading, redirectTo]);\r\n\r\n    return { user, loading };\r\n};\r\n\r\n// HOC per proteggere componenti\r\nexport const withAuth = (Component, requireAuth = true) => {\r\n    return function AuthenticatedComponent(props) {\r\n        const { user, loading } = useAuth();\r\n        \r\n        if (loading) {\r\n            return (\r\n                <div className=\"auth-loading\">\r\n                    <div className=\"loading-spinner\">Caricamento...</div>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n        if (requireAuth && !user) {\r\n            return (\r\n                <div className=\"auth-required\">\r\n                    <h2>Accesso Richiesto</h2>\r\n                    <p>Devi effettuare il login per accedere a questa sezione.</p>\r\n                    <button onClick={() => window.location.href = '/login'}>\r\n                        Vai al Login\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n        return <Component {...props} />;\r\n    };\r\n};\r\n\r\nexport default AuthProvider;","// Validation Schemas - Enterprise Grade\r\n// Schema di validazione completi per tutti i form dell'applicazione\r\n\r\nimport * as yup from 'yup';\r\n\r\n// ========== CONFIGURAZIONE BASE ==========\r\n\r\n// Messaggi di errore personalizzati in italiano\r\nyup.setLocale({\r\n    mixed: {\r\n        default: 'Campo non valido',\r\n        required: 'Campo obbligatorio',\r\n        notType: 'Tipo di dato non valido'\r\n    },\r\n    string: {\r\n        min: 'Minimo ${min} caratteri',\r\n        max: 'Massimo ${max} caratteri',\r\n        email: 'Email non valida'\r\n    },\r\n    number: {\r\n        min: 'Valore minimo: ${min}',\r\n        max: 'Valore massimo: ${max}',\r\n        positive: 'Deve essere un numero positivo',\r\n        integer: 'Deve essere un numero intero'\r\n    },\r\n    date: {\r\n        min: 'Data non può essere precedente al ${min}',\r\n        max: 'Data non può essere successiva al ${max}'\r\n    }\r\n});\r\n\r\n// ========== UTILITY VALIDATIONS ==========\r\n\r\n// Validazione peso realistico (30-300 kg)\r\nconst weightValidation = yup.number()\r\n    .typeError('Peso deve essere un numero')\r\n    .min(30, 'Peso minimo 30kg')\r\n    .max(300, 'Peso massimo 300kg');\r\n\r\n// Validazione percentuale (0-100%)\r\nconst percentageValidation = yup.number()\r\n    .typeError('Percentuale deve essere un numero')\r\n    .min(0, 'Percentuale minima 0%')\r\n    .max(100, 'Percentuale massima 100%');\r\n\r\n// Validazione circonferenze corporee (10-200 cm)\r\nconst measurementValidation = yup.number()\r\n    .typeError('Misurazione deve essere un numero')\r\n    .min(10, 'Misurazione minima 10cm')\r\n    .max(200, 'Misurazione massima 200cm');\r\n\r\n// Validazione data (non futura)\r\nconst dateValidation = yup.date()\r\n    .typeError('Data non valida')\r\n    .max(new Date(), 'Data non può essere futura');\r\n\r\n// Validazione password sicura\r\nconst passwordValidation = yup.string()\r\n    .min(8, 'Password minimo 8 caratteri')\r\n    .matches(/[a-z]/, 'Deve contenere almeno una lettera minuscola')\r\n    .matches(/[A-Z]/, 'Deve contenere almeno una lettera maiuscola')\r\n    .matches(/[0-9]/, 'Deve contenere almeno un numero')\r\n    .matches(/[^a-zA-Z0-9]/, 'Deve contenere almeno un carattere speciale');\r\n\r\n// ========== AUTHENTICATION SCHEMAS ==========\r\n\r\n// Schema registrazione\r\nexport const registrationSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido')\r\n        .max(254, 'Email troppo lunga'),\r\n    \r\n    password: passwordValidation.required('Password è obbligatoria'),\r\n    \r\n    confirmPassword: yup\r\n        .string()\r\n        .required('Conferma password è obbligatoria')\r\n        .oneOf([yup.ref('password')], 'Le password non corrispondono'),\r\n    \r\n    displayName: yup\r\n        .string()\r\n        .min(2, 'Nome minimo 2 caratteri')\r\n        .max(50, 'Nome massimo 50 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ\\s]+$/, 'Nome può contenere solo lettere e spazi')\r\n        .nullable(),\r\n    \r\n    acceptTerms: yup\r\n        .boolean()\r\n        .oneOf([true], 'Devi accettare i termini e condizioni')\r\n});\r\n\r\n// Schema login\r\nexport const loginSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido'),\r\n    \r\n    password: yup\r\n        .string()\r\n        .required('Password è obbligatoria')\r\n        .min(1, 'Password non può essere vuota'),\r\n    \r\n    rememberMe: yup.boolean().default(false)\r\n});\r\n\r\n// Schema reset password\r\nexport const resetPasswordSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido')\r\n});\r\n\r\n// Schema cambio password\r\nexport const changePasswordSchema = yup.object({\r\n    currentPassword: yup\r\n        .string()\r\n        .required('Password attuale è obbligatoria'),\r\n    \r\n    newPassword: passwordValidation.required('Nuova password è obbligatoria'),\r\n    \r\n    confirmNewPassword: yup\r\n        .string()\r\n        .required('Conferma nuova password è obbligatoria')\r\n        .oneOf([yup.ref('newPassword')], 'Le password non corrispondono')\r\n});\r\n\r\n// ========== PROGRESS TRACKING SCHEMAS ==========\r\n\r\n// Schema misurazione progress\r\nexport const progressMeasurementSchema = yup.object({\r\n    weight: weightValidation.nullable(),\r\n    \r\n    bodyFat: percentageValidation\r\n        .min(3, 'Massa grassa minima 3%')\r\n        .max(50, 'Massa grassa massima 50%')\r\n        .nullable(),\r\n    \r\n    muscleMass: yup.number()\r\n        .typeError('Massa muscolare deve essere un numero')\r\n        .min(10, 'Massa muscolare minima 10kg')\r\n        .max(150, 'Massa muscolare massima 150kg')\r\n        .nullable(),\r\n    \r\n    chest: measurementValidation\r\n        .min(50, 'Circonferenza petto minima 50cm')\r\n        .max(200, 'Circonferenza petto massima 200cm')\r\n        .nullable(),\r\n    \r\n    arms: measurementValidation\r\n        .min(20, 'Circonferenza braccia minima 20cm')\r\n        .max(100, 'Circonferenza braccia massima 100cm')\r\n        .nullable(),\r\n    \r\n    waist: measurementValidation\r\n        .min(50, 'Circonferenza vita minima 50cm')\r\n        .max(150, 'Circonferenza vita massima 150cm')\r\n        .nullable(),\r\n    \r\n    thighs: measurementValidation\r\n        .min(30, 'Circonferenza cosce minima 30cm')\r\n        .max(100, 'Circonferenza cosce massima 100cm')\r\n        .nullable(),\r\n    \r\n    date: dateValidation.default(() => new Date()),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(1000, 'Note massimo 1000 caratteri')\r\n        .nullable()\r\n})\r\n.test('at-least-one-measurement', 'Inserisci almeno una misurazione', function(value) {\r\n    const { weight, bodyFat, muscleMass, chest, arms, waist, thighs } = value || {};\r\n    return !!(weight || bodyFat || muscleMass || chest || arms || waist || thighs);\r\n});\r\n\r\n// ========== WORKOUT SCHEMAS ==========\r\n\r\n// Schema esercizio singolo\r\nexport const exerciseSchema = yup.object({\r\n    exerciseName: yup\r\n        .string()\r\n        .required('Nome esercizio è obbligatorio')\r\n        .min(2, 'Nome esercizio minimo 2 caratteri')\r\n        .max(100, 'Nome esercizio massimo 100 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ0-9\\s\\-().]+$/, 'Nome esercizio contiene caratteri non validi'),\r\n    \r\n    sets: yup\r\n        .number()\r\n        .required('Numero serie è obbligatorio')\r\n        .integer('Serie deve essere un numero intero')\r\n        .min(1, 'Minimo 1 serie')\r\n        .max(20, 'Massimo 20 serie'),\r\n    \r\n    reps: yup\r\n        .number()\r\n        .required('Numero ripetizioni è obbligatorio')\r\n        .integer('Ripetizioni deve essere un numero intero')\r\n        .min(1, 'Minimo 1 ripetizione')\r\n        .max(100, 'Massimo 100 ripetizioni'),\r\n    \r\n    weight: yup\r\n        .number()\r\n        .typeError('Peso deve essere un numero')\r\n        .min(0, 'Peso non può essere negativo')\r\n        .max(1000, 'Peso massimo 1000kg')\r\n        .nullable(),\r\n    \r\n    rir: yup\r\n        .number()\r\n        .typeError('RIR deve essere un numero')\r\n        .integer('RIR deve essere un numero intero')\r\n        .min(0, 'RIR minimo 0')\r\n        .max(10, 'RIR massimo 10')\r\n        .nullable(),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(500, 'Note esercizio massimo 500 caratteri')\r\n        .nullable()\r\n});\r\n\r\n// Schema sessione workout\r\nexport const workoutSessionSchema = yup.object({\r\n    name: yup\r\n        .string()\r\n        .required('Nome workout è obbligatorio')\r\n        .min(3, 'Nome workout minimo 3 caratteri')\r\n        .max(100, 'Nome workout massimo 100 caratteri'),\r\n    \r\n    date: dateValidation.required('Data è obbligatoria'),\r\n    \r\n    startTime: yup\r\n        .date()\r\n        .typeError('Orario inizio non valido')\r\n        .nullable(),\r\n    \r\n    endTime: yup\r\n        .date()\r\n        .typeError('Orario fine non valido')\r\n        .min(yup.ref('startTime'), 'Orario fine deve essere dopo l\\'inizio')\r\n        .nullable(),\r\n    \r\n    totalDuration: yup\r\n        .number()\r\n        .typeError('Durata deve essere un numero')\r\n        .min(1, 'Durata minima 1 minuto')\r\n        .max(480, 'Durata massima 8 ore (480 minuti)')\r\n        .nullable(),\r\n    \r\n    exercises: yup\r\n        .array()\r\n        .of(exerciseSchema)\r\n        .min(1, 'Almeno un esercizio è obbligatorio'),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(1000, 'Note workout massimo 1000 caratteri')\r\n        .nullable(),\r\n    \r\n    intensity: yup\r\n        .number()\r\n        .integer('Intensità deve essere un numero intero')\r\n        .min(1, 'Intensità minima 1')\r\n        .max(10, 'Intensità massima 10')\r\n        .nullable()\r\n});\r\n\r\n// ========== USER PROFILE SCHEMAS ==========\r\n\r\n// Schema profilo utente\r\nexport const userProfileSchema = yup.object({\r\n    displayName: yup\r\n        .string()\r\n        .min(2, 'Nome minimo 2 caratteri')\r\n        .max(50, 'Nome massimo 50 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ\\s]+$/, 'Nome può contenere solo lettere e spazi')\r\n        .nullable(),\r\n    \r\n    age: yup\r\n        .number()\r\n        .integer('Età deve essere un numero intero')\r\n        .min(13, 'Età minima 13 anni')\r\n        .max(120, 'Età massima 120 anni')\r\n        .nullable(),\r\n    \r\n    height: yup\r\n        .number()\r\n        .typeError('Altezza deve essere un numero')\r\n        .min(100, 'Altezza minima 100cm')\r\n        .max(250, 'Altezza massima 250cm')\r\n        .nullable(),\r\n    \r\n    activityLevel: yup\r\n        .string()\r\n        .oneOf(['sedentary', 'light', 'moderate', 'active', 'very_active'], 'Livello attività non valido')\r\n        .default('moderate'),\r\n    \r\n    fitnessGoals: yup\r\n        .array()\r\n        .of(yup.string().oneOf([\r\n            'weight_loss', 'muscle_gain', 'strength', 'endurance', \r\n            'flexibility', 'general_health', 'athletic_performance'\r\n        ]))\r\n        .max(5, 'Massimo 5 obiettivi'),\r\n    \r\n    experience: yup\r\n        .string()\r\n        .oneOf(['beginner', 'intermediate', 'advanced', 'expert'], 'Livello esperienza non valido')\r\n        .default('beginner'),\r\n    \r\n    preferences: yup.object({\r\n        units: yup.string().oneOf(['metric', 'imperial']).default('metric'),\r\n        language: yup.string().oneOf(['it', 'en']).default('it'),\r\n        notifications: yup.boolean().default(true),\r\n        darkMode: yup.boolean().default(false),\r\n        publicProfile: yup.boolean().default(false)\r\n    })\r\n});\r\n\r\n// ========== GOALS SCHEMAS ==========\r\n\r\n// Schema obiettivi 12 settimane\r\nexport const goals12WeekSchema = yup.object({\r\n    startWeight: weightValidation.required('Peso iniziale è obbligatorio'),\r\n    \r\n    targetWeight: weightValidation\r\n        .required('Peso target è obbligatorio')\r\n        .test('weight-difference', 'Differenza peso deve essere ragionevole (±30kg)', function(value) {\r\n            const { startWeight } = this.parent;\r\n            if (!startWeight || !value) return true;\r\n            return Math.abs(value - startWeight) <= 30;\r\n        }),\r\n    \r\n    targetBench: yup\r\n        .number()\r\n        .typeError('Target panca deve essere un numero')\r\n        .min(20, 'Target panca minimo 20kg')\r\n        .max(300, 'Target panca massimo 300kg')\r\n        .nullable(),\r\n    \r\n    targetSquat: yup\r\n        .number()\r\n        .typeError('Target squat deve essere un numero')\r\n        .min(30, 'Target squat minimo 30kg')\r\n        .max(500, 'Target squat massimo 500kg')\r\n        .nullable(),\r\n    \r\n    targetDeadlift: yup\r\n        .number()\r\n        .typeError('Target deadlift deve essere un numero')\r\n        .min(40, 'Target deadlift minimo 40kg')\r\n        .max(600, 'Target deadlift massimo 600kg')\r\n        .nullable(),\r\n    \r\n    startDate: yup\r\n        .date()\r\n        .required('Data inizio è obbligatoria')\r\n        .max(new Date(), 'Data inizio non può essere futura'),\r\n    \r\n    targetDate: yup\r\n        .date()\r\n        .required('Data target è obbligatoria')\r\n        .min(yup.ref('startDate'), 'Data target deve essere dopo data inizio')\r\n        .test('12-weeks-max', 'Periodo massimo 16 settimane', function(value) {\r\n            const { startDate } = this.parent;\r\n            if (!startDate || !value) return true;\r\n            const diffWeeks = (value - startDate) / (7 * 24 * 60 * 60 * 1000);\r\n            return diffWeeks <= 16;\r\n        })\r\n});\r\n\r\n// ========== SETTINGS SCHEMAS ==========\r\n\r\n// Schema impostazioni app\r\nexport const appSettingsSchema = yup.object({\r\n    notifications: yup.object({\r\n        workoutReminders: yup.boolean().default(true),\r\n        progressReminders: yup.boolean().default(true),\r\n        achievementAlerts: yup.boolean().default(true),\r\n        emailNotifications: yup.boolean().default(false),\r\n        pushNotifications: yup.boolean().default(true)\r\n    }),\r\n    \r\n    privacy: yup.object({\r\n        profileVisibility: yup.string().oneOf(['private', 'friends', 'public']).default('private'),\r\n        shareProgress: yup.boolean().default(false),\r\n        shareWorkouts: yup.boolean().default(false),\r\n        allowFriendRequests: yup.boolean().default(true)\r\n    }),\r\n    \r\n    display: yup.object({\r\n        theme: yup.string().oneOf(['light', 'dark', 'auto']).default('light'),\r\n        language: yup.string().oneOf(['it', 'en']).default('it'),\r\n        dateFormat: yup.string().oneOf(['DD/MM/YYYY', 'MM/DD/YYYY', 'YYYY-MM-DD']).default('DD/MM/YYYY'),\r\n        timeFormat: yup.string().oneOf(['24h', '12h']).default('24h')\r\n    }),\r\n    \r\n    units: yup.object({\r\n        weight: yup.string().oneOf(['kg', 'lb']).default('kg'),\r\n        distance: yup.string().oneOf(['km', 'mi']).default('km'),\r\n        height: yup.string().oneOf(['cm', 'ft']).default('cm')\r\n    })\r\n});\r\n\r\n// ========== VALIDATION HELPERS ==========\r\n\r\n// Helper per validazione condizionale\r\nexport const conditionalSchema = (condition, schema, fallback = yup.mixed().nullable()) => {\r\n    return yup.mixed().when(condition, {\r\n        is: true,\r\n        then: schema,\r\n        otherwise: fallback\r\n    });\r\n};\r\n\r\n// Helper per validazione campi dinamici\r\nexport const dynamicFieldSchema = (fieldType) => {\r\n    const schemas = {\r\n        text: yup.string().max(100),\r\n        number: yup.number(),\r\n        email: yup.string().email(),\r\n        date: dateValidation,\r\n        boolean: yup.boolean()\r\n    };\r\n    \r\n    return schemas[fieldType] || yup.mixed();\r\n};\r\n\r\n// Validazione personalizzata per form complessi\r\nexport const validateWithSchema = async (schema, data, options = {}) => {\r\n    try {\r\n        const validatedData = await schema.validate(data, {\r\n            abortEarly: false,\r\n            stripUnknown: true,\r\n            ...options\r\n        });\r\n        \r\n        return { isValid: true, data: validatedData, errors: {} };\r\n        \r\n    } catch (error) {\r\n        const errors = {};\r\n        \r\n        if (error.inner) {\r\n            error.inner.forEach(err => {\r\n                if (err.path) {\r\n                    errors[err.path] = err.message;\r\n                }\r\n            });\r\n        } else {\r\n            errors.general = error.message;\r\n        }\r\n        \r\n        return { isValid: false, data: null, errors };\r\n    }\r\n};\r\n\r\n// Export di tutti gli schemi per uso modulare\r\nexport default {\r\n    registrationSchema,\r\n    loginSchema,\r\n    resetPasswordSchema,\r\n    changePasswordSchema,\r\n    progressMeasurementSchema,\r\n    exerciseSchema,\r\n    workoutSessionSchema,\r\n    userProfileSchema,\r\n    goals12WeekSchema,\r\n    appSettingsSchema,\r\n    validateWithSchema\r\n};","import React, { Suspense, lazy } from 'react';\r\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\r\n// import { AuthProvider, useAuth } from './components/AuthProvider';\r\nimport Dashboard from './components/Dashboard';\r\nimport WorkoutSimple from './components/WorkoutSimple';\r\nimport NutritionBella from './components/NutritionBella';\r\nimport Supplements from './components/Supplements';\r\nimport Recovery from './components/Recovery';\r\nimport Progress from './components/Progress';\r\nimport Measurements from './components/Measurements';\r\nimport AuthModal from './components/AuthModal';\r\nimport MigrationModal from './components/MigrationModal';\r\nimport './styles/main.css';\r\n\r\n// Lazy loading per componenti pesanti\r\nconst LazyAnalytics = lazy(() => import('./components/AdvancedAnalytics'));\r\nconst LazyNutritionTracker = lazy(() => import('./components/SimpleNutritionTracker'));\r\nconst LazyRecoveryTimer = lazy(() => import('./components/SimpleRecoveryTimer'));\r\n\r\n// Componente principale senza autenticazione\r\nfunction AppContent() {\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                {/* Autenticazione disabilitata per uso locale */}\r\n                \r\n                {/* Routing principale */}\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Dashboard />} />\r\n                    <Route path=\"/workout\" element={<WorkoutSimple />} />\r\n                    <Route path=\"/nutrition\" element={<NutritionBella />} />\r\n                    <Route path=\"/supplements\" element={<Supplements />} />\r\n                    <Route path=\"/recovery\" element={<Recovery />} />\r\n                    <Route path=\"/progress\" element={<Progress />} />\r\n                    <Route path=\"/measurements\" element={<Measurements />} />\r\n                    <Route path=\"/analytics\" element={\r\n                        <Suspense fallback={<div className=\"loading-analytics\">Caricamento Analytics...</div>}>\r\n                            <LazyAnalytics />\r\n                        </Suspense>\r\n                    } />\r\n                    <Route path=\"/nutrition-tracker\" element={\r\n                        <Suspense fallback={<div className=\"loading-nutrition\">Caricamento Nutrition Tracker...</div>}>\r\n                            <LazyNutritionTracker />\r\n                        </Suspense>\r\n                    } />\r\n                    <Route path=\"/recovery-timer\" element={\r\n                        <Suspense fallback={<div className=\"loading-recovery\">Caricamento Recovery Timer...</div>}>\r\n                            <LazyRecoveryTimer />\r\n                        </Suspense>\r\n                    } />\r\n                </Routes>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\n// App wrapper senza autenticazione\r\nfunction App() {\r\n    return <AppContent />;\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/main.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}