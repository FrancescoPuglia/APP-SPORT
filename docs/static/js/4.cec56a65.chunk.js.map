{"version":3,"sources":["utils/dataManager.js","components/AdvancedAnalytics.js"],"names":["dataManager","constructor","this","storageKeys","workouts","measurements","nutrition","supplements","recovery","saveWorkout","workoutData","getWorkouts","newWorkout","_objectSpread","id","Date","now","toString","date","toISOString","unshift","localStorage","setItem","JSON","stringify","saved","getItem","parse","saveMeasurement","measurementData","getMeasurements","newMeasurement","getNutritionData","completedMeals","nutritionStreak","parseInt","last7Days","toDateString","i","setDate","getDate","dayString","dayMeals","Object","keys","filter","key","startsWith","length","push","mealsCompleted","adherence","Math","min","weeklyAdherence","avgAdherence","reduce","sum","day","getAnalyticsData","stats","totalWorkouts","currentStreak","calculateWorkoutStreak","weightProgress","calculateWeightProgress","strengthProgress","calculateStrengthProgress","nutritionAdherence","supplementCompliance","calculateSupplementCompliance","recoveryFrequency","today","streak","currentDate","sortedWorkouts","map","w","sort","a","b","some","change","trend","latest","oldest","weight","toFixed","exerciseProgress","forEach","workout","exercises","exercise","name","reps","volume","sets","progressSummary","exerciseName","sessions","first","last","initialWeight","currentWeight","improvement","daySupplements","avgDaily","round","clearAllData","values","removeItem","exportData","analytics","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","Filler","ArcElement","AdvancedAnalytics","_realData$nutrition","_realData$nutrition2","navigate","useNavigate","selectedPeriod","setSelectedPeriod","useState","selectedMetric","setSelectedMetric","loading","setLoading","realData","setRealData","useEffect","loadRealData","data","interval","setInterval","clearInterval","chartOptions","responsive","maintainAspectRatio","plugins","legend","position","labels","color","font","size","tooltip","backgroundColor","titleColor","bodyColor","borderColor","borderWidth","scales","x","grid","ticks","y","chartData","getChartData","slice","m","format","weightData","muscleMassData","muscleMass","weightChartData","datasets","label","fill","tension","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","getWorkoutChartData","concat","volumeData","total","ex","durationData","duration","workoutChartData","yAxisID","workoutChartOptions","y1","type","display","drawOnChartArea","muscleData","getMuscleChartData","muscleGroups","totalVolume","muscle","muscleGroup","muscleChartData","vol","avgWorkoutDuration","dur","weightGain","muscleGain","bodyFatLoss","bestLift","max","dynamicInsights","generateInsights","icon","title","message","insights","improvements","parseFloat","imp","avgImprovement","_jsxs","className","children","onClick","_jsx","value","onChange","e","target","Line","options","Bar","Doughnut","entries","_ref","index","style","width","session","repeat","floor","quality","insight","padding","background","borderRadius","textAlign","marginTop","border"],"mappings":"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","file":"static/js/4.cec56a65.chunk.js","sourcesContent":["// SISTEMA CENTRALE DI GESTIONE DATI REALI\r\n// Tutti i dati dell'utente vengono salvati qui e utilizzati da Analytics\r\n\r\nclass DataManager {\r\n    constructor() {\r\n        this.storageKeys = {\r\n            workouts: 'userData_workouts',\r\n            measurements: 'userData_measurements', \r\n            nutrition: 'userData_nutrition',\r\n            supplements: 'userData_supplements',\r\n            recovery: 'userData_recovery'\r\n        };\r\n    }\r\n\r\n    // ===== WORKOUT DATA =====\r\n    saveWorkout(workoutData) {\r\n        const workouts = this.getWorkouts();\r\n        const newWorkout = {\r\n            id: Date.now().toString(),\r\n            date: new Date().toISOString(),\r\n            ...workoutData\r\n        };\r\n        workouts.unshift(newWorkout);\r\n        localStorage.setItem(this.storageKeys.workouts, JSON.stringify(workouts));\r\n        return newWorkout;\r\n    }\r\n\r\n    getWorkouts() {\r\n        const saved = localStorage.getItem(this.storageKeys.workouts);\r\n        return saved ? JSON.parse(saved) : [];\r\n    }\r\n\r\n    // ===== MEASUREMENTS DATA =====\r\n    saveMeasurement(measurementData) {\r\n        const measurements = this.getMeasurements();\r\n        const newMeasurement = {\r\n            id: Date.now().toString(),\r\n            date: new Date().toISOString(),\r\n            ...measurementData\r\n        };\r\n        measurements.unshift(newMeasurement);\r\n        localStorage.setItem(this.storageKeys.measurements, JSON.stringify(measurements));\r\n        return newMeasurement;\r\n    }\r\n\r\n    getMeasurements() {\r\n        const saved = localStorage.getItem(this.storageKeys.measurements);\r\n        return saved ? JSON.parse(saved) : [];\r\n    }\r\n\r\n    // ===== NUTRITION DATA =====\r\n    getNutritionData() {\r\n        const completedMeals = JSON.parse(localStorage.getItem('completedMeals') || '{}');\r\n        const nutritionStreak = parseInt(localStorage.getItem('nutritionStreak') || '0');\r\n        \r\n        // Calcola aderenza alla dieta basata sui pasti completati\r\n        const today = new Date().toDateString();\r\n        const last7Days = [];\r\n        \r\n        for (let i = 0; i < 7; i++) {\r\n            const date = new Date();\r\n            date.setDate(date.getDate() - i);\r\n            const dayString = date.toDateString();\r\n            \r\n            // Conta pasti completati per ogni giorno\r\n            const dayMeals = Object.keys(completedMeals).filter(key => \r\n                key.startsWith(dayString)\r\n            ).length;\r\n            \r\n            last7Days.push({\r\n                date: dayString,\r\n                mealsCompleted: dayMeals,\r\n                adherence: Math.min((dayMeals / 4) * 100, 100) // Assumiamo 4 pasti al giorno\r\n            });\r\n        }\r\n\r\n        return {\r\n            completedMeals,\r\n            nutritionStreak,\r\n            weeklyAdherence: last7Days,\r\n            avgAdherence: last7Days.reduce((sum, day) => sum + day.adherence, 0) / 7\r\n        };\r\n    }\r\n\r\n    // ===== ANALYTICS DATA COMPILATION =====\r\n    getAnalyticsData() {\r\n        const workouts = this.getWorkouts();\r\n        const measurements = this.getMeasurements();\r\n        const nutrition = this.getNutritionData();\r\n        const supplements = JSON.parse(localStorage.getItem('supplementsTaken') || '{}');\r\n        const recovery = JSON.parse(localStorage.getItem('recoveryHistory') || '[]');\r\n\r\n        return {\r\n            workouts,\r\n            measurements,\r\n            nutrition,\r\n            supplements,\r\n            recovery,\r\n            \r\n            // Stats calcolate\r\n            stats: {\r\n                totalWorkouts: workouts.length,\r\n                currentStreak: this.calculateWorkoutStreak(workouts),\r\n                weightProgress: this.calculateWeightProgress(measurements),\r\n                strengthProgress: this.calculateStrengthProgress(workouts),\r\n                nutritionAdherence: nutrition.avgAdherence,\r\n                supplementCompliance: this.calculateSupplementCompliance(supplements),\r\n                recoveryFrequency: recovery.length\r\n            }\r\n        };\r\n    }\r\n\r\n    calculateWorkoutStreak(workouts) {\r\n        if (!workouts.length) return 0;\r\n        \r\n        const today = new Date();\r\n        let streak = 0;\r\n        let currentDate = new Date(today);\r\n        \r\n        // Ordina workouts per data\r\n        const sortedWorkouts = workouts\r\n            .map(w => new Date(w.date))\r\n            .sort((a, b) => b - a);\r\n\r\n        for (let i = 0; i < 30; i++) { // Controlla ultimi 30 giorni\r\n            const dayString = currentDate.toDateString();\r\n            const hasWorkout = sortedWorkouts.some(date => \r\n                date.toDateString() === dayString\r\n            );\r\n            \r\n            if (hasWorkout) {\r\n                streak++;\r\n            } else if (streak > 0) {\r\n                break; // Fine streak\r\n            }\r\n            \r\n            currentDate.setDate(currentDate.getDate() - 1);\r\n        }\r\n        \r\n        return streak;\r\n    }\r\n\r\n    calculateWeightProgress(measurements) {\r\n        if (measurements.length < 2) return { change: 0, trend: 'stable' };\r\n        \r\n        const latest = measurements[0];\r\n        const oldest = measurements[measurements.length - 1];\r\n        \r\n        const change = latest.weight - oldest.weight;\r\n        const trend = change > 1 ? 'gaining' : change < -1 ? 'losing' : 'stable';\r\n        \r\n        return { change: change.toFixed(1), trend };\r\n    }\r\n\r\n    calculateStrengthProgress(workouts) {\r\n        const exerciseProgress = {};\r\n        \r\n        workouts.forEach(workout => {\r\n            if (workout.exercises) {\r\n                workout.exercises.forEach(exercise => {\r\n                    if (!exerciseProgress[exercise.name]) {\r\n                        exerciseProgress[exercise.name] = [];\r\n                    }\r\n                    \r\n                    exerciseProgress[exercise.name].push({\r\n                        date: workout.date,\r\n                        weight: exercise.weight,\r\n                        reps: exercise.reps,\r\n                        volume: exercise.weight * exercise.reps * exercise.sets\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        // Calcola progresso per ogni esercizio\r\n        const progressSummary = {};\r\n        Object.keys(exerciseProgress).forEach(exerciseName => {\r\n            const sessions = exerciseProgress[exerciseName].sort((a, b) => \r\n                new Date(a.date) - new Date(b.date)\r\n            );\r\n            \r\n            if (sessions.length >= 2) {\r\n                const first = sessions[0];\r\n                const last = sessions[sessions.length - 1];\r\n                \r\n                progressSummary[exerciseName] = {\r\n                    initialWeight: first.weight,\r\n                    currentWeight: last.weight,\r\n                    improvement: ((last.weight - first.weight) / first.weight * 100).toFixed(1),\r\n                    sessions: sessions.length\r\n                };\r\n            }\r\n        });\r\n\r\n        return progressSummary;\r\n    }\r\n\r\n    calculateSupplementCompliance(supplements) {\r\n        const today = new Date().toDateString();\r\n        const last7Days = [];\r\n        \r\n        for (let i = 0; i < 7; i++) {\r\n            const date = new Date();\r\n            date.setDate(date.getDate() - i);\r\n            const dayString = date.toDateString();\r\n            \r\n            const daySupplements = Object.keys(supplements).filter(key => \r\n                key.startsWith(dayString)\r\n            ).length;\r\n            \r\n            last7Days.push(daySupplements);\r\n        }\r\n        \r\n        const avgDaily = last7Days.reduce((sum, day) => sum + day, 0) / 7;\r\n        return Math.round((avgDaily / 5) * 100); // Assumiamo 5 supplementi target\r\n    }\r\n\r\n    // ===== UTILITY METHODS =====\r\n    clearAllData() {\r\n        Object.values(this.storageKeys).forEach(key => {\r\n            localStorage.removeItem(key);\r\n        });\r\n        \r\n        // Pulisci anche altri storage\r\n        localStorage.removeItem('completedMeals');\r\n        localStorage.removeItem('nutritionStreak');\r\n        localStorage.removeItem('supplementsTaken');\r\n        localStorage.removeItem('recoveryHistory');\r\n    }\r\n\r\n    exportData() {\r\n        return {\r\n            workouts: this.getWorkouts(),\r\n            measurements: this.getMeasurements(),\r\n            nutrition: this.getNutritionData(),\r\n            analytics: this.getAnalyticsData()\r\n        };\r\n    }\r\n}\r\n\r\n// Esporta istanza singleton\r\nexport const dataManager = new DataManager();\r\nexport default dataManager;","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    Filler,\r\n    ArcElement\r\n} from 'chart.js';\r\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\r\nimport { format, subDays, startOfWeek, endOfWeek, eachDayOfInterval } from 'date-fns';\r\nimport { it } from 'date-fns/locale';\r\nimport { dataManager } from '../utils/dataManager';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    Filler,\r\n    ArcElement\r\n);\r\n\r\nconst AdvancedAnalytics = () => {\r\n    const navigate = useNavigate();\r\n    const [selectedPeriod, setSelectedPeriod] = useState('3months');\r\n    const [selectedMetric, setSelectedMetric] = useState('weight');\r\n    const [loading, setLoading] = useState(false);\r\n    const [realData, setRealData] = useState(null);\r\n\r\n    // Carica dati reali dell'utente\r\n    useEffect(() => {\r\n        const loadRealData = () => {\r\n            const data = dataManager.getAnalyticsData();\r\n            setRealData(data);\r\n        };\r\n        \r\n        loadRealData();\r\n        \r\n        // Ricarica ogni 30 secondi per dati aggiornati\r\n        const interval = setInterval(loadRealData, 30000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    // DATI MOCK COME FALLBACK (QUANDO NON CI SONO DATI REALI)\r\n    const mockData = {\r\n        // Dati peso corporeo ultimi 3 mesi\r\n        weightProgress: [\r\n            { date: '2024-06-01', weight: 75.2, bodyFat: 15.5, muscleMass: 34.2 },\r\n            { date: '2024-06-15', weight: 76.1, bodyFat: 15.2, muscleMass: 34.8 },\r\n            { date: '2024-07-01', weight: 76.8, bodyFat: 14.8, muscleMass: 35.4 },\r\n            { date: '2024-07-15', weight: 77.5, bodyFat: 14.5, muscleMass: 36.1 },\r\n            { date: '2024-08-01', weight: 78.2, bodyFat: 14.1, muscleMass: 36.8 },\r\n            { date: '2024-08-15', weight: 79.1, bodyFat: 13.8, muscleMass: 37.5 },\r\n            { date: '2024-09-01', weight: 79.8, bodyFat: 13.5, muscleMass: 38.2 }\r\n        ],\r\n        \r\n        // Dati allenamenti settimanali\r\n        workoutData: [\r\n            { week: 'Set 1', sessions: 5, volume: 12500, duration: 360 },\r\n            { week: 'Set 2', sessions: 4, volume: 11800, duration: 280 },\r\n            { week: 'Set 3', sessions: 6, volume: 14200, duration: 420 },\r\n            { week: 'Set 4', sessions: 5, volume: 13600, duration: 380 },\r\n            { week: 'Ago 1', sessions: 5, volume: 13200, duration: 350 },\r\n            { week: 'Ago 2', sessions: 4, volume: 12100, duration: 300 },\r\n            { week: 'Ago 3', sessions: 6, volume: 15800, duration: 450 },\r\n            { week: 'Ago 4', sessions: 5, volume: 14400, duration: 400 }\r\n        ],\r\n\r\n        // Distribuzione gruppi muscolari\r\n        muscleGroups: [\r\n            { name: 'Petto', sessions: 24, percentage: 20 },\r\n            { name: 'Dorso', sessions: 22, percentage: 18 },\r\n            { name: 'Gambe', sessions: 18, percentage: 15 },\r\n            { name: 'Spalle', sessions: 16, percentage: 13 },\r\n            { name: 'Braccia', sessions: 20, percentage: 17 },\r\n            { name: 'Core', sessions: 12, percentage: 10 },\r\n            { name: 'Cardio', sessions: 8, percentage: 7 }\r\n        ],\r\n\r\n        // Performance principali esercizi\r\n        exerciseProgress: [\r\n            { exercise: 'Panca Piana', current: 95, start: 75, improvement: 26.7 },\r\n            { exercise: 'Squat', current: 125, start: 100, improvement: 25.0 },\r\n            { exercise: 'Deadlift', current: 155, start: 120, improvement: 29.2 },\r\n            { exercise: 'Military Press', current: 65, start: 50, improvement: 30.0 },\r\n            { exercise: 'Trazioni', current: 15, start: 8, improvement: 87.5 }\r\n        ],\r\n\r\n        // Dati nutrition\r\n        nutritionStats: {\r\n            avgProteinDaily: 145,\r\n            avgCaloriesDaily: 2850,\r\n            adherenceRate: 87,\r\n            mealsPrepared: 156,\r\n            cheatsThisMonth: 4\r\n        },\r\n\r\n        // Dati recovery\r\n        recoveryData: [\r\n            { date: '2024-08-01', type: 'Sauna', duration: 20, quality: 9 },\r\n            { date: '2024-08-03', type: 'Ice Bath', duration: 5, quality: 8 },\r\n            { date: '2024-08-05', type: 'Massage', duration: 60, quality: 10 },\r\n            { date: '2024-08-08', type: 'Stretching', duration: 30, quality: 7 },\r\n            { date: '2024-08-10', type: 'Sauna', duration: 25, quality: 9 },\r\n            { date: '2024-08-12', type: 'Ice Bath', duration: 4, quality: 8 },\r\n            { date: '2024-08-15', type: 'Yoga', duration: 45, quality: 8 }\r\n        ]\r\n    };\r\n\r\n    // CONFIGURAZIONE GRAFICI\r\n    const chartOptions = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n            legend: {\r\n                position: 'top',\r\n                labels: {\r\n                    color: '#00ffff',\r\n                    font: { size: 12, weight: 'bold' }\r\n                }\r\n            },\r\n            tooltip: {\r\n                backgroundColor: 'rgba(0, 255, 255, 0.9)',\r\n                titleColor: '#000',\r\n                bodyColor: '#000',\r\n                borderColor: '#00ffff',\r\n                borderWidth: 2\r\n            }\r\n        },\r\n        scales: {\r\n            x: {\r\n                grid: { color: 'rgba(0, 255, 255, 0.1)' },\r\n                ticks: { color: '#00ffff', font: { weight: 'bold' } }\r\n            },\r\n            y: {\r\n                grid: { color: 'rgba(0, 255, 255, 0.1)' },\r\n                ticks: { color: '#00ffff', font: { weight: 'bold' } }\r\n            }\r\n        }\r\n    };\r\n\r\n    // FUNZIONE PER GENERARE DATI REALI O FALLBACK\r\n    const getChartData = () => {\r\n        if (realData && realData.measurements && realData.measurements.length > 0) {\r\n            // USA DATI REALI DELL'UTENTE\r\n            const measurements = realData.measurements.slice(-30); // Ultimi 30 rilevamenti\r\n            return {\r\n                labels: measurements.map(m => format(new Date(m.date), 'dd/MM')),\r\n                weightData: measurements.map(m => m.weight || 0),\r\n                muscleMassData: measurements.map(m => m.muscleMass || 0)\r\n            };\r\n        } else {\r\n            // FALLBACK: LINEE PIATTE QUANDO NON CI SONO DATI\r\n            const emptyLabels = ['No Data', 'Inserisci', 'Misurazioni', 'Reali'];\r\n            return {\r\n                labels: emptyLabels,\r\n                weightData: [0, 0, 0, 0],\r\n                muscleMassData: [0, 0, 0, 0]\r\n            };\r\n        }\r\n    };\r\n\r\n    const chartData = getChartData();\r\n\r\n    // GRAFICO PROGRESSO PESO (DATI REALI)\r\n    const weightChartData = {\r\n        labels: chartData.labels,\r\n        datasets: [\r\n            {\r\n                label: 'Peso (kg)',\r\n                data: chartData.weightData,\r\n                borderColor: '#00ffff',\r\n                backgroundColor: 'rgba(0, 255, 255, 0.1)',\r\n                borderWidth: 3,\r\n                fill: true,\r\n                tension: 0.4,\r\n                pointBackgroundColor: '#ff9500',\r\n                pointBorderColor: '#00ffff',\r\n                pointBorderWidth: 2,\r\n                pointRadius: 6\r\n            },\r\n            {\r\n                label: 'Massa Muscolare (kg)',\r\n                data: chartData.muscleMassData,\r\n                borderColor: '#ff9500',\r\n                backgroundColor: 'rgba(255, 149, 0, 0.1)',\r\n                borderWidth: 3,\r\n                fill: true,\r\n                tension: 0.4,\r\n                pointBackgroundColor: '#00ffff',\r\n                pointBorderColor: '#ff9500',\r\n                pointBorderWidth: 2,\r\n                pointRadius: 6\r\n            }\r\n        ]\r\n    };\r\n\r\n    // FUNZIONE PER DATI WORKOUT REALI\r\n    const getWorkoutChartData = () => {\r\n        if (realData && realData.workouts && realData.workouts.length > 0) {\r\n            // USA DATI REALI DEGLI ALLENAMENTI\r\n            const workouts = realData.workouts.slice(-10); // Ultimi 10 workout\r\n            return {\r\n                labels: workouts.map((w, i) => `Workout ${i + 1}`),\r\n                volumeData: workouts.map(w => {\r\n                    if (w.exercises && w.exercises.length > 0) {\r\n                        return w.exercises.reduce((total, ex) => \r\n                            total + (ex.weight * ex.reps * ex.sets), 0\r\n                        );\r\n                    }\r\n                    return 0;\r\n                }),\r\n                durationData: workouts.map(w => w.duration || 0)\r\n            };\r\n        } else {\r\n            // FALLBACK: LINEE COSTANTI\r\n            return {\r\n                labels: ['Nessun Workout', 'Inserisci', 'Dati', 'Reali'],\r\n                volumeData: [0, 0, 0, 0],\r\n                durationData: [0, 0, 0, 0]\r\n            };\r\n        }\r\n    };\r\n\r\n    const workoutData = getWorkoutChartData();\r\n\r\n    // GRAFICO VOLUME ALLENAMENTI (DATI REALI)\r\n    const workoutChartData = {\r\n        labels: workoutData.labels,\r\n        datasets: [\r\n            {\r\n                label: 'Volume (kg)',\r\n                data: workoutData.volumeData,\r\n                backgroundColor: 'rgba(0, 255, 255, 0.8)',\r\n                borderColor: '#00ffff',\r\n                borderWidth: 2\r\n            },\r\n            {\r\n                label: 'Durata (min)',\r\n                data: workoutData.durationData,\r\n                backgroundColor: 'rgba(255, 149, 0, 0.8)',\r\n                borderColor: '#ff9500',\r\n                borderWidth: 2,\r\n                yAxisID: 'y1'\r\n            }\r\n        ]\r\n    };\r\n\r\n    const workoutChartOptions = {\r\n        ...chartOptions,\r\n        scales: {\r\n            ...chartOptions.scales,\r\n            y1: {\r\n                type: 'linear',\r\n                display: true,\r\n                position: 'right',\r\n                grid: { drawOnChartArea: false },\r\n                ticks: { color: '#ff9500', font: { weight: 'bold' } }\r\n            }\r\n        }\r\n    };\r\n\r\n    // FUNZIONE PER DISTRIBUZIONE MUSCOLI REALE\r\n    const getMuscleChartData = () => {\r\n        if (realData && realData.workouts && realData.workouts.length > 0) {\r\n            // CALCOLA DISTRIBUZIONE REALE DAI WORKOUT\r\n            const muscleGroups = {};\r\n            let totalVolume = 0;\r\n\r\n            realData.workouts.forEach(workout => {\r\n                if (workout.exercises) {\r\n                    workout.exercises.forEach(exercise => {\r\n                        const volume = exercise.weight * exercise.reps * exercise.sets;\r\n                        const muscle = exercise.muscleGroup || 'Altro';\r\n                        muscleGroups[muscle] = (muscleGroups[muscle] || 0) + volume;\r\n                        totalVolume += volume;\r\n                    });\r\n                }\r\n            });\r\n\r\n            if (totalVolume > 0) {\r\n                const labels = Object.keys(muscleGroups);\r\n                const data = labels.map(muscle => \r\n                    Math.round((muscleGroups[muscle] / totalVolume) * 100)\r\n                );\r\n                return { labels, data };\r\n            }\r\n        }\r\n        \r\n        // FALLBACK: NESSUN DATO\r\n        return {\r\n            labels: ['Nessun Dato', 'Inserisci Workout'],\r\n            data: [50, 50]\r\n        };\r\n    };\r\n\r\n    const muscleData = getMuscleChartData();\r\n\r\n    // GRAFICO DISTRIBUZIONE MUSCOLI (DATI REALI)\r\n    const muscleChartData = {\r\n        labels: muscleData.labels,\r\n        datasets: [\r\n            {\r\n                data: muscleData.data,\r\n                backgroundColor: [\r\n                    '#00ffff', '#ff9500', '#ff6b6b', '#4ecdc4', \r\n                    '#45b7d1', '#96ceb4', '#feca57'\r\n                ],\r\n                borderColor: '#000',\r\n                borderWidth: 2\r\n            }\r\n        ]\r\n    };\r\n\r\n    // STATISTICHE CALCOLATE (DATI REALI)\r\n    const stats = realData ? {\r\n        totalWorkouts: realData.stats.totalWorkouts || 0,\r\n        currentStreak: realData.stats.currentStreak || 0,\r\n        totalVolume: workoutData.volumeData.reduce((sum, vol) => sum + vol, 0),\r\n        avgWorkoutDuration: workoutData.durationData.length > 0 ? \r\n            Math.round(workoutData.durationData.reduce((sum, dur) => sum + dur, 0) / workoutData.durationData.length) : 0,\r\n        weightGain: realData.stats.weightProgress ? realData.stats.weightProgress.change : '0.0',\r\n        muscleGain: chartData.muscleMassData.length > 1 ? \r\n            (chartData.muscleMassData[chartData.muscleMassData.length - 1] - chartData.muscleMassData[0]).toFixed(1) : '0.0',\r\n        bodyFatLoss: '0.0',\r\n        nutritionAdherence: Math.round(realData.stats.nutritionAdherence || 0),\r\n        supplementCompliance: realData.stats.supplementCompliance || 0,\r\n        recoveryFrequency: realData.stats.recoveryFrequency || 0,\r\n        bestLift: realData.stats.strengthProgress ? \r\n            Math.max(...Object.values(realData.stats.strengthProgress).map(ex => ex.currentWeight || 0)) : 0\r\n    } : {\r\n        // FALLBACK QUANDO NON CI SONO DATI\r\n        totalWorkouts: 0,\r\n        currentStreak: 0,\r\n        totalVolume: 0,\r\n        avgWorkoutDuration: 0,\r\n        weightGain: '0.0',\r\n        muscleGain: '0.0',\r\n        bodyFatLoss: '0.0',\r\n        nutritionAdherence: 0,\r\n        supplementCompliance: 0,\r\n        recoveryFrequency: 0,\r\n        bestLift: 0\r\n    };\r\n\r\n    // GENERA INSIGHTS DINAMICI BASATI SUI DATI REALI\r\n    const generateInsights = () => {\r\n        if (!realData) {\r\n            return [{\r\n                type: 'info',\r\n                icon: '📊',\r\n                title: 'Inizia il Tracking',\r\n                message: 'Aggiungi dati ai tuoi allenamenti per ricevere insights personalizzati!'\r\n            }];\r\n        }\r\n\r\n        const insights = [];\r\n\r\n        // Insight su workout streak\r\n        if (stats.currentStreak >= 7) {\r\n            insights.push({\r\n                type: 'success',\r\n                icon: '🔥',\r\n                title: 'Streak Fantastico!',\r\n                message: `${stats.currentStreak} giorni consecutivi! La costanza è la chiave del successo.`\r\n            });\r\n        } else if (stats.totalWorkouts > 0) {\r\n            insights.push({\r\n                type: 'warning',\r\n                icon: '⚡',\r\n                title: 'Mantieni la Costanza',\r\n                message: 'Cerca di allenarti regolarmente per massimizzare i risultati.'\r\n            });\r\n        }\r\n\r\n        // Insight su nutrizione\r\n        if (stats.nutritionAdherence >= 80) {\r\n            insights.push({\r\n                type: 'success',\r\n                icon: '🥗',\r\n                title: 'Nutrizione Eccellente',\r\n                message: `${stats.nutritionAdherence}% di aderenza alla dieta. Ottimo lavoro!`\r\n            });\r\n        } else if (stats.nutritionAdherence > 0) {\r\n            insights.push({\r\n                type: 'warning',\r\n                icon: '🍽️',\r\n                title: 'Migliora la Nutrizione',\r\n                message: 'Completa più pasti per raggiungere i tuoi obiettivi più velocemente.'\r\n            });\r\n        }\r\n\r\n        // Insight su progressi forza\r\n        if (realData.stats.strengthProgress && Object.keys(realData.stats.strengthProgress).length > 0) {\r\n            const improvements = Object.values(realData.stats.strengthProgress)\r\n                .map(ex => parseFloat(ex.improvement || 0))\r\n                .filter(imp => imp > 0);\r\n            \r\n            if (improvements.length > 0) {\r\n                const avgImprovement = improvements.reduce((sum, imp) => sum + imp, 0) / improvements.length;\r\n                insights.push({\r\n                    type: 'success',\r\n                    icon: '💪',\r\n                    title: 'Progressi di Forza',\r\n                    message: `Miglioramento medio del ${avgImprovement.toFixed(1)}% sui tuoi esercizi!`\r\n                });\r\n            }\r\n        }\r\n\r\n        // Fallback se non ci sono insights specifici\r\n        if (insights.length === 0) {\r\n            insights.push({\r\n                type: 'info',\r\n                icon: '🚀',\r\n                title: 'Continua Così',\r\n                message: 'Mantieni la disciplina e i risultati arriveranno!'\r\n            });\r\n        }\r\n\r\n        return insights.slice(0, 3); // Massimo 3 insights\r\n    };\r\n\r\n    const dynamicInsights = generateInsights();\r\n\r\n    return (\r\n        <div className=\"analytics-premium\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"analytics-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-title\">\r\n                    <h1>📊 ANALYTICS ENTERPRISE</h1>\r\n                    <p className=\"subtitle\">Dashboard avanzata per il monitoraggio dei progressi</p>\r\n                </div>\r\n\r\n                <div className=\"period-selector\">\r\n                    <select \r\n                        value={selectedPeriod} \r\n                        onChange={(e) => setSelectedPeriod(e.target.value)}\r\n                        className=\"period-select\"\r\n                    >\r\n                        <option value=\"1month\">1 Mese</option>\r\n                        <option value=\"3months\">3 Mesi</option>\r\n                        <option value=\"6months\">6 Mesi</option>\r\n                        <option value=\"1year\">1 Anno</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            {/* KPI CARDS */}\r\n            <div className=\"kpi-grid\">\r\n                <div className=\"kpi-card primary\">\r\n                    <div className=\"kpi-icon\">💪</div>\r\n                    <div className=\"kpi-data\">\r\n                        <span className=\"kpi-value\">+{stats.weightGain}kg</span>\r\n                        <span className=\"kpi-label\">Peso Totale</span>\r\n                    </div>\r\n                    <div className=\"kpi-trend up\">↗ +15%</div>\r\n                </div>\r\n\r\n                <div className=\"kpi-card success\">\r\n                    <div className=\"kpi-icon\">🔥</div>\r\n                    <div className=\"kpi-data\">\r\n                        <span className=\"kpi-value\">+{stats.muscleGain}kg</span>\r\n                        <span className=\"kpi-label\">Massa Muscolare</span>\r\n                    </div>\r\n                    <div className=\"kpi-trend up\">↗ +12%</div>\r\n                </div>\r\n\r\n                <div className=\"kpi-card warning\">\r\n                    <div className=\"kpi-icon\">⚖️</div>\r\n                    <div className=\"kpi-data\">\r\n                        <span className=\"kpi-value\">-{stats.bodyFatLoss}%</span>\r\n                        <span className=\"kpi-label\">Grasso Corporeo</span>\r\n                    </div>\r\n                    <div className=\"kpi-trend down\">↘ -13%</div>\r\n                </div>\r\n\r\n                <div className=\"kpi-card info\">\r\n                    <div className=\"kpi-icon\">🏆</div>\r\n                    <div className=\"kpi-data\">\r\n                        <span className=\"kpi-value\">{stats.currentStreak}</span>\r\n                        <span className=\"kpi-label\">Giorni Consecutivi</span>\r\n                    </div>\r\n                    <div className=\"kpi-trend up\">🔥 Streak!</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* GRAFICI PRINCIPALI */}\r\n            <div className=\"charts-grid\">\r\n                {/* Grafico Progresso Peso */}\r\n                <div className=\"chart-container\">\r\n                    <div className=\"chart-header\">\r\n                        <h3>📈 PROGRESSO COMPOSIZIONE CORPOREA</h3>\r\n                        <div className=\"chart-controls\">\r\n                            <button \r\n                                className={`control-btn ${selectedMetric === 'weight' ? 'active' : ''}`}\r\n                                onClick={() => setSelectedMetric('weight')}\r\n                            >\r\n                                Peso\r\n                            </button>\r\n                            <button \r\n                                className={`control-btn ${selectedMetric === 'muscle' ? 'active' : ''}`}\r\n                                onClick={() => setSelectedMetric('muscle')}\r\n                            >\r\n                                Muscoli\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"chart-wrapper\">\r\n                        <Line data={weightChartData} options={chartOptions} />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Grafico Volume Allenamenti */}\r\n                <div className=\"chart-container\">\r\n                    <div className=\"chart-header\">\r\n                        <h3>🏋️ VOLUME & DURATA ALLENAMENTI</h3>\r\n                        <div className=\"chart-stats\">\r\n                            <span>Volume Medio: {workoutData.volumeData.length > 0 ? Math.round(stats.totalVolume / workoutData.volumeData.length) : 0}kg</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"chart-wrapper\">\r\n                        <Bar data={workoutChartData} options={workoutChartOptions} />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Grafico Distribuzione Muscoli */}\r\n                <div className=\"chart-container\">\r\n                    <div className=\"chart-header\">\r\n                        <h3>🎯 DISTRIBUZIONE GRUPPI MUSCOLARI</h3>\r\n                        <div className=\"chart-stats\">\r\n                            <span>Sessioni Totali: {stats.totalWorkouts}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"chart-wrapper\">\r\n                        <Doughnut data={muscleChartData} options={chartOptions} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PERFORMANCE ESERCIZI (DATI REALI) */}\r\n            <div className=\"exercises-performance\">\r\n                <h3>🏆 TOP PERFORMANCE ESERCIZI</h3>\r\n                <div className=\"exercises-grid\">\r\n                    {realData && realData.stats.strengthProgress ? \r\n                        Object.entries(realData.stats.strengthProgress).map(([exerciseName, data], index) => (\r\n                            <div key={index} className=\"exercise-card\">\r\n                                <div className=\"exercise-header\">\r\n                                    <h4>{exerciseName}</h4>\r\n                                    <span className=\"improvement\">+{data.improvement || 0}%</span>\r\n                                </div>\r\n                                <div className=\"exercise-progress\">\r\n                                    <div className=\"progress-bar\">\r\n                                        <div \r\n                                            className=\"progress-fill\"\r\n                                            style={{ width: `${Math.min((data.currentWeight / 200) * 100, 100)}%` }}\r\n                                        ></div>\r\n                                    </div>\r\n                                    <div className=\"exercise-stats\">\r\n                                        <span>Attuale: <strong>{data.currentWeight || 0}kg</strong></span>\r\n                                        <span>Inizio: {data.initialWeight || 0}kg</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                        : \r\n                        <div className=\"no-data-message\">\r\n                            <h4>🏋️ Nessun Dato Disponibile</h4>\r\n                            <p>Aggiungi workout con pesi per vedere i progressi di forza</p>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n            {/* NUTRITION & RECOVERY STATS */}\r\n            <div className=\"secondary-stats\">\r\n                <div className=\"stat-section\">\r\n                    <h3>🥗 NUTRITION INSIGHTS (DATI REALI)</h3>\r\n                    <div className=\"stat-cards\">\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-icon\">💪</div>\r\n                            <div className=\"stat-info\">\r\n                                <span className=\"stat-value\">{realData?.nutrition?.weeklyAdherence ? \r\n                                    Math.round(realData.nutrition.weeklyAdherence.reduce((sum, day) => sum + (day.mealsCompleted * 25), 0) / 7) \r\n                                    : 0}g</span>\r\n                                <span className=\"stat-label\">Proteine/Giorno</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-icon\">🔥</div>\r\n                            <div className=\"stat-info\">\r\n                                <span className=\"stat-value\">{realData?.nutrition?.weeklyAdherence ? \r\n                                    Math.round(realData.nutrition.weeklyAdherence.reduce((sum, day) => sum + (day.mealsCompleted * 500), 0) / 7)\r\n                                    : 0}</span>\r\n                                <span className=\"stat-label\">Calorie/Giorno</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-icon\">📊</div>\r\n                            <div className=\"stat-info\">\r\n                                <span className=\"stat-value\">{stats.nutritionAdherence}%</span>\r\n                                <span className=\"stat-label\">Aderenza Dieta</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-section\">\r\n                    <h3>🛁 RECOVERY INSIGHTS (DATI REALI)</h3>\r\n                    <div className=\"recovery-list\">\r\n                        {realData && realData.recovery && realData.recovery.length > 0 ? \r\n                            realData.recovery.slice(0, 4).map((session, index) => (\r\n                                <div key={index} className=\"recovery-item\">\r\n                                    <div className=\"recovery-type\">{session.type || 'Sessione'}</div>\r\n                                    <div className=\"recovery-duration\">{session.duration || 0}min</div>\r\n                                    <div className=\"recovery-quality\">\r\n                                        {'★'.repeat(Math.floor((session.quality || 5) / 2))}\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                            :\r\n                            <div className=\"no-recovery-data\">\r\n                                <p>🛁 Nessuna sessione recovery registrata</p>\r\n                                <small>Usa la sezione Recovery per tracciare le tue sessioni</small>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* INSIGHTS AI DINAMICI */}\r\n            <div className=\"ai-insights\">\r\n                <h3>🤖 AI INSIGHTS & RACCOMANDAZIONI (BASATE SUI TUOI DATI)</h3>\r\n                <div className=\"insights-grid\">\r\n                    {dynamicInsights.map((insight, index) => (\r\n                        <div key={index} className={`insight-card ${insight.type}`}>\r\n                            <div className=\"insight-icon\">{insight.icon}</div>\r\n                            <div className=\"insight-content\">\r\n                                <h4>{insight.title}</h4>\r\n                                <p>{insight.message}</p>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* MESSAGGIO DATI REALI */}\r\n            <div className=\"data-status\" style={{\r\n                padding: '20px',\r\n                background: realData ? 'rgba(34, 197, 94, 0.1)' : 'rgba(239, 68, 68, 0.1)',\r\n                borderRadius: '10px',\r\n                textAlign: 'center',\r\n                marginTop: '20px',\r\n                border: `2px solid ${realData ? '#22c55e' : '#ef4444'}`\r\n            }}>\r\n                <h3 style={{ color: realData ? '#22c55e' : '#ef4444' }}>\r\n                    {realData ? '✅ ANALYTICS REALI ATTIVI' : '⚠️ NESSUN DATO DISPONIBILE'}\r\n                </h3>\r\n                <p style={{ color: realData ? '#22c55e' : '#ef4444' }}>\r\n                    {realData ? \r\n                        'Tutti i grafici e le statistiche sono basati sui tuoi dati reali!' :\r\n                        'Aggiungi workout, misurazioni e completa pasti per vedere analytics reali.'\r\n                    }\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdvancedAnalytics;"],"sourceRoot":""}