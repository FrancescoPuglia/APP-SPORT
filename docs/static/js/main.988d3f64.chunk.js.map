{"version":3,"sources":["utils/dataManager.js","components/MotivationalQuotes.js","components/CalendarStreak.js","components/ExerciseTracker.js","components/SupplementStack.js","components/RecoveryProtocol.js","components/Dashboard.js","components/WorkoutTimer.js","components/TechniqueGuides.js","components/Workout.js","components/Nutrition.js","components/Supplements.js","components/Recovery.js","components/Progress.js","components/Measurements.js","firebase/config.js","firebase/auth.js","firebase/firestore.js","firebase/migration.js","components/AuthProvider.js","validation/schemas.js","App.js","index.js"],"names":["dataManager","constructor","this","storageKeys","workouts","measurements","nutrition","supplements","recovery","saveWorkout","workoutData","getWorkouts","newWorkout","_objectSpread","id","Date","now","toString","date","toISOString","unshift","localStorage","setItem","JSON","stringify","saved","getItem","parse","saveMeasurement","measurementData","getMeasurements","newMeasurement","getNutritionData","completedMeals","nutritionStreak","parseInt","last7Days","toDateString","i","setDate","getDate","dayString","dayMeals","Object","keys","filter","key","startsWith","length","push","mealsCompleted","adherence","Math","min","weeklyAdherence","avgAdherence","reduce","sum","day","getAnalyticsData","stats","totalWorkouts","currentStreak","calculateWorkoutStreak","weightProgress","calculateWeightProgress","strengthProgress","calculateStrengthProgress","nutritionAdherence","supplementCompliance","calculateSupplementCompliance","recoveryFrequency","today","streak","currentDate","sortedWorkouts","map","w","sort","a","b","some","change","trend","latest","oldest","weight","toFixed","exerciseProgress","forEach","workout","exercises","exercise","name","reps","volume","sets","progressSummary","exerciseName","sessions","first","last","initialWeight","currentWeight","improvement","daySupplements","avgDaily","round","clearAllData","values","removeItem","exportData","analytics","MotivationalQuotes","legendaryQuotes","quote","author","context","additionalQuotes","getTodayQuote","getDay","find","q","getRandomAdditionalQuote","floor","random","CalendarStreak","setCurrentDate","React","useState","streakData","setStreakData","monthlyStats","setMonthlyStats","calculateMonthlyStats","data","arguments","undefined","currentMonth","getMonth","currentYear","getFullYear","monthlyWorkouts","dateKey","completed","calculateCurrentStreak","longestStreak","calculateLongestStreak","weeklyAverage","calculateWeeklyAverage","lastUpdated","checkDate","split","maxStreak","sortedDates","prevDate","max","fourWeeksAgo","useEffect","loadStreakData","markWorkoutCompleted","workoutType","updated","timestamp","getDaysInMonth","year","month","firstDay","daysInMonth","startingDayOfWeek","days","currentDay","isCompleted","isToday","navigateMonth","direction","newDate","setMonth","getStreakColor","getWorkoutTypeEmoji","type","monthNames","dayNames","ExerciseTracker","exerciseData","setExerciseData","sessionProgress","setSessionProgress","personalRecords","setPersonalRecords","updatePersonalRecord","oneRepMax","calculateOneRepMax","currentPR","updatedPR","parseFloat","previousRecord","updateSessionProgress","todayExercises","ex","prev","totalCompleted","getExerciseHistory","limit","slice","isExerciseCompletedToday","loadExerciseData","savedPR","markExerciseCompleted","notes","rir","exerciseId","concat","exerciseEntry","getTodayProgress","workoutExercises","total","percentage","remaining","getWeeklyStats","oneWeekAgo","weeklyExercises","totalSets","totalReps","totalVolume","uniqueExercises","Set","size","averageWeight","getMonthlyProgress","oneMonthAgo","monthlyExercises","workoutDays","totalExercises","averageVolume","getExerciseProgressColor","_history$","history","lastWeight","avgWeight","SupplementStack","supplementSchedule","setSupplementSchedule","takenToday","setTakenToday","evidenceBasedSupplements","creatine","dosage","timing","evidence","benefits","mechanism","color","icon","citrulline","betaAlanine","omega3","caffeine","vitaminD","isSupplementTakenToday","supplementKey","entryKey","taken","loadTodaysSupplements","todayData","includes","removedSupplements","hmb","forskolin","rAla","bcaa","glutamine","markSupplementTaken","supplement","getSupplementProgress","totalSupplements","takenCount","getWeeklySupplementStats","weeklyEntries","entry","consistency","supplementEntries","getOptimalTiming","currentTime","hour","getHours","recommendations","reason","workoutHour","createSupplementPlan","workoutSchedule","goals","core","performance","endurance","morning","preWorkout","postWorkout","evening","RecoveryProtocol","recoveryLog","setRecoveryLog","todayRecovery","setTodayRecovery","thermoTherapyProtocols","sauna","temperature","humidity","duration","protocol","precautions","scientificEvidence","steamRoom","iceBath","loadRecoveryData","todaySessions","s","totalTime","contrastTherapy","optimalTiming","immediate","after2h","after4h","nextMorning","restDays","competition","before","after","biohacking","breathwork","preSauna","preIceBath","postBoth","monitoring","heartRate","bodyTemp","subjective","markRecoverySession","therapy","effectiveness","sessionId","session","updatedLog","getRecoveryRecommendation","lastWorkout","workoutIntensity","stressLevel","hoursSinceWorkout","priority","getRecoveryStats","sessionDate","weekAgo","totalSessions","averageEffectiveness","therapyBreakdown","time","Dashboard","quotesHook","calendarHook","exerciseHook","supplementsHook","recoveryHook","dashboardData","setDashboardData","muscleGain","workoutSessions","totalWorkoutTime","weeklyTime","daysActive","todayWorkout","setTodayWorkout","goals12Week","setGoals12Week","startWeight","targetWeight","targetBench","targetSquat","targetDeadlift","startDate","weeksCompleted","loadDashboardData","_workoutSessions$","progressData","timeStats","latestProgress","firstProgress","getTime","muscleMass","focus","todayQuote","todayProgress","supplementProgress","weeklyStats","recoveryStats","_jsxs","className","children","_jsx","style","width","Link","to","index","WorkoutTimer","_ref","onSessionComplete","isActive","setIsActive","currentExercise","setCurrentExercise","sessionTime","setSessionTime","exerciseTime","setExerciseTime","setExercises","currentExerciseIndex","setCurrentExerciseIndex","interval","setInterval","clearInterval","nextExercise","calculateWeeklyTime","calculateMonthlyTime","formatTime","seconds","mins","secs","padStart","placeholder","value","onChange","e","target","disabled","onClick","pauseSession","completeSession","sessionData","updatedSessions","updatedTimeStats","monthlyTime","sessionsCompleted","startSession","TechniqueGuides","masterTechniques","category","difficulty","muscles","setup","execution","breathing","commonMistakes","progressionTips","safetyNotes","getTechniqueCue","phase","getProgressionLevel","userLevel","beginner","approach","intermediate","advanced","getInjuryPrevention","prevention","warmup","cooldown","redFlags","alternatives","getMindMuscleCues","getExerciseRating","safety","transferability","overall","Workout","selectedDay","setSelectedDay","completedWorkouts","setCompletedWorkouts","selectedExercise","setSelectedExercise","exerciseForm","setExerciseForm","showTechnique","setShowTechnique","workoutPlan","subtitle","rest","isWorkoutCompletedToday","loadCompletedWorkouts","navigate","title","isWorkoutActive","currentWorkout","finishWorkout","background","padding","borderRadius","console","log","entries","_ref2","startWorkout","fontSize","fontWeight","marginBottom","isExerciseCompleted","step","completeExercise","idx","Nutrition","useNavigate","setCompletedMeals","setCurrentStreak","weeklyDiet","meals","food","proteins","calories","ingredients","updateStreak","todayMeals","meal","newStreak","isMealCompleted","mealId","getDayProgress","getTotalProteins","getTotalCalories","newCompleted","toggleMeal","ingredient","Supplements","selectedCategory","setSelectedCategory","currentStack","setCurrentStack","cost","description","instructions","categories","all","protein","health","timingLabels","isSupplementTaken","suppId","removeFromStack","newStack","getCompletionRate","stackSupplements","_supplements$suppId","replace","newTaken","toggleSupplement","supp","_ref3","inStack","benefit","addToStack","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref0","_ref1","Recovery","activeSession","setActiveSession","sessionHistory","setSessionHistory","currentTimer","setCurrentTimer","isTimerRunning","setIsTimerRunning","selectedProtocol","setSelectedProtocol","recoveryProtocols","equipment","contraindications","endSession","newHistory","quality","getSessionStats","thisWeek","totalDuration","avgDuration","totalHours","heat","cold","contrast","manual","movement","mental","_categories$protocol$","instruction","warning","protocolId","toLocaleDateString","toLocaleTimeString","minute","Progress","setProgressData","newEntry","setNewEntry","bodyFat","chest","arms","waist","thighs","setTimeStats","saveProgressData","minutes","hours","loadProgressData","savedTimeStats","addEntry","deleteEntry","Measurements","setMeasurements","showForm","setShowForm","formData","setFormData","height","loadMeasurements","savedMeasurements","getProgressChange","current","previous","unit","abs","border","onSubmit","preventDefault","alert","required","rows","measurement","textAlign","marginTop","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","db","getFirestore","getStorage","isSupported","then","supported","getAnalytics","process","REACT_APP_USE_FIREBASE_EMULATORS","logger","message","error","warn","googleProvider","GoogleAuthProvider","addScope","authService","currentUser","authStateListeners","initializeAuthListener","onAuthStateChanged","user","notifyAuthStateListeners","uid","email","displayName","updateUserLastSeen","onAuthStateChange","callback","cb","signInWithEmail","password","signInWithEmailAndPassword","success","handleAuthError","signUpWithEmail","createUserWithEmailAndPassword","updateProfile","createUserDocument","signInWithGoogle","signInWithPopup","photoURL","provider","signOutUser","signOut","resetPassword","sendPasswordResetEmail","updateUserPassword","currentPassword","newPassword","Error","credential","EmailAuthProvider","reauthenticateWithCredential","updatePassword","additionalData","userRef","doc","getDoc","exists","setDoc","lastSeen","serverTimestamp","merge","userData","createdAt","settings","units","language","notifications","darkMode","profile","age","activityLevel","experience","isOnline","code","originalError","isAuthenticated","getCurrentUser","deleteAccount","deleteUser","BaseRepository","collectionName","collectionRef","collection","cache","Map","listeners","getById","useCache","has","cached","get","fromCache","docRef","docSnap","set","create","customId","_authService$getCurre","userId","docData","updatedAt","addDoc","newId","invalidateCache","update","updateData","updateDoc","delete","deleteDoc","getWithQuery","queryConstraints","query","querySnapshot","getDocs","docs","count","subscribeToChanges","onSnapshot","clear","progressRepo","super","getUserProgress","_authService$getCurre2","endDate","constraints","where","orderBy","addMeasurement","getPeriodStats","_authService$getCurre3","result","totalEntries","weightChange","muscleMassChange","bodyFatChange","period","workoutRepo","status","startTime","completionData","endTime","completedAt","getUserSessions","_authService$getCurre4","getWorkoutStats","recentSessions","_session$createdAt","_session$createdAt$to","toDate","call","averageDuration","exerciseStats","_session$exercises","exerciseRepo","logExercise","getPersonalRecords","_authService$getCurre5","prs","userRepo","getCurrentUserProfile","_authService$getCurre6","updateSettings","_authService$getCurre7","profileData","_authService$getCurre8","logMeal","mealData","updateMealStatus","getUserMeals","_authService$getCurre9","getDayMeals","_authService$getCurre0","getNutritionStats","_authService$getCurre1","m","totalMeals","adherenceRate","totalProteins","avgProteinsPerDay","calculateNutritionStreak","mealsByDay","reverse","logRecoverySession","recoveryData","getUserRecoverySessions","_authService$getCurre10","getDayRecoverySessions","_authService$getCurre11","_authService$getCurre12","activityBreakdown","activityType","weeklyFrequency","ceil","migrationKey","backupKey","isMigrationCompleted","markMigrationCompleted","migrationData","version","createBackup","backupData","safeGetLocalStorage","userSettings","backupString","backup","migrateAllData","migrationReport","steps","errors","totalItems","migratedItems","backupResult","progressResult","migrateProgressData","workoutResult","migrateWorkoutSessions","exerciseResult","migrateExerciseData","userResult","migrateUserSettings","verificationResult","verifyMigration","verificationPassed","details","report","item","cleanedData","cleanProgressData","createResult","sleep","cleanWorkoutSession","cleanExerciseData","fitnessStats","preferences","migratedFrom","migrationDate","updateResult","cleaned","validateNumber","validateString","workoutName","Array","isArray","Number","MAX_SAFE_INTEGER","num","isNaN","maxLength","trim","substring","_progressCheck$data","_workoutCheck$data","progressCheck","workoutCheck","userCheck","checks","progress","userProfile","allPassed","every","check","progressCount","workoutCount","hasUserProfile","rollbackMigration","ms","Promise","resolve","setTimeout","getMigrationStatus","hasBackup","AuthProvider","yup","mixed","default","notType","string","number","positive","integer","weightValidation","typeError","percentageValidation","measurementValidation","dateValidation","passwordValidation","matches","exerciseSchema","confirmPassword","oneOf","nullable","acceptTerms","rememberMe","confirmNewPassword","test","of","intensity","fitnessGoals","publicProfile","parent","targetDate","workoutReminders","progressReminders","achievementAlerts","emailNotifications","pushNotifications","privacy","profileVisibility","shareProgress","shareWorkouts","allowFriendRequests","display","theme","dateFormat","timeFormat","distance","LazyAnalytics","lazy","LazyNutritionTracker","LazyRecoveryTimer","AppContent","Router","Routes","Route","path","element","Suspense","fallback","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.988d3f64.chunk.js","sourcesContent":["// SISTEMA CENTRALE DI GESTIONE DATI REALI\r\n// Tutti i dati dell'utente vengono salvati qui e utilizzati da Analytics\r\n\r\nclass DataManager {\r\n    constructor() {\r\n        this.storageKeys = {\r\n            workouts: 'userData_workouts',\r\n            measurements: 'userData_measurements', \r\n            nutrition: 'userData_nutrition',\r\n            supplements: 'userData_supplements',\r\n            recovery: 'userData_recovery'\r\n        };\r\n    }\r\n\r\n    // ===== WORKOUT DATA =====\r\n    saveWorkout(workoutData) {\r\n        const workouts = this.getWorkouts();\r\n        const newWorkout = {\r\n            id: Date.now().toString(),\r\n            date: new Date().toISOString(),\r\n            ...workoutData\r\n        };\r\n        workouts.unshift(newWorkout);\r\n        localStorage.setItem(this.storageKeys.workouts, JSON.stringify(workouts));\r\n        return newWorkout;\r\n    }\r\n\r\n    getWorkouts() {\r\n        const saved = localStorage.getItem(this.storageKeys.workouts);\r\n        return saved ? JSON.parse(saved) : [];\r\n    }\r\n\r\n    // ===== MEASUREMENTS DATA =====\r\n    saveMeasurement(measurementData) {\r\n        const measurements = this.getMeasurements();\r\n        const newMeasurement = {\r\n            id: Date.now().toString(),\r\n            date: new Date().toISOString(),\r\n            ...measurementData\r\n        };\r\n        measurements.unshift(newMeasurement);\r\n        localStorage.setItem(this.storageKeys.measurements, JSON.stringify(measurements));\r\n        return newMeasurement;\r\n    }\r\n\r\n    getMeasurements() {\r\n        const saved = localStorage.getItem(this.storageKeys.measurements);\r\n        return saved ? JSON.parse(saved) : [];\r\n    }\r\n\r\n    // ===== NUTRITION DATA =====\r\n    getNutritionData() {\r\n        const completedMeals = JSON.parse(localStorage.getItem('completedMeals') || '{}');\r\n        const nutritionStreak = parseInt(localStorage.getItem('nutritionStreak') || '0');\r\n        \r\n        // Calcola aderenza alla dieta basata sui pasti completati\r\n        const today = new Date().toDateString();\r\n        const last7Days = [];\r\n        \r\n        for (let i = 0; i < 7; i++) {\r\n            const date = new Date();\r\n            date.setDate(date.getDate() - i);\r\n            const dayString = date.toDateString();\r\n            \r\n            // Conta pasti completati per ogni giorno\r\n            const dayMeals = Object.keys(completedMeals).filter(key => \r\n                key.startsWith(dayString)\r\n            ).length;\r\n            \r\n            last7Days.push({\r\n                date: dayString,\r\n                mealsCompleted: dayMeals,\r\n                adherence: Math.min((dayMeals / 4) * 100, 100) // Assumiamo 4 pasti al giorno\r\n            });\r\n        }\r\n\r\n        return {\r\n            completedMeals,\r\n            nutritionStreak,\r\n            weeklyAdherence: last7Days,\r\n            avgAdherence: last7Days.reduce((sum, day) => sum + day.adherence, 0) / 7\r\n        };\r\n    }\r\n\r\n    // ===== ANALYTICS DATA COMPILATION =====\r\n    getAnalyticsData() {\r\n        const workouts = this.getWorkouts();\r\n        const measurements = this.getMeasurements();\r\n        const nutrition = this.getNutritionData();\r\n        const supplements = JSON.parse(localStorage.getItem('supplementsTaken') || '{}');\r\n        const recovery = JSON.parse(localStorage.getItem('recoveryHistory') || '[]');\r\n\r\n        return {\r\n            workouts,\r\n            measurements,\r\n            nutrition,\r\n            supplements,\r\n            recovery,\r\n            \r\n            // Stats calcolate\r\n            stats: {\r\n                totalWorkouts: workouts.length,\r\n                currentStreak: this.calculateWorkoutStreak(workouts),\r\n                weightProgress: this.calculateWeightProgress(measurements),\r\n                strengthProgress: this.calculateStrengthProgress(workouts),\r\n                nutritionAdherence: nutrition.avgAdherence,\r\n                supplementCompliance: this.calculateSupplementCompliance(supplements),\r\n                recoveryFrequency: recovery.length\r\n            }\r\n        };\r\n    }\r\n\r\n    calculateWorkoutStreak(workouts) {\r\n        if (!workouts.length) return 0;\r\n        \r\n        const today = new Date();\r\n        let streak = 0;\r\n        let currentDate = new Date(today);\r\n        \r\n        // Ordina workouts per data\r\n        const sortedWorkouts = workouts\r\n            .map(w => new Date(w.date))\r\n            .sort((a, b) => b - a);\r\n\r\n        for (let i = 0; i < 30; i++) { // Controlla ultimi 30 giorni\r\n            const dayString = currentDate.toDateString();\r\n            const hasWorkout = sortedWorkouts.some(date => \r\n                date.toDateString() === dayString\r\n            );\r\n            \r\n            if (hasWorkout) {\r\n                streak++;\r\n            } else if (streak > 0) {\r\n                break; // Fine streak\r\n            }\r\n            \r\n            currentDate.setDate(currentDate.getDate() - 1);\r\n        }\r\n        \r\n        return streak;\r\n    }\r\n\r\n    calculateWeightProgress(measurements) {\r\n        if (measurements.length < 2) return { change: 0, trend: 'stable' };\r\n        \r\n        const latest = measurements[0];\r\n        const oldest = measurements[measurements.length - 1];\r\n        \r\n        const change = latest.weight - oldest.weight;\r\n        const trend = change > 1 ? 'gaining' : change < -1 ? 'losing' : 'stable';\r\n        \r\n        return { change: change.toFixed(1), trend };\r\n    }\r\n\r\n    calculateStrengthProgress(workouts) {\r\n        const exerciseProgress = {};\r\n        \r\n        workouts.forEach(workout => {\r\n            if (workout.exercises) {\r\n                workout.exercises.forEach(exercise => {\r\n                    if (!exerciseProgress[exercise.name]) {\r\n                        exerciseProgress[exercise.name] = [];\r\n                    }\r\n                    \r\n                    exerciseProgress[exercise.name].push({\r\n                        date: workout.date,\r\n                        weight: exercise.weight,\r\n                        reps: exercise.reps,\r\n                        volume: exercise.weight * exercise.reps * exercise.sets\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        // Calcola progresso per ogni esercizio\r\n        const progressSummary = {};\r\n        Object.keys(exerciseProgress).forEach(exerciseName => {\r\n            const sessions = exerciseProgress[exerciseName].sort((a, b) => \r\n                new Date(a.date) - new Date(b.date)\r\n            );\r\n            \r\n            if (sessions.length >= 2) {\r\n                const first = sessions[0];\r\n                const last = sessions[sessions.length - 1];\r\n                \r\n                progressSummary[exerciseName] = {\r\n                    initialWeight: first.weight,\r\n                    currentWeight: last.weight,\r\n                    improvement: ((last.weight - first.weight) / first.weight * 100).toFixed(1),\r\n                    sessions: sessions.length\r\n                };\r\n            }\r\n        });\r\n\r\n        return progressSummary;\r\n    }\r\n\r\n    calculateSupplementCompliance(supplements) {\r\n        const today = new Date().toDateString();\r\n        const last7Days = [];\r\n        \r\n        for (let i = 0; i < 7; i++) {\r\n            const date = new Date();\r\n            date.setDate(date.getDate() - i);\r\n            const dayString = date.toDateString();\r\n            \r\n            const daySupplements = Object.keys(supplements).filter(key => \r\n                key.startsWith(dayString)\r\n            ).length;\r\n            \r\n            last7Days.push(daySupplements);\r\n        }\r\n        \r\n        const avgDaily = last7Days.reduce((sum, day) => sum + day, 0) / 7;\r\n        return Math.round((avgDaily / 5) * 100); // Assumiamo 5 supplementi target\r\n    }\r\n\r\n    // ===== UTILITY METHODS =====\r\n    clearAllData() {\r\n        Object.values(this.storageKeys).forEach(key => {\r\n            localStorage.removeItem(key);\r\n        });\r\n        \r\n        // Pulisci anche altri storage\r\n        localStorage.removeItem('completedMeals');\r\n        localStorage.removeItem('nutritionStreak');\r\n        localStorage.removeItem('supplementsTaken');\r\n        localStorage.removeItem('recoveryHistory');\r\n    }\r\n\r\n    exportData() {\r\n        return {\r\n            workouts: this.getWorkouts(),\r\n            measurements: this.getMeasurements(),\r\n            nutrition: this.getNutritionData(),\r\n            analytics: this.getAnalyticsData()\r\n        };\r\n    }\r\n}\r\n\r\n// Esporta istanza singleton\r\nexport const dataManager = new DataManager();\r\nexport default dataManager;","import React from 'react';\n\nconst MotivationalQuotes = () => {\n    const legendaryQuotes = [\n        {\n            day: 1, // Lunedì\n            quote: \"Champions aren't made in the gyms. Champions are made from something deep inside them: a desire, a dream, a vision.\",\n            author: \"Muhammad Ali\",\n            context: \"Petto + Bicipiti - Inizia la settimana con la forza del campione\"\n        },\n        {\n            day: 2, // Martedì  \n            quote: \"The cave you fear to enter holds the treasure you seek.\",\n            author: \"Arnold Schwarzenegger\",\n            context: \"Dorso + Tricipiti - Affronta la paura, trova la forza\"\n        },\n        {\n            day: 3, // Mercoledì\n            quote: \"Strength does not come from physical capacity. It comes from an indomitable will.\",\n            author: \"Mahatma Gandhi (adattato da Kobe Bryant)\",\n            context: \"Gambe Complete - La vera forza viene dalla mente\"\n        },\n        {\n            day: 4, // Giovedì\n            quote: \"Recovery is not a sign of weakness, it's a strategy of champions.\",\n            author: \"LeBron James\",\n            context: \"Recupero Attivo - Il riposo è parte della vittoria\"\n        },\n        {\n            day: 5, // Venerdì\n            quote: \"Excellence is not a skill, it's an attitude.\",\n            author: \"Ralph Marston (filosofia Michael Jordan)\",\n            context: \"Spalle + Core - L'eccellenza è una scelta quotidiana\"\n        },\n        {\n            day: 6, // Sabato\n            quote: \"The body achieves what the mind believes.\",\n            author: \"Napoleon Hill (ispirato da Serena Williams)\",\n            context: \"Posteriori + Conditioning - Credi e raggiungerai\"\n        },\n        {\n            day: 0, // Domenica\n            quote: \"Rest when you're weary. Refresh and renew yourself, your body, your mind, your spirit. Then get back to work.\",\n            author: \"Ralph Marston\",\n            context: \"Riposo Completo - Rigenera per dominare\"\n        }\n    ];\n\n    const additionalQuotes = [\n        {\n            quote: \"I don't measure a man's success by how high he climbs but how high he bounces when he hits bottom.\",\n            author: \"George S. Patton\",\n            context: \"Per i giorni difficili\"\n        },\n        {\n            quote: \"The will to win, the desire to succeed, the urge to reach your full potential... these are the keys that will unlock the door to personal excellence.\",\n            author: \"Confucio (filosofia Kobe Bryant)\",\n            context: \"Quando manca la motivazione\"\n        },\n        {\n            quote: \"Pain is temporary. Quitting lasts forever.\",\n            author: \"Lance Armstrong\",\n            context: \"Durante l'allenamento intenso\"\n        },\n        {\n            quote: \"You have power over your mind - not outside events. Realize this, and you will find strength.\",\n            author: \"Marcus Aurelius (filosofia Tom Brady)\",\n            context: \"Controllo mentale\"\n        },\n        {\n            quote: \"The brick walls are there for a reason. The brick walls are not there to keep us out. The brick walls are there to give us a chance to show how badly we want something.\",\n            author: \"Randy Pausch (mentalità Cristiano Ronaldo)\",\n            context: \"Superare gli ostacoli\"\n        }\n    ];\n\n    const getTodayQuote = () => {\n        const today = new Date().getDay(); // 0 = Domenica, 1 = Lunedì, etc.\n        return legendaryQuotes.find(q => q.day === today) || legendaryQuotes[0];\n    };\n\n    const getRandomAdditionalQuote = () => {\n        return additionalQuotes[Math.floor(Math.random() * additionalQuotes.length)];\n    };\n\n    return {\n        getTodayQuote,\n        getRandomAdditionalQuote,\n        legendaryQuotes,\n        additionalQuotes\n    };\n};\n\nexport default MotivationalQuotes;","import React from 'react';\n\nconst CalendarStreak = () => {\n    const [currentDate, setCurrentDate] = React.useState(new Date());\n    const [streakData, setStreakData] = React.useState({});\n    const [monthlyStats, setMonthlyStats] = React.useState({});\n\n    const loadStreakData = () => {\n        const saved = localStorage.getItem('streakData');\n        if (saved) {\n            setStreakData(JSON.parse(saved));\n        }\n    };\n\n    const saveStreakData = (data) => {\n        localStorage.setItem('streakData', JSON.stringify(data));\n        setStreakData(data);\n    };\n\n    const markWorkoutCompleted = (date, workoutType, exercises = []) => {\n        const dateKey = date.toISOString().split('T')[0];\n        const updated = {\n            ...streakData,\n            [dateKey]: {\n                completed: true,\n                workoutType,\n                exercises,\n                timestamp: new Date().toISOString()\n            }\n        };\n        saveStreakData(updated);\n        calculateMonthlyStats(updated);\n    };\n\n    const calculateMonthlyStats = (data = streakData) => {\n        const currentMonth = currentDate.getMonth();\n        const currentYear = currentDate.getFullYear();\n        \n        const monthlyWorkouts = Object.keys(data).filter(dateKey => {\n            const date = new Date(dateKey);\n            return date.getMonth() === currentMonth && \n                   date.getFullYear() === currentYear &&\n                   data[dateKey].completed;\n        }).length;\n\n        const currentStreak = calculateCurrentStreak(data);\n        const longestStreak = calculateLongestStreak(data);\n        const weeklyAverage = calculateWeeklyAverage(data);\n\n        setMonthlyStats({\n            monthlyWorkouts,\n            currentStreak,\n            longestStreak,\n            weeklyAverage,\n            lastUpdated: new Date()\n        });\n    };\n\n    const calculateCurrentStreak = (data) => {\n        const today = new Date();\n        let streak = 0;\n        let checkDate = new Date(today);\n\n        while (checkDate) {\n            const dateKey = checkDate.toISOString().split('T')[0];\n            if (data[dateKey] && data[dateKey].completed) {\n                streak++;\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else if (streak === 0 && checkDate.toDateString() === today.toDateString()) {\n                // Se oggi non è completato, controlla ieri\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else {\n                break;\n            }\n            \n            // Evita loop infiniti\n            if (streak > 365) break;\n        }\n        \n        return streak;\n    };\n\n    const calculateLongestStreak = (data) => {\n        let maxStreak = 0;\n        let currentStreak = 0;\n        \n        const sortedDates = Object.keys(data)\n            .filter(key => data[key].completed)\n            .sort();\n        \n        for (let i = 0; i < sortedDates.length; i++) {\n            if (i === 0) {\n                currentStreak = 1;\n            } else {\n                const prevDate = new Date(sortedDates[i - 1]);\n                const currDate = new Date(sortedDates[i]);\n                const daysDiff = (currDate - prevDate) / (1000 * 60 * 60 * 24);\n                \n                if (daysDiff === 1) {\n                    currentStreak++;\n                } else {\n                    maxStreak = Math.max(maxStreak, currentStreak);\n                    currentStreak = 1;\n                }\n            }\n        }\n        \n        return Math.max(maxStreak, currentStreak);\n    };\n\n    const calculateWeeklyAverage = (data) => {\n        const fourWeeksAgo = new Date();\n        fourWeeksAgo.setDate(fourWeeksAgo.getDate() - 28);\n        \n        const recentWorkouts = Object.keys(data).filter(dateKey => {\n            const date = new Date(dateKey);\n            return date >= fourWeeksAgo && data[dateKey].completed;\n        }).length;\n        \n        return (recentWorkouts / 4).toFixed(1);\n    };\n\n    const getDaysInMonth = (date) => {\n        const year = date.getFullYear();\n        const month = date.getMonth();\n        const firstDay = new Date(year, month, 1);\n        const lastDay = new Date(year, month + 1, 0);\n        const daysInMonth = lastDay.getDate();\n        const startingDayOfWeek = firstDay.getDay();\n\n        const days = [];\n        \n        // Aggiungi giorni vuoti per allineare il calendario\n        for (let i = 0; i < startingDayOfWeek; i++) {\n            days.push(null);\n        }\n        \n        // Aggiungi tutti i giorni del mese\n        for (let day = 1; day <= daysInMonth; day++) {\n            const currentDay = new Date(year, month, day);\n            const dateKey = currentDay.toISOString().split('T')[0];\n            days.push({\n                date: currentDay,\n                day,\n                isCompleted: streakData[dateKey] && streakData[dateKey].completed,\n                workoutType: streakData[dateKey] ? streakData[dateKey].workoutType : null,\n                isToday: currentDay.toDateString() === new Date().toDateString()\n            });\n        }\n        \n        return days;\n    };\n\n    const navigateMonth = (direction) => {\n        const newDate = new Date(currentDate);\n        newDate.setMonth(newDate.getMonth() + direction);\n        setCurrentDate(newDate);\n    };\n\n    const getStreakColor = (streak) => {\n        if (streak >= 30) return '#ff006e'; // Rosa intenso\n        if (streak >= 21) return '#ff9500'; // Arancione \n        if (streak >= 14) return '#00ff88'; // Verde\n        if (streak >= 7) return '#00ffff';  // Cyan\n        return '#ffffff'; // Bianco\n    };\n\n    const getWorkoutTypeEmoji = (type) => {\n        const emojiMap = {\n            'Petto + Bicipiti': '💪',\n            'Dorso + Tricipiti + Collo (A)': '🏋️',\n            'Gambe Complete': '🦵',\n            'Recupero Attivo': '🧘',\n            'Spalle Complete + Collo (B)': '💫',\n            'Posteriori + Conditioning': '🔥',\n            'Riposo Completo': '😴'\n        };\n        return emojiMap[type] || '💪';\n    };\n\n    React.useEffect(() => {\n        loadStreakData();\n    }, []);\n\n    React.useEffect(() => {\n        calculateMonthlyStats();\n    }, [streakData, currentDate]);\n\n    const monthNames = [\n        'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n        'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n    ];\n\n    const dayNames = ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab'];\n\n    return {\n        currentDate,\n        streakData,\n        monthlyStats,\n        markWorkoutCompleted,\n        getDaysInMonth,\n        navigateMonth,\n        getStreakColor,\n        getWorkoutTypeEmoji,\n        monthNames,\n        dayNames,\n        calculateCurrentStreak: () => calculateCurrentStreak(streakData)\n    };\n};\n\nexport default CalendarStreak;","import React from 'react';\n\nconst ExerciseTracker = () => {\n    const [exerciseData, setExerciseData] = React.useState({});\n    const [sessionProgress, setSessionProgress] = React.useState({});\n    const [personalRecords, setPersonalRecords] = React.useState({});\n\n    const loadExerciseData = () => {\n        const saved = localStorage.getItem('exerciseData');\n        if (saved) {\n            setExerciseData(JSON.parse(saved));\n        }\n        \n        const savedPR = localStorage.getItem('personalRecords');\n        if (savedPR) {\n            setPersonalRecords(JSON.parse(savedPR));\n        }\n    };\n\n    const saveExerciseData = (data) => {\n        localStorage.setItem('exerciseData', JSON.stringify(data));\n        setExerciseData(data);\n    };\n\n    const savePersonalRecords = (data) => {\n        localStorage.setItem('personalRecords', JSON.stringify(data));\n        setPersonalRecords(data);\n    };\n\n    const markExerciseCompleted = (exerciseName, sets, reps, weight, notes = '', rir = null) => {\n        const today = new Date().toISOString().split('T')[0];\n        const exerciseId = `${exerciseName}_${today}`;\n        \n        const exerciseEntry = {\n            id: exerciseId,\n            exerciseName,\n            date: today,\n            sets: parseInt(sets),\n            reps: parseInt(reps),\n            weight: parseFloat(weight),\n            notes,\n            rir,\n            timestamp: new Date().toISOString(),\n            completed: true\n        };\n\n        const updated = {\n            ...exerciseData,\n            [exerciseId]: exerciseEntry\n        };\n        \n        saveExerciseData(updated);\n        \n        // Aggiorna record personali se necessario\n        updatePersonalRecord(exerciseName, weight, reps);\n        \n        // Aggiorna progresso sessione\n        updateSessionProgress(exerciseName);\n        \n        return exerciseEntry;\n    };\n\n    const updatePersonalRecord = (exerciseName, weight, reps) => {\n        const oneRepMax = calculateOneRepMax(weight, reps);\n        const currentPR = personalRecords[exerciseName] || { weight: 0, reps: 0, oneRepMax: 0, date: null };\n        \n        if (oneRepMax > currentPR.oneRepMax || \n            (weight > currentPR.weight && reps >= currentPR.reps)) {\n            \n            const updatedPR = {\n                ...personalRecords,\n                [exerciseName]: {\n                    weight: parseFloat(weight),\n                    reps: parseInt(reps),\n                    oneRepMax,\n                    date: new Date().toISOString(),\n                    previousRecord: currentPR.oneRepMax\n                }\n            };\n            \n            savePersonalRecords(updatedPR);\n            \n            // Notifica nuovo record\n            return true;\n        }\n        \n        return false;\n    };\n\n    const calculateOneRepMax = (weight, reps) => {\n        // Formula Epley: 1RM = w * (1 + r/30)\n        return Math.round(weight * (1 + reps / 30));\n    };\n\n    const updateSessionProgress = (exerciseName) => {\n        const today = new Date().toISOString().split('T')[0];\n        const todayExercises = Object.values(exerciseData).filter(ex => \n            ex.date === today && ex.completed\n        );\n        \n        setSessionProgress(prev => ({\n            ...prev,\n            [exerciseName]: true,\n            totalCompleted: todayExercises.length + 1\n        }));\n    };\n\n    const getExerciseHistory = (exerciseName, limit = 10) => {\n        return Object.values(exerciseData)\n            .filter(ex => ex.exerciseName === exerciseName)\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .slice(0, limit);\n    };\n\n    const getTodayProgress = (workoutExercises) => {\n        const today = new Date().toISOString().split('T')[0];\n        const completedToday = Object.values(exerciseData).filter(ex => \n            ex.date === today && ex.completed\n        );\n        \n        const completed = completedToday.length;\n        const total = workoutExercises ? workoutExercises.length : 0;\n        const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;\n        \n        return {\n            completed,\n            total,\n            percentage,\n            remaining: Math.max(0, total - completed)\n        };\n    };\n\n    const getWeeklyStats = () => {\n        const oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n        \n        const weeklyExercises = Object.values(exerciseData).filter(ex => \n            new Date(ex.date) >= oneWeekAgo && ex.completed\n        );\n        \n        const totalSets = weeklyExercises.reduce((sum, ex) => sum + ex.sets, 0);\n        const totalReps = weeklyExercises.reduce((sum, ex) => sum + (ex.sets * ex.reps), 0);\n        const totalVolume = weeklyExercises.reduce((sum, ex) => sum + (ex.weight * ex.sets * ex.reps), 0);\n        const uniqueExercises = new Set(weeklyExercises.map(ex => ex.exerciseName)).size;\n        \n        return {\n            sessions: weeklyExercises.length,\n            totalSets,\n            totalReps,\n            totalVolume: Math.round(totalVolume),\n            uniqueExercises,\n            averageWeight: weeklyExercises.length > 0 ? \n                Math.round(weeklyExercises.reduce((sum, ex) => sum + ex.weight, 0) / weeklyExercises.length) : 0\n        };\n    };\n\n    const getMonthlyProgress = () => {\n        const oneMonthAgo = new Date();\n        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\n        \n        const monthlyExercises = Object.values(exerciseData).filter(ex => \n            new Date(ex.date) >= oneMonthAgo && ex.completed\n        );\n        \n        const workoutDays = new Set(monthlyExercises.map(ex => ex.date)).size;\n        const totalVolume = monthlyExercises.reduce((sum, ex) => \n            sum + (ex.weight * ex.sets * ex.reps), 0\n        );\n        \n        return {\n            workoutDays,\n            totalExercises: monthlyExercises.length,\n            totalVolume: Math.round(totalVolume),\n            averageVolume: workoutDays > 0 ? Math.round(totalVolume / workoutDays) : 0\n        };\n    };\n\n    const isExerciseCompletedToday = (exerciseName) => {\n        const today = new Date().toISOString().split('T')[0];\n        return Object.values(exerciseData).some(ex => \n            ex.exerciseName === exerciseName && \n            ex.date === today && \n            ex.completed\n        );\n    };\n\n    const getExerciseProgressColor = (exerciseName) => {\n        if (isExerciseCompletedToday(exerciseName)) {\n            return '#00ff88'; // Verde completato\n        }\n        \n        const history = getExerciseHistory(exerciseName, 3);\n        if (history.length === 0) {\n            return '#ffffff'; // Bianco nuovo esercizio\n        }\n        \n        // Analisi progressione\n        const lastWeight = history[0]?.weight || 0;\n        const avgWeight = history.reduce((sum, ex) => sum + ex.weight, 0) / history.length;\n        \n        if (lastWeight > avgWeight * 1.05) {\n            return '#ff9500'; // Arancione in progressione\n        } else if (lastWeight < avgWeight * 0.95) {\n            return '#ff006e'; // Rosa in calo\n        }\n        \n        return '#00ffff'; // Cyan stabile\n    };\n\n    React.useEffect(() => {\n        loadExerciseData();\n    }, []);\n\n    return {\n        exerciseData,\n        sessionProgress,\n        personalRecords,\n        markExerciseCompleted,\n        getExerciseHistory,\n        getTodayProgress,\n        getWeeklyStats,\n        getMonthlyProgress,\n        isExerciseCompletedToday,\n        getExerciseProgressColor,\n        updatePersonalRecord,\n        calculateOneRepMax\n    };\n};\n\nexport default ExerciseTracker;","import React from 'react';\n\nconst SupplementStack = () => {\n    const [supplementSchedule, setSupplementSchedule] = React.useState({});\n    const [takenToday, setTakenToday] = React.useState({});\n\n    const evidenceBasedSupplements = {\n        creatine: {\n            name: 'Creatina Monoidrato',\n            dosage: '3-5g',\n            timing: 'Post-workout o qualsiasi momento',\n            evidence: 'A+ (Oltre 500 studi)',\n            benefits: ['↑ Forza 5-15%', '↑ Potenza esplosiva', '↑ Volume allenamento', '↑ Massa muscolare'],\n            mechanism: 'Rigenera ATP per contrazioni muscolari ad alta intensità',\n            notes: 'Loading non necessario. Consistenza > timing. Funziona meglio con carboidrati.',\n            color: '#00ff88',\n            icon: '💪'\n        },\n        citrulline: {\n            name: 'L-Citrullina Malato',\n            dosage: '6-8g',\n            timing: '30-45min pre-workout',\n            evidence: 'A (Multipli RCT)',\n            benefits: ['↑ Pump muscolare', '↑ Resistenza', '↓ DOMS', '↑ Ossido nitrico'],\n            mechanism: 'Precursore arginina → NO → vasodilatazione',\n            notes: 'Più efficace della L-Arginina. Sinergia con caffeina.',\n            color: '#ff9500',\n            icon: '🔥'\n        },\n        betaAlanine: {\n            name: 'Beta-Alanina',\n            dosage: '3-5g',\n            timing: 'Divisa in 2-3 dosi giornaliere',\n            evidence: 'A (Evidenza consolidata)',\n            benefits: ['↑ Resistenza muscolare', '↓ Fatica 1-4 min sforzo', '↑ Volume alto-rep'],\n            mechanism: 'Aumenta carnosina muscolare → buffer acido lattico',\n            notes: 'Loading 2-4 settimane. Possibile parestesia (innocua).',\n            color: '#00ffff',\n            icon: '⚡'\n        },\n        omega3: {\n            name: 'Omega-3 EPA/DHA',\n            dosage: '2-3g EPA+DHA',\n            timing: 'Con pasti contenenti grassi',\n            evidence: 'A+ (Migliaia di studi)',\n            benefits: ['↓ Infiammazione', '↑ Recupero', '↑ Sintesi proteica', '↑ Salute cardiovascolare'],\n            mechanism: 'Modulazione cascata infiammatoria e membrane cellulari',\n            notes: 'Ratio EPA:DHA 2:1 ottimale. Qualità > quantità.',\n            color: '#0099ff',\n            icon: '🐟'\n        },\n        caffeine: {\n            name: 'Caffeina',\n            dosage: '200-400mg',\n            timing: '30-45min pre-workout',\n            evidence: 'A+ (Gold standard)',\n            benefits: ['↑ Focus', '↑ Energia', '↑ Performance', '↑ Metabolismo grassi'],\n            mechanism: 'Antagonista adenosina → vigilanza + mobilizzazione grassi',\n            notes: 'Tolleranza sviluppa rapidamente. Ciclare 1-2 settimane ogni mese.',\n            color: '#8B4513',\n            icon: '☕'\n        },\n        vitaminD: {\n            name: 'Vitamina D3',\n            dosage: '2000-4000 IU',\n            timing: 'Con pasto contenente grassi',\n            evidence: 'A (Critico se carente)',\n            benefits: ['↑ Testosterone', '↑ Forza', '↑ Salute ossea', '↑ Sistema immunitario'],\n            mechanism: 'Regolazione ormonale e assorbimento calcio',\n            notes: 'Test ematico raccomandato. Target: 30-50 ng/mL.',\n            color: '#FFD700',\n            icon: '☀️'\n        }\n    };\n\n    const removedSupplements = {\n        hmb: 'Scarsa evidenza per atleti allenati. Solo utile per anziani/principianti.',\n        forskolin: 'Studi inconsistenti. Nessun beneficio provato su composizione corporea.',\n        rAla: 'Evidenza limitata. Costo-beneficio sfavorevole vs omega-3.',\n        bcaa: 'Inutili se assumi proteine complete. Whey protein superiore.',\n        glutamine: 'Non ergogenica in soggetti sani. Solo utile in immunodepressione.'\n    };\n\n    const getOptimalTiming = (currentTime) => {\n        const hour = currentTime.getHours();\n        const recommendations = [];\n\n        // Mattino (6-10)\n        if (hour >= 6 && hour <= 10) {\n            recommendations.push({\n                supplement: 'vitaminD',\n                reason: 'Assorbimento ottimale con prima colazione'\n            });\n            recommendations.push({\n                supplement: 'omega3',\n                reason: 'Con grassi della colazione per biodisponibilità'\n            });\n        }\n\n        // Pre-workout (dipende dall'orario allenamento)\n        const workoutHour = 18; // Assumiamo allenamento serale\n        if (hour === workoutHour - 1) {\n            recommendations.push({\n                supplement: 'caffeine',\n                reason: '30-45min prima allenamento per picco energetico'\n            });\n            recommendations.push({\n                supplement: 'citrulline',\n                reason: 'Pre-workout per pump e resistenza'\n            });\n        }\n\n        // Post-workout\n        if (hour === workoutHour + 1) {\n            recommendations.push({\n                supplement: 'creatine',\n                reason: 'Post-workout con carboidrati per uptake'\n            });\n        }\n\n        // Sera\n        if (hour >= 20) {\n            recommendations.push({\n                supplement: 'betaAlanine',\n                reason: 'Loading serale per evitare parestesia diurna'\n            });\n        }\n\n        return recommendations;\n    };\n\n    const markSupplementTaken = (supplementKey, dosage, timing) => {\n        const today = new Date().toISOString().split('T')[0];\n        const entryKey = `${supplementKey}_${today}`;\n\n        const taken = {\n            ...takenToday,\n            [entryKey]: {\n                supplement: supplementKey,\n                dosage,\n                timing,\n                timestamp: new Date().toISOString(),\n                taken: true\n            }\n        };\n\n        setTakenToday(taken);\n        localStorage.setItem('supplementsTakenToday', JSON.stringify(taken));\n\n        // Salva nello storico\n        const history = JSON.parse(localStorage.getItem('supplementsHistory') || '{}');\n        history[entryKey] = taken[entryKey];\n        localStorage.setItem('supplementsHistory', JSON.stringify(history));\n    };\n\n    const isSupplementTakenToday = (supplementKey) => {\n        const today = new Date().toISOString().split('T')[0];\n        const entryKey = `${supplementKey}_${today}`;\n        return takenToday[entryKey] && takenToday[entryKey].taken;\n    };\n\n    const getSupplementProgress = () => {\n        const totalSupplements = Object.keys(evidenceBasedSupplements).length;\n        const takenCount = Object.keys(evidenceBasedSupplements).filter(key => \n            isSupplementTakenToday(key)\n        ).length;\n        \n        return {\n            taken: takenCount,\n            total: totalSupplements,\n            percentage: Math.round((takenCount / totalSupplements) * 100)\n        };\n    };\n\n    const getWeeklySupplementStats = () => {\n        const history = JSON.parse(localStorage.getItem('supplementsHistory') || '{}');\n        const oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n        const weeklyEntries = Object.values(history).filter(entry => \n            new Date(entry.timestamp) >= oneWeekAgo\n        );\n\n        const consistency = {};\n        Object.keys(evidenceBasedSupplements).forEach(key => {\n            const supplementEntries = weeklyEntries.filter(entry => entry.supplement === key);\n            consistency[key] = {\n                taken: supplementEntries.length,\n                percentage: Math.round((supplementEntries.length / 7) * 100)\n            };\n        });\n\n        return consistency;\n    };\n\n    const createSupplementPlan = (workoutSchedule, goals) => {\n        const plan = {\n            core: ['creatine', 'omega3', 'vitaminD'], // Sempre consigliati\n            performance: ['caffeine', 'citrulline'], // Per performance\n            endurance: ['betaAlanine'], // Per resistenza\n            timing: {\n                morning: ['vitaminD', 'omega3'],\n                preWorkout: ['caffeine', 'citrulline'],\n                postWorkout: ['creatine'],\n                evening: ['betaAlanine']\n            }\n        };\n\n        return plan;\n    };\n\n    const loadTodaysSupplements = () => {\n        const today = new Date().toISOString().split('T')[0];\n        const saved = localStorage.getItem('supplementsTakenToday');\n        if (saved) {\n            const data = JSON.parse(saved);\n            // Filtra solo quelli di oggi\n            const todayData = {};\n            Object.keys(data).forEach(key => {\n                if (key.includes(today)) {\n                    todayData[key] = data[key];\n                }\n            });\n            setTakenToday(todayData);\n        }\n    };\n\n    React.useEffect(() => {\n        loadTodaysSupplements();\n    }, []);\n\n    return {\n        evidenceBasedSupplements,\n        removedSupplements,\n        takenToday,\n        markSupplementTaken,\n        isSupplementTakenToday,\n        getSupplementProgress,\n        getWeeklySupplementStats,\n        getOptimalTiming,\n        createSupplementPlan\n    };\n};\n\nexport default SupplementStack;","import React from 'react';\n\nconst RecoveryProtocol = () => {\n    const [recoveryLog, setRecoveryLog] = React.useState({});\n    const [todayRecovery, setTodayRecovery] = React.useState({});\n\n    const thermoTherapyProtocols = {\n        sauna: {\n            name: 'Sauna Finlandese',\n            temperature: '80-100°C',\n            humidity: '10-20%',\n            duration: '15-20 min',\n            timing: 'Immediatamente post-workout',\n            mechanism: 'Heat Shock Proteins → Anabolismo + Cardiovascolare',\n            benefits: [\n                '↑ Growth Hormone 24x',\n                '↑ Heat Shock Proteins (riparazione)',\n                '↑ Vasodilatazione (nutrienti muscolari)', \n                '↑ Eliminazione metaboliti'\n            ],\n            protocol: [\n                '5-10 min iniziali per adattamento',\n                '2-3 sessioni da 15-20 min',\n                'Pause 2-3 min aria fresca tra sessioni',\n                'Idratazione: 500ml acqua + elettroliti'\n            ],\n            precautions: [\n                'Mai subito dopo pasti abbondanti',\n                'Stop se nausea/vertigini/palpitazioni',\n                'Controindicato: ipertensione non controllata'\n            ],\n            scientificEvidence: 'A+ (Rhonda Patrick, Joyner studies)',\n            color: '#ff6b35',\n            icon: '🔥'\n        },\n        steamRoom: {\n            name: 'Bagno Turco',\n            temperature: '40-50°C',\n            humidity: '90-100%',\n            duration: '10-15 min',\n            timing: 'Giorni rest per mobilità/relax',\n            mechanism: 'Umidità → Idratazione tessuti + Mobilità articolare',\n            benefits: [\n                '↑ Mobilità articolare',\n                '↑ Idratazione tessuto connettivo',\n                '↓ Rigidità muscolare',\n                '↑ Eliminazione tossine via pelle'\n            ],\n            protocol: [\n                '10-15 min sessione unica',\n                'Respirazione profonda (vapori benefici)',\n                'Stretching dolce durante sessione',\n                'Doccia fredda finale (contrasto)'\n            ],\n            precautions: [\n                'Attenzione claustrofobia',\n                'Igiene: sempre su asciugamano',\n                'Idratazione pre/post obbligatoria'\n            ],\n            scientificEvidence: 'B+ (Benefici mobilità documentati)',\n            color: '#4ecdc4',\n            icon: '💨'\n        },\n        iceBath: {\n            name: 'Crioterapia (Ice Bath)',\n            temperature: '8-12°C',\n            humidity: 'N/A',\n            duration: '10-15 min',\n            timing: 'SOLO ≥4h post-workout (mai prima)',\n            mechanism: 'Vasocostrizione → Recovery neurologico + Anti-infiammatorio',\n            benefits: [\n                '↓ Infiammazione acuta',\n                '↑ Recovery Sistema Nervoso',\n                '↑ Resilienza mentale',\n                '↓ Percezione fatica'\n            ],\n            protocol: [\n                'Graduale: inizia 15°C → 10°C → 8°C',\n                '2-3 min prime volte → 10-15 min target',\n                'Respirazione controllata (Wim Hof)',\n                'Riscaldamento graduale post-immersione'\n            ],\n            precautions: [\n                'MAI nelle 4h post-workout (blocca adattamenti)',\n                'Controindicato: problemi cardiaci',\n                'Supervisione iniziale raccomandata'\n            ],\n            scientificEvidence: 'A- (Timing critico per efficacia)',\n            color: '#74b9ff',\n            icon: '🧊'\n        }\n    };\n\n    const contrastTherapy = {\n        name: 'Terapia Contrasto (Hot/Cold)',\n        protocol: [\n            'Sauna 15 min (80-90°C)',\n            'Doccia fredda 1 min (15°C)',\n            'Ripeti ciclo 3-4 volte',\n            'Termina sempre con freddo'\n        ],\n        benefits: [\n            'Pump vascolare (vasodilatazione/costrizione)',\n            'Massimo stimolo circolatorio',\n            'Recovery accelerata',\n            'Resilienza termica'\n        ],\n        timing: 'Post-workout giorni intensi',\n        scientificEvidence: 'A (Scandinavian protocols)',\n        color: '#fd79a8',\n        icon: '🌡️'\n    };\n\n    const optimalTiming = {\n        postWorkout: {\n            immediate: ['sauna'],\n            after2h: ['steamRoom', 'contrastTherapy'],\n            after4h: ['iceBath'],\n            nextMorning: ['sauna leggera', 'steamRoom']\n        },\n        restDays: {\n            morning: ['steamRoom', 'sauna leggera'],\n            evening: ['iceBath', 'contrastTherapy']\n        },\n        competition: {\n            before: 'Evitare ice bath 48h prima',\n            after: 'Full protocol per recovery rapido'\n        }\n    };\n\n    const biohacking = {\n        breathwork: {\n            name: 'Wim Hof Method',\n            protocol: '30 respiri profondi → apnea → ripeti 3 cicli',\n            benefits: 'Adattamento stress termico + controllo SNA',\n            timing: 'Pre ice bath o standalone'\n        },\n        supplements: {\n            preSauna: 'Magnesio 400mg (vasodilatazione)',\n            preIceBath: 'L-Theanina 200mg (calma mentale)',\n            postBoth: 'Elettroliti + Vitamina C'\n        },\n        monitoring: {\n            heartRate: 'HRV pre/post per valutare recovery',\n            bodyTemp: 'Termometro infrarossi per tracking',\n            subjective: 'Scale 1-10 per energia/dolori'\n        }\n    };\n\n    const markRecoverySession = (therapy, duration, temperature, notes, effectiveness) => {\n        const today = new Date().toISOString().split('T')[0];\n        const sessionId = `${therapy}_${Date.now()}`;\n\n        const session = {\n            id: sessionId,\n            date: today,\n            therapy,\n            duration: parseInt(duration),\n            temperature: parseFloat(temperature),\n            notes,\n            effectiveness: parseInt(effectiveness),\n            timestamp: new Date().toISOString()\n        };\n\n        const updatedLog = {\n            ...recoveryLog,\n            [sessionId]: session\n        };\n\n        setRecoveryLog(updatedLog);\n        localStorage.setItem('recoveryLog', JSON.stringify(updatedLog));\n\n        // Aggiorna sessioni di oggi\n        const todaySessions = Object.values(updatedLog).filter(s => s.date === today);\n        setTodayRecovery({\n            ...todayRecovery,\n            sessions: todaySessions,\n            totalTime: todaySessions.reduce((sum, s) => sum + s.duration, 0)\n        });\n    };\n\n    const getRecoveryRecommendation = (lastWorkout, workoutIntensity, stressLevel) => {\n        const recommendations = [];\n\n        // Basato su timing ultimo workout\n        const hoursSinceWorkout = lastWorkout ? \n            (new Date() - new Date(lastWorkout)) / (1000 * 60 * 60) : 24;\n\n        if (hoursSinceWorkout < 2) {\n            recommendations.push({\n                therapy: 'sauna',\n                priority: 'Alta',\n                reason: 'Finestra anabolica ottimale per heat shock proteins'\n            });\n        } else if (hoursSinceWorkout >= 4) {\n            recommendations.push({\n                therapy: 'iceBath',\n                priority: 'Media',\n                reason: 'Recovery Sistema Nervoso senza interferire adattamenti'\n            });\n        }\n\n        // Basato su intensità workout\n        if (workoutIntensity >= 8) {\n            recommendations.push({\n                therapy: 'contrastTherapy',\n                priority: 'Alta',\n                reason: 'Recovery accelerata per sessioni ad alta intensità'\n            });\n        }\n\n        // Basato su stress/recovery\n        if (stressLevel >= 7) {\n            recommendations.push({\n                therapy: 'steamRoom',\n                priority: 'Media',\n                reason: 'Relax parasimpatico per gestione stress'\n            });\n        }\n\n        return recommendations;\n    };\n\n    const getRecoveryStats = () => {\n        const last7Days = Object.values(recoveryLog).filter(session => {\n            const sessionDate = new Date(session.date);\n            const weekAgo = new Date();\n            weekAgo.setDate(weekAgo.getDate() - 7);\n            return sessionDate >= weekAgo;\n        });\n\n        const stats = {\n            totalSessions: last7Days.length,\n            totalTime: last7Days.reduce((sum, s) => sum + s.duration, 0),\n            averageEffectiveness: last7Days.length > 0 ? \n                Math.round(last7Days.reduce((sum, s) => sum + s.effectiveness, 0) / last7Days.length) : 0,\n            therapyBreakdown: {}\n        };\n\n        // Breakdown per terapia\n        Object.keys(thermoTherapyProtocols).forEach(therapy => {\n            const sessions = last7Days.filter(s => s.therapy === therapy);\n            stats.therapyBreakdown[therapy] = {\n                sessions: sessions.length,\n                time: sessions.reduce((sum, s) => sum + s.duration, 0)\n            };\n        });\n\n        return stats;\n    };\n\n    const loadRecoveryData = () => {\n        const saved = localStorage.getItem('recoveryLog');\n        if (saved) {\n            setRecoveryLog(JSON.parse(saved));\n        }\n\n        // Carica sessioni di oggi\n        const today = new Date().toISOString().split('T')[0];\n        const todaySessions = Object.values(JSON.parse(saved || '{}')).filter(s => s.date === today);\n        setTodayRecovery({\n            sessions: todaySessions,\n            totalTime: todaySessions.reduce((sum, s) => sum + s.duration, 0)\n        });\n    };\n\n    React.useEffect(() => {\n        loadRecoveryData();\n    }, []);\n\n    return {\n        thermoTherapyProtocols,\n        contrastTherapy,\n        optimalTiming,\n        biohacking,\n        recoveryLog,\n        todayRecovery,\n        markRecoverySession,\n        getRecoveryRecommendation,\n        getRecoveryStats\n    };\n};\n\nexport default RecoveryProtocol;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MotivationalQuotes from './MotivationalQuotes';\r\nimport CalendarStreak from './CalendarStreak';\r\nimport ExerciseTracker from './ExerciseTracker';\r\nimport SupplementStack from './SupplementStack';\r\nimport RecoveryProtocol from './RecoveryProtocol';\r\n\r\nconst Dashboard = () => {\r\n    const quotesHook = MotivationalQuotes();\r\n    const calendarHook = CalendarStreak();\r\n    const exerciseHook = ExerciseTracker();\r\n    const supplementsHook = SupplementStack();\r\n    const recoveryHook = RecoveryProtocol();\r\n    \r\n    const [dashboardData, setDashboardData] = React.useState({\r\n        currentWeight: 0,\r\n        muscleGain: 0,\r\n        workoutSessions: 0,\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        daysActive: 0,\r\n        lastWorkout: null,\r\n        currentStreak: 0\r\n    });\r\n    \r\n    const [todayWorkout, setTodayWorkout] = React.useState(null);\r\n    const [goals12Week, setGoals12Week] = React.useState({\r\n        startWeight: 75,\r\n        targetWeight: 80,\r\n        targetBench: 100,\r\n        targetSquat: 140,\r\n        targetDeadlift: 160,\r\n        startDate: new Date(),\r\n        weeksCompleted: 0\r\n    });\r\n    \r\n    const getTodayWorkout = () => {\r\n        const workoutPlan = {\r\n            1: { name: 'Petto + Bicipiti', exercises: 7, focus: 'Upper Power' },\r\n            2: { name: 'Dorso + Tricipiti + Collo (A)', exercises: 10, focus: 'Pull Strength' },\r\n            3: { name: 'Gambe Complete', exercises: 7, focus: 'Lower Power' },\r\n            4: { name: 'Recupero Attivo', exercises: 3, focus: 'Recovery' },\r\n            5: { name: 'Spalle Complete + Collo (B)', exercises: 13, focus: 'Delts 3D' },\r\n            6: { name: 'Posteriori + Conditioning', exercises: 7, focus: 'Athletic' },\r\n            0: { name: 'Riposo Completo', exercises: 4, focus: 'Rest' }\r\n        };\r\n        \r\n        const today = new Date().getDay();\r\n        return workoutPlan[today];\r\n    };\r\n    \r\n    const loadDashboardData = () => {\r\n        const progressData = JSON.parse(localStorage.getItem('progressData') || '[]');\r\n        const timeStats = JSON.parse(localStorage.getItem('timeStats') || '{}');\r\n        const workoutSessions = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        const goals = JSON.parse(localStorage.getItem('goals12Week') || '{}');\r\n        \r\n        const latestProgress = progressData[0];\r\n        const firstProgress = progressData[progressData.length - 1];\r\n        \r\n        const today = new Date();\r\n        const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n        const recentSessions = workoutSessions.filter(session => \r\n            new Date(session.date) >= oneWeekAgo\r\n        );\r\n        \r\n        setDashboardData({\r\n            currentWeight: latestProgress?.weight || goals.startWeight || 75,\r\n            muscleGain: latestProgress && firstProgress ? \r\n                (parseFloat(latestProgress.muscleMass) - parseFloat(firstProgress.muscleMass)) : 0,\r\n            workoutSessions: workoutSessions.length,\r\n            totalWorkoutTime: timeStats.totalWorkoutTime || 0,\r\n            weeklyTime: timeStats.weeklyTime || 0,\r\n            daysActive: new Set(workoutSessions.map(s => s.date.split('T')[0])).size,\r\n            lastWorkout: workoutSessions[0]?.date || null,\r\n            currentStreak: calendarHook.calculateCurrentStreak()\r\n        });\r\n        \r\n        setTodayWorkout(getTodayWorkout());\r\n        \r\n        if (goals.startDate) {\r\n            const weeksCompleted = Math.floor((today - new Date(goals.startDate)) / (7 * 24 * 60 * 60 * 1000));\r\n            setGoals12Week({...goals, weeksCompleted});\r\n        }\r\n    };\r\n    \r\n    const calculateStreak = (sessions) => {\r\n        if (sessions.length === 0) return 0;\r\n        \r\n        const today = new Date();\r\n        let streak = 0;\r\n        const sortedDates = [...new Set(sessions.map(s => s.date.split('T')[0]))].sort().reverse();\r\n        \r\n        for (let i = 0; i < sortedDates.length; i++) {\r\n            const sessionDate = new Date(sortedDates[i]);\r\n            const daysDiff = Math.floor((today - sessionDate) / (1000 * 60 * 60 * 24));\r\n            \r\n            if (daysDiff <= i + 1) {\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return streak;\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n    \r\n    const todayQuote = quotesHook.getTodayQuote();\r\n    const todayProgress = exerciseHook.getTodayProgress(todayWorkout?.exercises);\r\n    const supplementProgress = supplementsHook.getSupplementProgress();\r\n    const weeklyStats = exerciseHook.getWeeklyStats();\r\n    const recoveryStats = recoveryHook.getRecoveryStats();\r\n    \r\n    React.useEffect(() => {\r\n        loadDashboardData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <header className=\"dashboard-header\">\r\n                <h1>🏆 FISICO DELLA MADONNA</h1>\r\n                <p className=\"tagline\">\"L'eccellenza non è un atto, ma un'abitudine\" - Aristotele</p>\r\n            </header>\r\n\r\n            {/* MOTIVATIONAL QUOTE OF THE DAY */}\r\n            <div className=\"daily-motivation\">\r\n                <div className=\"quote-card\">\r\n                    <h3>💭 Frase del Giorno</h3>\r\n                    <blockquote>\r\n                        \"{todayQuote.quote}\"\r\n                        <footer>— {todayQuote.author}</footer>\r\n                    </blockquote>\r\n                    <p className=\"quote-context\">{todayQuote.context}</p>\r\n                </div>\r\n            </div>\r\n\r\n            {/* TODAY'S WORKOUT PREVIEW */}\r\n            <div className=\"today-workout-preview\">\r\n                <h3>🎯 Oggi: {todayWorkout?.name}</h3>\r\n                <div className=\"workout-quick-stats\">\r\n                    <span className=\"workout-focus\">{todayWorkout?.focus}</span>\r\n                    <span className=\"workout-exercises\">{todayWorkout?.exercises} esercizi</span>\r\n                    <span className={`workout-progress ${todayProgress.percentage === 100 ? 'completed' : ''}`}>\r\n                        {todayProgress.completed}/{todayProgress.total} completati ({todayProgress.percentage}%)\r\n                    </span>\r\n                </div>\r\n                <div className=\"progress-bar\">\r\n                    <div \r\n                        className=\"progress-fill\" \r\n                        style={{width: `${todayProgress.percentage}%`}}\r\n                    ></div>\r\n                </div>\r\n                <Link to=\"/workout\" className=\"start-workout-btn\">\r\n                    {todayProgress.percentage === 0 ? '🚀 INIZIA WORKOUT' : \r\n                     todayProgress.percentage === 100 ? '✅ COMPLETATO' : \r\n                     '▶️ CONTINUA WORKOUT'}\r\n                </Link>\r\n            </div>\r\n\r\n            {/* STREAK CALENDAR */}\r\n            <div className=\"streak-calendar-mini\">\r\n                <h3>📅 Calendario Streak</h3>\r\n                <div className=\"calendar-grid\">\r\n                    {calendarHook.getDaysInMonth(calendarHook.currentDate).slice(-7).map((day, index) => (\r\n                        <div key={index} className={`calendar-day-mini ${\r\n                            day?.isCompleted ? 'completed' : day?.isToday ? 'today' : ''\r\n                        }`}>\r\n                            <span className=\"day-number\">{day?.day || ''}</span>\r\n                            {day?.isCompleted && <span className=\"workout-emoji\">{calendarHook.getWorkoutTypeEmoji(day.workoutType)}</span>}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"streak-stats\">\r\n                    <span className=\"current-streak\" style={{color: calendarHook.getStreakColor(dashboardData.currentStreak)}}>\r\n                        🔥 {dashboardData.currentStreak} giorni\r\n                    </span>\r\n                    <span className=\"monthly-total\">\r\n                        📊 {calendarHook.monthlyStats.monthlyWorkouts || 0} questo mese\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PERFORMANCE DASHBOARD */}\r\n            <div className=\"performance-dashboard\">\r\n                <h3>⚡ Performance Overview</h3>\r\n                <div className=\"perf-grid\">\r\n                    <div className=\"perf-card strength\">\r\n                        <h4>💪 Forza</h4>\r\n                        <p className=\"perf-value\">{weeklyStats.totalVolume || 0}kg</p>\r\n                        <p className=\"perf-label\">Volume Settimanale</p>\r\n                    </div>\r\n                    <div className=\"perf-card volume\">\r\n                        <h4>🏋️ Volume</h4>\r\n                        <p className=\"perf-value\">{weeklyStats.totalSets || 0}</p>\r\n                        <p className=\"perf-label\">Serie Settimanali</p>\r\n                    </div>\r\n                    <div className=\"perf-card consistency\">\r\n                        <h4>🎯 Consistenza</h4>\r\n                        <p className=\"perf-value\">{Math.round(((dashboardData.currentStreak / 30) * 100))}%</p>\r\n                        <p className=\"perf-label\">Streak Rate</p>\r\n                    </div>\r\n                    <div className=\"perf-card supplements\">\r\n                        <h4>💊 Stack</h4>\r\n                        <p className=\"perf-value\">{supplementProgress.percentage}%</p>\r\n                        <p className=\"perf-label\">Integratori Oggi</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* 12-WEEK GOALS PROGRESS */}\r\n            <div className=\"goals-progress\">\r\n                <h3>🎯 Obiettivi 12 Settimane</h3>\r\n                <div className=\"goals-grid\">\r\n                    <div className=\"goal-item\">\r\n                        <h4>Peso Target</h4>\r\n                        <div className=\"goal-bar\">\r\n                            <div className=\"goal-progress\" style={{\r\n                                width: `${Math.min(100, ((dashboardData.currentWeight - goals12Week.startWeight) / (goals12Week.targetWeight - goals12Week.startWeight)) * 100)}%`\r\n                            }}></div>\r\n                        </div>\r\n                        <p>{dashboardData.currentWeight}kg → {goals12Week.targetWeight}kg</p>\r\n                    </div>\r\n                    <div className=\"goal-item\">\r\n                        <h4>Settimane</h4>\r\n                        <div className=\"goal-bar\">\r\n                            <div className=\"goal-progress\" style={{\r\n                                width: `${Math.min(100, (goals12Week.weeksCompleted / 12) * 100)}%`\r\n                            }}></div>\r\n                        </div>\r\n                        <p>{goals12Week.weeksCompleted}/12 settimane</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK ACTIONS */}\r\n            <nav className=\"quick-actions\">\r\n                <Link to=\"/workout\" className=\"action-card workout\">\r\n                    <span className=\"action-icon\">🏋️</span>\r\n                    <h4>Workout</h4>\r\n                    <p>Inizia sessione</p>\r\n                </Link>\r\n                <Link to=\"/progress\" className=\"action-card progress\">\r\n                    <span className=\"action-icon\">📈</span>\r\n                    <h4>Progressi</h4>\r\n                    <p>Traccia misure</p>\r\n                </Link>\r\n                <Link to=\"/measurements\" className=\"action-card measurements\">\r\n                    <span className=\"action-icon\">📏</span>\r\n                    <h4>Misurazioni</h4>\r\n                    <p>Peso & corpo</p>\r\n                </Link>\r\n                <Link to=\"/nutrition-tracker\" className=\"action-card nutrition\">\r\n                    <span className=\"action-icon\">🥗</span>\r\n                    <h4>Dieta</h4>\r\n                    <p>Finestra 8-16</p>\r\n                </Link>\r\n                <Link to=\"/recovery-timer\" className=\"action-card recovery-timer\">\r\n                    <span className=\"action-icon\">🔥</span>\r\n                    <h4>Recovery</h4>\r\n                    <p>Timer sauna/ice</p>\r\n                </Link>\r\n                <Link to=\"/supplements\" className=\"action-card supplements\">\r\n                    <span className=\"action-icon\">💊</span>\r\n                    <h4>Integratori</h4>\r\n                    <p>{supplementProgress.taken}/{supplementProgress.total} presi</p>\r\n                </Link>\r\n                <Link to=\"/recovery\" className=\"action-card recovery\">\r\n                    <span className=\"action-icon\">🧘</span>\r\n                    <h4>Recovery Info</h4>\r\n                    <p>{recoveryStats.totalTime || 0}min oggi</p>\r\n                </Link>\r\n                <Link to=\"/analytics\" className=\"action-card analytics\">\r\n                    <span className=\"action-icon\">📊</span>\r\n                    <h4>Analytics</h4>\r\n                    <p>Grafici avanzati</p>\r\n                </Link>\r\n            </nav>\r\n\r\n            {/* LEGEND MINDSET */}\r\n            <div className=\"legend-mindset\">\r\n                <h3>👑 Mentalità da Leggenda</h3>\r\n                <p className=\"mindset-text\">\r\n                    \"I campioni non nascono in palestra. I campioni nascono da qualcosa di più profondo: \r\n                    <strong>un desiderio, un sogno, una visione.</strong> Tu hai tutto questo. \r\n                    Oggi è il giorno per dimostrarlo.\"\r\n                </p>\r\n                <div className=\"power-stats\">\r\n                    <span>💀 Disciplina: {Math.min(100, dashboardData.currentStreak * 3)}%</span>\r\n                    <span>⚡ Intensità: {Math.min(100, (weeklyStats.sessions || 0) * 20)}%</span>\r\n                    <span>🔥 Dedizione: {Math.min(100, (goals12Week.weeksCompleted || 0) * 8)}%</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nconst WorkoutTimer = ({ onSessionComplete }) => {\r\n    const [isActive, setIsActive] = React.useState(false);\r\n    const [currentExercise, setCurrentExercise] = React.useState('');\r\n    const [sessionTime, setSessionTime] = React.useState(0);\r\n    const [exerciseTime, setExerciseTime] = React.useState(0);\r\n    const [exercises, setExercises] = React.useState([]);\r\n    const [currentExerciseIndex, setCurrentExerciseIndex] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        let interval = null;\r\n        if (isActive) {\r\n            interval = setInterval(() => {\r\n                setSessionTime(time => time + 1);\r\n                setExerciseTime(time => time + 1);\r\n            }, 1000);\r\n        } else if (!isActive && sessionTime !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive, sessionTime]);\r\n\r\n    const startSession = () => {\r\n        setIsActive(true);\r\n        setSessionTime(0);\r\n        setExercises([]);\r\n    };\r\n\r\n    const pauseSession = () => {\r\n        setIsActive(false);\r\n    };\r\n\r\n    const nextExercise = () => {\r\n        if (currentExercise && exerciseTime > 0) {\r\n            const exerciseData = {\r\n                name: currentExercise,\r\n                duration: exerciseTime,\r\n                timestamp: new Date().toISOString()\r\n            };\r\n            setExercises([...exercises, exerciseData]);\r\n        }\r\n        \r\n        setCurrentExercise('');\r\n        setExerciseTime(0);\r\n        setCurrentExerciseIndex(prev => prev + 1);\r\n    };\r\n\r\n    const completeSession = () => {\r\n        if (currentExercise && exerciseTime > 0) {\r\n            nextExercise();\r\n        }\r\n        \r\n        const sessionData = {\r\n            date: new Date().toISOString(),\r\n            duration: sessionTime,\r\n            exercises: exercises,\r\n            id: Date.now()\r\n        };\r\n        \r\n        // Salva la sessione\r\n        const savedSessions = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        const updatedSessions = [sessionData, ...savedSessions];\r\n        localStorage.setItem('workoutSessions', JSON.stringify(updatedSessions));\r\n        \r\n        // Aggiorna le statistiche del tempo\r\n        const timeStats = JSON.parse(localStorage.getItem('timeStats') || '{}');\r\n        const updatedTimeStats = {\r\n            totalWorkoutTime: (timeStats.totalWorkoutTime || 0) + Math.floor(sessionTime / 60),\r\n            weeklyTime: calculateWeeklyTime(updatedSessions),\r\n            monthlyTime: calculateMonthlyTime(updatedSessions),\r\n            sessionsCompleted: (timeStats.sessionsCompleted || 0) + 1\r\n        };\r\n        localStorage.setItem('timeStats', JSON.stringify(updatedTimeStats));\r\n        \r\n        // Reset\r\n        setIsActive(false);\r\n        setSessionTime(0);\r\n        setExerciseTime(0);\r\n        setCurrentExercise('');\r\n        setExercises([]);\r\n        setCurrentExerciseIndex(0);\r\n        \r\n        if (onSessionComplete) {\r\n            onSessionComplete(sessionData);\r\n        }\r\n    };\r\n\r\n    const calculateWeeklyTime = (sessions) => {\r\n        const oneWeekAgo = new Date();\r\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n        \r\n        return sessions\r\n            .filter(session => new Date(session.date) >= oneWeekAgo)\r\n            .reduce((total, session) => total + Math.floor(session.duration / 60), 0);\r\n    };\r\n\r\n    const calculateMonthlyTime = (sessions) => {\r\n        const oneMonthAgo = new Date();\r\n        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\r\n        \r\n        return sessions\r\n            .filter(session => new Date(session.date) >= oneMonthAgo)\r\n            .reduce((total, session) => total + Math.floor(session.duration / 60), 0);\r\n    };\r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"workout-timer\">\r\n            <div className=\"timer-header\">\r\n                <h3>⏱️ Timer Sessione</h3>\r\n                <div className=\"session-time\">\r\n                    <span>Tempo Totale: {formatTime(sessionTime)}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"current-exercise\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Nome esercizio attuale...\"\r\n                    value={currentExercise}\r\n                    onChange={(e) => setCurrentExercise(e.target.value)}\r\n                    disabled={!isActive}\r\n                />\r\n                <div className=\"exercise-time\">\r\n                    Tempo Esercizio: {formatTime(exerciseTime)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"timer-controls\">\r\n                {!isActive && sessionTime === 0 ? (\r\n                    <button className=\"button start-btn\" onClick={startSession}>\r\n                        🚀 Inizia Sessione\r\n                    </button>\r\n                ) : (\r\n                    <div className=\"control-buttons\">\r\n                        <button \r\n                            className=\"button\" \r\n                            onClick={isActive ? pauseSession : () => setIsActive(true)}\r\n                        >\r\n                            {isActive ? '⏸️ Pausa' : '▶️ Riprendi'}\r\n                        </button>\r\n                        <button \r\n                            className=\"button next-btn\" \r\n                            onClick={nextExercise}\r\n                            disabled={!currentExercise}\r\n                        >\r\n                            ➡️ Prossimo Esercizio\r\n                        </button>\r\n                        <button \r\n                            className=\"button complete-btn\" \r\n                            onClick={completeSession}\r\n                        >\r\n                            ✅ Completa Sessione\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {exercises.length > 0 && (\r\n                <div className=\"completed-exercises\">\r\n                    <h4>Esercizi Completati:</h4>\r\n                    <ul>\r\n                        {exercises.map((exercise, index) => (\r\n                            <li key={index}>\r\n                                {exercise.name} - {formatTime(exercise.duration)}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WorkoutTimer;","import React from 'react';\n\nconst TechniqueGuides = () => {\n    const masterTechniques = {\n        'Panca Inclinata Bilanciere': {\n            category: 'Petto',\n            difficulty: 'Avanzato',\n            muscles: ['Petto (fascio superiore)', 'Deltoidi anteriori', 'Tricipiti'],\n            setup: [\n                'Panca inclinata 30-45° (mai oltre 45°)',\n                'Presa larghezza 1.5x spalle, pollice sopra barra',\n                'Scapole retratte e depresse, arco naturale',\n                'Piedi saldi a terra, core contratto'\n            ],\n            execution: [\n                'Discesa: 2-3 sec, barra al petto alto/clavicole',\n                'Pausa 1 sec al petto, mantenendo tensione',\n                'Spinta esplosiva, gomiti 45° dal busto',\n                'Lock-out completo, scapole sempre retratte'\n            ],\n            breathing: 'Inspira in discesa, espira durante spinta (dopo punto di stallo)',\n            commonMistakes: [\n                '❌ Angolo eccessivo (>45°) = stress spalle',\n                '❌ Gomiti troppo larghi = impingement',\n                '❌ Rebound al petto = perdita tensione',\n                '❌ Arch eccessivo = compenso lombare'\n            ],\n            progressionTips: [\n                'Master tecnica a corpo libero prima',\n                'Aumenta peso solo con form perfetto',\n                'Paused bench per controllo',\n                'Varianti: manubri, presa stretta'\n            ],\n            safetyNotes: [\n                'Sempre con spotter per carichi massimali',\n                'Stop se dolore spalle/polsi',\n                'Warm-up specifico: band pull-apart'\n            ]\n        },\n        'Trazioni Presa Ampia': {\n            category: 'Dorso',\n            difficulty: 'Intermedio-Avanzato',\n            muscles: ['Gran dorsale', 'Romboidi', 'Posteriori deltoidi', 'Bicipiti'],\n            setup: [\n                'Presa prona, 1.5x larghezza spalle',\n                'Appeso completo, scapole neutre',\n                'Core attivo, gambe leggermente avanti',\n                'Sguardo leggermente verso alto'\n            ],\n            execution: [\n                'Inizia movimento da scapole (depressione)',\n                'Tira gomiti verso basso e indietro',\n                'Petto verso sbarra, focus squeeze dorsali',\n                'Discesa controllata, stop prima rilascio completo'\n            ],\n            breathing: 'Inspira in partenza, espira durante trazione',\n            commonMistakes: [\n                '❌ Kipping/slancio = perdita target muscolare',\n                '❌ Solo braccia = manca attivazione dorsali',\n                '❌ Range parziale = crescita sub-ottimale',\n                '❌ Velocità eccessiva = momentum'\n            ],\n            progressionTips: [\n                'Principianti: lat pulldown + negative',\n                'Intermedi: band assist → bodyweight',\n                'Avanzati: weighted, pause, L-sit',\n                'Focus: mind-muscle connection dorsali'\n            ],\n            safetyNotes: [\n                'Shoulder health check pre-sessione',\n                'Progressione graduale volume',\n                'Stretching bicipiti/petto post-workout'\n            ]\n        },\n        'Squat': {\n            category: 'Gambe',\n            difficulty: 'Fondamentale',\n            muscles: ['Quadricipiti', 'Glutei', 'Femorali', 'Core'],\n            setup: [\n                'Barra alta su trapezi (non collo)',\n                'Presa 1.2x larghezza spalle, gomiti bassi',\n                'Piedi larghezza anche, punte 15-30°',\n                'Respirazione diaframmatica pre-discesa'\n            ],\n            execution: [\n                'Hip hinge + knee flexion simultanei',\n                'Discesa fino coscie parallele (minimo)',\n                'Ginocchia tracking con punte piedi',\n                'Drive dai talloni, petto alto in risalita'\n            ],\n            breathing: 'Valsalva: inspira in alto, trattieni, espira post-risalita',\n            commonMistakes: [\n                '❌ Knee valgus (ginocchia dentro) = infortunio',\n                '❌ Talloni si alzano = mobilità caviglie',\n                '❌ Busto troppo avanti = carico schiena',\n                '❌ Range parziale = perdita benefici'\n            ],\n            progressionTips: [\n                'Master bodyweight squat perfetto',\n                'Goblet squat per apprendimento pattern',\n                'Box squat per profondità e controllo',\n                'Front squat per postura e core'\n            ],\n            safetyNotes: [\n                'Sempre con safety bars altezza corretta',\n                'Warm-up mobilità anche/caviglie',\n                'Progressive overload: forma > peso'\n            ]\n        },\n        'Stacco Rumeno (RDL)': {\n            category: 'Posteriori',\n            difficulty: 'Intermedio',\n            muscles: ['Femorali', 'Glutei', 'Erettori spinale', 'Core'],\n            setup: [\n                'Partenza in piedi, barra a contatto cosce',\n                'Presa prona/mista, larghezza spalle',\n                'Spalle sopra barra, petto alto',\n                'Leggera flessione ginocchia (15-20°)'\n            ],\n            execution: [\n                'Hip hinge puro: anche indietro',\n                'Barra scorre lungo gambe (contatto costante)',\n                'Discesa fino stretch femorali (mid-shin)',\n                'Reverse: drive anche avanti, squeeze glutei'\n            ],\n            breathing: 'Inspira in alto, trattieni in discesa, espira in risalita',\n            commonMistakes: [\n                '❌ Schiena curva = shear stress vertebrale',\n                '❌ Troppa flessione ginocchia = squat variation',\n                '❌ Barra lontana corpo = momento aumentato',\n                '❌ Range eccessivo senza mobilità = compensi'\n            ],\n            progressionTips: [\n                'Prima mobilità femorali e anche',\n                'Deadlift con deficit per ROM',\n                'Single-leg RDL per stabilità',\n                'Varianti: manubri, kettlebell'\n            ],\n            safetyNotes: [\n                'Neutral spine sempre mantenuta',\n                'Start con carichi moderati',\n                'Stretching post-workout essenziale'\n            ]\n        },\n        'Military Press Manubri': {\n            category: 'Spalle',\n            difficulty: 'Intermedio',\n            muscles: ['Deltoidi (tutti fasci)', 'Tricipiti', 'Core', 'Stabilizzatori'],\n            setup: [\n                'Seduto con schienale 85-90°',\n                'Manubri altezza spalle, palmi avanti',\n                'Core contratto, schiena neutra',\n                'Piedi saldi, grip saldo ma non eccessivo'\n            ],\n            execution: [\n                'Spinta verticale, traiettoria rettilinea',\n                'Rotazione esterna spalle durante movimento',\n                'Lock-out senza hyperextension gomiti',\n                'Discesa controllata, stop all\\'altezza orecchie'\n            ],\n            breathing: 'Inspira in basso, espira durante spinta',\n            commonMistakes: [\n                '❌ Arch lombare eccessivo = compenso',\n                '❌ Spinta troppo avanti = impingement',\n                '❌ Gomiti troppo larghi = stress AC joint',\n                '❌ Range parziale = sviluppo incompleto'\n            ],\n            progressionTips: [\n                'Pike push-ups per pattern movimento',\n                'Press seduto prima di standing',\n                'Unilaterale per core e stabilità',\n                'Progressione: 2.5kg incrementi max'\n            ],\n            safetyNotes: [\n                'Warm-up spalle obbligatorio',\n                'Range dentro comfort zone',\n                'Stop al primo segno dolore'\n            ]\n        }\n    };\n\n    const getTechniqueCue = (exerciseName, phase) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        const cues = {\n            setup: exercise.setup,\n            execution: exercise.execution,\n            breathing: exercise.breathing\n        };\n\n        return cues[phase] || null;\n    };\n\n    const getProgressionLevel = (exerciseName, userLevel) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        const progressions = {\n            beginner: {\n                focus: 'Pattern Movement + Stabilità',\n                approach: 'Carichi leggeri, focus forma',\n                volume: 'Basso volume, alta frequenza'\n            },\n            intermediate: {\n                focus: 'Progressione Carico + Volume',\n                approach: 'Balance intensità/volume',\n                volume: 'Volume moderato-alto'\n            },\n            advanced: {\n                focus: 'Specializzazione + Varianti',\n                approach: 'Periodizzazione strutturata',\n                volume: 'Volume alto, intensità ciclica'\n            }\n        };\n\n        return progressions[userLevel];\n    };\n\n    const getInjuryPrevention = (exerciseName) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        const prevention = {\n            warmup: [],\n            cooldown: [],\n            redFlags: [],\n            alternatives: []\n        };\n\n        // Warm-up specifico per categoria\n        switch (exercise.category) {\n            case 'Petto':\n                prevention.warmup = ['Band pull-apart', 'Scap wall slides', 'Arm circles', 'Push-up progression'];\n                break;\n            case 'Dorso':\n                prevention.warmup = ['Cat-cow', 'Band face-pull', 'Scap pull-ups', 'Dead hang'];\n                break;\n            case 'Gambe':\n                prevention.warmup = ['Leg swings', 'Hip circles', 'Bodyweight squat', 'Ankle circles'];\n                break;\n            case 'Spalle':\n                prevention.warmup = ['Arm circles', 'Band external rotation', 'Wall slides', 'YTW raises'];\n                break;\n        }\n\n        // Red flags comuni\n        prevention.redFlags = [\n            'Dolore acuto durante movimento',\n            'Dolore che persiste post-workout',\n            'Limitazione ROM significativa',\n            'Instabilità articolare'\n        ];\n\n        return prevention;\n    };\n\n    const getMindMuscleCues = (exerciseName) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return [];\n\n        const mentalCues = {\n            'Panca Inclinata Bilanciere': [\n                'Visualizza petto che si \"apre\" in discesa',\n                'Spinta: \"schiaccia il mondo via da te\"',\n                'Immagina di \"avvicinare il petto alla barra\"',\n                'Focus: fibre muscolari che si contraggono'\n            ],\n            'Trazioni Presa Ampia': [\n                'Inizia tirando scapole verso \"tasche posteriori\"',\n                'Immagina di \"tirare sbarra verso petto\"',\n                'Visualizza dorsali come \"ali che si aprono\"',\n                'Senti l\\'ampiezza della schiena'\n            ],\n            'Squat': [\n                'Immagina di \"sederti su sedia invisibile\"',\n                'Spingi terra via con i piedi',\n                'Visualizza radici dai piedi al centro terra',\n                'Core come \"cintura di forza naturale\"'\n            ],\n            'Stacco Rumeno (RDL)': [\n                'Anche come \"cerniere che si aprono\"',\n                'Senti stretch intenso nei femorali',\n                'Immagina \"corda che tira anche indietro\"',\n                'Glutei come \"motori della risalita\"'\n            ],\n            'Military Press Manubri': [\n                'Spalle come \"fondamenta stabili\"',\n                'Spinta \"verso le stelle\"',\n                'Immagina di \"sostenere il cielo\"',\n                'Core come \"pilastro di marmo\"'\n            ]\n        };\n\n        return mentalCues[exerciseName] || [\n            'Connessione mente-muscolo',\n            'Controllo ogni millimetro',\n            'Qualità sopra quantità',\n            'Senti il muscolo lavorare'\n        ];\n    };\n\n    const getExerciseRating = (exerciseName) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        // Rating sistema basato su efficacia, sicurezza, trasferibilità\n        const ratings = {\n            'Panca Inclinata Bilanciere': {\n                effectiveness: 9,\n                safety: 7,\n                transferability: 8,\n                overall: 8.5,\n                notes: 'Re degli esercizi petto superiore'\n            },\n            'Trazioni Presa Ampia': {\n                effectiveness: 10,\n                safety: 8,\n                transferability: 9,\n                overall: 9.5,\n                notes: 'Miglior esercizio dorsali in assoluto'\n            },\n            'Squat': {\n                effectiveness: 10,\n                safety: 8,\n                transferability: 10,\n                overall: 9.5,\n                notes: 'Re di tutti gli esercizi'\n            },\n            'Stacco Rumeno (RDL)': {\n                effectiveness: 9,\n                safety: 7,\n                transferability: 9,\n                overall: 8.5,\n                notes: 'Insuperabile per posteriori'\n            },\n            'Military Press Manubri': {\n                effectiveness: 8,\n                safety: 8,\n                transferability: 7,\n                overall: 8.0,\n                notes: 'Eccellente per spalle 3D'\n            }\n        };\n\n        return ratings[exerciseName];\n    };\n\n    return {\n        masterTechniques,\n        getTechniqueCue,\n        getProgressionLevel,\n        getInjuryPrevention,\n        getMindMuscleCues,\n        getExerciseRating\n    };\n};\n\nexport default TechniqueGuides;","import React from 'react';\r\nimport WorkoutTimer from './WorkoutTimer';\r\nimport ExerciseTracker from './ExerciseTracker';\r\nimport TechniqueGuides from './TechniqueGuides';\r\nimport MotivationalQuotes from './MotivationalQuotes';\r\nimport CalendarStreak from './CalendarStreak';\r\n\r\nconst Workout = () => {\r\n    const exerciseHook = ExerciseTracker();\r\n    const techniqueHook = TechniqueGuides();\r\n    const quotesHook = MotivationalQuotes();\r\n    const calendarHook = CalendarStreak();\r\n    \r\n    const [selectedDay, setSelectedDay] = React.useState(null);\r\n    const [completedWorkouts, setCompletedWorkouts] = React.useState([]);\r\n    const [selectedExercise, setSelectedExercise] = React.useState(null);\r\n    const [exerciseForm, setExerciseForm] = React.useState({\r\n        sets: '',\r\n        reps: '',\r\n        weight: '',\r\n        rir: '',\r\n        notes: ''\r\n    });\r\n    const [showTechnique, setShowTechnique] = React.useState(false);\r\n    \r\n    const workoutPlan = {\r\n        'Lunedì': {\r\n            focus: 'Petto + Bicipiti',\r\n            subtitle: 'Focus: Petto (fascio alto + globale), Bicipiti',\r\n            exercises: [\r\n                { name: 'Panca Inclinata Bilanciere', sets: '4×6-8', rest: '2min', notes: 'RIR 1-2 | Focus forma e controllo' },\r\n                { name: 'Spinte Manubri Inclinata', sets: '3×8-10', rest: '90sec', notes: 'Angolo 30-45° | ROM completo' },\r\n                { name: 'Croci ai Cavi Alti/Inclinata', sets: '3×12-15', rest: '75sec', notes: 'Stretch massimo petto' },\r\n                { name: 'Dip alle Parallele (petto) o Panca Piana Manubri', sets: '3×8-10', rest: '90sec', notes: 'Inclinazione avanti per petto' },\r\n                { name: 'Curl Bilanciere', sets: '4×8-10', rest: '90sec', notes: 'No cheating | Controllo eccentrica' },\r\n                { name: 'Curl Manubri Inclinati', sets: '3×10-12', rest: '75sec', notes: 'Panca 45° | Stretch bicipiti' },\r\n                { name: 'Hammer Curl Manubri o Cavi', sets: '3×12-15', rest: '60sec', notes: 'Presa neutra | Focus brachiale' }\r\n            ]\r\n        },\r\n        'Martedì': {\r\n            focus: 'Dorso + Tricipiti + Collo (A)',\r\n            subtitle: 'Focus: Larghezza dorsale, spessore scapolare, tricipiti, collo',\r\n            exercises: [\r\n                { name: 'Trazioni Presa Ampia', sets: '4×6-8', rest: '2min', notes: 'Se necessario usa assistenza | Focus larghezza' },\r\n                { name: 'Rematore Bilanciere/Manubrio', sets: '4×8-10', rest: '2min', notes: 'Busto 45° | Squeeze scapole' },\r\n                { name: 'Lat Machine Inversa o Presa Stretta', sets: '3×10-12', rest: '90sec', notes: 'Controllo concentrica/eccentrica' },\r\n                { name: 'Pullover ai Cavi', sets: '3×12-15', rest: '75sec', notes: 'ROM ampio | Focus gran dorsale' },\r\n                { name: 'Panca Stretta Bilanciere', sets: '4×6-8', rest: '2min', notes: 'Presa larghezza spalle | Gomiti chiusi' },\r\n                { name: 'French Press EZ', sets: '3×8-10', rest: '90sec', notes: 'Solo avambracci si muovono' },\r\n                { name: 'Pushdown Cavo', sets: '3×12-15', rest: '60sec', notes: 'Contrazione massima in basso' },\r\n                { name: 'Collo - Flessione', sets: '2×15-20', rest: '30sec', notes: 'Lento e controllato' },\r\n                { name: 'Collo - Estensione', sets: '2×15-20', rest: '30sec', notes: 'Range completo sicuro' },\r\n                { name: 'Collo - Laterale dx/sx', sets: '2×12-15', rest: '30sec', notes: 'Ogni lato separatamente' }\r\n            ]\r\n        },\r\n        'Mercoledì': {\r\n            focus: 'Gambe Complete',\r\n            subtitle: 'Focus: Quadricipiti, glutei, femorali, polpacci',\r\n            exercises: [\r\n                { name: 'Squat', sets: '4×6-8', rest: '3min', notes: 'Profondità completa | RIR 1-2' },\r\n                { name: 'Hip Thrust', sets: '4×8-10', rest: '2min', notes: 'Contrazione glutei al top | Pausa 1 sec' },\r\n                { name: 'Affondi Camminata', sets: '3×10 passi/gamba', rest: '90sec', notes: 'Ginocchio a 90° | Passo lungo' },\r\n                { name: 'Leg Press 45°', sets: '3×10-12', rest: '90sec', notes: 'Piedi larghezza spalle | ROM completo' },\r\n                { name: 'Leg Curl Sdraiato', sets: '3×10-12', rest: '90sec', notes: 'Rest-pause ultimo set | Contrazione massima' },\r\n                { name: 'Calf Raise in Piedi', sets: '4×10-12', rest: '60sec', notes: 'Pausa 2 sec al top | Range completo' },\r\n                { name: 'Calf Raise Seduto', sets: '3×15-20', rest: '60sec', notes: 'Focus soleo | Controllo movimento' }\r\n            ]\r\n        },\r\n        'Giovedì': {\r\n            focus: 'Recupero Attivo',\r\n            subtitle: 'Focus: Cardiovascolare leggero, mobilità, recupero',\r\n            exercises: [\r\n                { name: 'LISS (Camminata/Cyclette)', sets: '30-40min', rest: 'Zona 1-2', notes: '60-70% FCMax | Mantieni conversazione' },\r\n                { name: 'Stretching/Mobilità', sets: '15-20min', rest: 'Rilassante', notes: 'Tutti i gruppi muscolari | Respiro profondo' },\r\n                { name: 'Sauna o Bagno Turco', sets: '10-15min', rest: 'Recovery', notes: 'Idratazione costante | Relax mentale' }\r\n            ]\r\n        },\r\n        'Venerdì': {\r\n            focus: 'Spalle Complete + Collo (B)',\r\n            subtitle: 'Focus: Deltoidi laterali/posteriori, trapezio, richiamo braccia, collo',\r\n            exercises: [\r\n                { name: 'Military Press Manubri', sets: '4×6-8', rest: '2min', notes: 'Seduto con schienale | Core attivo' },\r\n                { name: 'Alzate Laterali Cavi/Manubri', sets: '4×12-15', rest: '75sec', notes: 'Controllo eccentrica | No cheating' },\r\n                { name: 'Rear Delt Fly (Pec Deck Inversa o Manubri)', sets: '3×12-15', rest: '75sec', notes: 'Squeeze scapole | Focus deltoidi posteriori' },\r\n                { name: 'Face Pull', sets: '3×12-15', rest: '60sec', notes: 'Corda ai cavi | Gomiti alti' },\r\n                { name: 'Scrollate Manubri/Bilanciere', sets: '3×10-12', rest: '90sec', notes: 'Solo spalle | No rotazione' },\r\n                { name: 'Curl Manubri (Richiamo leggero)', sets: '2×12-15', rest: '60sec', notes: 'Pompaggio | Non a cedimento' },\r\n                { name: 'Pushdown Corda (Richiamo leggero)', sets: '2×12-15', rest: '60sec', notes: 'Focus connessione mente-muscolo' },\r\n                { name: 'Collo B - Flessione', sets: '2×15-20', rest: '30sec', notes: 'Progressione graduale resistenza' },\r\n                { name: 'Collo B - Estensione', sets: '2×15-20', rest: '30sec', notes: 'Mai forzare movimento' },\r\n                { name: 'Collo B - Laterale dx/sx', sets: '2×12-15', rest: '30sec', notes: 'Simmetrico entrambi lati' },\r\n                { name: 'Isometrie Multidirezionali Collo', sets: '3×20sec', rest: '30sec', notes: 'Resistenza manuale | 4 direzioni' },\r\n                { name: 'Stomach Vacuum', sets: '3×20sec', rest: '45sec', notes: 'Addome verso colonna | Respiro normale' },\r\n                { name: 'Plank', sets: '3×45sec', rest: '60sec', notes: 'Corpo dritto | Core attivo' }\r\n            ]\r\n        },\r\n        'Sabato': {\r\n            focus: 'Posteriori + Conditioning',\r\n            subtitle: 'Focus: Femorali, glutei, polpacci + condizionamento',\r\n            exercises: [\r\n                { name: 'Stacco Rumeno (RDL)', sets: '4×6-8', rest: '2min', notes: 'Focus femorali | Bilanciere vicino corpo' },\r\n                { name: 'Hip Thrust (Variante Mono)', sets: '3×10-12', rest: '2min', notes: 'Una gamba | Controllo stabilità' },\r\n                { name: 'Nordic Curl o Glute Ham Raise', sets: '3×8-10', rest: '90sec', notes: 'Eccentrica lenta | Assistenza se necessaria' },\r\n                { name: 'Leg Curl Seduto', sets: '3×12-15', rest: '75sec', notes: 'Contrazione massima | Pausa 1 sec' },\r\n                { name: 'Calf Raise Multipla', sets: '3×15-20', rest: '60sec', notes: 'Variare angoli piedi | Range massimo' },\r\n                { name: \"Farmer's Walk\", sets: '3×40m', rest: '90sec', notes: 'Carico pesante | Core + trapezio | Passo normale' },\r\n                { name: 'HIIT Finisher', sets: '8×30sec sprint / 60sec camminata', rest: 'Totale 10min', notes: 'Intensità massima sprint | Recupero attivo' }\r\n            ]\r\n        },\r\n        'Domenica': {\r\n            focus: 'Riposo Completo',\r\n            subtitle: 'Focus: Recupero totale, rigenerazione',\r\n            exercises: [\r\n                { name: 'Passeggiata Tranquilla', sets: '30-60min', rest: 'Libero', notes: 'Aria aperta | Ritmo rilassante' },\r\n                { name: 'Stretching Globale', sets: '20-30min', rest: 'Flow dolce', notes: 'Focus respirazione e relax' },\r\n                { name: 'Sauna/Bagno Turco (Opzionale)', sets: '15-20min', rest: 'Recovery', notes: 'Detossificazione | Idratazione' },\r\n                { name: 'Meditazione/Visualizzazione', sets: '10-20min', rest: 'Mentale', notes: 'Preparazione settimana successiva' }\r\n            ]\r\n        }\r\n    };\r\n    \r\n    const loadCompletedWorkouts = () => {\r\n        const saved = localStorage.getItem('completedWorkouts');\r\n        if (saved) {\r\n            setCompletedWorkouts(JSON.parse(saved));\r\n        }\r\n    };\r\n    \r\n    const handleExerciseComplete = () => {\r\n        if (!selectedExercise || !exerciseForm.sets || !exerciseForm.reps || !exerciseForm.weight) {\r\n            alert('Compila tutti i campi obbligatori!');\r\n            return;\r\n        }\r\n        \r\n        const isNewPR = exerciseHook.markExerciseCompleted(\r\n            selectedExercise.name,\r\n            exerciseForm.sets,\r\n            exerciseForm.reps,\r\n            exerciseForm.weight,\r\n            exerciseForm.notes,\r\n            exerciseForm.rir\r\n        );\r\n        \r\n        if (isNewPR) {\r\n            alert('🏆 NUOVO PERSONAL RECORD! Incredibile!');\r\n        }\r\n        \r\n        // Reset form\r\n        setExerciseForm({ sets: '', reps: '', weight: '', rir: '', notes: '' });\r\n        setSelectedExercise(null);\r\n    };\r\n    \r\n    const markWorkoutCompleted = (day) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const workoutData = {\r\n            day,\r\n            date: today,\r\n            id: Date.now()\r\n        };\r\n        \r\n        const updated = [workoutData, ...completedWorkouts];\r\n        setCompletedWorkouts(updated);\r\n        localStorage.setItem('completedWorkouts', JSON.stringify(updated));\r\n        \r\n        // Marca anche nel calendario streak\r\n        const todayWorkout = workoutPlan[day];\r\n        if (todayWorkout) {\r\n            calendarHook.markWorkoutCompleted(new Date(), todayWorkout.focus, todayWorkout.exercises);\r\n        }\r\n    };\r\n    \r\n    const isWorkoutCompletedToday = (day) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        return completedWorkouts.some(workout => \r\n            workout.day === day && workout.date === today\r\n        );\r\n    };\r\n    \r\n    const getExerciseCompletionStatus = (exercises) => {\r\n        const completedCount = exercises.filter(ex => \r\n            exerciseHook.isExerciseCompletedToday(ex.name)\r\n        ).length;\r\n        \r\n        return {\r\n            completed: completedCount,\r\n            total: exercises.length,\r\n            percentage: Math.round((completedCount / exercises.length) * 100)\r\n        };\r\n    };\r\n    \r\n    const getTodayWorkout = () => {\r\n        const today = new Date().getDay();\r\n        const todayWorkout = Object.entries(workoutPlan).find(([key]) => {\r\n            const dayMap = {\r\n                'Lunedì': 1, 'Martedì': 2, 'Mercoledì': 3, 'Giovedì': 4,\r\n                'Venerdì': 5, 'Sabato': 6, 'Domenica': 0\r\n            };\r\n            return dayMap[key] === today;\r\n        });\r\n        \r\n        return todayWorkout ? { day: todayWorkout[0], ...todayWorkout[1] } : null;\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        loadCompletedWorkouts();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"workout-container\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"workout-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-content\">\r\n                    <h2>🏋️ Scheda: Fisico della Madonna (6 Mesi)</h2>\r\n                    <p className=\"program-description\">Programma di allenamento avanzato per trasformazione fisica estrema. \r\n                       <strong>Split Push/Pull/Legs + Specializzazione</strong> ottimizzato per ipertrofia muscolare.</p>\r\n                    <div className=\"program-stats\">\r\n                        <span className=\"stat\">📅 6 giorni/settimana</span>\r\n                        <span className=\"stat\">⏱️ 75-90 min/sessione</span>\r\n                        <span className=\"stat\">🎯 Volume: Alto</span>\r\n                        <span className=\"stat\">🔥 Intensità: RIR 1-3</span>\r\n                    </div>\r\n                    \r\n                    {/* STATUS WORKOUT ATTIVO */}\r\n                    {isWorkoutActive && (\r\n                        <div className=\"active-workout-status\">\r\n                            <h3>🔥 Workout in Corso: {currentWorkout.day}</h3>\r\n                            <p>Esercizi completati: {currentWorkout.exercises.length}</p>\r\n                            <button \r\n                                className=\"finish-workout-btn\"\r\n                                onClick={finishWorkout}\r\n                                style={{ background: '#22c55e', color: 'white', padding: '10px 20px', borderRadius: '8px' }}\r\n                            >\r\n                                ✅ Termina e Salva Workout\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            \r\n            <WorkoutTimer onSessionComplete={(sessionData) => {\r\n                console.log('Sessione completata:', sessionData);\r\n            }} />\r\n            \r\n            <div className=\"workout-week\">\r\n                <h3>📅 Piano Settimanale</h3>\r\n                <div className=\"days-grid\">\r\n                    {Object.entries(workoutPlan).map(([day, workout]) => (\r\n                        <div key={day} className={`day-card ${selectedDay === day ? 'selected' : ''}`}>\r\n                            <div className=\"day-header\" onClick={() => setSelectedDay(selectedDay === day ? null : day)}>\r\n                                <h4>{day}</h4>\r\n                                <p className=\"focus-title\">{workout.focus}</p>\r\n                                <p className=\"focus-subtitle\">{workout.subtitle}</p>\r\n                                {isWorkoutCompletedToday(day) && (\r\n                                    <span className=\"completed-badge\">✅ Completato</span>\r\n                                )}\r\n                            </div>\r\n                            \r\n                            {selectedDay === day && (\r\n                                <div className=\"day-details\">\r\n                                    {/* PULSANTE INIZIO WORKOUT */}\r\n                                    {!isWorkoutActive && (\r\n                                        <div className=\"start-workout-section\">\r\n                                            <button \r\n                                                className=\"start-workout-btn\"\r\n                                                onClick={() => startWorkout(day)}\r\n                                                style={{ \r\n                                                    background: '#ff9500', \r\n                                                    color: 'white', \r\n                                                    padding: '15px 30px', \r\n                                                    borderRadius: '10px',\r\n                                                    fontSize: '16px',\r\n                                                    fontWeight: 'bold',\r\n                                                    width: '100%',\r\n                                                    marginBottom: '20px'\r\n                                                }}\r\n                                            >\r\n                                                🚀 Inizia Workout - {workout.focus}\r\n                                            </button>\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    <div className=\"exercises-list\">\r\n                                        {workout.exercises.map((exercise, index) => (\r\n                                            <div key={index} className={`exercise-item ${\r\n                                                isExerciseCompleted(exercise.name) ? 'completed' : ''\r\n                                            } ${\r\n                                                selectedExercise === exercise.name ? 'selected' : ''\r\n                                            }`}>\r\n                                                <div className=\"exercise-header\" onClick={() => \r\n                                                    setSelectedExercise(selectedExercise === exercise.name ? null : exercise.name)\r\n                                                }>\r\n                                                    <h5>\r\n                                                        {isExerciseCompleted(exercise.name) && '✅ '}\r\n                                                        {exercise.name}\r\n                                                    </h5>\r\n                                                    <div className=\"exercise-details\">\r\n                                                        <span className=\"sets\">{exercise.sets}</span>\r\n                                                        <span className=\"rest\">Rest: {exercise.rest}</span>\r\n                                                    </div>\r\n                                                    <p className=\"notes\">{exercise.notes}</p>\r\n                                                </div>\r\n                                                \r\n                                                {/* INTERFACCIA TRACKING PESO */}\r\n                                                {selectedExercise === exercise.name && isWorkoutActive && (\r\n                                                    <div className=\"weight-tracking-interface\">\r\n                                                        <h6>🏋️ Inserisci Dati Allenamento</h6>\r\n                                                        \r\n                                                        <div className=\"tracking-form\">\r\n                                                            <div className=\"form-row\">\r\n                                                                <div className=\"form-group\">\r\n                                                                    <label>Serie:</label>\r\n                                                                    <input \r\n                                                                        type=\"number\"\r\n                                                                        value={exerciseForm.sets}\r\n                                                                        onChange={(e) => setExerciseForm(prev => ({...prev, sets: e.target.value}))}\r\n                                                                        placeholder=\"es. 3\"\r\n                                                                    />\r\n                                                                </div>\r\n                                                                <div className=\"form-group\">\r\n                                                                    <label>Ripetizioni:</label>\r\n                                                                    <input \r\n                                                                        type=\"number\"\r\n                                                                        value={exerciseForm.reps}\r\n                                                                        onChange={(e) => setExerciseForm(prev => ({...prev, reps: e.target.value}))}\r\n                                                                        placeholder=\"es. 8\"\r\n                                                                    />\r\n                                                                </div>\r\n                                                                <div className=\"form-group\">\r\n                                                                    <label>Peso (kg):</label>\r\n                                                                    <input \r\n                                                                        type=\"number\"\r\n                                                                        step=\"0.5\"\r\n                                                                        value={exerciseForm.weight}\r\n                                                                        onChange={(e) => setExerciseForm(prev => ({...prev, weight: e.target.value}))}\r\n                                                                        placeholder=\"es. 80\"\r\n                                                                        style={{ background: '#ff9500', color: 'white' }}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            \r\n                                                            <div className=\"form-row\">\r\n                                                                <div className=\"form-group\">\r\n                                                                    <label>RIR (opz.):</label>\r\n                                                                    <select \r\n                                                                        value={exerciseForm.rir}\r\n                                                                        onChange={(e) => setExerciseForm(prev => ({...prev, rir: e.target.value}))}\r\n                                                                    >\r\n                                                                        <option value=\"\">-</option>\r\n                                                                        <option value=\"0\">0 (cedimento)</option>\r\n                                                                        <option value=\"1\">1</option>\r\n                                                                        <option value=\"2\">2</option>\r\n                                                                        <option value=\"3\">3</option>\r\n                                                                    </select>\r\n                                                                </div>\r\n                                                                <div className=\"form-group full-width\">\r\n                                                                    <label>Note:</label>\r\n                                                                    <input \r\n                                                                        type=\"text\"\r\n                                                                        value={exerciseForm.notes}\r\n                                                                        onChange={(e) => setExerciseForm(prev => ({...prev, notes: e.target.value}))}\r\n                                                                        placeholder=\"Sensazioni, difficoltà, ecc.\"\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            \r\n                                                            <div className=\"form-actions\">\r\n                                                                <button \r\n                                                                    className=\"save-exercise-btn\"\r\n                                                                    onClick={() => completeExercise(exercise)}\r\n                                                                    style={{\r\n                                                                        background: '#22c55e',\r\n                                                                        color: 'white',\r\n                                                                        padding: '10px 20px',\r\n                                                                        borderRadius: '8px',\r\n                                                                        width: '100%'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    ✅ Salva Esercizio\r\n                                                                </button>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                    \r\n                                    {/* PROGRESSO WORKOUT CORRENTE */}\r\n                                    {isWorkoutActive && currentWorkout.day === day && (\r\n                                        <div className=\"workout-progress\">\r\n                                            <h4>🏆 Progresso Workout</h4>\r\n                                            <div className=\"progress-stats\">\r\n                                                <span>Esercizi: {currentWorkout.exercises.length}/{workout.exercises.length}</span>\r\n                                                <span>Completamento: {Math.round((currentWorkout.exercises.length / workout.exercises.length) * 100)}%</span>\r\n                                            </div>\r\n                                            \r\n                                            {currentWorkout.exercises.length > 0 && (\r\n                                                <div className=\"completed-exercises\">\r\n                                                    <h5>Esercizi Completati:</h5>\r\n                                                    {currentWorkout.exercises.map((ex, idx) => (\r\n                                                        <div key={idx} className=\"completed-exercise\">\r\n                                                            <span>{ex.name}: {ex.sets}x{ex.reps} @ {ex.weight}kg</span>\r\n                                                        </div>\r\n                                                    ))}\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n                                    \r\n                                    <div className=\"day-actions\">\r\n                                        {!isWorkoutCompletedToday(day) && !isWorkoutActive ? (\r\n                                            <button \r\n                                                className=\"button complete-workout-btn\"\r\n                                                onClick={() => markWorkoutCompleted(day)}\r\n                                            >\r\n                                                ✅ Segna come Completato\r\n                                            </button>\r\n                                        ) : isWorkoutCompletedToday(day) ? (\r\n                                            <p className=\"completed-message\">💪 Ottimo lavoro! Workout completato oggi.</p>\r\n                                        ) : null}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"workout-tips\">\r\n                <h3>💡 Principi Fondamentali - Fisico della Madonna</h3>\r\n                <ul>\r\n                    <li>🔥 <strong>RIR (Reps in Reserve):</strong> Mantieni sempre 1-2 ripetizioni di riserva per ottimizzare volume e recupero</li>\r\n                    <li>⏱️ <strong>Tempi di Recupero:</strong> Rispetta rigorosamente i tempi indicati - sono calcolati per massimizzare l'effetto allenante</li>\r\n                    <li>💪 <strong>Progressione:</strong> Aumenta il carico quando riesci a completare tutte le serie nel range alto delle ripetizioni</li>\r\n                    <li>🎯 <strong>Forma Tecnica:</strong> La qualità del movimento è prioritaria rispetto al peso utilizzato</li>\r\n                    <li>😴 <strong>Recupero:</strong> Il giovedì è sacro - recupero attivo essenziale per la crescita</li>\r\n                    <li>🍽️ <strong>Nutrizione:</strong> Surplus calorico di 300-500 kcal/die + 2.2g proteine/kg corporeo</li>\r\n                    <li>💧 <strong>Idratazione:</strong> Minimo 35ml/kg corporeo + 500ml extra nei giorni di allenamento</li>\r\n                    <li>📈 <strong>Tracking:</strong> Tieni traccia di carichi, ripetizioni e sensazioni per ogni esercizio</li>\r\n                    <li>🧘 <strong>Mente-Muscolo:</strong> Focus mentale sul muscolo target durante ogni ripetizione</li>\r\n                    <li>🔄 <strong>Periodizzazione:</strong> Ogni 6-8 settimane rivaluta e modifica il programma</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Workout;","import React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nconst Nutrition = () => {\r\n    const navigate = useNavigate();\r\n    const [selectedDay, setSelectedDay] = useState(new Date().getDay());\r\n    const [completedMeals, setCompletedMeals] = useState(() => {\r\n        const saved = localStorage.getItem('completedMeals');\r\n        return saved ? JSON.parse(saved) : {};\r\n    });\r\n    const [currentStreak, setCurrentStreak] = useState(() => {\r\n        const saved = localStorage.getItem('nutritionStreak');\r\n        return saved ? parseInt(saved) : 0;\r\n    });\r\n\r\n    // DIETA SETTIMANALE COMPLETA - 7 GIORNI\r\n    const weeklyDiet = {\r\n        0: { // Domenica\r\n            name: \"🔥 DOMENICA - RECOVERY DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"dom-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Pancakes proteici + mirtilli + sciroppo d'acero\",\r\n                    proteins: 28,\r\n                    calories: 420,\r\n                    ingredients: [\"3 uova\", \"50g farina avena\", \"1 scoop whey\", \"100g mirtilli\"]\r\n                },\r\n                {\r\n                    id: \"dom-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"13:00\",\r\n                    food: \"Salmone grigliato + riso basmati + avocado\",\r\n                    proteins: 35,\r\n                    calories: 580,\r\n                    ingredients: [\"150g salmone\", \"80g riso\", \"1/2 avocado\", \"verdure miste\"]\r\n                },\r\n                {\r\n                    id: \"dom-snack\",\r\n                    type: \"🥤 Snack\",\r\n                    time: \"16:30\",\r\n                    food: \"Smoothie proteico + banana + burro arachidi\",\r\n                    proteins: 25,\r\n                    calories: 380,\r\n                    ingredients: [\"1 scoop whey\", \"1 banana\", \"20g burro arachidi\", \"250ml latte\"]\r\n                },\r\n                {\r\n                    id: \"dom-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"20:00\",\r\n                    food: \"Petto pollo + patate dolci + broccoli\",\r\n                    proteins: 40,\r\n                    calories: 520,\r\n                    ingredients: [\"180g petto pollo\", \"200g patate dolci\", \"150g broccoli\"]\r\n                }\r\n            ]\r\n        },\r\n        1: { // Lunedì\r\n            name: \"💪 LUNEDÌ - POWER DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"lun-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"7:30\",\r\n                    food: \"Uova strapazzate + pane ezekiel + spinaci\",\r\n                    proteins: 32,\r\n                    calories: 450,\r\n                    ingredients: [\"4 uova\", \"2 fette pane ezekiel\", \"100g spinaci\", \"10g olio oliva\"]\r\n                },\r\n                {\r\n                    id: \"lun-preworkout\",\r\n                    type: \"⚡ Pre-Workout\",\r\n                    time: \"11:00\",\r\n                    food: \"Banana + caffè + BCAA\",\r\n                    proteins: 8,\r\n                    calories: 150,\r\n                    ingredients: [\"1 banana media\", \"5g BCAA\", \"caffè nero\"]\r\n                },\r\n                {\r\n                    id: \"lun-postworkout\",\r\n                    type: \"💥 Post-Workout\",\r\n                    time: \"13:30\",\r\n                    food: \"Whey shake + avena + miele\",\r\n                    proteins: 30,\r\n                    calories: 400,\r\n                    ingredients: [\"1.5 scoop whey\", \"40g avena\", \"15g miele\"]\r\n                },\r\n                {\r\n                    id: \"lun-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"15:00\",\r\n                    food: \"Manzo magro + quinoa + verdure grigliate\",\r\n                    proteins: 45,\r\n                    calories: 620,\r\n                    ingredients: [\"200g manzo magro\", \"80g quinoa\", \"verdure miste\", \"olio oliva\"]\r\n                },\r\n                {\r\n                    id: \"lun-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"20:30\",\r\n                    food: \"Merluzzo + riso integrale + asparagi\",\r\n                    proteins: 38,\r\n                    calories: 480,\r\n                    ingredients: [\"180g merluzzo\", \"70g riso integrale\", \"200g asparagi\"]\r\n                }\r\n            ]\r\n        },\r\n        2: { // Martedì\r\n            name: \"🎯 MARTEDÌ - PRECISION DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"mar-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"7:30\",\r\n                    food: \"Yogurt greco + granola + frutti bosco\",\r\n                    proteins: 25,\r\n                    calories: 380,\r\n                    ingredients: [\"200g yogurt greco 0%\", \"40g granola\", \"100g frutti bosco\"]\r\n                },\r\n                {\r\n                    id: \"mar-spuntino\",\r\n                    type: \"🍎 Spuntino\",\r\n                    time: \"10:30\",\r\n                    food: \"Mela + mandorle + ricotta\",\r\n                    proteins: 18,\r\n                    calories: 280,\r\n                    ingredients: [\"1 mela\", \"20g mandorle\", \"100g ricotta\"]\r\n                },\r\n                {\r\n                    id: \"mar-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"13:00\",\r\n                    food: \"Tacchino + farro + zucchine grigliate\",\r\n                    proteins: 42,\r\n                    calories: 540,\r\n                    ingredients: [\"180g tacchino\", \"80g farro\", \"200g zucchine\", \"olio EVO\"]\r\n                },\r\n                {\r\n                    id: \"mar-snack\",\r\n                    type: \"🥤 Snack\",\r\n                    time: \"16:00\",\r\n                    food: \"Caseine + noci + datteri\",\r\n                    proteins: 28,\r\n                    calories: 350,\r\n                    ingredients: [\"1 scoop caseine\", \"15g noci\", \"2 datteri\"]\r\n                },\r\n                {\r\n                    id: \"mar-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"20:00\",\r\n                    food: \"Tonno + pasta integrale + pomodorini\",\r\n                    proteins: 35,\r\n                    calories: 500,\r\n                    ingredients: [\"150g tonno fresco\", \"70g pasta integrale\", \"200g pomodorini\"]\r\n                }\r\n            ]\r\n        },\r\n        3: { // Mercoledì\r\n            name: \"🔋 MERCOLEDÌ - ENERGY DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"mer-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"7:45\",\r\n                    food: \"Porridge proteico + banana + cannella\",\r\n                    proteins: 30,\r\n                    calories: 420,\r\n                    ingredients: [\"50g avena\", \"1 scoop whey\", \"1 banana\", \"cannella\"]\r\n                },\r\n                {\r\n                    id: \"mer-preworkout\",\r\n                    type: \"⚡ Pre-Workout\",\r\n                    time: \"11:30\",\r\n                    food: \"Toast integrale + marmellata + caffè\",\r\n                    proteins: 8,\r\n                    calories: 180,\r\n                    ingredients: [\"2 fette toast\", \"15g marmellata\", \"caffè\"]\r\n                },\r\n                {\r\n                    id: \"mer-postworkout\",\r\n                    type: \"💥 Post-Workout\",\r\n                    time: \"14:00\",\r\n                    food: \"Whey + maltodestrine + creatina\",\r\n                    proteins: 25,\r\n                    calories: 320,\r\n                    ingredients: [\"1 scoop whey\", \"30g malto\", \"5g creatina\"]\r\n                },\r\n                {\r\n                    id: \"mer-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"15:30\",\r\n                    food: \"Pollo curry + riso basmati + verdure\",\r\n                    proteins: 40,\r\n                    calories: 580,\r\n                    ingredients: [\"170g pollo\", \"80g riso\", \"curry\", \"verdure miste\"]\r\n                },\r\n                {\r\n                    id: \"mer-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"20:00\",\r\n                    food: \"Orata + quinoa + spinaci saltati\",\r\n                    proteins: 36,\r\n                    calories: 460,\r\n                    ingredients: [\"160g orata\", \"70g quinoa\", \"150g spinaci\"]\r\n                }\r\n            ]\r\n        },\r\n        4: { // Giovedì\r\n            name: \"⚡ GIOVEDÌ - THUNDER DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"gio-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"7:30\",\r\n                    food: \"Frittata + pane integrale + pomodori\",\r\n                    proteins: 28,\r\n                    calories: 400,\r\n                    ingredients: [\"3 uova\", \"2 fette pane\", \"100g pomodori\", \"basilico\"]\r\n                },\r\n                {\r\n                    id: \"gio-spuntino\",\r\n                    type: \"🥜 Spuntino\",\r\n                    time: \"10:00\",\r\n                    food: \"Parmigiano + noci + pera\",\r\n                    proteins: 20,\r\n                    calories: 320,\r\n                    ingredients: [\"30g parmigiano\", \"20g noci\", \"1 pera media\"]\r\n                },\r\n                {\r\n                    id: \"gio-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"13:00\",\r\n                    food: \"Bistecca + patate + rucola\",\r\n                    proteins: 48,\r\n                    calories: 650,\r\n                    ingredients: [\"200g bistecca\", \"200g patate\", \"50g rucola\", \"olio EVO\"]\r\n                },\r\n                {\r\n                    id: \"gio-snack\",\r\n                    type: \"🍓 Snack\",\r\n                    time: \"16:30\",\r\n                    food: \"Smoothie verde + proteine\",\r\n                    proteins: 26,\r\n                    calories: 280,\r\n                    ingredients: [\"spinaci\", \"banana\", \"1 scoop whey\", \"acqua cocco\"]\r\n                },\r\n                {\r\n                    id: \"gio-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"20:00\",\r\n                    food: \"Gamberi + pasta + zucchine\",\r\n                    proteins: 32,\r\n                    calories: 480,\r\n                    ingredients: [\"150g gamberi\", \"70g pasta\", \"200g zucchine\"]\r\n                }\r\n            ]\r\n        },\r\n        5: { // Venerdì\r\n            name: \"🏆 VENERDÌ - VICTORY DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"ven-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"7:30\",\r\n                    food: \"Muesli proteico + latte + frutti bosco\",\r\n                    proteins: 32,\r\n                    calories: 450,\r\n                    ingredients: [\"50g muesli\", \"250ml latte\", \"1 scoop whey\", \"frutti bosco\"]\r\n                },\r\n                {\r\n                    id: \"ven-preworkout\",\r\n                    type: \"⚡ Pre-Workout\",\r\n                    time: \"11:00\",\r\n                    food: \"Energy balls + caffè\",\r\n                    proteins: 12,\r\n                    calories: 220,\r\n                    ingredients: [\"3 energy balls fatti in casa\", \"caffè nero\"]\r\n                },\r\n                {\r\n                    id: \"ven-postworkout\",\r\n                    type: \"💥 Post-Workout\",\r\n                    time: \"13:30\",\r\n                    food: \"Recovery shake completo\",\r\n                    proteins: 35,\r\n                    calories: 420,\r\n                    ingredients: [\"1.5 scoop whey\", \"banana\", \"latte\", \"miele\", \"avena\"]\r\n                },\r\n                {\r\n                    id: \"ven-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"15:00\",\r\n                    food: \"Salmone + quinoa + avocado\",\r\n                    proteins: 38,\r\n                    calories: 580,\r\n                    ingredients: [\"160g salmone\", \"80g quinoa\", \"1/2 avocado\", \"lime\"]\r\n                },\r\n                {\r\n                    id: \"ven-aperitivo\",\r\n                    type: \"🍻 Aperitivo\",\r\n                    time: \"18:30\",\r\n                    food: \"Hummus + verdure + crackers\",\r\n                    proteins: 15,\r\n                    calories: 280,\r\n                    ingredients: [\"60g hummus\", \"verdure crude\", \"crackers integrali\"]\r\n                },\r\n                {\r\n                    id: \"ven-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"21:00\",\r\n                    food: \"Pizza proteica fatta in casa\",\r\n                    proteins: 35,\r\n                    calories: 520,\r\n                    ingredients: [\"base proteica\", \"pomodoro\", \"mozzarella\", \"prosciutto\"]\r\n                }\r\n            ]\r\n        },\r\n        6: { // Sabato\r\n            name: \"🎉 SABATO - CHEAT DAY\",\r\n            meals: [\r\n                {\r\n                    id: \"sab-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"9:00\",\r\n                    food: \"Pancakes proteici + sciroppo + bacon\",\r\n                    proteins: 35,\r\n                    calories: 550,\r\n                    ingredients: [\"pancakes proteici\", \"sciroppo acero\", \"3 fette bacon\"]\r\n                },\r\n                {\r\n                    id: \"sab-brunch\",\r\n                    type: \"🥐 Brunch\",\r\n                    time: \"11:30\",\r\n                    food: \"Avocado toast + uova + salmone affumicato\",\r\n                    proteins: 30,\r\n                    calories: 480,\r\n                    ingredients: [\"pane integrale\", \"avocado\", \"2 uova\", \"salmone affumicato\"]\r\n                },\r\n                {\r\n                    id: \"sab-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"14:00\",\r\n                    food: \"Burger proteico + patate dolci + insalata\",\r\n                    proteins: 45,\r\n                    calories: 680,\r\n                    ingredients: [\"180g carne\", \"panino integrale\", \"patate dolci\", \"insalata\"]\r\n                },\r\n                {\r\n                    id: \"sab-snack\",\r\n                    type: \"🍨 Snack\",\r\n                    time: \"17:00\",\r\n                    food: \"Gelato proteico fatto in casa\",\r\n                    proteins: 20,\r\n                    calories: 250,\r\n                    ingredients: [\"whey\", \"latte\", \"frutta\", \"dolcificante\"]\r\n                },\r\n                {\r\n                    id: \"sab-cena\",\r\n                    type: \"🌙 Cena\",\r\n                    time: \"20:30\",\r\n                    food: \"Grigliata mista + verdure + pane\",\r\n                    proteins: 50,\r\n                    calories: 720,\r\n                    ingredients: [\"carne mista\", \"verdure grigliate\", \"pane integrale\"]\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    const dayNames = ['Domenica', 'Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato'];\r\n\r\n    const toggleMeal = (mealId) => {\r\n        const today = new Date().toDateString();\r\n        const key = `${today}-${mealId}`;\r\n        \r\n        const newCompleted = {\r\n            ...completedMeals,\r\n            [key]: !completedMeals[key]\r\n        };\r\n        \r\n        setCompletedMeals(newCompleted);\r\n        localStorage.setItem('completedMeals', JSON.stringify(newCompleted));\r\n        \r\n        // Calcola streak\r\n        updateStreak(newCompleted);\r\n    };\r\n\r\n    const updateStreak = (meals) => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[new Date().getDay()].meals;\r\n        const completedToday = todayMeals.filter(meal => meals[`${today}-${meal.id}`]).length;\r\n        \r\n        if (completedToday === todayMeals.length) {\r\n            const newStreak = currentStreak + 1;\r\n            setCurrentStreak(newStreak);\r\n            localStorage.setItem('nutritionStreak', newStreak.toString());\r\n        }\r\n    };\r\n\r\n    const isMealCompleted = (mealId) => {\r\n        const today = new Date().toDateString();\r\n        return completedMeals[`${today}-${mealId}`] || false;\r\n    };\r\n\r\n    const getDayProgress = () => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[selectedDay].meals;\r\n        const completed = todayMeals.filter(meal => completedMeals[`${today}-${meal.id}`]).length;\r\n        return Math.round((completed / todayMeals.length) * 100);\r\n    };\r\n\r\n    const getTotalProteins = () => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[selectedDay].meals;\r\n        return todayMeals\r\n            .filter(meal => completedMeals[`${today}-${meal.id}`])\r\n            .reduce((total, meal) => total + meal.proteins, 0);\r\n    };\r\n\r\n    const getTotalCalories = () => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[selectedDay].meals;\r\n        return todayMeals\r\n            .filter(meal => completedMeals[`${today}-${meal.id}`])\r\n            .reduce((total, meal) => total + meal.calories, 0);\r\n    };\r\n\r\n    return (\r\n        <div className=\"nutrition-premium\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"nutrition-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-title\">\r\n                    <h1>🍽️ NUTRITION TRACKER PRO</h1>\r\n                    <p className=\"subtitle\">Piano alimentare settimanale personalizzato</p>\r\n                </div>\r\n\r\n                <div className=\"streak-counter\">\r\n                    <div className=\"streak-number\">{currentStreak}</div>\r\n                    <div className=\"streak-label\">🔥 STREAK</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* SELECTOR GIORNI */}\r\n            <div className=\"day-selector\">\r\n                {dayNames.map((day, index) => (\r\n                    <button\r\n                        key={index}\r\n                        className={`day-button ${selectedDay === index ? 'active' : ''} ${index === new Date().getDay() ? 'today' : ''}`}\r\n                        onClick={() => setSelectedDay(index)}\r\n                    >\r\n                        <span className=\"day-name\">{day.slice(0, 3)}</span>\r\n                        <span className=\"day-number\">{index + 1}</span>\r\n                    </button>\r\n                ))}\r\n            </div>\r\n\r\n            {/* PROGRESS BAR */}\r\n            <div className=\"daily-progress\">\r\n                <div className=\"progress-info\">\r\n                    <h3>{weeklyDiet[selectedDay].name}</h3>\r\n                    <div className=\"progress-stats\">\r\n                        <span className=\"stat\">\r\n                            <strong>{getDayProgress()}%</strong> Completato\r\n                        </span>\r\n                        <span className=\"stat\">\r\n                            <strong>{getTotalProteins()}g</strong> Proteine\r\n                        </span>\r\n                        <span className=\"stat\">\r\n                            <strong>{getTotalCalories()}</strong> Kcal\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"progress-bar\">\r\n                    <div \r\n                        className=\"progress-fill\"\r\n                        style={{ width: `${getDayProgress()}%` }}\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* MEALS LIST */}\r\n            <div className=\"meals-container\">\r\n                {weeklyDiet[selectedDay].meals.map((meal, index) => (\r\n                    <div \r\n                        key={meal.id}\r\n                        className={`meal-card ${isMealCompleted(meal.id) ? 'completed' : ''}`}\r\n                    >\r\n                        <div className=\"meal-header\">\r\n                            <div className=\"meal-info\">\r\n                                <h4 className=\"meal-type\">{meal.type}</h4>\r\n                                <span className=\"meal-time\">{meal.time}</span>\r\n                            </div>\r\n                            <button\r\n                                className={`meal-checkbox ${isMealCompleted(meal.id) ? 'checked' : ''}`}\r\n                                onClick={() => toggleMeal(meal.id)}\r\n                            >\r\n                                {isMealCompleted(meal.id) ? '✅' : '⭕'}\r\n                            </button>\r\n                        </div>\r\n                        \r\n                        <div className=\"meal-content\">\r\n                            <h5 className=\"meal-food\">{meal.food}</h5>\r\n                            \r\n                            <div className=\"meal-macros\">\r\n                                <span className=\"macro protein\">\r\n                                    💪 {meal.proteins}g proteine\r\n                                </span>\r\n                                <span className=\"macro calories\">\r\n                                    🔥 {meal.calories} kcal\r\n                                </span>\r\n                            </div>\r\n                            \r\n                            <div className=\"ingredients\">\r\n                                <h6>Ingredienti:</h6>\r\n                                <ul>\r\n                                    {meal.ingredients.map((ingredient, idx) => (\r\n                                        <li key={idx}>{ingredient}</li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* QUICK ACTIONS */}\r\n            <div className=\"quick-actions\">\r\n                <Link to=\"/nutrition-tracker\" className=\"action-button primary\">\r\n                    📊 Nutrition Tracker Avanzato\r\n                </Link>\r\n                <Link to=\"/supplements\" className=\"action-button secondary\">\r\n                    💊 Gestione Integratori\r\n                </Link>\r\n                <button \r\n                    className=\"action-button tertiary\"\r\n                    onClick={() => {\r\n                        setCompletedMeals({});\r\n                        setCurrentStreak(0);\r\n                        localStorage.removeItem('completedMeals');\r\n                        localStorage.removeItem('nutritionStreak');\r\n                    }}\r\n                >\r\n                    🔄 Reset Progresso\r\n                </button>\r\n            </div>\r\n\r\n            {/* MOTIVATIONAL FOOTER */}\r\n            <div className=\"motivational-footer\">\r\n                <h3>💡 TIP DEL GIORNO</h3>\r\n                <p>\r\n                    \"La nutrizione rappresenta il 70% dei tuoi risultati. Ogni pasto è un'opportunità per alimentare la tua trasformazione straordinaria!\"\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nutrition;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Supplements = () => {\r\n    const navigate = useNavigate();\r\n    const [selectedCategory, setSelectedCategory] = useState('all');\r\n    const [takenToday, setTakenToday] = useState(() => {\r\n        const saved = localStorage.getItem('supplementsTaken');\r\n        return saved ? JSON.parse(saved) : {};\r\n    });\r\n    const [currentStack, setCurrentStack] = useState(() => {\r\n        const saved = localStorage.getItem('currentStack');\r\n        return saved ? JSON.parse(saved) : [\r\n            'whey-protein', 'creatine', 'multivitamin', 'omega3', 'vitamin-d'\r\n        ];\r\n    });\r\n\r\n    // SUPPLEMENTI COMPLETI CON TIMING E DOSAGGI\r\n    const supplements = {\r\n        'whey-protein': {\r\n            name: 'Whey Protein',\r\n            category: 'protein',\r\n            icon: '💪',\r\n            dosage: '25-30g',\r\n            timing: ['post-workout', 'snack'],\r\n            benefits: ['Crescita muscolare', 'Recovery', 'Sintesi proteica'],\r\n            priority: 'essential',\r\n            cost: '€35/mese',\r\n            description: 'Proteine del siero ad alto valore biologico per massimizzare la crescita muscolare',\r\n            instructions: 'Assumere 1 scoop (25g) in 250ml acqua/latte entro 30min dal workout'\r\n        },\r\n        'creatine': {\r\n            name: 'Creatina Monoidrata',\r\n            category: 'performance',\r\n            icon: '⚡',\r\n            dosage: '3-5g',\r\n            timing: ['pre-workout', 'post-workout'],\r\n            benefits: ['Forza', 'Potenza', 'Volume muscolare'],\r\n            priority: 'essential',\r\n            cost: '€15/mese',\r\n            description: 'Aumenta ATP per performance esplosive e volume cellulare',\r\n            instructions: '5g al giorno, possibile loading di 20g per 5 giorni iniziali'\r\n        },\r\n        'multivitamin': {\r\n            name: 'Multivitaminico Premium',\r\n            category: 'health',\r\n            icon: '🌟',\r\n            dosage: '1 tablet',\r\n            timing: ['breakfast'],\r\n            benefits: ['Salute generale', 'Sistema immunitario', 'Energia'],\r\n            priority: 'important',\r\n            cost: '€25/mese',\r\n            description: 'Formula completa di vitamine e minerali per atleti',\r\n            instructions: '1 compressa al mattino a stomaco pieno'\r\n        },\r\n        'omega3': {\r\n            name: 'Omega-3 EPA/DHA',\r\n            category: 'health',\r\n            icon: '🐟',\r\n            dosage: '1-2g',\r\n            timing: ['meals'],\r\n            benefits: ['Antinfiammatorio', 'Salute cuore', 'Recovery'],\r\n            priority: 'important',\r\n            cost: '€20/mese',\r\n            description: 'Acidi grassi essenziali per ridurre infiammazione e supportare il recovery',\r\n            instructions: '1-2 capsule ai pasti principali'\r\n        },\r\n        'vitamin-d': {\r\n            name: 'Vitamina D3',\r\n            category: 'health',\r\n            icon: '☀️',\r\n            dosage: '2000-4000 IU',\r\n            timing: ['breakfast'],\r\n            benefits: ['Salute ossa', 'Sistema immunitario', 'Testosterone'],\r\n            priority: 'important',\r\n            cost: '€12/mese',\r\n            description: 'Supporta salute ossea, sistema immunitario e produzione ormonale',\r\n            instructions: '2000 IU al mattino con grassi per migliore assorbimento'\r\n        },\r\n        'bcaa': {\r\n            name: 'BCAA 2:1:1',\r\n            category: 'recovery',\r\n            icon: '🔄',\r\n            dosage: '10-15g',\r\n            timing: ['intra-workout', 'between-meals'],\r\n            benefits: ['Riduce catabolismo', 'Energia durante workout', 'Recovery'],\r\n            priority: 'optional',\r\n            cost: '€30/mese',\r\n            description: 'Aminoacidi ramificati per preservare massa muscolare durante workout',\r\n            instructions: '10g durante workout lunghi o tra i pasti'\r\n        },\r\n        'beta-alanine': {\r\n            name: 'Beta-Alanina',\r\n            category: 'performance',\r\n            icon: '🔥',\r\n            dosage: '3-5g',\r\n            timing: ['pre-workout'],\r\n            benefits: ['Resistenza muscolare', 'Riduce fatica', 'Performance'],\r\n            priority: 'optional',\r\n            cost: '€18/mese',\r\n            description: 'Aumenta capacità di buffer muscolare per allenamenti intensi',\r\n            instructions: '3g 30min pre-workout, possibile formicolio normale'\r\n        },\r\n        'magnesium': {\r\n            name: 'Magnesio Glicinato',\r\n            category: 'recovery',\r\n            icon: '😴',\r\n            dosage: '200-400mg',\r\n            timing: ['evening'],\r\n            benefits: ['Rilassamento muscolare', 'Sonno', 'Recovery'],\r\n            priority: 'important',\r\n            cost: '€15/mese',\r\n            description: 'Supporta rilassamento muscolare e qualità del sonno',\r\n            instructions: '200-300mg la sera prima di dormire'\r\n        },\r\n        'caffeine': {\r\n            name: 'Caffeina Anidra',\r\n            category: 'performance',\r\n            icon: '☕',\r\n            dosage: '100-200mg',\r\n            timing: ['pre-workout'],\r\n            benefits: ['Energia', 'Focus', 'Performance'],\r\n            priority: 'optional',\r\n            cost: '€10/mese',\r\n            description: 'Stimolante per energia e focus durante allenamenti intensi',\r\n            instructions: '100-200mg 30-45min pre-workout, non oltre le 16:00'\r\n        },\r\n        'zinc': {\r\n            name: 'Zinco + Rame',\r\n            category: 'health',\r\n            icon: '⚡',\r\n            dosage: '15-30mg',\r\n            timing: ['evening'],\r\n            benefits: ['Testosterone', 'Sistema immunitario', 'Recovery'],\r\n            priority: 'important',\r\n            cost: '€12/mese',\r\n            description: 'Supporta produzione ormonale e sistema immunitario',\r\n            instructions: '15mg la sera a stomaco vuoto con rame 1-2mg'\r\n        }\r\n    };\r\n\r\n    const categories = {\r\n        all: { name: 'Tutti', icon: '🔮', color: '#00ffff' },\r\n        protein: { name: 'Proteine', icon: '💪', color: '#ff9500' },\r\n        performance: { name: 'Performance', icon: '⚡', color: '#ff6b6b' },\r\n        health: { name: 'Salute', icon: '🌟', color: '#4ecdc4' },\r\n        recovery: { name: 'Recovery', icon: '😴', color: '#a8e6cf' }\r\n    };\r\n\r\n    const timingLabels = {\r\n        'breakfast': '🌅 Colazione',\r\n        'pre-workout': '🏋️ Pre-Workout',\r\n        'intra-workout': '💪 Intra-Workout',\r\n        'post-workout': '🔥 Post-Workout',\r\n        'meals': '🍽️ Ai pasti',\r\n        'snack': '🥤 Snack',\r\n        'evening': '🌙 Sera',\r\n        'between-meals': '⏰ Tra pasti'\r\n    };\r\n\r\n    const toggleSupplement = (suppId) => {\r\n        const today = new Date().toDateString();\r\n        const key = `${today}-${suppId}`;\r\n        \r\n        const newTaken = {\r\n            ...takenToday,\r\n            [key]: !takenToday[key]\r\n        };\r\n        \r\n        setTakenToday(newTaken);\r\n        localStorage.setItem('supplementsTaken', JSON.stringify(newTaken));\r\n    };\r\n\r\n    const isSupplementTaken = (suppId) => {\r\n        const today = new Date().toDateString();\r\n        return takenToday[`${today}-${suppId}`] || false;\r\n    };\r\n\r\n    const addToStack = (suppId) => {\r\n        if (!currentStack.includes(suppId)) {\r\n            const newStack = [...currentStack, suppId];\r\n            setCurrentStack(newStack);\r\n            localStorage.setItem('currentStack', JSON.stringify(newStack));\r\n        }\r\n    };\r\n\r\n    const removeFromStack = (suppId) => {\r\n        const newStack = currentStack.filter(id => id !== suppId);\r\n        setCurrentStack(newStack);\r\n        localStorage.setItem('currentStack', JSON.stringify(newStack));\r\n    };\r\n\r\n    const getCompletionRate = () => {\r\n        const today = new Date().toDateString();\r\n        const stackSupplements = currentStack.length;\r\n        const takenCount = currentStack.filter(suppId => \r\n            takenToday[`${today}-${suppId}`]\r\n        ).length;\r\n        return stackSupplements > 0 ? Math.round((takenCount / stackSupplements) * 100) : 0;\r\n    };\r\n\r\n    const getFilteredSupplements = () => {\r\n        return Object.entries(supplements).filter(([id, supp]) => \r\n            selectedCategory === 'all' || supp.category === selectedCategory\r\n        );\r\n    };\r\n\r\n    const getTotalMonthlyCost = () => {\r\n        return currentStack.reduce((total, suppId) => {\r\n            const cost = supplements[suppId]?.cost || '€0/mese';\r\n            const amount = parseInt(cost.replace('€', '').replace('/mese', ''));\r\n            return total + amount;\r\n        }, 0);\r\n    };\r\n\r\n    return (\r\n        <div className=\"supplements-premium\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"supplements-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-title\">\r\n                    <h1>💊 SUPPLEMENT STACK PRO</h1>\r\n                    <p className=\"subtitle\">Gestione intelligente degli integratori</p>\r\n                </div>\r\n\r\n                <div className=\"completion-badge\">\r\n                    <div className=\"completion-circle\">\r\n                        <span className=\"completion-percentage\">{getCompletionRate()}%</span>\r\n                    </div>\r\n                    <div className=\"completion-label\">Oggi</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK STATS */}\r\n            <div className=\"stack-overview\">\r\n                <div className=\"overview-card\">\r\n                    <div className=\"card-icon\">📦</div>\r\n                    <div className=\"card-data\">\r\n                        <span className=\"card-value\">{currentStack.length}</span>\r\n                        <span className=\"card-label\">Nel tuo stack</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"overview-card\">\r\n                    <div className=\"card-icon\">✅</div>\r\n                    <div className=\"card-data\">\r\n                        <span className=\"card-value\">{currentStack.filter(id => isSupplementTaken(id)).length}</span>\r\n                        <span className=\"card-label\">Assunti oggi</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"overview-card\">\r\n                    <div className=\"card-icon\">💰</div>\r\n                    <div className=\"card-data\">\r\n                        <span className=\"card-value\">€{getTotalMonthlyCost()}</span>\r\n                        <span className=\"card-label\">Costo mensile</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* CURRENT STACK */}\r\n            <div className=\"current-stack-section\">\r\n                <h2>🔥 IL TUO STACK ATTUALE</h2>\r\n                <div className=\"stack-grid\">\r\n                    {currentStack.map(suppId => {\r\n                        const supplement = supplements[suppId];\r\n                        if (!supplement) return null;\r\n                        \r\n                        return (\r\n                            <div \r\n                                key={suppId}\r\n                                className={`stack-card ${isSupplementTaken(suppId) ? 'taken' : ''}`}\r\n                            >\r\n                                <div className=\"stack-card-header\">\r\n                                    <div className=\"stack-info\">\r\n                                        <span className=\"stack-icon\">{supplement.icon}</span>\r\n                                        <div className=\"stack-details\">\r\n                                            <h4>{supplement.name}</h4>\r\n                                            <span className=\"stack-dosage\">{supplement.dosage}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <button\r\n                                        className={`take-button ${isSupplementTaken(suppId) ? 'taken' : ''}`}\r\n                                        onClick={() => toggleSupplement(suppId)}\r\n                                    >\r\n                                        {isSupplementTaken(suppId) ? '✅' : '⭕'}\r\n                                    </button>\r\n                                </div>\r\n                                \r\n                                <div className=\"stack-timing\">\r\n                                    {supplement.timing.map(time => (\r\n                                        <span key={time} className=\"timing-tag\">\r\n                                            {timingLabels[time]}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                                \r\n                                <div className=\"stack-actions\">\r\n                                    <span className=\"stack-cost\">{supplement.cost}</span>\r\n                                    <button\r\n                                        className=\"remove-button\"\r\n                                        onClick={() => removeFromStack(suppId)}\r\n                                        title=\"Rimuovi dallo stack\"\r\n                                    >\r\n                                        🗑️\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            {/* CATEGORY FILTER */}\r\n            <div className=\"category-filter\">\r\n                <h2>🔍 ESPLORA SUPPLEMENTI</h2>\r\n                <div className=\"filter-buttons\">\r\n                    {Object.entries(categories).map(([key, category]) => (\r\n                        <button\r\n                            key={key}\r\n                            className={`filter-btn ${selectedCategory === key ? 'active' : ''}`}\r\n                            onClick={() => setSelectedCategory(key)}\r\n                            style={{ '--category-color': category.color }}\r\n                        >\r\n                            <span className=\"filter-icon\">{category.icon}</span>\r\n                            <span className=\"filter-name\">{category.name}</span>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* SUPPLEMENTS CATALOG */}\r\n            <div className=\"supplements-catalog\">\r\n                <div className=\"catalog-grid\">\r\n                    {getFilteredSupplements().map(([suppId, supplement]) => {\r\n                        const inStack = currentStack.includes(suppId);\r\n                        \r\n                        return (\r\n                            <div key={suppId} className={`supplement-card ${supplement.priority}`}>\r\n                                <div className=\"supplement-header\">\r\n                                    <div className=\"supplement-main\">\r\n                                        <span className=\"supplement-icon\">{supplement.icon}</span>\r\n                                        <div className=\"supplement-info\">\r\n                                            <h3>{supplement.name}</h3>\r\n                                            <span className=\"supplement-category\">\r\n                                                {categories[supplement.category].name}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"supplement-priority\">\r\n                                        {supplement.priority === 'essential' && <span className=\"priority-badge essential\">Essential</span>}\r\n                                        {supplement.priority === 'important' && <span className=\"priority-badge important\">Important</span>}\r\n                                        {supplement.priority === 'optional' && <span className=\"priority-badge optional\">Optional</span>}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-description\">\r\n                                    <p>{supplement.description}</p>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-details\">\r\n                                    <div className=\"detail-row\">\r\n                                        <span className=\"detail-label\">💊 Dosaggio:</span>\r\n                                        <span className=\"detail-value\">{supplement.dosage}</span>\r\n                                    </div>\r\n                                    <div className=\"detail-row\">\r\n                                        <span className=\"detail-label\">💰 Costo:</span>\r\n                                        <span className=\"detail-value\">{supplement.cost}</span>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-benefits\">\r\n                                    <h4>Benefici:</h4>\r\n                                    <div className=\"benefits-tags\">\r\n                                        {supplement.benefits.map((benefit, index) => (\r\n                                            <span key={index} className=\"benefit-tag\">\r\n                                                {benefit}\r\n                                            </span>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-timing\">\r\n                                    <h4>Quando assumere:</h4>\r\n                                    <div className=\"timing-tags\">\r\n                                        {supplement.timing.map(time => (\r\n                                            <span key={time} className=\"timing-tag\">\r\n                                                {timingLabels[time]}\r\n                                            </span>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-instructions\">\r\n                                    <p><strong>Istruzioni:</strong> {supplement.instructions}</p>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-actions\">\r\n                                    {inStack ? (\r\n                                        <button\r\n                                            className=\"action-button remove\"\r\n                                            onClick={() => removeFromStack(suppId)}\r\n                                        >\r\n                                            ❌ Rimuovi dal Stack\r\n                                        </button>\r\n                                    ) : (\r\n                                        <button\r\n                                            className=\"action-button add\"\r\n                                            onClick={() => addToStack(suppId)}\r\n                                        >\r\n                                            ➕ Aggiungi al Stack\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            {/* TIMING GUIDE */}\r\n            <div className=\"timing-guide\">\r\n                <h2>⏰ GUIDA AI TIMING</h2>\r\n                <div className=\"timing-schedule\">\r\n                    <div className=\"time-slot\">\r\n                        <h3>🌅 Mattino (7:00-9:00)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('breakfast'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"time-slot\">\r\n                        <h3>🏋️ Pre-Workout (30-45min prima)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('pre-workout'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"time-slot\">\r\n                        <h3>🔥 Post-Workout (0-30min dopo)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('post-workout'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"time-slot\">\r\n                        <h3>🌙 Sera (prima di dormire)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('evening'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK ACTIONS */}\r\n            <div className=\"supplements-actions\">\r\n                <button \r\n                    className=\"action-button reset\"\r\n                    onClick={() => {\r\n                        setTakenToday({});\r\n                        localStorage.removeItem('supplementsTaken');\r\n                    }}\r\n                >\r\n                    🔄 Reset Giorno\r\n                </button>\r\n                <button \r\n                    className=\"action-button clear\"\r\n                    onClick={() => {\r\n                        setCurrentStack([]);\r\n                        localStorage.removeItem('currentStack');\r\n                    }}\r\n                >\r\n                    🗑️ Svuota Stack\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Supplements;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Recovery = () => {\r\n    const navigate = useNavigate();\r\n    const [activeSession, setActiveSession] = useState(null);\r\n    const [sessionHistory, setSessionHistory] = useState(() => {\r\n        const saved = localStorage.getItem('recoveryHistory');\r\n        return saved ? JSON.parse(saved) : [];\r\n    });\r\n    const [currentTimer, setCurrentTimer] = useState(0);\r\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n    const [selectedProtocol, setSelectedProtocol] = useState('sauna');\r\n\r\n    // PROTOCOLLI RECOVERY PROFESSIONALI\r\n    const recoveryProtocols = {\r\n        'sauna': {\r\n            name: 'Sauna Finlandese',\r\n            icon: '🔥',\r\n            category: 'heat',\r\n            temperature: '80-90°C',\r\n            duration: '15-20 min',\r\n            benefits: ['Vasodilatazione', 'Rilascio endorfine', 'Detox', 'Riduce stress'],\r\n            difficulty: 'facile',\r\n            equipment: 'Sauna',\r\n            calories: 150,\r\n            description: 'Terapia del calore per rilassamento profondo e recupero muscolare',\r\n            instructions: [\r\n                'Riscalda la sauna a 80-90°C',\r\n                'Entra con asciugamano pulito',\r\n                'Siediti rilassato per 15-20 minuti',\r\n                'Bevi acqua frequentemente',\r\n                'Doccia fredda finale per shock termico'\r\n            ],\r\n            contraindications: ['Problemi cardiaci', 'Pressione alta', 'Gravidanza']\r\n        },\r\n        'ice-bath': {\r\n            name: 'Ice Bath (Crioterapia)',\r\n            icon: '🧊',\r\n            category: 'cold',\r\n            temperature: '10-15°C',\r\n            duration: '3-5 min',\r\n            benefits: ['Riduce infiammazione', 'Accelera recovery', 'Migliora circolazione'],\r\n            difficulty: 'difficile',\r\n            equipment: 'Vasca + ghiaccio',\r\n            calories: 50,\r\n            description: 'Immersione in acqua fredda per ridurre infiammazione e accelerare il recupero',\r\n            instructions: [\r\n                'Riempie vasca con acqua 10-15°C',\r\n                'Respirazione controllata prima di entrare',\r\n                'Immersione graduale fino al petto',\r\n                'Rimani calmo per 3-5 minuti',\r\n                'Uscita graduale e riscaldamento naturale'\r\n            ],\r\n            contraindications: ['Problemi circolatori', 'Ipotermia', 'Ferite aperte']\r\n        },\r\n        'contrast-shower': {\r\n            name: 'Doccia Contrastante',\r\n            icon: '🚿',\r\n            category: 'contrast',\r\n            temperature: '40°C / 15°C',\r\n            duration: '10-15 min',\r\n            benefits: ['Migliora circolazione', 'Energizza', 'Recovery veloce'],\r\n            difficulty: 'medio',\r\n            equipment: 'Doccia',\r\n            calories: 30,\r\n            description: 'Alternanza di acqua calda e fredda per stimolare la circolazione',\r\n            instructions: [\r\n                '3 min acqua calda (40°C)',\r\n                '30 sec acqua fredda (15°C)',\r\n                'Ripeti il ciclo 3-4 volte',\r\n                'Termina sempre con acqua fredda',\r\n                'Asciugatura energica con asciugamano'\r\n            ],\r\n            contraindications: ['Pressione alta instabile']\r\n        },\r\n        'massage': {\r\n            name: 'Massaggio Sportivo',\r\n            icon: '🙌',\r\n            category: 'manual',\r\n            temperature: 'Ambiente',\r\n            duration: '30-60 min',\r\n            benefits: ['Riduce tensione', 'Migliora flessibilità', 'Rilassamento profondo'],\r\n            difficulty: 'facile',\r\n            equipment: 'Olio da massaggio',\r\n            calories: 0,\r\n            description: 'Manipolazione manuale dei tessuti molli per rilassamento muscolare',\r\n            instructions: [\r\n                'Usa olio da massaggio di qualità',\r\n                'Movimenti lenti e profondi',\r\n                'Concentrati su aree tense',\r\n                'Pressione gradualmente crescente',\r\n                'Termina con movimenti rilassanti'\r\n            ],\r\n            contraindications: ['Lesioni acute', 'Infiammazioni acute']\r\n        },\r\n        'stretching': {\r\n            name: 'Stretching Profondo',\r\n            icon: '🤸',\r\n            category: 'movement',\r\n            temperature: 'Ambiente',\r\n            duration: '20-30 min',\r\n            benefits: ['Aumenta flessibilità', 'Riduce tensione', 'Migliora mobilità'],\r\n            difficulty: 'facile',\r\n            equipment: 'Tappetino yoga',\r\n            calories: 80,\r\n            description: 'Allungamento muscolare per migliorare flessibilità e ridurre tensioni',\r\n            instructions: [\r\n                'Riscaldamento leggero 5 minuti',\r\n                'Stretching statico 30 sec per gruppo muscolare',\r\n                'Respirazione profonda durante allungamento',\r\n                'Non forzare mai il movimento',\r\n                'Rilassamento finale 5 minuti'\r\n            ],\r\n            contraindications: ['Lesioni muscolari acute']\r\n        },\r\n        'meditation': {\r\n            name: 'Meditazione Mindfulness',\r\n            icon: '🧘',\r\n            category: 'mental',\r\n            temperature: 'Ambiente',\r\n            duration: '10-20 min',\r\n            benefits: ['Riduce stress', 'Migliora focus', 'Equilibrio mentale'],\r\n            difficulty: 'medio',\r\n            equipment: 'Silenzio',\r\n            calories: 0,\r\n            description: 'Pratica di consapevolezza per recupero mentale e riduzione dello stress',\r\n            instructions: [\r\n                'Trova posizione comoda e silenziosa',\r\n                'Chiudi gli occhi e respira naturalmente',\r\n                'Concentrati sul respiro',\r\n                'Osserva pensieri senza giudicare',\r\n                'Ritorna al respiro quando ti distrai'\r\n            ],\r\n            contraindications: ['Disturbi psichiatrici gravi']\r\n        },\r\n        'foam-rolling': {\r\n            name: 'Foam Rolling',\r\n            icon: '🌊',\r\n            category: 'self-massage',\r\n            temperature: 'Ambiente',\r\n            duration: '15-25 min',\r\n            benefits: ['Rilascia trigger points', 'Migliora mobilità', 'Self-massage'],\r\n            difficulty: 'facile',\r\n            equipment: 'Foam roller',\r\n            calories: 60,\r\n            description: 'Auto-massaggio con rullo per rilasciare tensioni e trigger points',\r\n            instructions: [\r\n                'Inizia con pressione leggera',\r\n                'Rotola lentamente ogni gruppo muscolare',\r\n                'Fermati sui punti dolorosi 30-60 sec',\r\n                'Mantieni respirazione regolare',\r\n                'Termina con movimenti rilassanti'\r\n            ],\r\n            contraindications: ['Lesioni acute', 'Osteoporosi severa']\r\n        },\r\n        'yoga': {\r\n            name: 'Yoga Restorative',\r\n            icon: '🕉️',\r\n            category: 'movement',\r\n            temperature: 'Ambiente',\r\n            duration: '30-45 min',\r\n            benefits: ['Flessibilità', 'Equilibrio', 'Rilassamento profondo'],\r\n            difficulty: 'medio',\r\n            equipment: 'Tappetino yoga',\r\n            calories: 120,\r\n            description: 'Pratica yoga dolce focalizzata sul recupero e rilassamento',\r\n            instructions: [\r\n                'Inizia con respirazione profonda',\r\n                'Posizioni dolci e sostenute',\r\n                'Mantieni ogni asana 1-3 minuti',\r\n                'Focus sul rilascio delle tensioni',\r\n                'Chiudi con Savasana 10 minuti'\r\n            ],\r\n            contraindications: ['Lesioni spinali acute']\r\n        }\r\n    };\r\n\r\n    // TIMER LOGIC\r\n    useEffect(() => {\r\n        let interval;\r\n        if (isTimerRunning) {\r\n            interval = setInterval(() => {\r\n                setCurrentTimer(prev => prev + 1);\r\n            }, 1000);\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isTimerRunning]);\r\n\r\n    const startSession = (protocolId) => {\r\n        setActiveSession(protocolId);\r\n        setSelectedProtocol(protocolId);\r\n        setCurrentTimer(0);\r\n        setIsTimerRunning(true);\r\n    };\r\n\r\n    const endSession = () => {\r\n        if (activeSession) {\r\n            const session = {\r\n                id: Date.now().toString(),\r\n                protocol: activeSession,\r\n                duration: currentTimer,\r\n                date: new Date().toISOString(),\r\n                quality: null // Verrà impostato dopo\r\n            };\r\n            \r\n            const newHistory = [session, ...sessionHistory.slice(0, 19)]; // Max 20 sessioni\r\n            setSessionHistory(newHistory);\r\n            localStorage.setItem('recoveryHistory', JSON.stringify(newHistory));\r\n        }\r\n        \r\n        setActiveSession(null);\r\n        setIsTimerRunning(false);\r\n        setCurrentTimer(0);\r\n    };\r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    const getSessionStats = () => {\r\n        const thisWeek = sessionHistory.filter(session => {\r\n            const sessionDate = new Date(session.date);\r\n            const weekAgo = new Date();\r\n            weekAgo.setDate(weekAgo.getDate() - 7);\r\n            return sessionDate >= weekAgo;\r\n        });\r\n\r\n        const totalDuration = sessionHistory.reduce((sum, session) => sum + session.duration, 0);\r\n        const avgDuration = sessionHistory.length > 0 ? Math.round(totalDuration / sessionHistory.length) : 0;\r\n\r\n        return {\r\n            totalSessions: sessionHistory.length,\r\n            thisWeek: thisWeek.length,\r\n            avgDuration: Math.floor(avgDuration / 60),\r\n            totalHours: Math.floor(totalDuration / 3600)\r\n        };\r\n    };\r\n\r\n    const stats = getSessionStats();\r\n\r\n    const categories = {\r\n        heat: { name: 'Calore', icon: '🔥', color: '#ff6b6b' },\r\n        cold: { name: 'Freddo', icon: '🧊', color: '#4ecdc4' },\r\n        contrast: { name: 'Contrasto', icon: '🌊', color: '#45b7d1' },\r\n        manual: { name: 'Manuale', icon: '🙌', color: '#f7b267' },\r\n        movement: { name: 'Movimento', icon: '🤸', color: '#a8e6cf' },\r\n        mental: { name: 'Mentale', icon: '🧘', color: '#dcc7e8' },\r\n        'self-massage': { name: 'Auto-massaggio', icon: '🌊', color: '#ffd93d' }\r\n    };\r\n\r\n    return (\r\n        <div className=\"recovery-luxury\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"recovery-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-title\">\r\n                    <h1>🛌 RECOVERY CENTER PRO</h1>\r\n                    <p className=\"subtitle\">Centro benessere digitale per il recupero ottimale</p>\r\n                </div>\r\n\r\n                <div className=\"recovery-streak\">\r\n                    <div className=\"streak-number\">{stats.thisWeek}</div>\r\n                    <div className=\"streak-label\">Questa Settimana</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* TIMER SESSIONE ATTIVA */}\r\n            {activeSession && (\r\n                <div className=\"active-session-timer\">\r\n                    <div className=\"timer-container\">\r\n                        <div className=\"timer-protocol\">\r\n                            <span className=\"timer-icon\">{recoveryProtocols[activeSession].icon}</span>\r\n                            <div className=\"timer-info\">\r\n                                <h3>{recoveryProtocols[activeSession].name}</h3>\r\n                                <span className=\"timer-duration\">Durata consigliata: {recoveryProtocols[activeSession].duration}</span>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"timer-display\">\r\n                            <span className=\"timer-time\">{formatTime(currentTimer)}</span>\r\n                        </div>\r\n\r\n                        <div className=\"timer-controls\">\r\n                            <button \r\n                                className=\"timer-btn pause\"\r\n                                onClick={() => setIsTimerRunning(!isTimerRunning)}\r\n                            >\r\n                                {isTimerRunning ? '⏸️' : '▶️'}\r\n                            </button>\r\n                            <button \r\n                                className=\"timer-btn stop\"\r\n                                onClick={endSession}\r\n                            >\r\n                                🛑 Fine Sessione\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"session-progress\">\r\n                        <div className=\"progress-info\">\r\n                            <span>Temperatura: {recoveryProtocols[activeSession].temperature}</span>\r\n                            <span>Calorie bruciate: ~{Math.round((currentTimer / 60) * (recoveryProtocols[activeSession].calories / 60))}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* STATISTICS OVERVIEW */}\r\n            <div className=\"recovery-stats\">\r\n                <div className=\"stat-card primary\">\r\n                    <div className=\"stat-icon\">📊</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.totalSessions}</span>\r\n                        <span className=\"stat-label\">Sessioni Totali</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card success\">\r\n                    <div className=\"stat-icon\">⏱️</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.avgDuration}min</span>\r\n                        <span className=\"stat-label\">Durata Media</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card info\">\r\n                    <div className=\"stat-icon\">🕐</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.totalHours}h</span>\r\n                        <span className=\"stat-label\">Ore Totali</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card warning\">\r\n                    <div className=\"stat-icon\">🔥</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.thisWeek}</span>\r\n                        <span className=\"stat-label\">Questa Settimana</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PROTOCOLLI RECOVERY */}\r\n            <div className=\"protocols-section\">\r\n                <h2>🎯 PROTOCOLLI PROFESSIONALI</h2>\r\n                \r\n                <div className=\"protocols-grid\">\r\n                    {Object.entries(recoveryProtocols).map(([id, protocol]) => (\r\n                        <div key={id} className={`protocol-card ${protocol.difficulty}`}>\r\n                            <div className=\"protocol-header\">\r\n                                <div className=\"protocol-main\">\r\n                                    <span className=\"protocol-icon\">{protocol.icon}</span>\r\n                                    <div className=\"protocol-info\">\r\n                                        <h3>{protocol.name}</h3>\r\n                                        <span className=\"protocol-category\">\r\n                                            {categories[protocol.category]?.name}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"protocol-difficulty\">\r\n                                    <span className={`difficulty-badge ${protocol.difficulty}`}>\r\n                                        {protocol.difficulty}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-description\">\r\n                                <p>{protocol.description}</p>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-details\">\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">🌡️ Temperatura:</span>\r\n                                    <span className=\"detail-value\">{protocol.temperature}</span>\r\n                                </div>\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">⏱️ Durata:</span>\r\n                                    <span className=\"detail-value\">{protocol.duration}</span>\r\n                                </div>\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">🔥 Calorie:</span>\r\n                                    <span className=\"detail-value\">~{protocol.calories}/sessione</span>\r\n                                </div>\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">🛠️ Equipment:</span>\r\n                                    <span className=\"detail-value\">{protocol.equipment}</span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-benefits\">\r\n                                <h4>💎 Benefici:</h4>\r\n                                <div className=\"benefits-tags\">\r\n                                    {protocol.benefits.map((benefit, index) => (\r\n                                        <span key={index} className=\"benefit-tag\">\r\n                                            {benefit}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-instructions\">\r\n                                <h4>📋 Istruzioni:</h4>\r\n                                <ol className=\"instructions-list\">\r\n                                    {protocol.instructions.map((instruction, index) => (\r\n                                        <li key={index}>{instruction}</li>\r\n                                    ))}\r\n                                </ol>\r\n                            </div>\r\n\r\n                            {protocol.contraindications.length > 0 && (\r\n                                <div className=\"protocol-warnings\">\r\n                                    <h4>⚠️ Controindicazioni:</h4>\r\n                                    <ul className=\"warnings-list\">\r\n                                        {protocol.contraindications.map((warning, index) => (\r\n                                            <li key={index}>{warning}</li>\r\n                                        ))}\r\n                                    </ul>\r\n                                </div>\r\n                            )}\r\n\r\n                            <div className=\"protocol-action\">\r\n                                <button\r\n                                    className={`protocol-btn ${activeSession === id ? 'active' : ''}`}\r\n                                    onClick={() => activeSession === id ? endSession() : startSession(id)}\r\n                                    disabled={activeSession && activeSession !== id}\r\n                                >\r\n                                    {activeSession === id ? '🛑 Ferma Sessione' : '▶️ Inizia Sessione'}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* HISTORY SESSIONI */}\r\n            {sessionHistory.length > 0 && (\r\n                <div className=\"recovery-history\">\r\n                    <h2>📈 CRONOLOGIA SESSIONI</h2>\r\n                    <div className=\"history-list\">\r\n                        {sessionHistory.slice(0, 10).map((session) => {\r\n                            const protocol = recoveryProtocols[session.protocol];\r\n                            const sessionDate = new Date(session.date);\r\n                            \r\n                            return (\r\n                                <div key={session.id} className=\"history-item\">\r\n                                    <div className=\"history-protocol\">\r\n                                        <span className=\"history-icon\">{protocol.icon}</span>\r\n                                        <div className=\"history-info\">\r\n                                            <h4>{protocol.name}</h4>\r\n                                            <span className=\"history-date\">\r\n                                                {sessionDate.toLocaleDateString('it-IT')} - {sessionDate.toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' })}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"history-stats\">\r\n                                        <span className=\"history-duration\">{formatTime(session.duration)}</span>\r\n                                        <span className=\"history-calories\">\r\n                                            ~{Math.round((session.duration / 60) * (protocol.calories / 60))} cal\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    \r\n                    {sessionHistory.length > 10 && (\r\n                        <button className=\"show-more-btn\">\r\n                            Mostra altre {sessionHistory.length - 10} sessioni\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            )}\r\n\r\n            {/* RECOVERY TIPS */}\r\n            <div className=\"recovery-tips\">\r\n                <h2>💡 CONSIGLI PROFESSIONALI</h2>\r\n                <div className=\"tips-grid\">\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">🌡️</div>\r\n                        <h4>Contrasto Termico</h4>\r\n                        <p>Alterna calore e freddo per massimizzare la circolazione e accelerare il recupero muscolare.</p>\r\n                    </div>\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">💧</div>\r\n                        <h4>Idratazione</h4>\r\n                        <p>Bevi acqua abbondante durante e dopo ogni sessione per mantenere l'equilibrio idro-salino.</p>\r\n                    </div>\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">⏰</div>\r\n                        <h4>Timing Ottimale</h4>\r\n                        <p>Le sessioni di recovery sono più efficaci entro 2-6 ore dopo l'allenamento intenso.</p>\r\n                    </div>\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">🎯</div>\r\n                        <h4>Consistenza</h4>\r\n                        <p>3-4 sessioni settimanali regolari sono più efficaci di sessioni sporadiche intense.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recovery;","import React from 'react';\r\n\r\nconst Progress = () => {\r\n    const [progressData, setProgressData] = React.useState([]);\r\n    const [newEntry, setNewEntry] = React.useState({\r\n        weight: '',\r\n        bodyFat: '',\r\n        muscleMass: '',\r\n        chest: '',\r\n        arms: '',\r\n        waist: '',\r\n        thighs: '',\r\n        notes: ''\r\n    });\r\n    const [timeStats, setTimeStats] = React.useState({\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        monthlyTime: 0,\r\n        sessionsCompleted: 0\r\n    });\r\n    \r\n    const loadProgressData = () => {\r\n        const saved = localStorage.getItem('progressData');\r\n        if (saved) {\r\n            setProgressData(JSON.parse(saved));\r\n        }\r\n        \r\n        const savedTimeStats = localStorage.getItem('timeStats');\r\n        if (savedTimeStats) {\r\n            setTimeStats(JSON.parse(savedTimeStats));\r\n        }\r\n    };\r\n    \r\n    const saveProgressData = (data) => {\r\n        localStorage.setItem('progressData', JSON.stringify(data));\r\n    };\r\n    \r\n    const addEntry = () => {\r\n        if (!newEntry.weight) return;\r\n        \r\n        const entry = {\r\n            ...newEntry,\r\n            date: new Date().toISOString().split('T')[0],\r\n            id: Date.now()\r\n        };\r\n        \r\n        const updated = [entry, ...progressData];\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n        \r\n        setNewEntry({\r\n            weight: '',\r\n            bodyFat: '',\r\n            muscleMass: '',\r\n            chest: '',\r\n            arms: '',\r\n            waist: '',\r\n            thighs: '',\r\n            notes: ''\r\n        });\r\n    };\r\n    \r\n    const deleteEntry = (id) => {\r\n        const updated = progressData.filter(entry => entry.id !== id);\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadProgressData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"progress-container\">\r\n            <h2>🎯 Progress Tracker Avanzato</h2>\r\n            \r\n            <div className=\"time-stats\">\r\n                <h3>📊 Statistiche Tempo Investito</h3>\r\n                <div className=\"stats-grid\">\r\n                    <div className=\"stat-card\">\r\n                        <h4>Tempo Totale</h4>\r\n                        <p>{formatTime(timeStats.totalWorkoutTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questa Settimana</h4>\r\n                        <p>{formatTime(timeStats.weeklyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questo Mese</h4>\r\n                        <p>{formatTime(timeStats.monthlyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Sessioni Completate</h4>\r\n                        <p>{timeStats.sessionsCompleted}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"add-entry-form\">\r\n                <h3>➕ Aggiungi Nuove Misurazioni</h3>\r\n                <div className=\"form-grid\">\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Peso (kg)\"\r\n                        value={newEntry.weight}\r\n                        onChange={(e) => setNewEntry({...newEntry, weight: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Grassa (%)\"\r\n                        value={newEntry.bodyFat}\r\n                        onChange={(e) => setNewEntry({...newEntry, bodyFat: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Muscolare (kg)\"\r\n                        value={newEntry.muscleMass}\r\n                        onChange={(e) => setNewEntry({...newEntry, muscleMass: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Petto (cm)\"\r\n                        value={newEntry.chest}\r\n                        onChange={(e) => setNewEntry({...newEntry, chest: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Braccia (cm)\"\r\n                        value={newEntry.arms}\r\n                        onChange={(e) => setNewEntry({...newEntry, arms: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Vita (cm)\"\r\n                        value={newEntry.waist}\r\n                        onChange={(e) => setNewEntry({...newEntry, waist: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Cosce (cm)\"\r\n                        value={newEntry.thighs}\r\n                        onChange={(e) => setNewEntry({...newEntry, thighs: e.target.value})}\r\n                    />\r\n                    <textarea\r\n                        placeholder=\"Note (sensazioni, obiettivi, etc.)\"\r\n                        value={newEntry.notes}\r\n                        onChange={(e) => setNewEntry({...newEntry, notes: e.target.value})}\r\n                    />\r\n                </div>\r\n                <button className=\"button\" onClick={addEntry}>Aggiungi Misurazione</button>\r\n            </div>\r\n            \r\n            <div className=\"progress-table\">\r\n                <h3>📈 Storico Progressi</h3>\r\n                {progressData.length === 0 ? (\r\n                    <p>Nessuna misurazione ancora. Inizia ad aggiungere i tuoi progressi!</p>\r\n                ) : (\r\n                    <div className=\"table-responsive\">\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Data</th>\r\n                                    <th>Peso</th>\r\n                                    <th>Grasso</th>\r\n                                    <th>Muscolo</th>\r\n                                    <th>Petto</th>\r\n                                    <th>Braccia</th>\r\n                                    <th>Vita</th>\r\n                                    <th>Cosce</th>\r\n                                    <th>Note</th>\r\n                                    <th>Azioni</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {progressData.map((entry) => (\r\n                                    <tr key={entry.id}>\r\n                                        <td>{entry.date}</td>\r\n                                        <td>{entry.weight} kg</td>\r\n                                        <td>{entry.bodyFat}%</td>\r\n                                        <td>{entry.muscleMass} kg</td>\r\n                                        <td>{entry.chest} cm</td>\r\n                                        <td>{entry.arms} cm</td>\r\n                                        <td>{entry.waist} cm</td>\r\n                                        <td>{entry.thighs} cm</td>\r\n                                        <td className=\"notes-cell\">{entry.notes}</td>\r\n                                        <td>\r\n                                            <button \r\n                                                className=\"delete-btn\"\r\n                                                onClick={() => deleteEntry(entry.id)}\r\n                                            >\r\n                                                🗑️\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Progress;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { dataManager } from '../utils/dataManager';\r\n\r\nconst Measurements = () => {\r\n    const navigate = useNavigate();\r\n    const [measurements, setMeasurements] = useState([]);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [formData, setFormData] = useState({\r\n        weight: '',\r\n        height: '',\r\n        bodyFat: '',\r\n        muscleMass: '',\r\n        waist: '',\r\n        chest: '',\r\n        arms: '',\r\n        thighs: '',\r\n        notes: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        loadMeasurements();\r\n    }, []);\r\n\r\n    const loadMeasurements = () => {\r\n        const savedMeasurements = dataManager.getMeasurements();\r\n        setMeasurements(savedMeasurements);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (!formData.weight) {\r\n            alert('Inserisci almeno il peso!');\r\n            return;\r\n        }\r\n\r\n        const measurementData = {\r\n            weight: parseFloat(formData.weight),\r\n            height: formData.height ? parseFloat(formData.height) : null,\r\n            bodyFat: formData.bodyFat ? parseFloat(formData.bodyFat) : null,\r\n            muscleMass: formData.muscleMass ? parseFloat(formData.muscleMass) : null,\r\n            waist: formData.waist ? parseFloat(formData.waist) : null,\r\n            chest: formData.chest ? parseFloat(formData.chest) : null,\r\n            arms: formData.arms ? parseFloat(formData.arms) : null,\r\n            thighs: formData.thighs ? parseFloat(formData.thighs) : null,\r\n            notes: formData.notes\r\n        };\r\n\r\n        dataManager.saveMeasurement(measurementData);\r\n        \r\n        // Reset form\r\n        setFormData({\r\n            weight: '',\r\n            height: '',\r\n            bodyFat: '',\r\n            muscleMass: '',\r\n            waist: '',\r\n            chest: '',\r\n            arms: '',\r\n            thighs: '',\r\n            notes: ''\r\n        });\r\n        \r\n        setShowForm(false);\r\n        loadMeasurements();\r\n        \r\n        alert('Misurazione salvata con successo!');\r\n    };\r\n\r\n    const getProgressChange = (current, previous, unit = 'kg') => {\r\n        if (!previous) return { change: 0, trend: 'stable' };\r\n        const change = current - previous;\r\n        const trend = change > 0 ? 'up' : change < 0 ? 'down' : 'stable';\r\n        return { change: Math.abs(change).toFixed(1) + unit, trend };\r\n    };\r\n\r\n    const getLatestMeasurement = () => measurements[0] || null;\r\n    const getPreviousMeasurement = () => measurements[1] || null;\r\n\r\n    const latest = getLatestMeasurement();\r\n    const previous = getPreviousMeasurement();\r\n\r\n    return (\r\n        <div className=\"measurements-container\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"measurements-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-content\">\r\n                    <h1>📏 MISURAZIONI CORPOREE</h1>\r\n                    <p className=\"subtitle\">Traccia i tuoi progressi fisici nel tempo</p>\r\n                </div>\r\n\r\n                <button \r\n                    className=\"add-measurement-btn\"\r\n                    onClick={() => setShowForm(true)}\r\n                    style={{\r\n                        background: '#ff9500',\r\n                        color: 'white',\r\n                        padding: '12px 24px',\r\n                        borderRadius: '8px',\r\n                        border: 'none',\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    ➕ Nuova Misurazione\r\n                </button>\r\n            </div>\r\n\r\n            {/* FORM NUOVA MISURAZIONE */}\r\n            {showForm && (\r\n                <div className=\"measurement-form-overlay\">\r\n                    <div className=\"measurement-form\">\r\n                        <div className=\"form-header\">\r\n                            <h3>📊 Nuova Misurazione</h3>\r\n                            <button onClick={() => setShowForm(false)}>✕</button>\r\n                        </div>\r\n                        \r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"form-grid\">\r\n                                <div className=\"form-group\">\r\n                                    <label>🏋️ Peso (kg) *</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.1\"\r\n                                        value={formData.weight}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, weight: e.target.value}))}\r\n                                        placeholder=\"es. 75.5\"\r\n                                        required\r\n                                        style={{ background: '#ff9500', color: 'white' }}\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>📏 Altezza (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        value={formData.height}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, height: e.target.value}))}\r\n                                        placeholder=\"es. 175\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>📊 Grasso Corporeo (%)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.1\"\r\n                                        value={formData.bodyFat}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, bodyFat: e.target.value}))}\r\n                                        placeholder=\"es. 12.5\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>💪 Massa Muscolare (kg)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.1\"\r\n                                        value={formData.muscleMass}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, muscleMass: e.target.value}))}\r\n                                        placeholder=\"es. 35.2\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>⚖️ Girovita (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        value={formData.waist}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, waist: e.target.value}))}\r\n                                        placeholder=\"es. 82\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>🫁 Petto (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        value={formData.chest}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, chest: e.target.value}))}\r\n                                        placeholder=\"es. 105\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>💪 Braccia (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        value={formData.arms}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, arms: e.target.value}))}\r\n                                        placeholder=\"es. 38\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>🦵 Cosce (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        value={formData.thighs}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, thighs: e.target.value}))}\r\n                                        placeholder=\"es. 58\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group full-width\">\r\n                                    <label>📝 Note</label>\r\n                                    <textarea \r\n                                        value={formData.notes}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, notes: e.target.value}))}\r\n                                        placeholder=\"Condizioni, sensazioni, obiettivi...\"\r\n                                        rows=\"3\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"form-actions\">\r\n                                <button type=\"button\" onClick={() => setShowForm(false)}>\r\n                                    Annulla\r\n                                </button>\r\n                                <button type=\"submit\" style={{ background: '#22c55e', color: 'white' }}>\r\n                                    ✅ Salva Misurazione\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* STATISTICHE CURRENT */}\r\n            {latest && (\r\n                <div className=\"current-stats\">\r\n                    <h3>📊 Stato Attuale</h3>\r\n                    <div className=\"stats-grid\">\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-icon\">🏋️</div>\r\n                            <div className=\"stat-info\">\r\n                                <span className=\"stat-value\">{latest.weight}kg</span>\r\n                                <span className=\"stat-label\">Peso</span>\r\n                                {previous && (\r\n                                    <span className={`stat-change ${getProgressChange(latest.weight, previous.weight).trend}`}>\r\n                                        {getProgressChange(latest.weight, previous.weight).trend === 'up' ? '↗' : \r\n                                         getProgressChange(latest.weight, previous.weight).trend === 'down' ? '↘' : '→'} \r\n                                        {getProgressChange(latest.weight, previous.weight).change}\r\n                                    </span>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {latest.bodyFat && (\r\n                            <div className=\"stat-card\">\r\n                                <div className=\"stat-icon\">📊</div>\r\n                                <div className=\"stat-info\">\r\n                                    <span className=\"stat-value\">{latest.bodyFat}%</span>\r\n                                    <span className=\"stat-label\">Grasso</span>\r\n                                    {previous?.bodyFat && (\r\n                                        <span className={`stat-change ${getProgressChange(latest.bodyFat, previous.bodyFat, '%').trend}`}>\r\n                                            {getProgressChange(latest.bodyFat, previous.bodyFat, '%').trend === 'down' ? '↘' : '↗'} \r\n                                            {getProgressChange(latest.bodyFat, previous.bodyFat, '%').change}\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {latest.muscleMass && (\r\n                            <div className=\"stat-card\">\r\n                                <div className=\"stat-icon\">💪</div>\r\n                                <div className=\"stat-info\">\r\n                                    <span className=\"stat-value\">{latest.muscleMass}kg</span>\r\n                                    <span className=\"stat-label\">Muscoli</span>\r\n                                    {previous?.muscleMass && (\r\n                                        <span className={`stat-change ${getProgressChange(latest.muscleMass, previous.muscleMass).trend}`}>\r\n                                            {getProgressChange(latest.muscleMass, previous.muscleMass).trend === 'up' ? '↗' : '↘'} \r\n                                            {getProgressChange(latest.muscleMass, previous.muscleMass).change}\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {latest.waist && (\r\n                            <div className=\"stat-card\">\r\n                                <div className=\"stat-icon\">⚖️</div>\r\n                                <div className=\"stat-info\">\r\n                                    <span className=\"stat-value\">{latest.waist}cm</span>\r\n                                    <span className=\"stat-label\">Girovita</span>\r\n                                    {previous?.waist && (\r\n                                        <span className={`stat-change ${getProgressChange(latest.waist, previous.waist, 'cm').trend}`}>\r\n                                            {getProgressChange(latest.waist, previous.waist, 'cm').trend === 'down' ? '↘' : '↗'} \r\n                                            {getProgressChange(latest.waist, previous.waist, 'cm').change}\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* STORICO MISURAZIONI */}\r\n            <div className=\"measurements-history\">\r\n                <h3>📈 Storico Misurazioni</h3>\r\n                {measurements.length > 0 ? (\r\n                    <div className=\"measurements-list\">\r\n                        {measurements.map((measurement, index) => (\r\n                            <div key={measurement.id} className=\"measurement-item\">\r\n                                <div className=\"measurement-date\">\r\n                                    {new Date(measurement.date).toLocaleDateString('it-IT', {\r\n                                        day: 'numeric',\r\n                                        month: 'long',\r\n                                        year: 'numeric'\r\n                                    })}\r\n                                </div>\r\n                                \r\n                                <div className=\"measurement-data\">\r\n                                    <div className=\"data-group\">\r\n                                        <span className=\"data-label\">Peso:</span>\r\n                                        <span className=\"data-value\">{measurement.weight}kg</span>\r\n                                    </div>\r\n                                    \r\n                                    {measurement.bodyFat && (\r\n                                        <div className=\"data-group\">\r\n                                            <span className=\"data-label\">Grasso:</span>\r\n                                            <span className=\"data-value\">{measurement.bodyFat}%</span>\r\n                                        </div>\r\n                                    )}\r\n                                    \r\n                                    {measurement.muscleMass && (\r\n                                        <div className=\"data-group\">\r\n                                            <span className=\"data-label\">Muscoli:</span>\r\n                                            <span className=\"data-value\">{measurement.muscleMass}kg</span>\r\n                                        </div>\r\n                                    )}\r\n                                    \r\n                                    {measurement.waist && (\r\n                                        <div className=\"data-group\">\r\n                                            <span className=\"data-label\">Girovita:</span>\r\n                                            <span className=\"data-value\">{measurement.waist}cm</span>\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    {measurement.notes && (\r\n                                        <div className=\"measurement-notes\">\r\n                                            <strong>Note:</strong> {measurement.notes}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"no-measurements\">\r\n                        <h4>📏 Nessuna Misurazione</h4>\r\n                        <p>Inizia a tracciare i tuoi progressi fisici!</p>\r\n                        <button \r\n                            onClick={() => setShowForm(true)}\r\n                            className=\"start-measuring-btn\"\r\n                        >\r\n                            📊 Inizia a Misurare\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* COLLEGAMENTO AD ANALYTICS */}\r\n            <div className=\"analytics-link\" style={{\r\n                padding: '20px',\r\n                background: 'rgba(0, 255, 255, 0.1)',\r\n                borderRadius: '10px',\r\n                textAlign: 'center',\r\n                marginTop: '20px'\r\n            }}>\r\n                <h3 style={{ color: '#00ffff' }}>📊 Visualizza i Progressi</h3>\r\n                <p>Le tue misurazioni alimentano gli analytics in tempo reale!</p>\r\n                <button \r\n                    onClick={() => navigate('/analytics')}\r\n                    style={{\r\n                        background: '#00ffff',\r\n                        color: 'black',\r\n                        padding: '12px 24px',\r\n                        borderRadius: '8px',\r\n                        border: 'none',\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    🚀 Vai agli Analytics\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Measurements;","// Firebase Configuration - GitHub Pages Compatible\r\n// Configurazione inline per GitHub Pages (non supporta variabili .env a runtime)\r\n\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, connectAuthEmulator } from 'firebase/auth';\r\nimport { getFirestore, connectFirestoreEmulator, enableNetwork, disableNetwork } from 'firebase/firestore';\r\nimport { getStorage, connectStorageEmulator } from 'firebase/storage';\r\nimport { getAnalytics, isSupported } from 'firebase/analytics';\r\n\r\n// Configurazione Firebase - DEMO/LOCALE\r\nconst firebaseConfig = {\r\n    apiKey: \"demo-key\",\r\n    authDomain: \"demo-project.firebaseapp.com\",\r\n    projectId: \"demo-project\",\r\n    storageBucket: \"demo-project.appspot.com\",\r\n    messagingSenderId: \"123456789\",\r\n    appId: \"1:123456789:web:demo\",\r\n    measurementId: \"G-DEMO\"\r\n};\r\n\r\n\r\n// Inizializzazione app\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Inizializzazione servizi Firebase\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\nexport const storage = getStorage(app);\r\n\r\n// Inizializzazione Analytics condizionale\r\nlet analytics = null;\r\nisSupported().then(supported => {\r\n    if (supported) {\r\n        analytics = getAnalytics(app);\r\n        console.log('📊 Firebase Analytics inizializzato');\r\n    } else {\r\n        console.log('📊 Firebase Analytics non supportato in questo ambiente');\r\n    }\r\n});\r\n\r\nexport { analytics };\r\n\r\n// Configurazione ambiente sviluppo\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\nconst useEmulators = process.env.REACT_APP_USE_FIREBASE_EMULATORS === 'true';\r\n\r\nif (isDevelopment && useEmulators) {\r\n    console.log('🔧 Connessione agli emulatori Firebase...');\r\n    \r\n    // Connessione agli emulatori solo se non già connessi\r\n    if (!auth._delegate._config?.emulator) {\r\n        connectAuthEmulator(auth, 'http://localhost:9099');\r\n    }\r\n    \r\n    if (!db._delegate._databaseId?.database.includes('localhost')) {\r\n        connectFirestoreEmulator(db, 'localhost', 8080);\r\n    }\r\n    \r\n    if (!storage._delegate._host.includes('localhost')) {\r\n        connectStorageEmulator(storage, 'localhost', 9199);\r\n    }\r\n    \r\n    console.log('✅ Emulatori Firebase connessi');\r\n}\r\n\r\n// Utility per gestione connessione\r\nexport const connectionManager = {\r\n    enable: () => enableNetwork(db),\r\n    disable: () => disableNetwork(db),\r\n    \r\n    // Controlla stato connessione\r\n    checkConnection: async () => {\r\n        try {\r\n            await enableNetwork(db);\r\n            return true;\r\n        } catch (error) {\r\n            console.error('❌ Errore connessione Firebase:', error);\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\n// Configurazioni ottimizzate per performance\r\nexport const firestoreSettings = {\r\n    cacheSizeBytes: 50 * 1024 * 1024, // 50MB cache\r\n    experimentalForceLongPolling: false, // Usa WebSocket quando possibile\r\n    merge: true, // Abilita merge automatico\r\n    ignoreUndefinedProperties: true // Ignora proprietà undefined\r\n};\r\n\r\n// Helper per logging strutturato\r\nexport const logger = {\r\n    info: (message, data = null) => {\r\n        console.log(`ℹ️ [Firebase] ${message}`, data || '');\r\n    },\r\n    \r\n    error: (message, error = null) => {\r\n        console.error(`❌ [Firebase] ${message}`, error || '');\r\n    },\r\n    \r\n    warn: (message, data = null) => {\r\n        console.warn(`⚠️ [Firebase] ${message}`, data || '');\r\n    },\r\n    \r\n    success: (message, data = null) => {\r\n        console.log(`✅ [Firebase] ${message}`, data || '');\r\n    }\r\n};\r\n\r\n// Export dell'app per usi avanzati\r\nexport default app;\r\n\r\nlogger.success('Firebase configurato con successo');","// Firebase Authentication Service - Enterprise Grade\r\n// Gestione completa autenticazione con error handling avanzato\r\n\r\nimport { \r\n    signInWithEmailAndPassword,\r\n    createUserWithEmailAndPassword,\r\n    signInWithPopup,\r\n    GoogleAuthProvider,\r\n    signOut,\r\n    onAuthStateChanged,\r\n    sendPasswordResetEmail,\r\n    updateProfile,\r\n    updatePassword,\r\n    deleteUser,\r\n    reauthenticateWithCredential,\r\n    EmailAuthProvider\r\n} from 'firebase/auth';\r\n\r\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { auth, db, logger } from './config';\r\n\r\n// Provider Google configurato\r\nconst googleProvider = new GoogleAuthProvider();\r\ngoogleProvider.addScope('profile');\r\ngoogleProvider.addScope('email');\r\n\r\n// Classe per gestire l'autenticazione\r\nclass AuthService {\r\n    constructor() {\r\n        this.currentUser = null;\r\n        this.authStateListeners = [];\r\n        this.initializeAuthListener();\r\n    }\r\n\r\n    // Inizializza listener per cambio stato auth\r\n    initializeAuthListener() {\r\n        onAuthStateChanged(auth, (user) => {\r\n            this.currentUser = user;\r\n            this.notifyAuthStateListeners(user);\r\n            \r\n            if (user) {\r\n                logger.success('Utente autenticato', { \r\n                    uid: user.uid, \r\n                    email: user.email,\r\n                    displayName: user.displayName \r\n                });\r\n                this.updateUserLastSeen(user);\r\n            } else {\r\n                logger.info('Utente disconnesso');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Registra listener per cambio stato\r\n    onAuthStateChange(callback) {\r\n        this.authStateListeners.push(callback);\r\n        \r\n        // Rimuovi listener\r\n        return () => {\r\n            this.authStateListeners = this.authStateListeners.filter(cb => cb !== callback);\r\n        };\r\n    }\r\n\r\n    // Notifica tutti i listener del cambio stato\r\n    notifyAuthStateListeners(user) {\r\n        this.authStateListeners.forEach(callback => {\r\n            try {\r\n                callback(user);\r\n            } catch (error) {\r\n                logger.error('Errore nel listener auth state', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Login con email e password\r\n    async signInWithEmail(email, password) {\r\n        try {\r\n            logger.info('Tentativo login con email...');\r\n            \r\n            const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n            \r\n            await this.updateUserLastSeen(user);\r\n            logger.success('Login completato', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore login email', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Registrazione con email e password\r\n    async signUpWithEmail(email, password, displayName = null) {\r\n        try {\r\n            logger.info('Tentativo registrazione con email...');\r\n            \r\n            const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n            \r\n            // Aggiorna profilo se fornito displayName\r\n            if (displayName) {\r\n                await updateProfile(user, { displayName });\r\n            }\r\n            \r\n            // Crea documento utente in Firestore\r\n            await this.createUserDocument(user, { displayName });\r\n            \r\n            logger.success('Registrazione completata', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore registrazione email', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Login con Google\r\n    async signInWithGoogle() {\r\n        try {\r\n            logger.info('Tentativo login con Google...');\r\n            \r\n            const userCredential = await signInWithPopup(auth, googleProvider);\r\n            const user = userCredential.user;\r\n            \r\n            // Crea o aggiorna documento utente\r\n            await this.createUserDocument(user, {\r\n                displayName: user.displayName,\r\n                photoURL: user.photoURL,\r\n                provider: 'google'\r\n            });\r\n            \r\n            logger.success('Login Google completato', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore login Google', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Logout\r\n    async signOutUser() {\r\n        try {\r\n            logger.info('Logout utente...');\r\n            await signOut(auth);\r\n            logger.success('Logout completato');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore logout', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Reset password\r\n    async resetPassword(email) {\r\n        try {\r\n            logger.info('Invio reset password...');\r\n            await sendPasswordResetEmail(auth, email);\r\n            logger.success('Email reset password inviata');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore reset password', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Aggiorna password (richiede riautenticazione recente)\r\n    async updateUserPassword(currentPassword, newPassword) {\r\n        try {\r\n            if (!this.currentUser) {\r\n                throw new Error('Nessun utente autenticato');\r\n            }\r\n\r\n            logger.info('Aggiornamento password...');\r\n            \r\n            // Riautentica utente\r\n            const credential = EmailAuthProvider.credential(\r\n                this.currentUser.email,\r\n                currentPassword\r\n            );\r\n            await reauthenticateWithCredential(this.currentUser, credential);\r\n            \r\n            // Aggiorna password\r\n            await updatePassword(this.currentUser, newPassword);\r\n            \r\n            logger.success('Password aggiornata');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore aggiornamento password', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Crea documento utente in Firestore\r\n    async createUserDocument(user, additionalData = {}) {\r\n        if (!user) return;\r\n        \r\n        try {\r\n            const userRef = doc(db, 'users', user.uid);\r\n            const userDoc = await getDoc(userRef);\r\n            \r\n            if (!userDoc.exists()) {\r\n                const userData = {\r\n                    uid: user.uid,\r\n                    email: user.email,\r\n                    displayName: user.displayName || additionalData.displayName || 'Utente',\r\n                    photoURL: user.photoURL || additionalData.photoURL || null,\r\n                    provider: additionalData.provider || 'email',\r\n                    createdAt: serverTimestamp(),\r\n                    lastSeen: serverTimestamp(),\r\n                    settings: {\r\n                        units: 'metric', // metric/imperial\r\n                        language: 'it',\r\n                        notifications: true,\r\n                        darkMode: false\r\n                    },\r\n                    profile: {\r\n                        age: null,\r\n                        height: null,\r\n                        activityLevel: 'moderate',\r\n                        goals: [],\r\n                        experience: 'beginner'\r\n                    },\r\n                    ...additionalData\r\n                };\r\n                \r\n                await setDoc(userRef, userData);\r\n                logger.success('Documento utente creato');\r\n            } else {\r\n                // Aggiorna solo lastSeen se utente esiste\r\n                await setDoc(userRef, { lastSeen: serverTimestamp() }, { merge: true });\r\n                logger.info('LastSeen aggiornato');\r\n            }\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore creazione documento utente', error);\r\n        }\r\n    }\r\n\r\n    // Aggiorna ultimo accesso\r\n    async updateUserLastSeen(user) {\r\n        if (!user) return;\r\n        \r\n        try {\r\n            const userRef = doc(db, 'users', user.uid);\r\n            await setDoc(userRef, { \r\n                lastSeen: serverTimestamp(),\r\n                isOnline: true \r\n            }, { merge: true });\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore aggiornamento lastSeen', error);\r\n        }\r\n    }\r\n\r\n    // Gestione errori Firebase Auth\r\n    handleAuthError(error) {\r\n        const errorMessages = {\r\n            'auth/user-not-found': 'Utente non trovato. Verifica l\\'email inserita.',\r\n            'auth/wrong-password': 'Password non corretta. Riprova.',\r\n            'auth/email-already-in-use': 'Email già registrata. Prova ad effettuare il login.',\r\n            'auth/weak-password': 'Password troppo debole. Usa almeno 6 caratteri.',\r\n            'auth/invalid-email': 'Email non valida. Verifica il formato.',\r\n            'auth/user-disabled': 'Account disabilitato. Contatta l\\'assistenza.',\r\n            'auth/too-many-requests': 'Troppi tentativi. Riprova più tardi.',\r\n            'auth/network-request-failed': 'Errore di connessione. Verifica la rete.',\r\n            'auth/popup-closed-by-user': 'Login annullato dall\\'utente.',\r\n            'auth/cancelled-popup-request': 'Popup già aperto. Completa il login.',\r\n            'auth/popup-blocked': 'Popup bloccato dal browser. Abilita i popup.',\r\n            'auth/requires-recent-login': 'Operazione sensibile. Effettua nuovamente il login.'\r\n        };\r\n\r\n        return {\r\n            code: error.code,\r\n            message: errorMessages[error.code] || error.message || 'Errore sconosciuto',\r\n            originalError: error\r\n        };\r\n    }\r\n\r\n    // Utility per controllo stato\r\n    isAuthenticated() {\r\n        return !!this.currentUser;\r\n    }\r\n\r\n    getCurrentUser() {\r\n        return this.currentUser;\r\n    }\r\n\r\n    // Elimina account (operazione irreversibile)\r\n    async deleteAccount(password = null) {\r\n        try {\r\n            if (!this.currentUser) {\r\n                throw new Error('Nessun utente autenticato');\r\n            }\r\n\r\n            logger.warn('Tentativo eliminazione account...');\r\n            \r\n            // Riautentica se password fornita\r\n            if (password) {\r\n                const credential = EmailAuthProvider.credential(\r\n                    this.currentUser.email,\r\n                    password\r\n                );\r\n                await reauthenticateWithCredential(this.currentUser, credential);\r\n            }\r\n            \r\n            const uid = this.currentUser.uid;\r\n            \r\n            // Elimina account\r\n            await deleteUser(this.currentUser);\r\n            \r\n            logger.warn('Account eliminato', { uid });\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore eliminazione account', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n}\r\n\r\n// Instanza singleton del servizio\r\nconst authService = new AuthService();\r\n\r\nexport default authService;\r\n\r\n// Export delle funzioni principali per retrocompatibilità\r\nexport {\r\n    authService,\r\n    auth,\r\n    GoogleAuthProvider\r\n};","// Firestore Database Service - Enterprise Architecture\r\n// Gestione dati fitness con pattern Repository e caching intelligente\r\n\r\nimport {\r\n    collection,\r\n    doc,\r\n    getDocs,\r\n    getDoc,\r\n    setDoc,\r\n    addDoc,\r\n    updateDoc,\r\n    deleteDoc,\r\n    query,\r\n    where,\r\n    orderBy,\r\n    limit,\r\n    startAfter,\r\n    onSnapshot,\r\n    serverTimestamp,\r\n    increment,\r\n    arrayUnion,\r\n    arrayRemove,\r\n    writeBatch,\r\n    runTransaction\r\n} from 'firebase/firestore';\r\n\r\nimport { db, logger } from './config';\r\nimport authService from './auth';\r\n\r\n// Base Repository Class per operazioni CRUD standardizzate\r\nclass BaseRepository {\r\n    constructor(collectionName) {\r\n        this.collectionName = collectionName;\r\n        this.collectionRef = collection(db, collectionName);\r\n        this.cache = new Map(); // Cache locale per performance\r\n        this.listeners = new Map(); // Gestione listener real-time\r\n    }\r\n\r\n    // Ottieni documento per ID\r\n    async getById(id, useCache = true) {\r\n        try {\r\n            // Controlla cache prima\r\n            if (useCache && this.cache.has(id)) {\r\n                const cached = this.cache.get(id);\r\n                // Cache valida per 5 minuti\r\n                if (Date.now() - cached.timestamp < 5 * 60 * 1000) {\r\n                    logger.info(`Cache hit per ${this.collectionName}/${id}`);\r\n                    return { success: true, data: cached.data, fromCache: true };\r\n                }\r\n            }\r\n\r\n            const docRef = doc(db, this.collectionName, id);\r\n            const docSnap = await getDoc(docRef);\r\n            \r\n            if (docSnap.exists()) {\r\n                const data = { id: docSnap.id, ...docSnap.data() };\r\n                \r\n                // Aggiorna cache\r\n                if (useCache) {\r\n                    this.cache.set(id, { data, timestamp: Date.now() });\r\n                }\r\n                \r\n                return { success: true, data, fromCache: false };\r\n            } else {\r\n                return { success: false, error: 'Documento non trovato', data: null };\r\n            }\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore getById ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, data: null };\r\n        }\r\n    }\r\n\r\n    // Crea nuovo documento\r\n    async create(data, customId = null) {\r\n        try {\r\n            const userId = authService.getCurrentUser()?.uid;\r\n            if (!userId) {\r\n                throw new Error('Utente non autenticato');\r\n            }\r\n\r\n            const docData = {\r\n                ...data,\r\n                userId,\r\n                createdAt: serverTimestamp(),\r\n                updatedAt: serverTimestamp()\r\n            };\r\n\r\n            let docRef;\r\n            if (customId) {\r\n                docRef = doc(db, this.collectionName, customId);\r\n                await setDoc(docRef, docData);\r\n            } else {\r\n                docRef = await addDoc(this.collectionRef, docData);\r\n            }\r\n\r\n            const newId = customId || docRef.id;\r\n            \r\n            // Invalida cache\r\n            this.invalidateCache();\r\n            \r\n            logger.success(`Documento creato in ${this.collectionName}`, { id: newId });\r\n            return { success: true, id: newId, data: { id: newId, ...docData } };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore create ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, id: null };\r\n        }\r\n    }\r\n\r\n    // Aggiorna documento\r\n    async update(id, data, merge = true) {\r\n        try {\r\n            const docRef = doc(db, this.collectionName, id);\r\n            const updateData = {\r\n                ...data,\r\n                updatedAt: serverTimestamp()\r\n            };\r\n\r\n            if (merge) {\r\n                await updateDoc(docRef, updateData);\r\n            } else {\r\n                await setDoc(docRef, updateData);\r\n            }\r\n\r\n            // Invalida cache per questo documento\r\n            this.cache.delete(id);\r\n            \r\n            logger.success(`Documento aggiornato in ${this.collectionName}`, { id });\r\n            return { success: true, id };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore update ${this.collectionName}`, error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Elimina documento\r\n    async delete(id) {\r\n        try {\r\n            const docRef = doc(db, this.collectionName, id);\r\n            await deleteDoc(docRef);\r\n            \r\n            // Rimuovi da cache\r\n            this.cache.delete(id);\r\n            \r\n            logger.success(`Documento eliminato da ${this.collectionName}`, { id });\r\n            return { success: true };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore delete ${this.collectionName}`, error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Query personalizzata\r\n    async getWithQuery(queryConstraints = [], useCache = false) {\r\n        try {\r\n            const q = query(this.collectionRef, ...queryConstraints);\r\n            const querySnapshot = await getDocs(q);\r\n            \r\n            const docs = [];\r\n            querySnapshot.forEach((doc) => {\r\n                docs.push({ id: doc.id, ...doc.data() });\r\n            });\r\n            \r\n            return { success: true, data: docs, count: docs.length };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore query ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, data: [], count: 0 };\r\n        }\r\n    }\r\n\r\n    // Listener real-time\r\n    subscribeToChanges(queryConstraints = [], callback = () => {}) {\r\n        try {\r\n            const q = query(this.collectionRef, ...queryConstraints);\r\n            const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n                const docs = [];\r\n                querySnapshot.forEach((doc) => {\r\n                    docs.push({ id: doc.id, ...doc.data() });\r\n                });\r\n                callback(docs);\r\n            });\r\n\r\n            return unsubscribe;\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore subscription ${this.collectionName}`, error);\r\n            return () => {};\r\n        }\r\n    }\r\n\r\n    // Invalidazione cache\r\n    invalidateCache() {\r\n        this.cache.clear();\r\n        logger.info(`Cache invalidata per ${this.collectionName}`);\r\n    }\r\n}\r\n\r\n// Repository specializzato per Progress Data\r\nclass ProgressRepository extends BaseRepository {\r\n    constructor() {\r\n        super('progress');\r\n    }\r\n\r\n    // Ottieni progressi utente corrente\r\n    async getUserProgress(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Aggiungi misurazione\r\n    async addMeasurement(measurementData) {\r\n        const data = {\r\n            ...measurementData,\r\n            date: measurementData.date || new Date().toISOString().split('T')[0],\r\n            type: 'measurement'\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Ottieni statistiche periodo\r\n    async getPeriodStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserProgress(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (result.success && result.data.length > 0) {\r\n            const data = result.data;\r\n            const latest = data[0];\r\n            const oldest = data[data.length - 1];\r\n\r\n            return {\r\n                success: true,\r\n                stats: {\r\n                    totalEntries: data.length,\r\n                    weightChange: latest.weight - oldest.weight,\r\n                    muscleMassChange: latest.muscleMass - oldest.muscleMass,\r\n                    bodyFatChange: latest.bodyFat - oldest.bodyFat,\r\n                    averageWeight: data.reduce((sum, entry) => sum + (entry.weight || 0), 0) / data.length,\r\n                    period: { startDate, endDate, days }\r\n                }\r\n            };\r\n        }\r\n\r\n        return { success: false, error: 'Dati insufficienti per calcolare statistiche' };\r\n    }\r\n}\r\n\r\n// Repository per Workout Sessions\r\nclass WorkoutRepository extends BaseRepository {\r\n    constructor() {\r\n        super('workouts');\r\n    }\r\n\r\n    // Inizio sessione workout\r\n    async startSession(workoutData) {\r\n        const sessionData = {\r\n            ...workoutData,\r\n            status: 'in_progress',\r\n            startTime: serverTimestamp(),\r\n            exercises: workoutData.exercises || [],\r\n            totalDuration: 0\r\n        };\r\n        \r\n        return this.create(sessionData);\r\n    }\r\n\r\n    // Completa sessione\r\n    async completeSession(sessionId, completionData) {\r\n        const updateData = {\r\n            ...completionData,\r\n            status: 'completed',\r\n            endTime: serverTimestamp(),\r\n            completedAt: serverTimestamp()\r\n        };\r\n        \r\n        return this.update(sessionId, updateData);\r\n    }\r\n\r\n    // Ottieni sessioni utente\r\n    async getUserSessions(limit = 50) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            orderBy('createdAt', 'desc'),\r\n            limit(limit)\r\n        ]);\r\n    }\r\n\r\n    // Statistiche workout\r\n    async getWorkoutStats(days = 7) {\r\n        const sessions = await this.getUserSessions(100);\r\n        \r\n        if (!sessions.success) return sessions;\r\n\r\n        const now = new Date();\r\n        const weekAgo = new Date(now.getTime() - (days * 24 * 60 * 60 * 1000));\r\n        \r\n        const recentSessions = sessions.data.filter(session => {\r\n            const sessionDate = session.createdAt?.toDate?.() || new Date(session.createdAt);\r\n            return sessionDate >= weekAgo && session.status === 'completed';\r\n        });\r\n\r\n        const totalSessions = recentSessions.length;\r\n        const totalDuration = recentSessions.reduce((sum, session) => sum + (session.totalDuration || 0), 0);\r\n        const averageDuration = totalSessions > 0 ? totalDuration / totalSessions : 0;\r\n        \r\n        const exerciseStats = {};\r\n        recentSessions.forEach(session => {\r\n            session.exercises?.forEach(exercise => {\r\n                if (!exerciseStats[exercise.name]) {\r\n                    exerciseStats[exercise.name] = { count: 0, totalVolume: 0 };\r\n                }\r\n                exerciseStats[exercise.name].count++;\r\n                exerciseStats[exercise.name].totalVolume += (exercise.sets * exercise.reps * exercise.weight) || 0;\r\n            });\r\n        });\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalSessions,\r\n                totalDuration,\r\n                averageDuration,\r\n                exerciseStats,\r\n                period: { days, startDate: weekAgo, endDate: now }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Repository per Exercise Tracking\r\nclass ExerciseRepository extends BaseRepository {\r\n    constructor() {\r\n        super('exercises');\r\n    }\r\n\r\n    // Aggiungi esercizio completato\r\n    async logExercise(exerciseData) {\r\n        const data = {\r\n            ...exerciseData,\r\n            date: exerciseData.date || new Date().toISOString().split('T')[0],\r\n            volume: (exerciseData.sets * exerciseData.reps * exerciseData.weight) || 0,\r\n            oneRepMax: this.calculateOneRepMax(exerciseData.weight, exerciseData.reps)\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Calcola 1RM stimato (formula Epley)\r\n    calculateOneRepMax(weight, reps) {\r\n        if (!weight || !reps || reps <= 0) return 0;\r\n        if (reps === 1) return weight;\r\n        return Math.round(weight * (1 + reps / 30));\r\n    }\r\n\r\n    // Ottieni PR per esercizio\r\n    async getPersonalRecords(exerciseName = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('weight', 'desc')\r\n        ];\r\n\r\n        if (exerciseName) {\r\n            constraints.unshift(where('exerciseName', '==', exerciseName));\r\n        }\r\n\r\n        const result = await this.getWithQuery(constraints);\r\n        \r\n        if (result.success) {\r\n            // Raggruppa per esercizio e prendi il massimo\r\n            const prs = {};\r\n            result.data.forEach(exercise => {\r\n                const name = exercise.exerciseName;\r\n                if (!prs[name] || exercise.weight > prs[name].weight) {\r\n                    prs[name] = exercise;\r\n                }\r\n            });\r\n            \r\n            return { success: true, data: Object.values(prs) };\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n\r\n// Repository per User Settings\r\nclass UserRepository extends BaseRepository {\r\n    constructor() {\r\n        super('users');\r\n    }\r\n\r\n    // Ottieni profilo utente corrente\r\n    async getCurrentUserProfile() {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.getById(userId);\r\n    }\r\n\r\n    // Aggiorna impostazioni utente\r\n    async updateSettings(settings) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.update(userId, { settings }, true);\r\n    }\r\n\r\n    // Aggiorna profilo utente\r\n    async updateProfile(profileData) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.update(userId, { profile: profileData }, true);\r\n    }\r\n}\r\n\r\n// Repository per Nutrition Tracking\r\nclass NutritionRepository extends BaseRepository {\r\n    constructor() {\r\n        super('nutrition');\r\n    }\r\n\r\n    // Registra pasto completato/saltato\r\n    async logMeal(mealData) {\r\n        const data = {\r\n            ...mealData,\r\n            date: mealData.date || new Date().toISOString().split('T')[0],\r\n            completedAt: mealData.status === 'completed' ? new Date() : null\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Aggiorna stato pasto\r\n    async updateMealStatus(mealId, status, notes = null) {\r\n        const updateData = {\r\n            status,\r\n            notes,\r\n            completedAt: status === 'completed' ? new Date() : null\r\n        };\r\n        \r\n        return this.update(mealId, updateData);\r\n    }\r\n\r\n    // Ottieni pasti utente per data/range\r\n    async getUserMeals(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Ottieni pasti per giorno specifico\r\n    async getDayMeals(date) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            where('date', '==', date),\r\n            orderBy('mealType', 'asc')\r\n        ]);\r\n    }\r\n\r\n    // Statistiche nutrizionali periodo\r\n    async getNutritionStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserMeals(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (!result.success) return result;\r\n\r\n        const meals = result.data;\r\n        const completedMeals = meals.filter(m => m.status === 'completed');\r\n        const totalMeals = meals.length;\r\n        const adherenceRate = totalMeals > 0 ? (completedMeals.length / totalMeals) * 100 : 0;\r\n\r\n        // Calcola proteine totali (se tracked)\r\n        const totalProteins = completedMeals.reduce((sum, meal) => sum + (meal.proteins || 0), 0);\r\n        const avgProteinsPerDay = days > 0 ? totalProteins / days : 0;\r\n\r\n        // Calcola streak\r\n        const streak = this.calculateNutritionStreak(meals);\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalMeals,\r\n                completedMeals: completedMeals.length,\r\n                adherenceRate: Math.round(adherenceRate),\r\n                totalProteins,\r\n                avgProteinsPerDay: Math.round(avgProteinsPerDay),\r\n                currentStreak: streak,\r\n                period: { startDate, endDate, days }\r\n            }\r\n        };\r\n    }\r\n\r\n    // Calcola streak nutrizionale\r\n    calculateNutritionStreak(meals) {\r\n        if (!meals.length) return 0;\r\n\r\n        // Raggruppa pasti per giorno\r\n        const mealsByDay = {};\r\n        meals.forEach(meal => {\r\n            if (!mealsByDay[meal.date]) {\r\n                mealsByDay[meal.date] = [];\r\n            }\r\n            mealsByDay[meal.date].push(meal);\r\n        });\r\n\r\n        // Calcola streak giorni consecutivi con adherence > 66%\r\n        let streak = 0;\r\n        const sortedDates = Object.keys(mealsByDay).sort().reverse();\r\n\r\n        for (const date of sortedDates) {\r\n            const dayMeals = mealsByDay[date];\r\n            const completedMeals = dayMeals.filter(m => m.status === 'completed');\r\n            const adherence = completedMeals.length / dayMeals.length;\r\n\r\n            if (adherence >= 0.66) { // Almeno 2/3 dei pasti completati\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return streak;\r\n    }\r\n}\r\n\r\n// Repository per Recovery Tracking\r\nclass RecoveryRepository extends BaseRepository {\r\n    constructor() {\r\n        super('recovery');\r\n    }\r\n\r\n    // Registra sessione recovery\r\n    async logRecoverySession(recoveryData) {\r\n        const data = {\r\n            ...recoveryData,\r\n            date: recoveryData.date || new Date().toISOString().split('T')[0],\r\n            completedAt: new Date()\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Ottieni sessioni recovery utente\r\n    async getUserRecoverySessions(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Ottieni sessioni per giorno\r\n    async getDayRecoverySessions(date) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            where('date', '==', date),\r\n            orderBy('createdAt', 'desc')\r\n        ]);\r\n    }\r\n\r\n    // Statistiche recovery\r\n    async getRecoveryStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserRecoverySessions(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (!result.success) return result;\r\n\r\n        const sessions = result.data;\r\n        const totalSessions = sessions.length;\r\n        const totalDuration = sessions.reduce((sum, s) => sum + (s.duration || 0), 0);\r\n        const avgDuration = totalSessions > 0 ? totalDuration / totalSessions : 0;\r\n\r\n        // Breakdown per tipo attività\r\n        const activityBreakdown = {};\r\n        sessions.forEach(session => {\r\n            const type = session.activityType;\r\n            if (!activityBreakdown[type]) {\r\n                activityBreakdown[type] = { count: 0, totalDuration: 0 };\r\n            }\r\n            activityBreakdown[type].count++;\r\n            activityBreakdown[type].totalDuration += session.duration || 0;\r\n        });\r\n\r\n        // Calcola frequenza settimanale\r\n        const weeksInPeriod = Math.ceil(days / 7);\r\n        const weeklyFrequency = totalSessions / weeksInPeriod;\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalSessions,\r\n                totalDuration,\r\n                avgDuration: Math.round(avgDuration),\r\n                weeklyFrequency: Math.round(weeklyFrequency * 10) / 10,\r\n                activityBreakdown,\r\n                period: { startDate, endDate, days }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Istanze singleton dei repository\r\nexport const progressRepo = new ProgressRepository();\r\nexport const workoutRepo = new WorkoutRepository();\r\nexport const exerciseRepo = new ExerciseRepository();\r\nexport const userRepo = new UserRepository();\r\nexport const nutritionRepo = new NutritionRepository();\r\nexport const recoveryRepo = new RecoveryRepository();\r\n\r\n// Utility per operazioni batch\r\nexport const batchOperations = {\r\n    // Esegui multiple operazioni in una transazione\r\n    async executeTransaction(operations) {\r\n        try {\r\n            const result = await runTransaction(db, async (transaction) => {\r\n                const results = [];\r\n                \r\n                for (const operation of operations) {\r\n                    const { type, ref, data } = operation;\r\n                    \r\n                    switch (type) {\r\n                        case 'set':\r\n                            transaction.set(ref, data);\r\n                            break;\r\n                        case 'update':\r\n                            transaction.update(ref, data);\r\n                            break;\r\n                        case 'delete':\r\n                            transaction.delete(ref);\r\n                            break;\r\n                        default:\r\n                            throw new Error(`Operazione non supportata: ${type}`);\r\n                    }\r\n                    \r\n                    results.push({ success: true, operation: type });\r\n                }\r\n                \r\n                return results;\r\n            });\r\n            \r\n            logger.success('Transazione completata', { operations: result.length });\r\n            return { success: true, results: result };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore transazione batch', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    // Operazioni batch (fino a 500 operazioni)\r\n    async executeBatch(operations) {\r\n        try {\r\n            const batch = writeBatch(db);\r\n            \r\n            operations.forEach(operation => {\r\n                const { type, ref, data } = operation;\r\n                \r\n                switch (type) {\r\n                    case 'set':\r\n                        batch.set(ref, data);\r\n                        break;\r\n                    case 'update':\r\n                        batch.update(ref, data);\r\n                        break;\r\n                    case 'delete':\r\n                        batch.delete(ref);\r\n                        break;\r\n                    default:\r\n                        throw new Error(`Operazione non supportata: ${type}`);\r\n                }\r\n            });\r\n            \r\n            await batch.commit();\r\n            \r\n            logger.success('Batch completato', { operations: operations.length });\r\n            return { success: true, count: operations.length };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore batch operations', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n};\r\n\r\n// Export per retrocompatibilità\r\nexport default {\r\n    progressRepo,\r\n    workoutRepo,\r\n    exerciseRepo,\r\n    userRepo,\r\n    nutritionRepo,\r\n    recoveryRepo,\r\n    batchOperations\r\n};","// Data Migration Service - localStorage to Firestore\r\n// Sistema di migrazione intelligente con backup e rollback\r\n\r\nimport { progressRepo, workoutRepo, exerciseRepo, userRepo, batchOperations } from './firestore';\r\nimport authService from './auth';\r\nimport { logger } from './config';\r\n\r\nclass MigrationService {\r\n    constructor() {\r\n        this.migrationKey = 'firebase_migration_status';\r\n        this.backupKey = 'firebase_migration_backup';\r\n    }\r\n\r\n    // Controlla se la migrazione è già stata eseguita\r\n    isMigrationCompleted() {\r\n        try {\r\n            const status = localStorage.getItem(this.migrationKey);\r\n            return status === 'completed';\r\n        } catch (error) {\r\n            logger.error('Errore verifica migrazione', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Segna migrazione come completata\r\n    markMigrationCompleted() {\r\n        try {\r\n            const migrationData = {\r\n                status: 'completed',\r\n                timestamp: new Date().toISOString(),\r\n                version: '1.0.0'\r\n            };\r\n            localStorage.setItem(this.migrationKey, 'completed');\r\n            localStorage.setItem(`${this.migrationKey}_details`, JSON.stringify(migrationData));\r\n            logger.success('Migrazione marcata come completata');\r\n        } catch (error) {\r\n            logger.error('Errore marcamento migrazione', error);\r\n        }\r\n    }\r\n\r\n    // Crea backup completo dei dati localStorage\r\n    createBackup() {\r\n        try {\r\n            const backupData = {\r\n                timestamp: new Date().toISOString(),\r\n                data: {\r\n                    progressData: this.safeGetLocalStorage('progressData'),\r\n                    workoutSessions: this.safeGetLocalStorage('workoutSessions'),\r\n                    exerciseData: this.safeGetLocalStorage('exerciseData'),\r\n                    timeStats: this.safeGetLocalStorage('timeStats'),\r\n                    streakData: this.safeGetLocalStorage('streakData'),\r\n                    personalRecords: this.safeGetLocalStorage('personalRecords'),\r\n                    goals12Week: this.safeGetLocalStorage('goals12Week'),\r\n                    userSettings: this.safeGetLocalStorage('userSettings')\r\n                }\r\n            };\r\n\r\n            // Comprimi backup se troppo grande\r\n            const backupString = JSON.stringify(backupData);\r\n            if (backupString.length > 2 * 1024 * 1024) { // 2MB\r\n                logger.warn('Backup molto grande, compressione necessaria');\r\n                // In un'implementazione reale, potresti voler comprimere i dati\r\n            }\r\n\r\n            localStorage.setItem(this.backupKey, backupString);\r\n            logger.success('Backup creato', { size: `${Math.round(backupString.length / 1024)}KB` });\r\n            \r\n            return { success: true, backup: backupData };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore creazione backup', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Sicuro get da localStorage con fallback\r\n    safeGetLocalStorage(key) {\r\n        try {\r\n            const data = localStorage.getItem(key);\r\n            return data ? JSON.parse(data) : null;\r\n        } catch (error) {\r\n            logger.warn(`Errore parsing ${key}`, error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Migrazione completa con controlli e validazioni\r\n    async migrateAllData() {\r\n        if (!authService.isAuthenticated()) {\r\n            return { success: false, error: 'Utente non autenticato' };\r\n        }\r\n\r\n        if (this.isMigrationCompleted()) {\r\n            logger.info('Migrazione già completata');\r\n            return { success: true, message: 'Migrazione già completata' };\r\n        }\r\n\r\n        const migrationReport = {\r\n            startTime: new Date().toISOString(),\r\n            steps: [],\r\n            errors: [],\r\n            totalItems: 0,\r\n            migratedItems: 0\r\n        };\r\n\r\n        try {\r\n            logger.info('🚀 Inizio migrazione dati localStorage → Firestore');\r\n\r\n            // STEP 1: Crea backup\r\n            migrationReport.steps.push('Creazione backup...');\r\n            const backupResult = this.createBackup();\r\n            if (!backupResult.success) {\r\n                throw new Error(`Backup fallito: ${backupResult.error}`);\r\n            }\r\n\r\n            // STEP 2: Migra dati progress\r\n            migrationReport.steps.push('Migrazione dati progress...');\r\n            const progressResult = await this.migrateProgressData();\r\n            migrationReport.totalItems += progressResult.totalItems;\r\n            migrationReport.migratedItems += progressResult.migratedItems;\r\n            if (progressResult.errors.length > 0) {\r\n                migrationReport.errors.push(...progressResult.errors);\r\n            }\r\n\r\n            // STEP 3: Migra sessioni workout\r\n            migrationReport.steps.push('Migrazione sessioni workout...');\r\n            const workoutResult = await this.migrateWorkoutSessions();\r\n            migrationReport.totalItems += workoutResult.totalItems;\r\n            migrationReport.migratedItems += workoutResult.migratedItems;\r\n            if (workoutResult.errors.length > 0) {\r\n                migrationReport.errors.push(...workoutResult.errors);\r\n            }\r\n\r\n            // STEP 4: Migra dati esercizi\r\n            migrationReport.steps.push('Migrazione dati esercizi...');\r\n            const exerciseResult = await this.migrateExerciseData();\r\n            migrationReport.totalItems += exerciseResult.totalItems;\r\n            migrationReport.migratedItems += exerciseResult.migratedItems;\r\n            if (exerciseResult.errors.length > 0) {\r\n                migrationReport.errors.push(...exerciseResult.errors);\r\n            }\r\n\r\n            // STEP 5: Migra impostazioni utente\r\n            migrationReport.steps.push('Migrazione impostazioni utente...');\r\n            const userResult = await this.migrateUserSettings();\r\n            if (!userResult.success) {\r\n                migrationReport.errors.push(`Errore migrazione utente: ${userResult.error}`);\r\n            }\r\n\r\n            // STEP 6: Verifica integrità\r\n            migrationReport.steps.push('Verifica integrità dati...');\r\n            const verificationResult = await this.verifyMigration();\r\n            migrationReport.verificationPassed = verificationResult.success;\r\n\r\n            // STEP 7: Completa migrazione se tutto ok\r\n            if (migrationReport.errors.length === 0 && verificationResult.success) {\r\n                this.markMigrationCompleted();\r\n                migrationReport.steps.push('Migrazione completata con successo');\r\n                logger.success('✅ Migrazione completata', {\r\n                    totalItems: migrationReport.totalItems,\r\n                    migratedItems: migrationReport.migratedItems,\r\n                    duration: `${Date.now() - new Date(migrationReport.startTime).getTime()}ms`\r\n                });\r\n            } else {\r\n                logger.warn('⚠️ Migrazione completata con errori', {\r\n                    errors: migrationReport.errors.length,\r\n                    details: migrationReport.errors\r\n                });\r\n            }\r\n\r\n            migrationReport.endTime = new Date().toISOString();\r\n            migrationReport.success = migrationReport.errors.length === 0;\r\n\r\n            return { success: true, report: migrationReport };\r\n\r\n        } catch (error) {\r\n            migrationReport.endTime = new Date().toISOString();\r\n            migrationReport.success = false;\r\n            migrationReport.errors.push(`Errore fatale: ${error.message}`);\r\n            \r\n            logger.error('❌ Migrazione fallita', error);\r\n            return { success: false, error: error.message, report: migrationReport };\r\n        }\r\n    }\r\n\r\n    // Migrazione dati progress\r\n    async migrateProgressData() {\r\n        const progressData = this.safeGetLocalStorage('progressData') || [];\r\n        const result = { totalItems: progressData.length, migratedItems: 0, errors: [] };\r\n\r\n        if (progressData.length === 0) {\r\n            logger.info('Nessun dato progress da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${progressData.length} record progress...`);\r\n\r\n        for (const item of progressData) {\r\n            try {\r\n                // Validazione e pulizia dati\r\n                const cleanedData = this.cleanProgressData(item);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Dato progress non valido: ${JSON.stringify(item)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await progressRepo.addMeasurement(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Progress migrato: ${cleanedData.date}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione progress: ${createResult.error}`);\r\n                }\r\n\r\n                // Throttling per non sovraccaricare Firestore\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore progress item: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Progress migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione sessioni workout\r\n    async migrateWorkoutSessions() {\r\n        const workoutSessions = this.safeGetLocalStorage('workoutSessions') || [];\r\n        const result = { totalItems: workoutSessions.length, migratedItems: 0, errors: [] };\r\n\r\n        if (workoutSessions.length === 0) {\r\n            logger.info('Nessuna sessione workout da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${workoutSessions.length} sessioni workout...`);\r\n\r\n        for (const session of workoutSessions) {\r\n            try {\r\n                const cleanedData = this.cleanWorkoutSession(session);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Sessione workout non valida: ${JSON.stringify(session)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await workoutRepo.create(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Workout migrato: ${cleanedData.date}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione workout: ${createResult.error}`);\r\n                }\r\n\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore workout session: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Workout migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione dati esercizi\r\n    async migrateExerciseData() {\r\n        const exerciseData = this.safeGetLocalStorage('exerciseData') || {};\r\n        const exercises = Object.values(exerciseData);\r\n        const result = { totalItems: exercises.length, migratedItems: 0, errors: [] };\r\n\r\n        if (exercises.length === 0) {\r\n            logger.info('Nessun dato esercizio da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${exercises.length} record esercizi...`);\r\n\r\n        for (const exercise of exercises) {\r\n            try {\r\n                const cleanedData = this.cleanExerciseData(exercise);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Dato esercizio non valido: ${JSON.stringify(exercise)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await exerciseRepo.logExercise(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Esercizio migrato: ${cleanedData.exerciseName}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione esercizio: ${createResult.error}`);\r\n                }\r\n\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore exercise item: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Exercise migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione impostazioni utente\r\n    async migrateUserSettings() {\r\n        try {\r\n            const timeStats = this.safeGetLocalStorage('timeStats') || {};\r\n            const goals12Week = this.safeGetLocalStorage('goals12Week') || {};\r\n            const userSettings = this.safeGetLocalStorage('userSettings') || {};\r\n\r\n            const profileData = {\r\n                fitnessStats: timeStats,\r\n                goals: goals12Week,\r\n                preferences: userSettings,\r\n                migratedFrom: 'localStorage',\r\n                migrationDate: new Date().toISOString()\r\n            };\r\n\r\n            const updateResult = await userRepo.updateProfile(profileData);\r\n            if (updateResult.success) {\r\n                logger.success('Impostazioni utente migrate');\r\n                return { success: true };\r\n            } else {\r\n                return { success: false, error: updateResult.error };\r\n            }\r\n\r\n        } catch (error) {\r\n            logger.error('Errore migrazione impostazioni utente', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Pulizia e validazione dati progress\r\n    cleanProgressData(data) {\r\n        if (!data || typeof data !== 'object') return null;\r\n\r\n        const cleaned = {\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            weight: this.validateNumber(data.weight, 30, 300),\r\n            bodyFat: this.validateNumber(data.bodyFat, 1, 50),\r\n            muscleMass: this.validateNumber(data.muscleMass, 10, 150),\r\n            chest: this.validateNumber(data.chest, 50, 200),\r\n            arms: this.validateNumber(data.arms, 20, 100),\r\n            waist: this.validateNumber(data.waist, 50, 150),\r\n            thighs: this.validateNumber(data.thighs, 30, 100),\r\n            notes: this.validateString(data.notes, 1000)\r\n        };\r\n\r\n        // Rimuovi campi null/undefined\r\n        Object.keys(cleaned).forEach(key => {\r\n            if (cleaned[key] === null || cleaned[key] === undefined) {\r\n                delete cleaned[key];\r\n            }\r\n        });\r\n\r\n        // Deve avere almeno peso o data\r\n        return (cleaned.weight || cleaned.date) ? cleaned : null;\r\n    }\r\n\r\n    // Pulizia dati workout session\r\n    cleanWorkoutSession(data) {\r\n        if (!data || typeof data !== 'object') return null;\r\n\r\n        return {\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            name: this.validateString(data.name || data.workoutName, 100),\r\n            status: ['planned', 'in_progress', 'completed'].includes(data.status) ? data.status : 'completed',\r\n            totalDuration: this.validateNumber(data.totalDuration || data.duration, 0, 480),\r\n            exercises: Array.isArray(data.exercises) ? data.exercises : [],\r\n            notes: this.validateString(data.notes, 1000)\r\n        };\r\n    }\r\n\r\n    // Pulizia dati esercizio\r\n    cleanExerciseData(data) {\r\n        if (!data || typeof data !== 'object' || !data.exerciseName) return null;\r\n\r\n        return {\r\n            exerciseName: this.validateString(data.exerciseName, 100),\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            sets: this.validateNumber(data.sets, 1, 20),\r\n            reps: this.validateNumber(data.reps, 1, 100),\r\n            weight: this.validateNumber(data.weight, 0, 1000),\r\n            rir: this.validateNumber(data.rir, 0, 10),\r\n            notes: this.validateString(data.notes, 500)\r\n        };\r\n    }\r\n\r\n    // Validazione numeri con range\r\n    validateNumber(value, min = 0, max = Number.MAX_SAFE_INTEGER) {\r\n        const num = parseFloat(value);\r\n        return (!isNaN(num) && num >= min && num <= max) ? num : null;\r\n    }\r\n\r\n    // Validazione stringhe con lunghezza massima\r\n    validateString(value, maxLength = 1000) {\r\n        if (typeof value !== 'string') return null;\r\n        return value.length <= maxLength ? value.trim() : value.substring(0, maxLength).trim();\r\n    }\r\n\r\n    // Verifica integrità post-migrazione\r\n    async verifyMigration() {\r\n        try {\r\n            logger.info('Verifica integrità dati migrati...');\r\n\r\n            // Controlla se i dati sono stati creati correttamente\r\n            const progressCheck = await progressRepo.getUserProgress();\r\n            const workoutCheck = await workoutRepo.getUserSessions(10);\r\n            const userCheck = await userRepo.getCurrentUserProfile();\r\n\r\n            const checks = {\r\n                progress: progressCheck.success,\r\n                workouts: workoutCheck.success,\r\n                userProfile: userCheck.success\r\n            };\r\n\r\n            const allPassed = Object.values(checks).every(check => check === true);\r\n\r\n            logger.info('Risultati verifica', checks);\r\n            \r\n            return { \r\n                success: allPassed, \r\n                checks,\r\n                details: {\r\n                    progressCount: progressCheck.data?.length || 0,\r\n                    workoutCount: workoutCheck.data?.length || 0,\r\n                    hasUserProfile: !!userCheck.data\r\n                }\r\n            };\r\n\r\n        } catch (error) {\r\n            logger.error('Errore verifica migrazione', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Rollback migrazione (ripristina da backup)\r\n    async rollbackMigration() {\r\n        try {\r\n            logger.warn('🔄 Inizio rollback migrazione...');\r\n\r\n            const backupData = localStorage.getItem(this.backupKey);\r\n            if (!backupData) {\r\n                throw new Error('Nessun backup disponibile per il rollback');\r\n            }\r\n\r\n            const backup = JSON.parse(backupData);\r\n            \r\n            // Ripristina tutti i dati localStorage dal backup\r\n            Object.keys(backup.data).forEach(key => {\r\n                if (backup.data[key] !== null) {\r\n                    localStorage.setItem(key, JSON.stringify(backup.data[key]));\r\n                }\r\n            });\r\n\r\n            // Rimuovi flag migrazione completata\r\n            localStorage.removeItem(this.migrationKey);\r\n            localStorage.removeItem(`${this.migrationKey}_details`);\r\n\r\n            logger.success('✅ Rollback completato');\r\n            return { success: true, message: 'Dati ripristinati da backup' };\r\n\r\n        } catch (error) {\r\n            logger.error('❌ Errore rollback', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Utility per throttling\r\n    sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    // Ottieni stato migrazione dettagliato\r\n    getMigrationStatus() {\r\n        try {\r\n            const status = localStorage.getItem(this.migrationKey);\r\n            const details = localStorage.getItem(`${this.migrationKey}_details`);\r\n            \r\n            return {\r\n                isCompleted: status === 'completed',\r\n                status,\r\n                details: details ? JSON.parse(details) : null,\r\n                hasBackup: !!localStorage.getItem(this.backupKey)\r\n            };\r\n\r\n        } catch (error) {\r\n            logger.error('Errore stato migrazione', error);\r\n            return {\r\n                isCompleted: false,\r\n                status: 'unknown',\r\n                details: null,\r\n                hasBackup: false,\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n// Istanza singleton del servizio migrazione\r\nconst migrationService = new MigrationService();\r\n\r\nexport default migrationService;\r\nexport { MigrationService };","// AuthProvider - Context Provider per gestione autenticazione\r\n// Wrapper completo per gestire stato auth in tutta l'applicazione\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport authService from '../firebase/auth';\r\nimport migrationService from '../firebase/migration';\r\nimport { logger } from '../firebase/config';\r\n\r\n// Context per l'autenticazione\r\nconst AuthContext = createContext({});\r\n\r\n// Hook per utilizzare il context auth\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth deve essere utilizzato all\\'interno di AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\n// Provider componente principale\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [migrationStatus, setMigrationStatus] = useState({\r\n        isRequired: false,\r\n        inProgress: false,\r\n        completed: false\r\n    });\r\n\r\n    // Inizializza listener auth state\r\n    useEffect(() => {\r\n        logger.info('Inizializzazione AuthProvider...');\r\n\r\n        const unsubscribe = authService.onAuthStateChange(async (firebaseUser) => {\r\n            setLoading(true);\r\n            setError(null);\r\n\r\n            try {\r\n                if (firebaseUser) {\r\n                    logger.success('Utente autenticato', { \r\n                        uid: firebaseUser.uid, \r\n                        email: firebaseUser.email \r\n                    });\r\n                    \r\n                    setUser({\r\n                        uid: firebaseUser.uid,\r\n                        email: firebaseUser.email,\r\n                        displayName: firebaseUser.displayName,\r\n                        photoURL: firebaseUser.photoURL,\r\n                        emailVerified: firebaseUser.emailVerified,\r\n                        isAnonymous: firebaseUser.isAnonymous,\r\n                        createdAt: firebaseUser.metadata.creationTime,\r\n                        lastLoginAt: firebaseUser.metadata.lastSignInTime\r\n                    });\r\n\r\n                    // Controlla se serve migrazione dati\r\n                    await checkMigrationRequired();\r\n\r\n                } else {\r\n                    logger.info('Utente non autenticato');\r\n                    setUser(null);\r\n                    setMigrationStatus({\r\n                        isRequired: false,\r\n                        inProgress: false,\r\n                        completed: false\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                logger.error('Errore gestione auth state', error);\r\n                setError('Errore durante l\\'autenticazione. Riprova.');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        });\r\n\r\n        return unsubscribe;\r\n    }, []);\r\n\r\n    // Controlla se è necessaria la migrazione\r\n    const checkMigrationRequired = async () => {\r\n        try {\r\n            const migrationStatusData = migrationService.getMigrationStatus();\r\n            \r\n            // Controlla se ci sono dati localStorage da migrare\r\n            const hasLocalData = (\r\n                localStorage.getItem('progressData') ||\r\n                localStorage.getItem('workoutSessions') ||\r\n                localStorage.getItem('exerciseData')\r\n            );\r\n\r\n            const isRequired = hasLocalData && !migrationStatusData.isCompleted;\r\n\r\n            setMigrationStatus({\r\n                isRequired,\r\n                inProgress: false,\r\n                completed: migrationStatusData.isCompleted,\r\n                details: migrationStatusData\r\n            });\r\n\r\n            logger.info('Status migrazione controllato', { \r\n                isRequired, \r\n                hasLocalData,\r\n                completed: migrationStatusData.isCompleted \r\n            });\r\n\r\n        } catch (error) {\r\n            logger.error('Errore controllo migrazione', error);\r\n        }\r\n    };\r\n\r\n    // Funzioni di autenticazione con error handling\r\n\r\n    const login = async (email, password) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signInWithEmail(email, password);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Login completato');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il login. Riprova.';\r\n            logger.error('Errore login wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const register = async (email, password, displayName = null) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signUpWithEmail(email, password, displayName);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Registrazione completata');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante la registrazione. Riprova.';\r\n            logger.error('Errore registrazione wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const loginWithGoogle = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signInWithGoogle();\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Login Google completato');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il login con Google. Riprova.';\r\n            logger.error('Errore Google login wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signOutUser();\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Logout completato');\r\n            return { success: true };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il logout. Riprova.';\r\n            logger.error('Errore logout wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const resetPassword = async (email) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.resetPassword(email);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Email reset password inviata');\r\n            return { success: true };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore invio email reset. Riprova.';\r\n            logger.error('Errore reset password wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Gestione migrazione dati\r\n    const startMigration = async () => {\r\n        if (!user || migrationStatus.inProgress) {\r\n            return { success: false, error: 'Migrazione non possibile al momento' };\r\n        }\r\n\r\n        setMigrationStatus(prev => ({ ...prev, inProgress: true }));\r\n\r\n        try {\r\n            logger.info('Avvio migrazione dati...');\r\n            const result = await migrationService.migrateAllData();\r\n\r\n            if (result.success) {\r\n                setMigrationStatus({\r\n                    isRequired: false,\r\n                    inProgress: false,\r\n                    completed: true,\r\n                    report: result.report\r\n                });\r\n                logger.success('Migrazione completata con successo');\r\n                return { success: true, report: result.report };\r\n            } else {\r\n                setMigrationStatus(prev => ({ ...prev, inProgress: false }));\r\n                setError('Errore durante la migrazione dati');\r\n                return { success: false, error: result.error, report: result.report };\r\n            }\r\n\r\n        } catch (error) {\r\n            logger.error('Errore migrazione wrapper', error);\r\n            setMigrationStatus(prev => ({ ...prev, inProgress: false }));\r\n            setError('Errore imprevisto durante la migrazione');\r\n            return { success: false, error: error.message };\r\n        }\r\n    };\r\n\r\n    const skipMigration = () => {\r\n        setMigrationStatus({\r\n            isRequired: false,\r\n            inProgress: false,\r\n            completed: false,\r\n            skipped: true\r\n        });\r\n        logger.info('Migrazione saltata dall\\'utente');\r\n    };\r\n\r\n    // Utility functions\r\n    const isAuthenticated = () => !!user;\r\n    \r\n    const hasRole = (role) => {\r\n        // Implementazione futura per ruoli utente\r\n        return user?.customClaims?.[role] || false;\r\n    };\r\n\r\n    const clearError = () => setError(null);\r\n\r\n    // Context value\r\n    const contextValue = {\r\n        // Stato auth\r\n        user,\r\n        loading,\r\n        error,\r\n        migrationStatus,\r\n\r\n        // Funzioni auth\r\n        login,\r\n        register,\r\n        loginWithGoogle,\r\n        logout,\r\n        resetPassword,\r\n\r\n        // Migrazione\r\n        startMigration,\r\n        skipMigration,\r\n\r\n        // Utility\r\n        isAuthenticated,\r\n        hasRole,\r\n        clearError,\r\n        \r\n        // Servizi diretti (per casi avanzati)\r\n        authService,\r\n        migrationService\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Hook specializzati per casi d'uso comuni\r\n\r\n// Hook per proteggere componenti (richiede autenticazione)\r\nexport const useRequireAuth = (redirectTo = '/login') => {\r\n    const { user, loading } = useAuth();\r\n    \r\n    useEffect(() => {\r\n        if (!loading && !user && window.location.pathname !== redirectTo) {\r\n            window.location.href = redirectTo;\r\n        }\r\n    }, [user, loading, redirectTo]);\r\n\r\n    return { user, loading, isAuthenticated: !!user };\r\n};\r\n\r\n// Hook per redirect dopo login\r\nexport const useAuthRedirect = (redirectTo = '/') => {\r\n    const { user, loading } = useAuth();\r\n    \r\n    useEffect(() => {\r\n        if (!loading && user && window.location.pathname === '/login') {\r\n            window.location.href = redirectTo;\r\n        }\r\n    }, [user, loading, redirectTo]);\r\n\r\n    return { user, loading };\r\n};\r\n\r\n// HOC per proteggere componenti\r\nexport const withAuth = (Component, requireAuth = true) => {\r\n    return function AuthenticatedComponent(props) {\r\n        const { user, loading } = useAuth();\r\n        \r\n        if (loading) {\r\n            return (\r\n                <div className=\"auth-loading\">\r\n                    <div className=\"loading-spinner\">Caricamento...</div>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n        if (requireAuth && !user) {\r\n            return (\r\n                <div className=\"auth-required\">\r\n                    <h2>Accesso Richiesto</h2>\r\n                    <p>Devi effettuare il login per accedere a questa sezione.</p>\r\n                    <button onClick={() => window.location.href = '/login'}>\r\n                        Vai al Login\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n        return <Component {...props} />;\r\n    };\r\n};\r\n\r\nexport default AuthProvider;","// Validation Schemas - Enterprise Grade\r\n// Schema di validazione completi per tutti i form dell'applicazione\r\n\r\nimport * as yup from 'yup';\r\n\r\n// ========== CONFIGURAZIONE BASE ==========\r\n\r\n// Messaggi di errore personalizzati in italiano\r\nyup.setLocale({\r\n    mixed: {\r\n        default: 'Campo non valido',\r\n        required: 'Campo obbligatorio',\r\n        notType: 'Tipo di dato non valido'\r\n    },\r\n    string: {\r\n        min: 'Minimo ${min} caratteri',\r\n        max: 'Massimo ${max} caratteri',\r\n        email: 'Email non valida'\r\n    },\r\n    number: {\r\n        min: 'Valore minimo: ${min}',\r\n        max: 'Valore massimo: ${max}',\r\n        positive: 'Deve essere un numero positivo',\r\n        integer: 'Deve essere un numero intero'\r\n    },\r\n    date: {\r\n        min: 'Data non può essere precedente al ${min}',\r\n        max: 'Data non può essere successiva al ${max}'\r\n    }\r\n});\r\n\r\n// ========== UTILITY VALIDATIONS ==========\r\n\r\n// Validazione peso realistico (30-300 kg)\r\nconst weightValidation = yup.number()\r\n    .typeError('Peso deve essere un numero')\r\n    .min(30, 'Peso minimo 30kg')\r\n    .max(300, 'Peso massimo 300kg');\r\n\r\n// Validazione percentuale (0-100%)\r\nconst percentageValidation = yup.number()\r\n    .typeError('Percentuale deve essere un numero')\r\n    .min(0, 'Percentuale minima 0%')\r\n    .max(100, 'Percentuale massima 100%');\r\n\r\n// Validazione circonferenze corporee (10-200 cm)\r\nconst measurementValidation = yup.number()\r\n    .typeError('Misurazione deve essere un numero')\r\n    .min(10, 'Misurazione minima 10cm')\r\n    .max(200, 'Misurazione massima 200cm');\r\n\r\n// Validazione data (non futura)\r\nconst dateValidation = yup.date()\r\n    .typeError('Data non valida')\r\n    .max(new Date(), 'Data non può essere futura');\r\n\r\n// Validazione password sicura\r\nconst passwordValidation = yup.string()\r\n    .min(8, 'Password minimo 8 caratteri')\r\n    .matches(/[a-z]/, 'Deve contenere almeno una lettera minuscola')\r\n    .matches(/[A-Z]/, 'Deve contenere almeno una lettera maiuscola')\r\n    .matches(/[0-9]/, 'Deve contenere almeno un numero')\r\n    .matches(/[^a-zA-Z0-9]/, 'Deve contenere almeno un carattere speciale');\r\n\r\n// ========== AUTHENTICATION SCHEMAS ==========\r\n\r\n// Schema registrazione\r\nexport const registrationSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido')\r\n        .max(254, 'Email troppo lunga'),\r\n    \r\n    password: passwordValidation.required('Password è obbligatoria'),\r\n    \r\n    confirmPassword: yup\r\n        .string()\r\n        .required('Conferma password è obbligatoria')\r\n        .oneOf([yup.ref('password')], 'Le password non corrispondono'),\r\n    \r\n    displayName: yup\r\n        .string()\r\n        .min(2, 'Nome minimo 2 caratteri')\r\n        .max(50, 'Nome massimo 50 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ\\s]+$/, 'Nome può contenere solo lettere e spazi')\r\n        .nullable(),\r\n    \r\n    acceptTerms: yup\r\n        .boolean()\r\n        .oneOf([true], 'Devi accettare i termini e condizioni')\r\n});\r\n\r\n// Schema login\r\nexport const loginSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido'),\r\n    \r\n    password: yup\r\n        .string()\r\n        .required('Password è obbligatoria')\r\n        .min(1, 'Password non può essere vuota'),\r\n    \r\n    rememberMe: yup.boolean().default(false)\r\n});\r\n\r\n// Schema reset password\r\nexport const resetPasswordSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido')\r\n});\r\n\r\n// Schema cambio password\r\nexport const changePasswordSchema = yup.object({\r\n    currentPassword: yup\r\n        .string()\r\n        .required('Password attuale è obbligatoria'),\r\n    \r\n    newPassword: passwordValidation.required('Nuova password è obbligatoria'),\r\n    \r\n    confirmNewPassword: yup\r\n        .string()\r\n        .required('Conferma nuova password è obbligatoria')\r\n        .oneOf([yup.ref('newPassword')], 'Le password non corrispondono')\r\n});\r\n\r\n// ========== PROGRESS TRACKING SCHEMAS ==========\r\n\r\n// Schema misurazione progress\r\nexport const progressMeasurementSchema = yup.object({\r\n    weight: weightValidation.nullable(),\r\n    \r\n    bodyFat: percentageValidation\r\n        .min(3, 'Massa grassa minima 3%')\r\n        .max(50, 'Massa grassa massima 50%')\r\n        .nullable(),\r\n    \r\n    muscleMass: yup.number()\r\n        .typeError('Massa muscolare deve essere un numero')\r\n        .min(10, 'Massa muscolare minima 10kg')\r\n        .max(150, 'Massa muscolare massima 150kg')\r\n        .nullable(),\r\n    \r\n    chest: measurementValidation\r\n        .min(50, 'Circonferenza petto minima 50cm')\r\n        .max(200, 'Circonferenza petto massima 200cm')\r\n        .nullable(),\r\n    \r\n    arms: measurementValidation\r\n        .min(20, 'Circonferenza braccia minima 20cm')\r\n        .max(100, 'Circonferenza braccia massima 100cm')\r\n        .nullable(),\r\n    \r\n    waist: measurementValidation\r\n        .min(50, 'Circonferenza vita minima 50cm')\r\n        .max(150, 'Circonferenza vita massima 150cm')\r\n        .nullable(),\r\n    \r\n    thighs: measurementValidation\r\n        .min(30, 'Circonferenza cosce minima 30cm')\r\n        .max(100, 'Circonferenza cosce massima 100cm')\r\n        .nullable(),\r\n    \r\n    date: dateValidation.default(() => new Date()),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(1000, 'Note massimo 1000 caratteri')\r\n        .nullable()\r\n})\r\n.test('at-least-one-measurement', 'Inserisci almeno una misurazione', function(value) {\r\n    const { weight, bodyFat, muscleMass, chest, arms, waist, thighs } = value || {};\r\n    return !!(weight || bodyFat || muscleMass || chest || arms || waist || thighs);\r\n});\r\n\r\n// ========== WORKOUT SCHEMAS ==========\r\n\r\n// Schema esercizio singolo\r\nexport const exerciseSchema = yup.object({\r\n    exerciseName: yup\r\n        .string()\r\n        .required('Nome esercizio è obbligatorio')\r\n        .min(2, 'Nome esercizio minimo 2 caratteri')\r\n        .max(100, 'Nome esercizio massimo 100 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ0-9\\s\\-().]+$/, 'Nome esercizio contiene caratteri non validi'),\r\n    \r\n    sets: yup\r\n        .number()\r\n        .required('Numero serie è obbligatorio')\r\n        .integer('Serie deve essere un numero intero')\r\n        .min(1, 'Minimo 1 serie')\r\n        .max(20, 'Massimo 20 serie'),\r\n    \r\n    reps: yup\r\n        .number()\r\n        .required('Numero ripetizioni è obbligatorio')\r\n        .integer('Ripetizioni deve essere un numero intero')\r\n        .min(1, 'Minimo 1 ripetizione')\r\n        .max(100, 'Massimo 100 ripetizioni'),\r\n    \r\n    weight: yup\r\n        .number()\r\n        .typeError('Peso deve essere un numero')\r\n        .min(0, 'Peso non può essere negativo')\r\n        .max(1000, 'Peso massimo 1000kg')\r\n        .nullable(),\r\n    \r\n    rir: yup\r\n        .number()\r\n        .typeError('RIR deve essere un numero')\r\n        .integer('RIR deve essere un numero intero')\r\n        .min(0, 'RIR minimo 0')\r\n        .max(10, 'RIR massimo 10')\r\n        .nullable(),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(500, 'Note esercizio massimo 500 caratteri')\r\n        .nullable()\r\n});\r\n\r\n// Schema sessione workout\r\nexport const workoutSessionSchema = yup.object({\r\n    name: yup\r\n        .string()\r\n        .required('Nome workout è obbligatorio')\r\n        .min(3, 'Nome workout minimo 3 caratteri')\r\n        .max(100, 'Nome workout massimo 100 caratteri'),\r\n    \r\n    date: dateValidation.required('Data è obbligatoria'),\r\n    \r\n    startTime: yup\r\n        .date()\r\n        .typeError('Orario inizio non valido')\r\n        .nullable(),\r\n    \r\n    endTime: yup\r\n        .date()\r\n        .typeError('Orario fine non valido')\r\n        .min(yup.ref('startTime'), 'Orario fine deve essere dopo l\\'inizio')\r\n        .nullable(),\r\n    \r\n    totalDuration: yup\r\n        .number()\r\n        .typeError('Durata deve essere un numero')\r\n        .min(1, 'Durata minima 1 minuto')\r\n        .max(480, 'Durata massima 8 ore (480 minuti)')\r\n        .nullable(),\r\n    \r\n    exercises: yup\r\n        .array()\r\n        .of(exerciseSchema)\r\n        .min(1, 'Almeno un esercizio è obbligatorio'),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(1000, 'Note workout massimo 1000 caratteri')\r\n        .nullable(),\r\n    \r\n    intensity: yup\r\n        .number()\r\n        .integer('Intensità deve essere un numero intero')\r\n        .min(1, 'Intensità minima 1')\r\n        .max(10, 'Intensità massima 10')\r\n        .nullable()\r\n});\r\n\r\n// ========== USER PROFILE SCHEMAS ==========\r\n\r\n// Schema profilo utente\r\nexport const userProfileSchema = yup.object({\r\n    displayName: yup\r\n        .string()\r\n        .min(2, 'Nome minimo 2 caratteri')\r\n        .max(50, 'Nome massimo 50 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ\\s]+$/, 'Nome può contenere solo lettere e spazi')\r\n        .nullable(),\r\n    \r\n    age: yup\r\n        .number()\r\n        .integer('Età deve essere un numero intero')\r\n        .min(13, 'Età minima 13 anni')\r\n        .max(120, 'Età massima 120 anni')\r\n        .nullable(),\r\n    \r\n    height: yup\r\n        .number()\r\n        .typeError('Altezza deve essere un numero')\r\n        .min(100, 'Altezza minima 100cm')\r\n        .max(250, 'Altezza massima 250cm')\r\n        .nullable(),\r\n    \r\n    activityLevel: yup\r\n        .string()\r\n        .oneOf(['sedentary', 'light', 'moderate', 'active', 'very_active'], 'Livello attività non valido')\r\n        .default('moderate'),\r\n    \r\n    fitnessGoals: yup\r\n        .array()\r\n        .of(yup.string().oneOf([\r\n            'weight_loss', 'muscle_gain', 'strength', 'endurance', \r\n            'flexibility', 'general_health', 'athletic_performance'\r\n        ]))\r\n        .max(5, 'Massimo 5 obiettivi'),\r\n    \r\n    experience: yup\r\n        .string()\r\n        .oneOf(['beginner', 'intermediate', 'advanced', 'expert'], 'Livello esperienza non valido')\r\n        .default('beginner'),\r\n    \r\n    preferences: yup.object({\r\n        units: yup.string().oneOf(['metric', 'imperial']).default('metric'),\r\n        language: yup.string().oneOf(['it', 'en']).default('it'),\r\n        notifications: yup.boolean().default(true),\r\n        darkMode: yup.boolean().default(false),\r\n        publicProfile: yup.boolean().default(false)\r\n    })\r\n});\r\n\r\n// ========== GOALS SCHEMAS ==========\r\n\r\n// Schema obiettivi 12 settimane\r\nexport const goals12WeekSchema = yup.object({\r\n    startWeight: weightValidation.required('Peso iniziale è obbligatorio'),\r\n    \r\n    targetWeight: weightValidation\r\n        .required('Peso target è obbligatorio')\r\n        .test('weight-difference', 'Differenza peso deve essere ragionevole (±30kg)', function(value) {\r\n            const { startWeight } = this.parent;\r\n            if (!startWeight || !value) return true;\r\n            return Math.abs(value - startWeight) <= 30;\r\n        }),\r\n    \r\n    targetBench: yup\r\n        .number()\r\n        .typeError('Target panca deve essere un numero')\r\n        .min(20, 'Target panca minimo 20kg')\r\n        .max(300, 'Target panca massimo 300kg')\r\n        .nullable(),\r\n    \r\n    targetSquat: yup\r\n        .number()\r\n        .typeError('Target squat deve essere un numero')\r\n        .min(30, 'Target squat minimo 30kg')\r\n        .max(500, 'Target squat massimo 500kg')\r\n        .nullable(),\r\n    \r\n    targetDeadlift: yup\r\n        .number()\r\n        .typeError('Target deadlift deve essere un numero')\r\n        .min(40, 'Target deadlift minimo 40kg')\r\n        .max(600, 'Target deadlift massimo 600kg')\r\n        .nullable(),\r\n    \r\n    startDate: yup\r\n        .date()\r\n        .required('Data inizio è obbligatoria')\r\n        .max(new Date(), 'Data inizio non può essere futura'),\r\n    \r\n    targetDate: yup\r\n        .date()\r\n        .required('Data target è obbligatoria')\r\n        .min(yup.ref('startDate'), 'Data target deve essere dopo data inizio')\r\n        .test('12-weeks-max', 'Periodo massimo 16 settimane', function(value) {\r\n            const { startDate } = this.parent;\r\n            if (!startDate || !value) return true;\r\n            const diffWeeks = (value - startDate) / (7 * 24 * 60 * 60 * 1000);\r\n            return diffWeeks <= 16;\r\n        })\r\n});\r\n\r\n// ========== SETTINGS SCHEMAS ==========\r\n\r\n// Schema impostazioni app\r\nexport const appSettingsSchema = yup.object({\r\n    notifications: yup.object({\r\n        workoutReminders: yup.boolean().default(true),\r\n        progressReminders: yup.boolean().default(true),\r\n        achievementAlerts: yup.boolean().default(true),\r\n        emailNotifications: yup.boolean().default(false),\r\n        pushNotifications: yup.boolean().default(true)\r\n    }),\r\n    \r\n    privacy: yup.object({\r\n        profileVisibility: yup.string().oneOf(['private', 'friends', 'public']).default('private'),\r\n        shareProgress: yup.boolean().default(false),\r\n        shareWorkouts: yup.boolean().default(false),\r\n        allowFriendRequests: yup.boolean().default(true)\r\n    }),\r\n    \r\n    display: yup.object({\r\n        theme: yup.string().oneOf(['light', 'dark', 'auto']).default('light'),\r\n        language: yup.string().oneOf(['it', 'en']).default('it'),\r\n        dateFormat: yup.string().oneOf(['DD/MM/YYYY', 'MM/DD/YYYY', 'YYYY-MM-DD']).default('DD/MM/YYYY'),\r\n        timeFormat: yup.string().oneOf(['24h', '12h']).default('24h')\r\n    }),\r\n    \r\n    units: yup.object({\r\n        weight: yup.string().oneOf(['kg', 'lb']).default('kg'),\r\n        distance: yup.string().oneOf(['km', 'mi']).default('km'),\r\n        height: yup.string().oneOf(['cm', 'ft']).default('cm')\r\n    })\r\n});\r\n\r\n// ========== VALIDATION HELPERS ==========\r\n\r\n// Helper per validazione condizionale\r\nexport const conditionalSchema = (condition, schema, fallback = yup.mixed().nullable()) => {\r\n    return yup.mixed().when(condition, {\r\n        is: true,\r\n        then: schema,\r\n        otherwise: fallback\r\n    });\r\n};\r\n\r\n// Helper per validazione campi dinamici\r\nexport const dynamicFieldSchema = (fieldType) => {\r\n    const schemas = {\r\n        text: yup.string().max(100),\r\n        number: yup.number(),\r\n        email: yup.string().email(),\r\n        date: dateValidation,\r\n        boolean: yup.boolean()\r\n    };\r\n    \r\n    return schemas[fieldType] || yup.mixed();\r\n};\r\n\r\n// Validazione personalizzata per form complessi\r\nexport const validateWithSchema = async (schema, data, options = {}) => {\r\n    try {\r\n        const validatedData = await schema.validate(data, {\r\n            abortEarly: false,\r\n            stripUnknown: true,\r\n            ...options\r\n        });\r\n        \r\n        return { isValid: true, data: validatedData, errors: {} };\r\n        \r\n    } catch (error) {\r\n        const errors = {};\r\n        \r\n        if (error.inner) {\r\n            error.inner.forEach(err => {\r\n                if (err.path) {\r\n                    errors[err.path] = err.message;\r\n                }\r\n            });\r\n        } else {\r\n            errors.general = error.message;\r\n        }\r\n        \r\n        return { isValid: false, data: null, errors };\r\n    }\r\n};\r\n\r\n// Export di tutti gli schemi per uso modulare\r\nexport default {\r\n    registrationSchema,\r\n    loginSchema,\r\n    resetPasswordSchema,\r\n    changePasswordSchema,\r\n    progressMeasurementSchema,\r\n    exerciseSchema,\r\n    workoutSessionSchema,\r\n    userProfileSchema,\r\n    goals12WeekSchema,\r\n    appSettingsSchema,\r\n    validateWithSchema\r\n};","import React, { Suspense, lazy } from 'react';\r\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\r\n// import { AuthProvider, useAuth } from './components/AuthProvider';\r\nimport Dashboard from './components/Dashboard';\r\nimport Workout from './components/Workout';\r\nimport Nutrition from './components/Nutrition';\r\nimport Supplements from './components/Supplements';\r\nimport Recovery from './components/Recovery';\r\nimport Progress from './components/Progress';\r\nimport Measurements from './components/Measurements';\r\nimport AuthModal from './components/AuthModal';\r\nimport MigrationModal from './components/MigrationModal';\r\nimport './styles/main.css';\r\n\r\n// Lazy loading per componenti pesanti\r\nconst LazyAnalytics = lazy(() => import('./components/AdvancedAnalytics'));\r\nconst LazyNutritionTracker = lazy(() => import('./components/SimpleNutritionTracker'));\r\nconst LazyRecoveryTimer = lazy(() => import('./components/SimpleRecoveryTimer'));\r\n\r\n// Componente principale senza autenticazione\r\nfunction AppContent() {\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                {/* Autenticazione disabilitata per uso locale */}\r\n                \r\n                {/* Routing principale */}\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Dashboard />} />\r\n                    <Route path=\"/workout\" element={<Workout />} />\r\n                    <Route path=\"/nutrition\" element={<Nutrition />} />\r\n                    <Route path=\"/supplements\" element={<Supplements />} />\r\n                    <Route path=\"/recovery\" element={<Recovery />} />\r\n                    <Route path=\"/progress\" element={<Progress />} />\r\n                    <Route path=\"/measurements\" element={<Measurements />} />\r\n                    <Route path=\"/analytics\" element={\r\n                        <Suspense fallback={<div className=\"loading-analytics\">Caricamento Analytics...</div>}>\r\n                            <LazyAnalytics />\r\n                        </Suspense>\r\n                    } />\r\n                    <Route path=\"/nutrition-tracker\" element={\r\n                        <Suspense fallback={<div className=\"loading-nutrition\">Caricamento Nutrition Tracker...</div>}>\r\n                            <LazyNutritionTracker />\r\n                        </Suspense>\r\n                    } />\r\n                    <Route path=\"/recovery-timer\" element={\r\n                        <Suspense fallback={<div className=\"loading-recovery\">Caricamento Recovery Timer...</div>}>\r\n                            <LazyRecoveryTimer />\r\n                        </Suspense>\r\n                    } />\r\n                </Routes>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\n// App wrapper senza autenticazione\r\nfunction App() {\r\n    return <AppContent />;\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/main.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}