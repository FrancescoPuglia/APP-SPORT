{"version":3,"sources":["components/Dashboard.js","components/WorkoutTimer.js","components/Workout.js","components/Nutrition.js","components/Supplements.js","components/Recovery.js","components/Progress.js","App.js","index.js"],"names":["Dashboard","dashboardData","setDashboardData","React","useState","currentWeight","muscleGain","workoutSessions","totalWorkoutTime","weeklyTime","daysActive","lastWorkout","currentStreak","calculateStreak","sessions","length","today","Date","streak","sortedDates","Set","map","s","date","split","sort","reverse","i","sessionDate","Math","floor","formatTime","minutes","hours","mins","concat","useEffect","loadDashboardData","_workoutSessions$","progressData","JSON","parse","localStorage","getItem","timeStats","latestProgress","firstProgress","oneWeekAgo","getTime","filter","session","weight","parseFloat","muscleMass","size","_jsxs","className","children","_jsx","Link","to","toFixed","toLocaleDateString","WorkoutTimer","_ref","onSessionComplete","isActive","setIsActive","currentExercise","setCurrentExercise","sessionTime","setSessionTime","exerciseTime","setExerciseTime","exercises","setExercises","currentExerciseIndex","setCurrentExerciseIndex","interval","setInterval","time","clearInterval","nextExercise","exerciseData","name","duration","timestamp","toISOString","prev","calculateWeeklyTime","setDate","getDate","reduce","total","calculateMonthlyTime","oneMonthAgo","setMonth","getMonth","seconds","secs","toString","padStart","type","placeholder","value","onChange","e","target","disabled","onClick","pauseSession","completeSession","sessionData","id","now","updatedSessions","setItem","stringify","updatedTimeStats","monthlyTime","sessionsCompleted","startSession","exercise","index","Workout","selectedDay","setSelectedDay","completedWorkouts","setCompletedWorkouts","isWorkoutCompletedToday","day","some","workout","loadCompletedWorkouts","saved","console","log","Object","entries","focus","subtitle","sets","rest","notes","updated","markWorkoutCompleted","Nutrition","Supplements","Recovery","Progress","setProgressData","newEntry","setNewEntry","bodyFat","chest","arms","waist","thighs","setTimeStats","saveProgressData","data","loadProgressData","savedTimeStats","_objectSpread","addEntry","entry","deleteEntry","App","Router","Routes","Route","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2dacc0b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Dashboard = () => {\r\n    const [dashboardData, setDashboardData] = React.useState({\r\n        currentWeight: 0,\r\n        muscleGain: 0,\r\n        workoutSessions: 0,\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        daysActive: 0,\r\n        lastWorkout: null,\r\n        currentStreak: 0\r\n    });\r\n    \r\n    const loadDashboardData = () => {\r\n        const progressData = JSON.parse(localStorage.getItem('progressData') || '[]');\r\n        const timeStats = JSON.parse(localStorage.getItem('timeStats') || '{}');\r\n        const workoutSessions = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        \r\n        const latestProgress = progressData[0];\r\n        const firstProgress = progressData[progressData.length - 1];\r\n        \r\n        const today = new Date();\r\n        const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n        const recentSessions = workoutSessions.filter(session => \r\n            new Date(session.date) >= oneWeekAgo\r\n        );\r\n        \r\n        setDashboardData({\r\n            currentWeight: latestProgress?.weight || 0,\r\n            muscleGain: latestProgress && firstProgress ? \r\n                (parseFloat(latestProgress.muscleMass) - parseFloat(firstProgress.muscleMass)) : 0,\r\n            workoutSessions: workoutSessions.length,\r\n            totalWorkoutTime: timeStats.totalWorkoutTime || 0,\r\n            weeklyTime: timeStats.weeklyTime || 0,\r\n            daysActive: new Set(workoutSessions.map(s => s.date.split('T')[0])).size,\r\n            lastWorkout: workoutSessions[0]?.date || null,\r\n            currentStreak: calculateStreak(workoutSessions)\r\n        });\r\n    };\r\n    \r\n    const calculateStreak = (sessions) => {\r\n        if (sessions.length === 0) return 0;\r\n        \r\n        const today = new Date();\r\n        let streak = 0;\r\n        const sortedDates = [...new Set(sessions.map(s => s.date.split('T')[0]))].sort().reverse();\r\n        \r\n        for (let i = 0; i < sortedDates.length; i++) {\r\n            const sessionDate = new Date(sortedDates[i]);\r\n            const daysDiff = Math.floor((today - sessionDate) / (1000 * 60 * 60 * 24));\r\n            \r\n            if (daysDiff <= i + 1) {\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return streak;\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        loadDashboardData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <header className=\"dashboard-header\">\r\n                <h1>💪 Fisico della Madonna - Dashboard</h1>\r\n                <p>Benvenuto nel tuo percorso di crescita straordinaria!</p>\r\n            </header>\r\n            \r\n            <nav className=\"quick-nav\">\r\n                <Link to=\"/workout\" className=\"nav-card\">\r\n                    <h3>🏋️ Workout</h3>\r\n                    <p>Inizia allenamento</p>\r\n                </Link>\r\n                <Link to=\"/progress\" className=\"nav-card\">\r\n                    <h3>📈 Progressi</h3>\r\n                    <p>Traccia misurazioni</p>\r\n                </Link>\r\n                <Link to=\"/nutrition\" className=\"nav-card\">\r\n                    <h3>🍽️ Nutrizione</h3>\r\n                    <p>Piano alimentare</p>\r\n                </Link>\r\n                <Link to=\"/recovery\" className=\"nav-card\">\r\n                    <h3>😴 Recovery</h3>\r\n                    <p>Riposo e recupero</p>\r\n                </Link>\r\n            </nav>\r\n            \r\n            <div className=\"stats-overview\">\r\n                <h2>🎯 I Tuoi Progressi</h2>\r\n                <div className=\"stats-grid\">\r\n                    <div className=\"stat-card\">\r\n                        <h3>⚖️ Peso Attuale</h3>\r\n                        <p className=\"stat-value\">{dashboardData.currentWeight || '--'} kg</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h3>💪 Guadagno Muscolare</h3>\r\n                        <p className=\"stat-value\">+{dashboardData.muscleGain.toFixed(1)} kg</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h3>🏋️ Sessioni Completate</h3>\r\n                        <p className=\"stat-value\">{dashboardData.workoutSessions}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h3>⏱️ Tempo Totale</h3>\r\n                        <p className=\"stat-value\">{formatTime(dashboardData.totalWorkoutTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h3>📅 Giorni Attivi</h3>\r\n                        <p className=\"stat-value\">{dashboardData.daysActive}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h3>🔥 Streak Attuale</h3>\r\n                        <p className=\"stat-value\">{dashboardData.currentStreak} giorni</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h3>📊 Tempo Settimanale</h3>\r\n                        <p className=\"stat-value\">{formatTime(dashboardData.weeklyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h3>🕒 Ultimo Workout</h3>\r\n                        <p className=\"stat-value\">\r\n                            {dashboardData.lastWorkout ? \r\n                                new Date(dashboardData.lastWorkout).toLocaleDateString('it-IT') : \r\n                                'Mai'\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"motivation\">\r\n                <h2>🔥 Mantieni il Fuoco Acceso!</h2>\r\n                <p>La crescita straordinaria richiede dedizione e consistenza. Ogni giorno è un'opportunità per diventare la versione migliore di te stesso.</p>\r\n                {dashboardData.currentStreak > 0 && (\r\n                    <p className=\"streak-motivation\">\r\n                        🎆 Fantastico! Hai un streak di {dashboardData.currentStreak} giorni. Continua così!\r\n                    </p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nconst WorkoutTimer = ({ onSessionComplete }) => {\r\n    const [isActive, setIsActive] = React.useState(false);\r\n    const [currentExercise, setCurrentExercise] = React.useState('');\r\n    const [sessionTime, setSessionTime] = React.useState(0);\r\n    const [exerciseTime, setExerciseTime] = React.useState(0);\r\n    const [exercises, setExercises] = React.useState([]);\r\n    const [currentExerciseIndex, setCurrentExerciseIndex] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        let interval = null;\r\n        if (isActive) {\r\n            interval = setInterval(() => {\r\n                setSessionTime(time => time + 1);\r\n                setExerciseTime(time => time + 1);\r\n            }, 1000);\r\n        } else if (!isActive && sessionTime !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive, sessionTime]);\r\n\r\n    const startSession = () => {\r\n        setIsActive(true);\r\n        setSessionTime(0);\r\n        setExercises([]);\r\n    };\r\n\r\n    const pauseSession = () => {\r\n        setIsActive(false);\r\n    };\r\n\r\n    const nextExercise = () => {\r\n        if (currentExercise && exerciseTime > 0) {\r\n            const exerciseData = {\r\n                name: currentExercise,\r\n                duration: exerciseTime,\r\n                timestamp: new Date().toISOString()\r\n            };\r\n            setExercises([...exercises, exerciseData]);\r\n        }\r\n        \r\n        setCurrentExercise('');\r\n        setExerciseTime(0);\r\n        setCurrentExerciseIndex(prev => prev + 1);\r\n    };\r\n\r\n    const completeSession = () => {\r\n        if (currentExercise && exerciseTime > 0) {\r\n            nextExercise();\r\n        }\r\n        \r\n        const sessionData = {\r\n            date: new Date().toISOString(),\r\n            duration: sessionTime,\r\n            exercises: exercises,\r\n            id: Date.now()\r\n        };\r\n        \r\n        // Salva la sessione\r\n        const savedSessions = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        const updatedSessions = [sessionData, ...savedSessions];\r\n        localStorage.setItem('workoutSessions', JSON.stringify(updatedSessions));\r\n        \r\n        // Aggiorna le statistiche del tempo\r\n        const timeStats = JSON.parse(localStorage.getItem('timeStats') || '{}');\r\n        const updatedTimeStats = {\r\n            totalWorkoutTime: (timeStats.totalWorkoutTime || 0) + Math.floor(sessionTime / 60),\r\n            weeklyTime: calculateWeeklyTime(updatedSessions),\r\n            monthlyTime: calculateMonthlyTime(updatedSessions),\r\n            sessionsCompleted: (timeStats.sessionsCompleted || 0) + 1\r\n        };\r\n        localStorage.setItem('timeStats', JSON.stringify(updatedTimeStats));\r\n        \r\n        // Reset\r\n        setIsActive(false);\r\n        setSessionTime(0);\r\n        setExerciseTime(0);\r\n        setCurrentExercise('');\r\n        setExercises([]);\r\n        setCurrentExerciseIndex(0);\r\n        \r\n        if (onSessionComplete) {\r\n            onSessionComplete(sessionData);\r\n        }\r\n    };\r\n\r\n    const calculateWeeklyTime = (sessions) => {\r\n        const oneWeekAgo = new Date();\r\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n        \r\n        return sessions\r\n            .filter(session => new Date(session.date) >= oneWeekAgo)\r\n            .reduce((total, session) => total + Math.floor(session.duration / 60), 0);\r\n    };\r\n\r\n    const calculateMonthlyTime = (sessions) => {\r\n        const oneMonthAgo = new Date();\r\n        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\r\n        \r\n        return sessions\r\n            .filter(session => new Date(session.date) >= oneMonthAgo)\r\n            .reduce((total, session) => total + Math.floor(session.duration / 60), 0);\r\n    };\r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"workout-timer\">\r\n            <div className=\"timer-header\">\r\n                <h3>⏱️ Timer Sessione</h3>\r\n                <div className=\"session-time\">\r\n                    <span>Tempo Totale: {formatTime(sessionTime)}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"current-exercise\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Nome esercizio attuale...\"\r\n                    value={currentExercise}\r\n                    onChange={(e) => setCurrentExercise(e.target.value)}\r\n                    disabled={!isActive}\r\n                />\r\n                <div className=\"exercise-time\">\r\n                    Tempo Esercizio: {formatTime(exerciseTime)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"timer-controls\">\r\n                {!isActive && sessionTime === 0 ? (\r\n                    <button className=\"button start-btn\" onClick={startSession}>\r\n                        🚀 Inizia Sessione\r\n                    </button>\r\n                ) : (\r\n                    <div className=\"control-buttons\">\r\n                        <button \r\n                            className=\"button\" \r\n                            onClick={isActive ? pauseSession : () => setIsActive(true)}\r\n                        >\r\n                            {isActive ? '⏸️ Pausa' : '▶️ Riprendi'}\r\n                        </button>\r\n                        <button \r\n                            className=\"button next-btn\" \r\n                            onClick={nextExercise}\r\n                            disabled={!currentExercise}\r\n                        >\r\n                            ➡️ Prossimo Esercizio\r\n                        </button>\r\n                        <button \r\n                            className=\"button complete-btn\" \r\n                            onClick={completeSession}\r\n                        >\r\n                            ✅ Completa Sessione\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {exercises.length > 0 && (\r\n                <div className=\"completed-exercises\">\r\n                    <h4>Esercizi Completati:</h4>\r\n                    <ul>\r\n                        {exercises.map((exercise, index) => (\r\n                            <li key={index}>\r\n                                {exercise.name} - {formatTime(exercise.duration)}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WorkoutTimer;","import React from 'react';\r\nimport WorkoutTimer from './WorkoutTimer';\r\n\r\nconst Workout = () => {\r\n    const [selectedDay, setSelectedDay] = React.useState(null);\r\n    const [completedWorkouts, setCompletedWorkouts] = React.useState([]);\r\n    \r\n    const workoutPlan = {\r\n        'Lunedì': {\r\n            focus: 'Petto + Bicipiti',\r\n            subtitle: 'Focus: Petto (fascio alto + globale), Bicipiti',\r\n            exercises: [\r\n                { name: 'Panca Inclinata Bilanciere', sets: '4×6-8', rest: '2min', notes: 'RIR 1-2 | Focus forma e controllo' },\r\n                { name: 'Spinte Manubri Inclinata', sets: '3×8-10', rest: '90sec', notes: 'Angolo 30-45° | ROM completo' },\r\n                { name: 'Croci ai Cavi Alti/Inclinata', sets: '3×12-15', rest: '75sec', notes: 'Stretch massimo petto' },\r\n                { name: 'Dip alle Parallele (petto) o Panca Piana Manubri', sets: '3×8-10', rest: '90sec', notes: 'Inclinazione avanti per petto' },\r\n                { name: 'Curl Bilanciere', sets: '4×8-10', rest: '90sec', notes: 'No cheating | Controllo eccentrica' },\r\n                { name: 'Curl Manubri Inclinati', sets: '3×10-12', rest: '75sec', notes: 'Panca 45° | Stretch bicipiti' },\r\n                { name: 'Hammer Curl Manubri o Cavi', sets: '3×12-15', rest: '60sec', notes: 'Presa neutra | Focus brachiale' }\r\n            ]\r\n        },\r\n        'Martedì': {\r\n            focus: 'Dorso + Tricipiti + Collo (A)',\r\n            subtitle: 'Focus: Larghezza dorsale, spessore scapolare, tricipiti, collo',\r\n            exercises: [\r\n                { name: 'Trazioni Presa Ampia', sets: '4×6-8', rest: '2min', notes: 'Se necessario usa assistenza | Focus larghezza' },\r\n                { name: 'Rematore Bilanciere/Manubrio', sets: '4×8-10', rest: '2min', notes: 'Busto 45° | Squeeze scapole' },\r\n                { name: 'Lat Machine Inversa o Presa Stretta', sets: '3×10-12', rest: '90sec', notes: 'Controllo concentrica/eccentrica' },\r\n                { name: 'Pullover ai Cavi', sets: '3×12-15', rest: '75sec', notes: 'ROM ampio | Focus gran dorsale' },\r\n                { name: 'Panca Stretta Bilanciere', sets: '4×6-8', rest: '2min', notes: 'Presa larghezza spalle | Gomiti chiusi' },\r\n                { name: 'French Press EZ', sets: '3×8-10', rest: '90sec', notes: 'Solo avambracci si muovono' },\r\n                { name: 'Pushdown Cavo', sets: '3×12-15', rest: '60sec', notes: 'Contrazione massima in basso' },\r\n                { name: 'Collo - Flessione', sets: '2×15-20', rest: '30sec', notes: 'Lento e controllato' },\r\n                { name: 'Collo - Estensione', sets: '2×15-20', rest: '30sec', notes: 'Range completo sicuro' },\r\n                { name: 'Collo - Laterale dx/sx', sets: '2×12-15', rest: '30sec', notes: 'Ogni lato separatamente' }\r\n            ]\r\n        },\r\n        'Mercoledì': {\r\n            focus: 'Gambe Complete',\r\n            subtitle: 'Focus: Quadricipiti, glutei, femorali, polpacci',\r\n            exercises: [\r\n                { name: 'Squat', sets: '4×6-8', rest: '3min', notes: 'Profondità completa | RIR 1-2' },\r\n                { name: 'Hip Thrust', sets: '4×8-10', rest: '2min', notes: 'Contrazione glutei al top | Pausa 1 sec' },\r\n                { name: 'Affondi Camminata', sets: '3×10 passi/gamba', rest: '90sec', notes: 'Ginocchio a 90° | Passo lungo' },\r\n                { name: 'Leg Press 45°', sets: '3×10-12', rest: '90sec', notes: 'Piedi larghezza spalle | ROM completo' },\r\n                { name: 'Leg Curl Sdraiato', sets: '3×10-12', rest: '90sec', notes: 'Rest-pause ultimo set | Contrazione massima' },\r\n                { name: 'Calf Raise in Piedi', sets: '4×10-12', rest: '60sec', notes: 'Pausa 2 sec al top | Range completo' },\r\n                { name: 'Calf Raise Seduto', sets: '3×15-20', rest: '60sec', notes: 'Focus soleo | Controllo movimento' }\r\n            ]\r\n        },\r\n        'Giovedì': {\r\n            focus: 'Recupero Attivo',\r\n            subtitle: 'Focus: Cardiovascolare leggero, mobilità, recupero',\r\n            exercises: [\r\n                { name: 'LISS (Camminata/Cyclette)', sets: '30-40min', rest: 'Zona 1-2', notes: '60-70% FCMax | Mantieni conversazione' },\r\n                { name: 'Stretching/Mobilità', sets: '15-20min', rest: 'Rilassante', notes: 'Tutti i gruppi muscolari | Respiro profondo' },\r\n                { name: 'Sauna o Bagno Turco', sets: '10-15min', rest: 'Recovery', notes: 'Idratazione costante | Relax mentale' }\r\n            ]\r\n        },\r\n        'Venerdì': {\r\n            focus: 'Spalle Complete + Collo (B)',\r\n            subtitle: 'Focus: Deltoidi laterali/posteriori, trapezio, richiamo braccia, collo',\r\n            exercises: [\r\n                { name: 'Military Press Manubri', sets: '4×6-8', rest: '2min', notes: 'Seduto con schienale | Core attivo' },\r\n                { name: 'Alzate Laterali Cavi/Manubri', sets: '4×12-15', rest: '75sec', notes: 'Controllo eccentrica | No cheating' },\r\n                { name: 'Rear Delt Fly (Pec Deck Inversa o Manubri)', sets: '3×12-15', rest: '75sec', notes: 'Squeeze scapole | Focus deltoidi posteriori' },\r\n                { name: 'Face Pull', sets: '3×12-15', rest: '60sec', notes: 'Corda ai cavi | Gomiti alti' },\r\n                { name: 'Scrollate Manubri/Bilanciere', sets: '3×10-12', rest: '90sec', notes: 'Solo spalle | No rotazione' },\r\n                { name: 'Curl Manubri (Richiamo leggero)', sets: '2×12-15', rest: '60sec', notes: 'Pompaggio | Non a cedimento' },\r\n                { name: 'Pushdown Corda (Richiamo leggero)', sets: '2×12-15', rest: '60sec', notes: 'Focus connessione mente-muscolo' },\r\n                { name: 'Collo B - Flessione', sets: '2×15-20', rest: '30sec', notes: 'Progressione graduale resistenza' },\r\n                { name: 'Collo B - Estensione', sets: '2×15-20', rest: '30sec', notes: 'Mai forzare movimento' },\r\n                { name: 'Collo B - Laterale dx/sx', sets: '2×12-15', rest: '30sec', notes: 'Simmetrico entrambi lati' },\r\n                { name: 'Isometrie Multidirezionali Collo', sets: '3×20sec', rest: '30sec', notes: 'Resistenza manuale | 4 direzioni' },\r\n                { name: 'Stomach Vacuum', sets: '3×20sec', rest: '45sec', notes: 'Addome verso colonna | Respiro normale' },\r\n                { name: 'Plank', sets: '3×45sec', rest: '60sec', notes: 'Corpo dritto | Core attivo' }\r\n            ]\r\n        },\r\n        'Sabato': {\r\n            focus: 'Posteriori + Conditioning',\r\n            subtitle: 'Focus: Femorali, glutei, polpacci + condizionamento',\r\n            exercises: [\r\n                { name: 'Stacco Rumeno (RDL)', sets: '4×6-8', rest: '2min', notes: 'Focus femorali | Bilanciere vicino corpo' },\r\n                { name: 'Hip Thrust (Variante Mono)', sets: '3×10-12', rest: '2min', notes: 'Una gamba | Controllo stabilità' },\r\n                { name: 'Nordic Curl o Glute Ham Raise', sets: '3×8-10', rest: '90sec', notes: 'Eccentrica lenta | Assistenza se necessaria' },\r\n                { name: 'Leg Curl Seduto', sets: '3×12-15', rest: '75sec', notes: 'Contrazione massima | Pausa 1 sec' },\r\n                { name: 'Calf Raise Multipla', sets: '3×15-20', rest: '60sec', notes: 'Variare angoli piedi | Range massimo' },\r\n                { name: \"Farmer's Walk\", sets: '3×40m', rest: '90sec', notes: 'Carico pesante | Core + trapezio | Passo normale' },\r\n                { name: 'HIIT Finisher', sets: '8×30sec sprint / 60sec camminata', rest: 'Totale 10min', notes: 'Intensità massima sprint | Recupero attivo' }\r\n            ]\r\n        },\r\n        'Domenica': {\r\n            focus: 'Riposo Completo',\r\n            subtitle: 'Focus: Recupero totale, rigenerazione',\r\n            exercises: [\r\n                { name: 'Passeggiata Tranquilla', sets: '30-60min', rest: 'Libero', notes: 'Aria aperta | Ritmo rilassante' },\r\n                { name: 'Stretching Globale', sets: '20-30min', rest: 'Flow dolce', notes: 'Focus respirazione e relax' },\r\n                { name: 'Sauna/Bagno Turco (Opzionale)', sets: '15-20min', rest: 'Recovery', notes: 'Detossificazione | Idratazione' },\r\n                { name: 'Meditazione/Visualizzazione', sets: '10-20min', rest: 'Mentale', notes: 'Preparazione settimana successiva' }\r\n            ]\r\n        }\r\n    };\r\n    \r\n    const loadCompletedWorkouts = () => {\r\n        const saved = localStorage.getItem('completedWorkouts');\r\n        if (saved) {\r\n            setCompletedWorkouts(JSON.parse(saved));\r\n        }\r\n    };\r\n    \r\n    const markWorkoutCompleted = (day) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const workoutData = {\r\n            day,\r\n            date: today,\r\n            id: Date.now()\r\n        };\r\n        \r\n        const updated = [workoutData, ...completedWorkouts];\r\n        setCompletedWorkouts(updated);\r\n        localStorage.setItem('completedWorkouts', JSON.stringify(updated));\r\n    };\r\n    \r\n    const isWorkoutCompletedToday = (day) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        return completedWorkouts.some(workout => \r\n            workout.day === day && workout.date === today\r\n        );\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        loadCompletedWorkouts();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"workout-container\">\r\n            <div className=\"workout-header\">\r\n                <h2>🏋️ Scheda: Fisico della Madonna (6 Mesi)</h2>\r\n                <p className=\"program-description\">Programma di allenamento avanzato per trasformazione fisica estrema. \r\n                   <strong>Split Push/Pull/Legs + Specializzazione</strong> ottimizzato per ipertrofia muscolare.</p>\r\n                <div className=\"program-stats\">\r\n                    <span className=\"stat\">📅 6 giorni/settimana</span>\r\n                    <span className=\"stat\">⏱️ 75-90 min/sessione</span>\r\n                    <span className=\"stat\">🎯 Volume: Alto</span>\r\n                    <span className=\"stat\">🔥 Intensità: RIR 1-3</span>\r\n                </div>\r\n            </div>\r\n            \r\n            <WorkoutTimer onSessionComplete={(sessionData) => {\r\n                console.log('Sessione completata:', sessionData);\r\n            }} />\r\n            \r\n            <div className=\"workout-week\">\r\n                <h3>📅 Piano Settimanale</h3>\r\n                <div className=\"days-grid\">\r\n                    {Object.entries(workoutPlan).map(([day, workout]) => (\r\n                        <div key={day} className={`day-card ${selectedDay === day ? 'selected' : ''}`}>\r\n                            <div className=\"day-header\" onClick={() => setSelectedDay(selectedDay === day ? null : day)}>\r\n                                <h4>{day}</h4>\r\n                                <p className=\"focus-title\">{workout.focus}</p>\r\n                                <p className=\"focus-subtitle\">{workout.subtitle}</p>\r\n                                {isWorkoutCompletedToday(day) && (\r\n                                    <span className=\"completed-badge\">✅ Completato</span>\r\n                                )}\r\n                            </div>\r\n                            \r\n                            {selectedDay === day && (\r\n                                <div className=\"day-details\">\r\n                                    <div className=\"exercises-list\">\r\n                                        {workout.exercises.map((exercise, index) => (\r\n                                            <div key={index} className=\"exercise-item\">\r\n                                                <h5>{exercise.name}</h5>\r\n                                                <div className=\"exercise-details\">\r\n                                                    <span className=\"sets\">{exercise.sets}</span>\r\n                                                    <span className=\"rest\">Rest: {exercise.rest}</span>\r\n                                                </div>\r\n                                                <p className=\"notes\">{exercise.notes}</p>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"day-actions\">\r\n                                        {!isWorkoutCompletedToday(day) ? (\r\n                                            <button \r\n                                                className=\"button complete-workout-btn\"\r\n                                                onClick={() => markWorkoutCompleted(day)}\r\n                                            >\r\n                                                ✅ Segna come Completato\r\n                                            </button>\r\n                                        ) : (\r\n                                            <p className=\"completed-message\">💪 Ottimo lavoro! Workout completato oggi.</p>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"workout-tips\">\r\n                <h3>💡 Principi Fondamentali - Fisico della Madonna</h3>\r\n                <ul>\r\n                    <li>🔥 <strong>RIR (Reps in Reserve):</strong> Mantieni sempre 1-2 ripetizioni di riserva per ottimizzare volume e recupero</li>\r\n                    <li>⏱️ <strong>Tempi di Recupero:</strong> Rispetta rigorosamente i tempi indicati - sono calcolati per massimizzare l'effetto allenante</li>\r\n                    <li>💪 <strong>Progressione:</strong> Aumenta il carico quando riesci a completare tutte le serie nel range alto delle ripetizioni</li>\r\n                    <li>🎯 <strong>Forma Tecnica:</strong> La qualità del movimento è prioritaria rispetto al peso utilizzato</li>\r\n                    <li>😴 <strong>Recupero:</strong> Il giovedì è sacro - recupero attivo essenziale per la crescita</li>\r\n                    <li>🍽️ <strong>Nutrizione:</strong> Surplus calorico di 300-500 kcal/die + 2.2g proteine/kg corporeo</li>\r\n                    <li>💧 <strong>Idratazione:</strong> Minimo 35ml/kg corporeo + 500ml extra nei giorni di allenamento</li>\r\n                    <li>📈 <strong>Tracking:</strong> Tieni traccia di carichi, ripetizioni e sensazioni per ogni esercizio</li>\r\n                    <li>🧘 <strong>Mente-Muscolo:</strong> Focus mentale sul muscolo target durante ogni ripetizione</li>\r\n                    <li>🔄 <strong>Periodizzazione:</strong> Ogni 6-8 settimane rivaluta e modifica il programma</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Workout;","import React from 'react';\r\n\r\nconst Nutrition = () => {\r\n    return (\r\n        <div className=\"nutrition-container\">\r\n            <h2>Piano Nutrizionale</h2>\r\n            <p>Scopri i piani nutrizionali e le linee guida per supportare la tua crescita fisica straordinaria.</p>\r\n            <h3>Linee Guida Nutrizionali</h3>\r\n            <ul>\r\n                <li>Consuma una varietà di alimenti per garantire un apporto nutrizionale completo.</li>\r\n                <li>Includi proteine magre in ogni pasto per supportare la crescita muscolare.</li>\r\n                <li>Assicurati di idratarti adeguatamente durante il giorno.</li>\r\n                <li>Limita il consumo di zuccheri aggiunti e cibi altamente processati.</li>\r\n                <li>Considera l'uso di integratori se necessario, in consultazione con un professionista della salute.</li>\r\n            </ul>\r\n            <h3>Esempio di Piano Alimentare</h3>\r\n            <p>Colazione: Uova strapazzate con spinaci e pane integrale.</p>\r\n            <p>Pranzo: Petto di pollo grigliato con quinoa e verdure al vapore.</p>\r\n            <p>Cena: Salmone al forno con patate dolci e broccoli.</p>\r\n            <p>Snack: Yogurt greco con frutta e noci.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nutrition;","import React from 'react';\r\n\r\nconst Supplements = () => {\r\n    return (\r\n        <div className=\"supplements-container\">\r\n            <h2>Recommended Supplements for Extraordinary Growth</h2>\r\n            <ul>\r\n                <li>\r\n                    <strong>Protein Powder:</strong> Supports muscle recovery and growth.\r\n                </li>\r\n                <li>\r\n                    <strong>Creatine:</strong> Enhances strength and performance during workouts.\r\n                </li>\r\n                <li>\r\n                    <strong>BCAAs:</strong> Helps reduce muscle soreness and fatigue.\r\n                </li>\r\n                <li>\r\n                    <strong>Omega-3 Fatty Acids:</strong> Supports overall health and reduces inflammation.\r\n                </li>\r\n                <li>\r\n                    <strong>Multivitamins:</strong> Ensures adequate intake of essential vitamins and minerals.\r\n                </li>\r\n            </ul>\r\n            <p>Always consult with a healthcare professional before starting any supplement regimen.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Supplements;","import React from 'react';\r\n\r\nconst Recovery = () => {\r\n    return (\r\n        <div className=\"recovery-container\">\r\n            <h2>Recovery Strategies for Extraordinary Growth</h2>\r\n            <p>Recovery is a crucial aspect of any training program, especially for those aiming for extraordinary physical growth. Here are some effective recovery strategies:</p>\r\n            <ul>\r\n                <li><strong>Rest Days:</strong> Incorporate regular rest days into your training schedule to allow your muscles to repair and grow.</li>\r\n                <li><strong>Active Recovery:</strong> Engage in low-intensity activities such as walking, yoga, or light cycling to promote blood flow and recovery.</li>\r\n                <li><strong>Hydration:</strong> Ensure adequate hydration before, during, and after workouts to support recovery and performance.</li>\r\n                <li><strong>Nutrition:</strong> Consume a balanced diet rich in protein, healthy fats, and carbohydrates to fuel recovery.</li>\r\n                <li><strong>Sleep:</strong> Aim for 7-9 hours of quality sleep each night to optimize recovery and hormonal balance.</li>\r\n                <li><strong>Stretching and Mobility:</strong> Incorporate stretching and mobility exercises to improve flexibility and reduce muscle soreness.</li>\r\n                <li><strong>Foam Rolling:</strong> Use foam rollers to alleviate muscle tightness and improve circulation.</li>\r\n            </ul>\r\n            <p>Implementing these recovery strategies will help you maximize your training efforts and achieve your physical growth goals.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recovery;","import React from 'react';\r\n\r\nconst Progress = () => {\r\n    const [progressData, setProgressData] = React.useState([]);\r\n    const [newEntry, setNewEntry] = React.useState({\r\n        weight: '',\r\n        bodyFat: '',\r\n        muscleMass: '',\r\n        chest: '',\r\n        arms: '',\r\n        waist: '',\r\n        thighs: '',\r\n        notes: ''\r\n    });\r\n    const [timeStats, setTimeStats] = React.useState({\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        monthlyTime: 0,\r\n        sessionsCompleted: 0\r\n    });\r\n    \r\n    const loadProgressData = () => {\r\n        const saved = localStorage.getItem('progressData');\r\n        if (saved) {\r\n            setProgressData(JSON.parse(saved));\r\n        }\r\n        \r\n        const savedTimeStats = localStorage.getItem('timeStats');\r\n        if (savedTimeStats) {\r\n            setTimeStats(JSON.parse(savedTimeStats));\r\n        }\r\n    };\r\n    \r\n    const saveProgressData = (data) => {\r\n        localStorage.setItem('progressData', JSON.stringify(data));\r\n    };\r\n    \r\n    const addEntry = () => {\r\n        if (!newEntry.weight) return;\r\n        \r\n        const entry = {\r\n            ...newEntry,\r\n            date: new Date().toISOString().split('T')[0],\r\n            id: Date.now()\r\n        };\r\n        \r\n        const updated = [entry, ...progressData];\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n        \r\n        setNewEntry({\r\n            weight: '',\r\n            bodyFat: '',\r\n            muscleMass: '',\r\n            chest: '',\r\n            arms: '',\r\n            waist: '',\r\n            thighs: '',\r\n            notes: ''\r\n        });\r\n    };\r\n    \r\n    const deleteEntry = (id) => {\r\n        const updated = progressData.filter(entry => entry.id !== id);\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadProgressData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"progress-container\">\r\n            <h2>🎯 Progress Tracker Avanzato</h2>\r\n            \r\n            <div className=\"time-stats\">\r\n                <h3>📊 Statistiche Tempo Investito</h3>\r\n                <div className=\"stats-grid\">\r\n                    <div className=\"stat-card\">\r\n                        <h4>Tempo Totale</h4>\r\n                        <p>{formatTime(timeStats.totalWorkoutTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questa Settimana</h4>\r\n                        <p>{formatTime(timeStats.weeklyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questo Mese</h4>\r\n                        <p>{formatTime(timeStats.monthlyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Sessioni Completate</h4>\r\n                        <p>{timeStats.sessionsCompleted}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"add-entry-form\">\r\n                <h3>➕ Aggiungi Nuove Misurazioni</h3>\r\n                <div className=\"form-grid\">\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Peso (kg)\"\r\n                        value={newEntry.weight}\r\n                        onChange={(e) => setNewEntry({...newEntry, weight: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Grassa (%)\"\r\n                        value={newEntry.bodyFat}\r\n                        onChange={(e) => setNewEntry({...newEntry, bodyFat: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Muscolare (kg)\"\r\n                        value={newEntry.muscleMass}\r\n                        onChange={(e) => setNewEntry({...newEntry, muscleMass: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Petto (cm)\"\r\n                        value={newEntry.chest}\r\n                        onChange={(e) => setNewEntry({...newEntry, chest: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Braccia (cm)\"\r\n                        value={newEntry.arms}\r\n                        onChange={(e) => setNewEntry({...newEntry, arms: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Vita (cm)\"\r\n                        value={newEntry.waist}\r\n                        onChange={(e) => setNewEntry({...newEntry, waist: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Cosce (cm)\"\r\n                        value={newEntry.thighs}\r\n                        onChange={(e) => setNewEntry({...newEntry, thighs: e.target.value})}\r\n                    />\r\n                    <textarea\r\n                        placeholder=\"Note (sensazioni, obiettivi, etc.)\"\r\n                        value={newEntry.notes}\r\n                        onChange={(e) => setNewEntry({...newEntry, notes: e.target.value})}\r\n                    />\r\n                </div>\r\n                <button className=\"button\" onClick={addEntry}>Aggiungi Misurazione</button>\r\n            </div>\r\n            \r\n            <div className=\"progress-table\">\r\n                <h3>📈 Storico Progressi</h3>\r\n                {progressData.length === 0 ? (\r\n                    <p>Nessuna misurazione ancora. Inizia ad aggiungere i tuoi progressi!</p>\r\n                ) : (\r\n                    <div className=\"table-responsive\">\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Data</th>\r\n                                    <th>Peso</th>\r\n                                    <th>Grasso</th>\r\n                                    <th>Muscolo</th>\r\n                                    <th>Petto</th>\r\n                                    <th>Braccia</th>\r\n                                    <th>Vita</th>\r\n                                    <th>Cosce</th>\r\n                                    <th>Note</th>\r\n                                    <th>Azioni</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {progressData.map((entry) => (\r\n                                    <tr key={entry.id}>\r\n                                        <td>{entry.date}</td>\r\n                                        <td>{entry.weight} kg</td>\r\n                                        <td>{entry.bodyFat}%</td>\r\n                                        <td>{entry.muscleMass} kg</td>\r\n                                        <td>{entry.chest} cm</td>\r\n                                        <td>{entry.arms} cm</td>\r\n                                        <td>{entry.waist} cm</td>\r\n                                        <td>{entry.thighs} cm</td>\r\n                                        <td className=\"notes-cell\">{entry.notes}</td>\r\n                                        <td>\r\n                                            <button \r\n                                                className=\"delete-btn\"\r\n                                                onClick={() => deleteEntry(entry.id)}\r\n                                            >\r\n                                                🗑️\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Progress;","import React from 'react';\r\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport Dashboard from './components/Dashboard';\r\nimport Workout from './components/Workout';\r\nimport Nutrition from './components/Nutrition';\r\nimport Supplements from './components/Supplements';\r\nimport Recovery from './components/Recovery';\r\nimport Progress from './components/Progress';\r\nimport './styles/main.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Dashboard />} />\r\n                    <Route path=\"/workout\" element={<Workout />} />\r\n                    <Route path=\"/nutrition\" element={<Nutrition />} />\r\n                    <Route path=\"/supplements\" element={<Supplements />} />\r\n                    <Route path=\"/recovery\" element={<Recovery />} />\r\n                    <Route path=\"/progress\" element={<Progress />} />\r\n                </Routes>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/main.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}