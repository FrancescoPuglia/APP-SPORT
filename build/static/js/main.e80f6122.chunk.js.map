{"version":3,"sources":["utils/dataManager.js","components/MotivationalQuotes.js","components/CalendarStreak.js","components/ExerciseTracker.js","components/SupplementStack.js","components/RecoveryProtocol.js","components/Dashboard.js","components/WorkoutSimple.js","components/NutritionBella.js","components/Supplements.js","components/Recovery.js","components/Progress.js","components/Measurements.js","firebase/config.js","firebase/auth.js","firebase/firestore.js","firebase/migration.js","components/AuthProvider.js","validation/schemas.js","App.js","index.js"],"names":["dataManager","constructor","this","storageKeys","workouts","measurements","nutrition","supplements","recovery","saveWorkout","workoutData","getWorkouts","newWorkout","_objectSpread","id","Date","now","toString","date","toISOString","unshift","localStorage","setItem","JSON","stringify","saved","getItem","parse","saveMeasurement","measurementData","getMeasurements","newMeasurement","getNutritionData","_nutritionHistory$","completedMeals","nutritionStreak","parseInt","nutritionHistory","nutritionCheats","last7Days","toDateString","i","setDate","getDate","dayString","dayMeals","Object","keys","filter","key","startsWith","length","push","mealsCompleted","adherence","Math","min","currentMonth","getMonth","currentYear","getFullYear","monthlyCheats","values","cheat","month","year","totalCheats","last30DaysCheats","cheatDate","timestamp","thirtyDaysAgo","totalMealsCompleted","n","completed","avgProteinsDaily","calculateAvgProteins","avgCaloriesDaily","calculateAvgCalories","weeklyAdherence","avgAdherence","reduce","sum","day","lastMealTime","cheatFrequency","max","completedCount","Boolean","round","getAnalyticsData","stats","totalWorkouts","currentStreak","calculateWorkoutStreak","weightProgress","calculateWeightProgress","strengthProgress","calculateStrengthProgress","nutritionAdherence","supplementCompliance","calculateSupplementCompliance","recoveryFrequency","today","streak","currentDate","sortedWorkouts","map","w","sort","a","b","some","console","log","concat","change","trend","latest","oldest","weight","toFixed","exerciseProgress","forEach","workout","exercises","exercise","name","reps","volume","sets","progressSummary","exerciseName","sessions","first","last","initialWeight","currentWeight","improvement","daySupplements","avgDaily","clearAllData","removeItem","exportData","analytics","MotivationalQuotes","legendaryQuotes","quote","author","context","additionalQuotes","getTodayQuote","getDay","find","q","getRandomAdditionalQuote","floor","random","CalendarStreak","setCurrentDate","React","useState","streakData","setStreakData","monthlyStats","setMonthlyStats","calculateMonthlyStats","data","arguments","undefined","monthlyWorkouts","dateKey","calculateCurrentStreak","longestStreak","calculateLongestStreak","weeklyAverage","calculateWeeklyAverage","lastUpdated","realWorkouts","realStreak","checkDate","split","maxStreak","sortedDates","prevDate","fourWeeksAgo","useEffect","loadStreakData","markWorkoutCompleted","workoutType","updated","getDaysInMonth","firstDay","daysInMonth","startingDayOfWeek","days","currentDay","isCompleted","isToday","navigateMonth","direction","newDate","setMonth","getStreakColor","getWorkoutTypeEmoji","type","monthNames","dayNames","ExerciseTracker","exerciseData","setExerciseData","sessionProgress","setSessionProgress","personalRecords","setPersonalRecords","updatePersonalRecord","oneRepMax","calculateOneRepMax","currentPR","updatedPR","parseFloat","previousRecord","updateSessionProgress","todayExercises","ex","prev","totalCompleted","getExerciseHistory","limit","slice","isExerciseCompletedToday","loadExerciseData","savedPR","markExerciseCompleted","notes","rir","exerciseId","exerciseEntry","getTodayProgress","workoutExercises","total","percentage","remaining","getWeeklyStats","oneWeekAgo","weeklyExercises","totalSets","totalReps","totalVolume","uniqueExercises","Set","size","averageWeight","getMonthlyProgress","oneMonthAgo","monthlyExercises","workoutDays","totalExercises","averageVolume","getExerciseProgressColor","_history$","history","lastWeight","avgWeight","SupplementStack","supplementSchedule","setSupplementSchedule","takenToday","setTakenToday","evidenceBasedSupplements","creatine","dosage","timing","evidence","benefits","mechanism","color","icon","citrulline","betaAlanine","omega3","caffeine","vitaminD","isSupplementTakenToday","supplementKey","entryKey","taken","loadTodaysSupplements","todayData","includes","removedSupplements","hmb","forskolin","rAla","bcaa","glutamine","markSupplementTaken","supplement","getSupplementProgress","totalSupplements","takenCount","getWeeklySupplementStats","weeklyEntries","entry","consistency","supplementEntries","getOptimalTiming","currentTime","hour","getHours","recommendations","reason","workoutHour","createSupplementPlan","workoutSchedule","goals","core","performance","endurance","morning","preWorkout","postWorkout","evening","RecoveryProtocol","recoveryLog","setRecoveryLog","todayRecovery","setTodayRecovery","thermoTherapyProtocols","sauna","temperature","humidity","duration","protocol","precautions","scientificEvidence","steamRoom","iceBath","loadRecoveryData","todaySessions","s","totalTime","contrastTherapy","optimalTiming","immediate","after2h","after4h","nextMorning","restDays","competition","before","after","biohacking","breathwork","preSauna","preIceBath","postBoth","monitoring","heartRate","bodyTemp","subjective","markRecoverySession","therapy","effectiveness","sessionId","session","updatedLog","getRecoveryRecommendation","lastWorkout","workoutIntensity","stressLevel","hoursSinceWorkout","priority","getRecoveryStats","sessionDate","weekAgo","totalSessions","averageEffectiveness","therapyBreakdown","time","Dashboard","quotesHook","exerciseHook","supplementsHook","recoveryHook","dashboardData","setDashboardData","muscleGain","workoutSessions","totalWorkoutTime","weeklyTime","daysActive","todayWorkout","setTodayWorkout","goals12Week","setGoals12Week","startWeight","targetWeight","targetBench","targetSquat","targetDeadlift","startDate","weeksCompleted","loadDashboardData","_workouts$","analyticsData","latestMeasurement","firstMeasurement","getTime","weeklyWorkouts","weeklyVolume","exSum","weeklySets","muscleMass","focus","isDayCompleted","completedWorkouts","hasWorkout","dateString","todayQuote","todayProgress","supplementProgress","recoveryStats","reload","handleWorkoutCompleted","event","detail","handleMealToggled","handleNutritionCompleted","handleCheatAdded","handleVisibilityChange","document","visibilityState","window","addEventListener","removeEventListener","_jsxs","className","children","_jsx","style","width","Link","to","background","borderRadius","padding","margin","boxShadow","display","justifyContent","alignItems","marginBottom","fontSize","toLocaleDateString","toUpperCase","textAlign","minWidth","fontWeight","opacity","gridTemplateColumns","gap","generateFullCalendar","startingDay","calendar","index","cursor","border","transform","transition","marginTop","WorkoutSimple","navigate","useNavigate","calendarHook","selectedDay","setSelectedDay","selectedExercise","setSelectedExercise","isWorkoutActive","setIsWorkoutActive","currentWorkout","setCurrentWorkout","startTime","exerciseForm","setExerciseForm","workoutPlan","subtitle","rest","getMuscleGroup","toLowerCase","isExerciseCompleted","onClick","title","finishWorkout","_workoutPlan$currentW","alert","oldWorkoutSessions","timeStats","timeLog","minutes","e","warn","dispatchEvent","CustomEvent","entries","_ref","startWorkout","value","onChange","target","placeholder","step","completedExercise","muscleGroup","completeExercise","idx","NutritionBella","setCompletedMeals","setCurrentStreak","cheats","setCheats","weeklyDiet","meals","food","proteins","calories","ingredients","updateStreak","todayMeals","completedToday","meal","newStreak","setTimeout","totalMeals","isMealCompleted","mealId","getDayProgress","dayOfWeek","hasCheatOnDay","getMonthlyCheatCount","generateCalendar","minHeight","fontFamily","backdropFilter","textShadow","maxWidth","overflowX","whiteSpace","getTotalProteins","getTotalCalories","height","overflow","newCompleted","nutritionData","mealData","m","toggleMeal","onMouseOver","onMouseOut","textTransform","letterSpacing","flexWrap","ingredient","textDecoration","cheatData","newCheats","addCheat","Supplements","selectedCategory","setSelectedCategory","currentStack","setCurrentStack","category","cost","description","instructions","categories","all","protein","health","timingLabels","isSupplementTaken","suppId","removeFromStack","newStack","getCompletionRate","stackSupplements","_supplements$suppId","replace","newTaken","toggleSupplement","_ref2","supp","_ref3","inStack","benefit","addToStack","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref0","_ref1","Recovery","activeSession","setActiveSession","sessionHistory","setSessionHistory","currentTimer","setCurrentTimer","isTimerRunning","setIsTimerRunning","selectedProtocol","setSelectedProtocol","recoveryProtocols","difficulty","equipment","contraindications","interval","setInterval","clearInterval","endSession","newHistory","quality","formatTime","seconds","mins","secs","padStart","getSessionStats","thisWeek","totalDuration","avgDuration","totalHours","heat","cold","contrast","manual","movement","mental","_categories$protocol$","instruction","warning","protocolId","disabled","toLocaleTimeString","minute","Progress","progressData","setProgressData","newEntry","setNewEntry","bodyFat","chest","arms","waist","thighs","setTimeStats","monthlyTime","sessionsCompleted","saveProgressData","hours","loadProgressData","savedTimeStats","addEntry","deleteEntry","Measurements","setMeasurements","showForm","setShowForm","formData","setFormData","loadMeasurements","savedMeasurements","getProgressChange","current","previous","unit","abs","onSubmit","preventDefault","required","rows","measurement","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","db","getFirestore","getStorage","isSupported","then","supported","getAnalytics","process","REACT_APP_USE_FIREBASE_EMULATORS","logger","message","error","googleProvider","GoogleAuthProvider","addScope","authService","currentUser","authStateListeners","initializeAuthListener","onAuthStateChanged","user","notifyAuthStateListeners","uid","email","displayName","updateUserLastSeen","onAuthStateChange","callback","cb","signInWithEmail","password","signInWithEmailAndPassword","success","handleAuthError","signUpWithEmail","createUserWithEmailAndPassword","updateProfile","createUserDocument","signInWithGoogle","signInWithPopup","photoURL","provider","signOutUser","signOut","resetPassword","sendPasswordResetEmail","updateUserPassword","currentPassword","newPassword","Error","credential","EmailAuthProvider","reauthenticateWithCredential","updatePassword","additionalData","userRef","doc","getDoc","exists","setDoc","lastSeen","serverTimestamp","merge","userData","createdAt","settings","units","language","notifications","darkMode","profile","age","activityLevel","experience","isOnline","code","originalError","isAuthenticated","getCurrentUser","deleteAccount","deleteUser","BaseRepository","collectionName","collectionRef","collection","cache","Map","listeners","getById","useCache","has","cached","get","fromCache","docRef","docSnap","set","create","customId","_authService$getCurre","userId","docData","updatedAt","addDoc","newId","invalidateCache","update","updateData","updateDoc","delete","deleteDoc","getWithQuery","queryConstraints","query","querySnapshot","getDocs","docs","count","subscribeToChanges","onSnapshot","clear","progressRepo","super","getUserProgress","_authService$getCurre2","endDate","constraints","where","orderBy","addMeasurement","getPeriodStats","_authService$getCurre3","result","totalEntries","weightChange","muscleMassChange","bodyFatChange","period","workoutRepo","startSession","sessionData","status","completeSession","completionData","endTime","completedAt","getUserSessions","_authService$getCurre4","getWorkoutStats","recentSessions","_session$createdAt","_session$createdAt$to","toDate","call","averageDuration","exerciseStats","_session$exercises","exerciseRepo","logExercise","getPersonalRecords","_authService$getCurre5","prs","userRepo","getCurrentUserProfile","_authService$getCurre6","updateSettings","_authService$getCurre7","profileData","_authService$getCurre8","logMeal","updateMealStatus","getUserMeals","_authService$getCurre9","getDayMeals","_authService$getCurre0","getNutritionStats","_authService$getCurre1","adherenceRate","totalProteins","avgProteinsPerDay","calculateNutritionStreak","mealsByDay","reverse","logRecoverySession","recoveryData","getUserRecoverySessions","_authService$getCurre10","getDayRecoverySessions","_authService$getCurre11","_authService$getCurre12","activityBreakdown","activityType","weeklyFrequency","ceil","migrationKey","backupKey","isMigrationCompleted","markMigrationCompleted","migrationData","version","createBackup","backupData","safeGetLocalStorage","userSettings","backupString","backup","migrateAllData","migrationReport","steps","errors","totalItems","migratedItems","backupResult","progressResult","migrateProgressData","workoutResult","migrateWorkoutSessions","exerciseResult","migrateExerciseData","userResult","migrateUserSettings","verificationResult","verifyMigration","verificationPassed","details","report","item","cleanedData","cleanProgressData","createResult","sleep","cleanWorkoutSession","cleanExerciseData","fitnessStats","preferences","migratedFrom","migrationDate","updateResult","cleaned","validateNumber","validateString","workoutName","Array","isArray","Number","MAX_SAFE_INTEGER","num","isNaN","maxLength","trim","substring","_progressCheck$data","_workoutCheck$data","progressCheck","workoutCheck","userCheck","checks","progress","userProfile","allPassed","every","check","progressCount","workoutCount","hasUserProfile","rollbackMigration","ms","Promise","resolve","getMigrationStatus","hasBackup","AuthProvider","yup","mixed","default","notType","string","number","positive","integer","weightValidation","typeError","percentageValidation","measurementValidation","dateValidation","passwordValidation","matches","exerciseSchema","confirmPassword","oneOf","nullable","acceptTerms","rememberMe","confirmNewPassword","test","of","intensity","fitnessGoals","publicProfile","parent","targetDate","workoutReminders","progressReminders","achievementAlerts","emailNotifications","pushNotifications","privacy","profileVisibility","shareProgress","shareWorkouts","allowFriendRequests","theme","dateFormat","timeFormat","distance","LazyAnalytics","lazy","LazyNutritionTracker","LazyRecoveryTimer","AppContent","Router","Routes","Route","path","element","Suspense","fallback","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e80f6122.chunk.js","sourcesContent":["// SISTEMA CENTRALE DI GESTIONE DATI REALI\r\n// Tutti i dati dell'utente vengono salvati qui e utilizzati da Analytics\r\n\r\nclass DataManager {\r\n    constructor() {\r\n        this.storageKeys = {\r\n            workouts: 'userData_workouts',\r\n            measurements: 'userData_measurements', \r\n            nutrition: 'userData_nutrition',\r\n            supplements: 'userData_supplements',\r\n            recovery: 'userData_recovery'\r\n        };\r\n    }\r\n\r\n    // ===== WORKOUT DATA =====\r\n    saveWorkout(workoutData) {\r\n        const workouts = this.getWorkouts();\r\n        const newWorkout = {\r\n            id: Date.now().toString(),\r\n            date: new Date().toISOString(),\r\n            ...workoutData\r\n        };\r\n        workouts.unshift(newWorkout);\r\n        localStorage.setItem(this.storageKeys.workouts, JSON.stringify(workouts));\r\n        return newWorkout;\r\n    }\r\n\r\n    getWorkouts() {\r\n        const saved = localStorage.getItem(this.storageKeys.workouts);\r\n        return saved ? JSON.parse(saved) : [];\r\n    }\r\n\r\n    // ===== MEASUREMENTS DATA =====\r\n    saveMeasurement(measurementData) {\r\n        const measurements = this.getMeasurements();\r\n        const newMeasurement = {\r\n            id: Date.now().toString(),\r\n            date: new Date().toISOString(),\r\n            ...measurementData\r\n        };\r\n        measurements.unshift(newMeasurement);\r\n        localStorage.setItem(this.storageKeys.measurements, JSON.stringify(measurements));\r\n        return newMeasurement;\r\n    }\r\n\r\n    getMeasurements() {\r\n        const saved = localStorage.getItem(this.storageKeys.measurements);\r\n        return saved ? JSON.parse(saved) : [];\r\n    }\r\n\r\n    // ===== NUTRITION DATA =====\r\n    getNutritionData() {\r\n        const completedMeals = JSON.parse(localStorage.getItem('completedMeals') || '{}');\r\n        const nutritionStreak = parseInt(localStorage.getItem('nutritionStreak') || '0');\r\n        const nutritionHistory = JSON.parse(localStorage.getItem('nutritionHistory') || '[]');\r\n        const nutritionCheats = JSON.parse(localStorage.getItem('nutritionCheats') || '{}');\r\n        \r\n        // Calcola aderenza alla dieta basata sui pasti completati\r\n        const today = new Date().toDateString();\r\n        const last7Days = [];\r\n        \r\n        for (let i = 0; i < 7; i++) {\r\n            const date = new Date();\r\n            date.setDate(date.getDate() - i);\r\n            const dayString = date.toDateString();\r\n            \r\n            // Conta pasti completati per ogni giorno (assumendo 4 pasti/giorno)\r\n            const dayMeals = Object.keys(completedMeals).filter(key => \r\n                key.startsWith(dayString)\r\n            ).length;\r\n            \r\n            last7Days.push({\r\n                date: dayString,\r\n                mealsCompleted: dayMeals,\r\n                adherence: Math.min((dayMeals / 4) * 100, 100)\r\n            });\r\n        }\r\n\r\n        // 🍕 CALCOLI SGARRI\r\n        const currentMonth = new Date().getMonth();\r\n        const currentYear = new Date().getFullYear();\r\n        const monthlyCheats = Object.values(nutritionCheats).filter(cheat => \r\n            cheat.month === currentMonth && cheat.year === currentYear\r\n        ).length;\r\n\r\n        const totalCheats = Object.keys(nutritionCheats).length;\r\n        const last30DaysCheats = Object.values(nutritionCheats).filter(cheat => {\r\n            const cheatDate = new Date(cheat.timestamp);\r\n            const thirtyDaysAgo = new Date();\r\n            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n            return cheatDate >= thirtyDaysAgo;\r\n        }).length;\r\n\r\n        // 📊 CALCOLI AVANZATI PER ANALYTICS\r\n        const totalMealsCompleted = nutritionHistory.filter(n => n.completed).length;\r\n        const avgProteinsDaily = this.calculateAvgProteins(completedMeals);\r\n        const avgCaloriesDaily = this.calculateAvgCalories(completedMeals);\r\n\r\n        return {\r\n            completedMeals,\r\n            nutritionStreak,\r\n            nutritionHistory,\r\n            nutritionCheats,\r\n            weeklyAdherence: last7Days,\r\n            avgAdherence: last7Days.reduce((sum, day) => sum + day.adherence, 0) / 7,\r\n            totalMealsCompleted,\r\n            avgProteinsDaily,\r\n            avgCaloriesDaily,\r\n            lastMealTime: nutritionHistory[0]?.timestamp || null,\r\n            monthlyCheats,\r\n            totalCheats,\r\n            last30DaysCheats,\r\n            cheatFrequency: totalCheats > 0 ? (totalCheats / Math.max(1, nutritionHistory.length / 30)) : 0\r\n        };\r\n    }\r\n\r\n    calculateAvgProteins(completedMeals) {\r\n        // Stima proteine basata sui pasti completati (media 35g per pasto)\r\n        const completedCount = Object.values(completedMeals).filter(Boolean).length;\r\n        return Math.round((completedCount * 35) / 7); // Media settimanale\r\n    }\r\n\r\n    calculateAvgCalories(completedMeals) {\r\n        // Stima calorie basata sui pasti completati (media 450 kcal per pasto)\r\n        const completedCount = Object.values(completedMeals).filter(Boolean).length;\r\n        return Math.round((completedCount * 450) / 7); // Media settimanale\r\n    }\r\n\r\n    // ===== ANALYTICS DATA COMPILATION =====\r\n    getAnalyticsData() {\r\n        const workouts = this.getWorkouts();\r\n        const measurements = this.getMeasurements();\r\n        const nutrition = this.getNutritionData();\r\n        const supplements = JSON.parse(localStorage.getItem('supplementsTaken') || '{}');\r\n        const recovery = JSON.parse(localStorage.getItem('recoveryHistory') || '[]');\r\n\r\n        return {\r\n            workouts,\r\n            measurements,\r\n            nutrition,\r\n            supplements,\r\n            recovery,\r\n            \r\n            // Stats calcolate\r\n            stats: {\r\n                totalWorkouts: workouts.length,\r\n                currentStreak: this.calculateWorkoutStreak(workouts),\r\n                weightProgress: this.calculateWeightProgress(measurements),\r\n                strengthProgress: this.calculateStrengthProgress(workouts),\r\n                nutritionAdherence: nutrition.avgAdherence,\r\n                supplementCompliance: this.calculateSupplementCompliance(supplements),\r\n                recoveryFrequency: recovery.length\r\n            }\r\n        };\r\n    }\r\n\r\n    calculateWorkoutStreak(workouts) {\r\n        if (!workouts.length) return 0;\r\n        \r\n        const today = new Date();\r\n        let streak = 0;\r\n        let currentDate = new Date(today);\r\n        \r\n        // Ordina workouts per data\r\n        const sortedWorkouts = workouts\r\n            .map(w => new Date(w.date))\r\n            .sort((a, b) => b - a);\r\n\r\n        // 🔥 ALGORITMO MIGLIORATO PER STREAK ACCURATO\r\n        for (let i = 0; i < 365; i++) { // Controlla ultimo anno\r\n            const dayString = currentDate.toDateString();\r\n            const hasWorkout = sortedWorkouts.some(date => \r\n                date.toDateString() === dayString\r\n            );\r\n            \r\n            if (hasWorkout) {\r\n                streak++;\r\n            } else if (i === 0) {\r\n                // Se oggi non c'è workout, controlla ieri\r\n                currentDate.setDate(currentDate.getDate() - 1);\r\n                continue;\r\n            } else {\r\n                break; // Fine streak quando trova giorno senza workout\r\n            }\r\n            \r\n            currentDate.setDate(currentDate.getDate() - 1);\r\n        }\r\n        \r\n        console.log(`🔥 Streak calcolato: ${streak} giorni`);\r\n        return streak;\r\n    }\r\n\r\n    calculateWeightProgress(measurements) {\r\n        if (measurements.length < 2) return { change: 0, trend: 'stable' };\r\n        \r\n        const latest = measurements[0];\r\n        const oldest = measurements[measurements.length - 1];\r\n        \r\n        const change = latest.weight - oldest.weight;\r\n        const trend = change > 1 ? 'gaining' : change < -1 ? 'losing' : 'stable';\r\n        \r\n        return { change: change.toFixed(1), trend };\r\n    }\r\n\r\n    calculateStrengthProgress(workouts) {\r\n        const exerciseProgress = {};\r\n        \r\n        workouts.forEach(workout => {\r\n            if (workout.exercises) {\r\n                workout.exercises.forEach(exercise => {\r\n                    if (!exerciseProgress[exercise.name]) {\r\n                        exerciseProgress[exercise.name] = [];\r\n                    }\r\n                    \r\n                    exerciseProgress[exercise.name].push({\r\n                        date: workout.date,\r\n                        weight: exercise.weight,\r\n                        reps: exercise.reps,\r\n                        volume: exercise.weight * exercise.reps * exercise.sets\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        // Calcola progresso per ogni esercizio\r\n        const progressSummary = {};\r\n        Object.keys(exerciseProgress).forEach(exerciseName => {\r\n            const sessions = exerciseProgress[exerciseName].sort((a, b) => \r\n                new Date(a.date) - new Date(b.date)\r\n            );\r\n            \r\n            if (sessions.length >= 2) {\r\n                const first = sessions[0];\r\n                const last = sessions[sessions.length - 1];\r\n                \r\n                progressSummary[exerciseName] = {\r\n                    initialWeight: first.weight,\r\n                    currentWeight: last.weight,\r\n                    improvement: ((last.weight - first.weight) / first.weight * 100).toFixed(1),\r\n                    sessions: sessions.length\r\n                };\r\n            }\r\n        });\r\n\r\n        return progressSummary;\r\n    }\r\n\r\n    calculateSupplementCompliance(supplements) {\r\n        const today = new Date().toDateString();\r\n        const last7Days = [];\r\n        \r\n        for (let i = 0; i < 7; i++) {\r\n            const date = new Date();\r\n            date.setDate(date.getDate() - i);\r\n            const dayString = date.toDateString();\r\n            \r\n            const daySupplements = Object.keys(supplements).filter(key => \r\n                key.startsWith(dayString)\r\n            ).length;\r\n            \r\n            last7Days.push(daySupplements);\r\n        }\r\n        \r\n        const avgDaily = last7Days.reduce((sum, day) => sum + day, 0) / 7;\r\n        return Math.round((avgDaily / 5) * 100); // Assumiamo 5 supplementi target\r\n    }\r\n\r\n    // ===== UTILITY METHODS =====\r\n    clearAllData() {\r\n        Object.values(this.storageKeys).forEach(key => {\r\n            localStorage.removeItem(key);\r\n        });\r\n        \r\n        // Pulisci anche altri storage\r\n        localStorage.removeItem('completedMeals');\r\n        localStorage.removeItem('nutritionStreak');\r\n        localStorage.removeItem('supplementsTaken');\r\n        localStorage.removeItem('recoveryHistory');\r\n    }\r\n\r\n    exportData() {\r\n        return {\r\n            workouts: this.getWorkouts(),\r\n            measurements: this.getMeasurements(),\r\n            nutrition: this.getNutritionData(),\r\n            analytics: this.getAnalyticsData()\r\n        };\r\n    }\r\n}\r\n\r\n// Esporta istanza singleton\r\nexport const dataManager = new DataManager();\r\nexport default dataManager;","import React from 'react';\r\n\r\nconst MotivationalQuotes = () => {\r\n    const legendaryQuotes = [\r\n        {\r\n            day: 1, // Lunedì\r\n            quote: \"Champions aren't made in the gyms. Champions are made from something deep inside them: a desire, a dream, a vision.\",\r\n            author: \"Muhammad Ali\",\r\n            context: \"Petto + Bicipiti - Inizia la settimana con la forza del campione\"\r\n        },\r\n        {\r\n            day: 2, // Martedì  \r\n            quote: \"The cave you fear to enter holds the treasure you seek.\",\r\n            author: \"Arnold Schwarzenegger\",\r\n            context: \"Dorso + Tricipiti - Affronta la paura, trova la forza\"\r\n        },\r\n        {\r\n            day: 3, // Mercoledì\r\n            quote: \"Strength does not come from physical capacity. It comes from an indomitable will.\",\r\n            author: \"Mahatma Gandhi (adattato da Kobe Bryant)\",\r\n            context: \"Gambe Complete - La vera forza viene dalla mente\"\r\n        },\r\n        {\r\n            day: 4, // Giovedì\r\n            quote: \"Recovery is not a sign of weakness, it's a strategy of champions.\",\r\n            author: \"LeBron James\",\r\n            context: \"Recupero Attivo - Il riposo è parte della vittoria\"\r\n        },\r\n        {\r\n            day: 5, // Venerdì\r\n            quote: \"Excellence is not a skill, it's an attitude.\",\r\n            author: \"Ralph Marston (filosofia Michael Jordan)\",\r\n            context: \"Spalle + Core - L'eccellenza è una scelta quotidiana\"\r\n        },\r\n        {\r\n            day: 6, // Sabato\r\n            quote: \"The body achieves what the mind believes.\",\r\n            author: \"Napoleon Hill (ispirato da Serena Williams)\",\r\n            context: \"Posteriori + Conditioning - Credi e raggiungerai\"\r\n        },\r\n        {\r\n            day: 0, // Domenica\r\n            quote: \"Rest when you're weary. Refresh and renew yourself, your body, your mind, your spirit. Then get back to work.\",\r\n            author: \"Ralph Marston\",\r\n            context: \"Riposo Completo - Rigenera per dominare\"\r\n        }\r\n    ];\r\n\r\n    const additionalQuotes = [\r\n        {\r\n            quote: \"I don't measure a man's success by how high he climbs but how high he bounces when he hits bottom.\",\r\n            author: \"George S. Patton\",\r\n            context: \"Per i giorni difficili\"\r\n        },\r\n        {\r\n            quote: \"The will to win, the desire to succeed, the urge to reach your full potential... these are the keys that will unlock the door to personal excellence.\",\r\n            author: \"Confucio (filosofia Kobe Bryant)\",\r\n            context: \"Quando manca la motivazione\"\r\n        },\r\n        {\r\n            quote: \"Pain is temporary. Quitting lasts forever.\",\r\n            author: \"Lance Armstrong\",\r\n            context: \"Durante l'allenamento intenso\"\r\n        },\r\n        {\r\n            quote: \"You have power over your mind - not outside events. Realize this, and you will find strength.\",\r\n            author: \"Marcus Aurelius (filosofia Tom Brady)\",\r\n            context: \"Controllo mentale\"\r\n        },\r\n        {\r\n            quote: \"The brick walls are there for a reason. The brick walls are not there to keep us out. The brick walls are there to give us a chance to show how badly we want something.\",\r\n            author: \"Randy Pausch (mentalità Cristiano Ronaldo)\",\r\n            context: \"Superare gli ostacoli\"\r\n        }\r\n    ];\r\n\r\n    const getTodayQuote = () => {\r\n        const today = new Date().getDay(); // 0 = Domenica, 1 = Lunedì, etc.\r\n        return legendaryQuotes.find(q => q.day === today) || legendaryQuotes[0];\r\n    };\r\n\r\n    const getRandomAdditionalQuote = () => {\r\n        return additionalQuotes[Math.floor(Math.random() * additionalQuotes.length)];\r\n    };\r\n\r\n    return {\r\n        getTodayQuote,\r\n        getRandomAdditionalQuote,\r\n        legendaryQuotes,\r\n        additionalQuotes\r\n    };\r\n};\r\n\r\nexport default MotivationalQuotes;","import React from 'react';\nimport { dataManager } from '../utils/dataManager';\n\nconst CalendarStreak = () => {\n    const [currentDate, setCurrentDate] = React.useState(new Date());\n    const [streakData, setStreakData] = React.useState({});\n    const [monthlyStats, setMonthlyStats] = React.useState({});\n\n    const loadStreakData = () => {\n        const saved = localStorage.getItem('streakData');\n        if (saved) {\n            setStreakData(JSON.parse(saved));\n        }\n    };\n\n    const saveStreakData = (data) => {\n        localStorage.setItem('streakData', JSON.stringify(data));\n        setStreakData(data);\n    };\n\n    const markWorkoutCompleted = (date, workoutType, exercises = []) => {\n        const dateKey = date.toISOString().split('T')[0];\n        const updated = {\n            ...streakData,\n            [dateKey]: {\n                completed: true,\n                workoutType,\n                exercises,\n                timestamp: new Date().toISOString()\n            }\n        };\n        saveStreakData(updated);\n        calculateMonthlyStats(updated);\n    };\n\n    const calculateMonthlyStats = (data = streakData) => {\n        const currentMonth = currentDate.getMonth();\n        const currentYear = currentDate.getFullYear();\n        \n        const monthlyWorkouts = Object.keys(data).filter(dateKey => {\n            const date = new Date(dateKey);\n            return date.getMonth() === currentMonth && \n                   date.getFullYear() === currentYear &&\n                   data[dateKey].completed;\n        }).length;\n\n        const currentStreak = calculateCurrentStreak(data);\n        const longestStreak = calculateLongestStreak(data);\n        const weeklyAverage = calculateWeeklyAverage(data);\n\n        setMonthlyStats({\n            monthlyWorkouts,\n            currentStreak,\n            longestStreak,\n            weeklyAverage,\n            lastUpdated: new Date()\n        });\n    };\n\n    const calculateCurrentStreak = (data) => {\n        // 🔥 BUG FIX: Calcola streak dai dati REALI di dataManager\n        const realWorkouts = dataManager.getWorkouts() || [];\n        const realStreak = dataManager.calculateWorkoutStreak(realWorkouts);\n        \n        // Usa anche il vecchio sistema per compatibilità\n        const today = new Date();\n        let streak = 0;\n        let checkDate = new Date(today);\n\n        while (checkDate) {\n            const dateKey = checkDate.toISOString().split('T')[0];\n            if (data[dateKey] && data[dateKey].completed) {\n                streak++;\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else if (streak === 0 && checkDate.toDateString() === today.toDateString()) {\n                // Se oggi non è completato, controlla ieri\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else {\n                break;\n            }\n            \n            // Evita loop infiniti\n            if (streak > 365) break;\n        }\n        \n        console.log(`🔥 Streak CalendarStreak: ${streak}, DataManager: ${realStreak}`);\n        return Math.max(streak, realStreak);\n    };\n\n    const calculateLongestStreak = (data) => {\n        let maxStreak = 0;\n        let currentStreak = 0;\n        \n        const sortedDates = Object.keys(data)\n            .filter(key => data[key].completed)\n            .sort();\n        \n        for (let i = 0; i < sortedDates.length; i++) {\n            if (i === 0) {\n                currentStreak = 1;\n            } else {\n                const prevDate = new Date(sortedDates[i - 1]);\n                const currDate = new Date(sortedDates[i]);\n                const daysDiff = (currDate - prevDate) / (1000 * 60 * 60 * 24);\n                \n                if (daysDiff === 1) {\n                    currentStreak++;\n                } else {\n                    maxStreak = Math.max(maxStreak, currentStreak);\n                    currentStreak = 1;\n                }\n            }\n        }\n        \n        return Math.max(maxStreak, currentStreak);\n    };\n\n    const calculateWeeklyAverage = (data) => {\n        const fourWeeksAgo = new Date();\n        fourWeeksAgo.setDate(fourWeeksAgo.getDate() - 28);\n        \n        const recentWorkouts = Object.keys(data).filter(dateKey => {\n            const date = new Date(dateKey);\n            return date >= fourWeeksAgo && data[dateKey].completed;\n        }).length;\n        \n        return (recentWorkouts / 4).toFixed(1);\n    };\n\n    const getDaysInMonth = (date) => {\n        const year = date.getFullYear();\n        const month = date.getMonth();\n        const firstDay = new Date(year, month, 1);\n        const lastDay = new Date(year, month + 1, 0);\n        const daysInMonth = lastDay.getDate();\n        const startingDayOfWeek = firstDay.getDay();\n\n        const days = [];\n        \n        // Aggiungi giorni vuoti per allineare il calendario\n        for (let i = 0; i < startingDayOfWeek; i++) {\n            days.push(null);\n        }\n        \n        // Aggiungi tutti i giorni del mese\n        for (let day = 1; day <= daysInMonth; day++) {\n            const currentDay = new Date(year, month, day);\n            const dateKey = currentDay.toISOString().split('T')[0];\n            days.push({\n                date: currentDay,\n                day,\n                isCompleted: streakData[dateKey] && streakData[dateKey].completed,\n                workoutType: streakData[dateKey] ? streakData[dateKey].workoutType : null,\n                isToday: currentDay.toDateString() === new Date().toDateString()\n            });\n        }\n        \n        return days;\n    };\n\n    const navigateMonth = (direction) => {\n        const newDate = new Date(currentDate);\n        newDate.setMonth(newDate.getMonth() + direction);\n        setCurrentDate(newDate);\n    };\n\n    const getStreakColor = (streak) => {\n        if (streak >= 30) return '#ff006e'; // Rosa intenso\n        if (streak >= 21) return '#ff9500'; // Arancione \n        if (streak >= 14) return '#00ff88'; // Verde\n        if (streak >= 7) return '#00ffff';  // Cyan\n        return '#ffffff'; // Bianco\n    };\n\n    const getWorkoutTypeEmoji = (type) => {\n        const emojiMap = {\n            'Petto + Bicipiti': '💪',\n            'Dorso + Tricipiti + Collo (A)': '🏋️',\n            'Gambe Complete': '🦵',\n            'Recupero Attivo': '🧘',\n            'Spalle Complete + Collo (B)': '💫',\n            'Posteriori + Conditioning': '🔥',\n            'Riposo Completo': '😴'\n        };\n        return emojiMap[type] || '💪';\n    };\n\n    React.useEffect(() => {\n        loadStreakData();\n    }, []);\n\n    React.useEffect(() => {\n        calculateMonthlyStats();\n    }, [streakData, currentDate]);\n\n    const monthNames = [\n        'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n        'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n    ];\n\n    const dayNames = ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab'];\n\n    return {\n        currentDate,\n        streakData,\n        monthlyStats,\n        markWorkoutCompleted,\n        getDaysInMonth,\n        navigateMonth,\n        getStreakColor,\n        getWorkoutTypeEmoji,\n        monthNames,\n        dayNames,\n        calculateCurrentStreak: () => calculateCurrentStreak(streakData)\n    };\n};\n\nexport default CalendarStreak;","import React from 'react';\r\n\r\nconst ExerciseTracker = () => {\r\n    const [exerciseData, setExerciseData] = React.useState({});\r\n    const [sessionProgress, setSessionProgress] = React.useState({});\r\n    const [personalRecords, setPersonalRecords] = React.useState({});\r\n\r\n    const loadExerciseData = () => {\r\n        const saved = localStorage.getItem('exerciseData');\r\n        if (saved) {\r\n            setExerciseData(JSON.parse(saved));\r\n        }\r\n        \r\n        const savedPR = localStorage.getItem('personalRecords');\r\n        if (savedPR) {\r\n            setPersonalRecords(JSON.parse(savedPR));\r\n        }\r\n    };\r\n\r\n    const saveExerciseData = (data) => {\r\n        localStorage.setItem('exerciseData', JSON.stringify(data));\r\n        setExerciseData(data);\r\n    };\r\n\r\n    const savePersonalRecords = (data) => {\r\n        localStorage.setItem('personalRecords', JSON.stringify(data));\r\n        setPersonalRecords(data);\r\n    };\r\n\r\n    const markExerciseCompleted = (exerciseName, sets, reps, weight, notes = '', rir = null) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const exerciseId = `${exerciseName}_${today}`;\r\n        \r\n        const exerciseEntry = {\r\n            id: exerciseId,\r\n            exerciseName,\r\n            date: today,\r\n            sets: parseInt(sets),\r\n            reps: parseInt(reps),\r\n            weight: parseFloat(weight),\r\n            notes,\r\n            rir,\r\n            timestamp: new Date().toISOString(),\r\n            completed: true\r\n        };\r\n\r\n        const updated = {\r\n            ...exerciseData,\r\n            [exerciseId]: exerciseEntry\r\n        };\r\n        \r\n        saveExerciseData(updated);\r\n        \r\n        // Aggiorna record personali se necessario\r\n        updatePersonalRecord(exerciseName, weight, reps);\r\n        \r\n        // Aggiorna progresso sessione\r\n        updateSessionProgress(exerciseName);\r\n        \r\n        return exerciseEntry;\r\n    };\r\n\r\n    const updatePersonalRecord = (exerciseName, weight, reps) => {\r\n        const oneRepMax = calculateOneRepMax(weight, reps);\r\n        const currentPR = personalRecords[exerciseName] || { weight: 0, reps: 0, oneRepMax: 0, date: null };\r\n        \r\n        if (oneRepMax > currentPR.oneRepMax || \r\n            (weight > currentPR.weight && reps >= currentPR.reps)) {\r\n            \r\n            const updatedPR = {\r\n                ...personalRecords,\r\n                [exerciseName]: {\r\n                    weight: parseFloat(weight),\r\n                    reps: parseInt(reps),\r\n                    oneRepMax,\r\n                    date: new Date().toISOString(),\r\n                    previousRecord: currentPR.oneRepMax\r\n                }\r\n            };\r\n            \r\n            savePersonalRecords(updatedPR);\r\n            \r\n            // Notifica nuovo record\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    };\r\n\r\n    const calculateOneRepMax = (weight, reps) => {\r\n        // Formula Epley: 1RM = w * (1 + r/30)\r\n        return Math.round(weight * (1 + reps / 30));\r\n    };\r\n\r\n    const updateSessionProgress = (exerciseName) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const todayExercises = Object.values(exerciseData).filter(ex => \r\n            ex.date === today && ex.completed\r\n        );\r\n        \r\n        setSessionProgress(prev => ({\r\n            ...prev,\r\n            [exerciseName]: true,\r\n            totalCompleted: todayExercises.length + 1\r\n        }));\r\n    };\r\n\r\n    const getExerciseHistory = (exerciseName, limit = 10) => {\r\n        return Object.values(exerciseData)\r\n            .filter(ex => ex.exerciseName === exerciseName)\r\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\r\n            .slice(0, limit);\r\n    };\r\n\r\n    const getTodayProgress = (workoutExercises) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const completedToday = Object.values(exerciseData).filter(ex => \r\n            ex.date === today && ex.completed\r\n        );\r\n        \r\n        const completed = completedToday.length;\r\n        const total = workoutExercises ? workoutExercises.length : 0;\r\n        const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;\r\n        \r\n        return {\r\n            completed,\r\n            total,\r\n            percentage,\r\n            remaining: Math.max(0, total - completed)\r\n        };\r\n    };\r\n\r\n    const getWeeklyStats = () => {\r\n        const oneWeekAgo = new Date();\r\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n        \r\n        const weeklyExercises = Object.values(exerciseData).filter(ex => \r\n            new Date(ex.date) >= oneWeekAgo && ex.completed\r\n        );\r\n        \r\n        const totalSets = weeklyExercises.reduce((sum, ex) => sum + ex.sets, 0);\r\n        const totalReps = weeklyExercises.reduce((sum, ex) => sum + (ex.sets * ex.reps), 0);\r\n        const totalVolume = weeklyExercises.reduce((sum, ex) => sum + (ex.weight * ex.sets * ex.reps), 0);\r\n        const uniqueExercises = new Set(weeklyExercises.map(ex => ex.exerciseName)).size;\r\n        \r\n        return {\r\n            sessions: weeklyExercises.length,\r\n            totalSets,\r\n            totalReps,\r\n            totalVolume: Math.round(totalVolume),\r\n            uniqueExercises,\r\n            averageWeight: weeklyExercises.length > 0 ? \r\n                Math.round(weeklyExercises.reduce((sum, ex) => sum + ex.weight, 0) / weeklyExercises.length) : 0\r\n        };\r\n    };\r\n\r\n    const getMonthlyProgress = () => {\r\n        const oneMonthAgo = new Date();\r\n        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\r\n        \r\n        const monthlyExercises = Object.values(exerciseData).filter(ex => \r\n            new Date(ex.date) >= oneMonthAgo && ex.completed\r\n        );\r\n        \r\n        const workoutDays = new Set(monthlyExercises.map(ex => ex.date)).size;\r\n        const totalVolume = monthlyExercises.reduce((sum, ex) => \r\n            sum + (ex.weight * ex.sets * ex.reps), 0\r\n        );\r\n        \r\n        return {\r\n            workoutDays,\r\n            totalExercises: monthlyExercises.length,\r\n            totalVolume: Math.round(totalVolume),\r\n            averageVolume: workoutDays > 0 ? Math.round(totalVolume / workoutDays) : 0\r\n        };\r\n    };\r\n\r\n    const isExerciseCompletedToday = (exerciseName) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        return Object.values(exerciseData).some(ex => \r\n            ex.exerciseName === exerciseName && \r\n            ex.date === today && \r\n            ex.completed\r\n        );\r\n    };\r\n\r\n    const getExerciseProgressColor = (exerciseName) => {\r\n        if (isExerciseCompletedToday(exerciseName)) {\r\n            return '#00ff88'; // Verde completato\r\n        }\r\n        \r\n        const history = getExerciseHistory(exerciseName, 3);\r\n        if (history.length === 0) {\r\n            return '#ffffff'; // Bianco nuovo esercizio\r\n        }\r\n        \r\n        // Analisi progressione\r\n        const lastWeight = history[0]?.weight || 0;\r\n        const avgWeight = history.reduce((sum, ex) => sum + ex.weight, 0) / history.length;\r\n        \r\n        if (lastWeight > avgWeight * 1.05) {\r\n            return '#ff9500'; // Arancione in progressione\r\n        } else if (lastWeight < avgWeight * 0.95) {\r\n            return '#ff006e'; // Rosa in calo\r\n        }\r\n        \r\n        return '#00ffff'; // Cyan stabile\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadExerciseData();\r\n    }, []);\r\n\r\n    return {\r\n        exerciseData,\r\n        sessionProgress,\r\n        personalRecords,\r\n        markExerciseCompleted,\r\n        getExerciseHistory,\r\n        getTodayProgress,\r\n        getWeeklyStats,\r\n        getMonthlyProgress,\r\n        isExerciseCompletedToday,\r\n        getExerciseProgressColor,\r\n        updatePersonalRecord,\r\n        calculateOneRepMax\r\n    };\r\n};\r\n\r\nexport default ExerciseTracker;","import React from 'react';\r\n\r\nconst SupplementStack = () => {\r\n    const [supplementSchedule, setSupplementSchedule] = React.useState({});\r\n    const [takenToday, setTakenToday] = React.useState({});\r\n\r\n    const evidenceBasedSupplements = {\r\n        creatine: {\r\n            name: 'Creatina Monoidrato',\r\n            dosage: '3-5g',\r\n            timing: 'Post-workout o qualsiasi momento',\r\n            evidence: 'A+ (Oltre 500 studi)',\r\n            benefits: ['↑ Forza 5-15%', '↑ Potenza esplosiva', '↑ Volume allenamento', '↑ Massa muscolare'],\r\n            mechanism: 'Rigenera ATP per contrazioni muscolari ad alta intensità',\r\n            notes: 'Loading non necessario. Consistenza > timing. Funziona meglio con carboidrati.',\r\n            color: '#00ff88',\r\n            icon: '💪'\r\n        },\r\n        citrulline: {\r\n            name: 'L-Citrullina Malato',\r\n            dosage: '6-8g',\r\n            timing: '30-45min pre-workout',\r\n            evidence: 'A (Multipli RCT)',\r\n            benefits: ['↑ Pump muscolare', '↑ Resistenza', '↓ DOMS', '↑ Ossido nitrico'],\r\n            mechanism: 'Precursore arginina → NO → vasodilatazione',\r\n            notes: 'Più efficace della L-Arginina. Sinergia con caffeina.',\r\n            color: '#ff9500',\r\n            icon: '🔥'\r\n        },\r\n        betaAlanine: {\r\n            name: 'Beta-Alanina',\r\n            dosage: '3-5g',\r\n            timing: 'Divisa in 2-3 dosi giornaliere',\r\n            evidence: 'A (Evidenza consolidata)',\r\n            benefits: ['↑ Resistenza muscolare', '↓ Fatica 1-4 min sforzo', '↑ Volume alto-rep'],\r\n            mechanism: 'Aumenta carnosina muscolare → buffer acido lattico',\r\n            notes: 'Loading 2-4 settimane. Possibile parestesia (innocua).',\r\n            color: '#00ffff',\r\n            icon: '⚡'\r\n        },\r\n        omega3: {\r\n            name: 'Omega-3 EPA/DHA',\r\n            dosage: '2-3g EPA+DHA',\r\n            timing: 'Con pasti contenenti grassi',\r\n            evidence: 'A+ (Migliaia di studi)',\r\n            benefits: ['↓ Infiammazione', '↑ Recupero', '↑ Sintesi proteica', '↑ Salute cardiovascolare'],\r\n            mechanism: 'Modulazione cascata infiammatoria e membrane cellulari',\r\n            notes: 'Ratio EPA:DHA 2:1 ottimale. Qualità > quantità.',\r\n            color: '#0099ff',\r\n            icon: '🐟'\r\n        },\r\n        caffeine: {\r\n            name: 'Caffeina',\r\n            dosage: '200-400mg',\r\n            timing: '30-45min pre-workout',\r\n            evidence: 'A+ (Gold standard)',\r\n            benefits: ['↑ Focus', '↑ Energia', '↑ Performance', '↑ Metabolismo grassi'],\r\n            mechanism: 'Antagonista adenosina → vigilanza + mobilizzazione grassi',\r\n            notes: 'Tolleranza sviluppa rapidamente. Ciclare 1-2 settimane ogni mese.',\r\n            color: '#8B4513',\r\n            icon: '☕'\r\n        },\r\n        vitaminD: {\r\n            name: 'Vitamina D3',\r\n            dosage: '2000-4000 IU',\r\n            timing: 'Con pasto contenente grassi',\r\n            evidence: 'A (Critico se carente)',\r\n            benefits: ['↑ Testosterone', '↑ Forza', '↑ Salute ossea', '↑ Sistema immunitario'],\r\n            mechanism: 'Regolazione ormonale e assorbimento calcio',\r\n            notes: 'Test ematico raccomandato. Target: 30-50 ng/mL.',\r\n            color: '#FFD700',\r\n            icon: '☀️'\r\n        }\r\n    };\r\n\r\n    const removedSupplements = {\r\n        hmb: 'Scarsa evidenza per atleti allenati. Solo utile per anziani/principianti.',\r\n        forskolin: 'Studi inconsistenti. Nessun beneficio provato su composizione corporea.',\r\n        rAla: 'Evidenza limitata. Costo-beneficio sfavorevole vs omega-3.',\r\n        bcaa: 'Inutili se assumi proteine complete. Whey protein superiore.',\r\n        glutamine: 'Non ergogenica in soggetti sani. Solo utile in immunodepressione.'\r\n    };\r\n\r\n    const getOptimalTiming = (currentTime) => {\r\n        const hour = currentTime.getHours();\r\n        const recommendations = [];\r\n\r\n        // Mattino (6-10)\r\n        if (hour >= 6 && hour <= 10) {\r\n            recommendations.push({\r\n                supplement: 'vitaminD',\r\n                reason: 'Assorbimento ottimale con prima colazione'\r\n            });\r\n            recommendations.push({\r\n                supplement: 'omega3',\r\n                reason: 'Con grassi della colazione per biodisponibilità'\r\n            });\r\n        }\r\n\r\n        // Pre-workout (dipende dall'orario allenamento)\r\n        const workoutHour = 18; // Assumiamo allenamento serale\r\n        if (hour === workoutHour - 1) {\r\n            recommendations.push({\r\n                supplement: 'caffeine',\r\n                reason: '30-45min prima allenamento per picco energetico'\r\n            });\r\n            recommendations.push({\r\n                supplement: 'citrulline',\r\n                reason: 'Pre-workout per pump e resistenza'\r\n            });\r\n        }\r\n\r\n        // Post-workout\r\n        if (hour === workoutHour + 1) {\r\n            recommendations.push({\r\n                supplement: 'creatine',\r\n                reason: 'Post-workout con carboidrati per uptake'\r\n            });\r\n        }\r\n\r\n        // Sera\r\n        if (hour >= 20) {\r\n            recommendations.push({\r\n                supplement: 'betaAlanine',\r\n                reason: 'Loading serale per evitare parestesia diurna'\r\n            });\r\n        }\r\n\r\n        return recommendations;\r\n    };\r\n\r\n    const markSupplementTaken = (supplementKey, dosage, timing) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const entryKey = `${supplementKey}_${today}`;\r\n\r\n        const taken = {\r\n            ...takenToday,\r\n            [entryKey]: {\r\n                supplement: supplementKey,\r\n                dosage,\r\n                timing,\r\n                timestamp: new Date().toISOString(),\r\n                taken: true\r\n            }\r\n        };\r\n\r\n        setTakenToday(taken);\r\n        localStorage.setItem('supplementsTakenToday', JSON.stringify(taken));\r\n\r\n        // Salva nello storico\r\n        const history = JSON.parse(localStorage.getItem('supplementsHistory') || '{}');\r\n        history[entryKey] = taken[entryKey];\r\n        localStorage.setItem('supplementsHistory', JSON.stringify(history));\r\n    };\r\n\r\n    const isSupplementTakenToday = (supplementKey) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const entryKey = `${supplementKey}_${today}`;\r\n        return takenToday[entryKey] && takenToday[entryKey].taken;\r\n    };\r\n\r\n    const getSupplementProgress = () => {\r\n        const totalSupplements = Object.keys(evidenceBasedSupplements).length;\r\n        const takenCount = Object.keys(evidenceBasedSupplements).filter(key => \r\n            isSupplementTakenToday(key)\r\n        ).length;\r\n        \r\n        return {\r\n            taken: takenCount,\r\n            total: totalSupplements,\r\n            percentage: Math.round((takenCount / totalSupplements) * 100)\r\n        };\r\n    };\r\n\r\n    const getWeeklySupplementStats = () => {\r\n        const history = JSON.parse(localStorage.getItem('supplementsHistory') || '{}');\r\n        const oneWeekAgo = new Date();\r\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n\r\n        const weeklyEntries = Object.values(history).filter(entry => \r\n            new Date(entry.timestamp) >= oneWeekAgo\r\n        );\r\n\r\n        const consistency = {};\r\n        Object.keys(evidenceBasedSupplements).forEach(key => {\r\n            const supplementEntries = weeklyEntries.filter(entry => entry.supplement === key);\r\n            consistency[key] = {\r\n                taken: supplementEntries.length,\r\n                percentage: Math.round((supplementEntries.length / 7) * 100)\r\n            };\r\n        });\r\n\r\n        return consistency;\r\n    };\r\n\r\n    const createSupplementPlan = (workoutSchedule, goals) => {\r\n        const plan = {\r\n            core: ['creatine', 'omega3', 'vitaminD'], // Sempre consigliati\r\n            performance: ['caffeine', 'citrulline'], // Per performance\r\n            endurance: ['betaAlanine'], // Per resistenza\r\n            timing: {\r\n                morning: ['vitaminD', 'omega3'],\r\n                preWorkout: ['caffeine', 'citrulline'],\r\n                postWorkout: ['creatine'],\r\n                evening: ['betaAlanine']\r\n            }\r\n        };\r\n\r\n        return plan;\r\n    };\r\n\r\n    const loadTodaysSupplements = () => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const saved = localStorage.getItem('supplementsTakenToday');\r\n        if (saved) {\r\n            const data = JSON.parse(saved);\r\n            // Filtra solo quelli di oggi\r\n            const todayData = {};\r\n            Object.keys(data).forEach(key => {\r\n                if (key.includes(today)) {\r\n                    todayData[key] = data[key];\r\n                }\r\n            });\r\n            setTakenToday(todayData);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadTodaysSupplements();\r\n    }, []);\r\n\r\n    return {\r\n        evidenceBasedSupplements,\r\n        removedSupplements,\r\n        takenToday,\r\n        markSupplementTaken,\r\n        isSupplementTakenToday,\r\n        getSupplementProgress,\r\n        getWeeklySupplementStats,\r\n        getOptimalTiming,\r\n        createSupplementPlan\r\n    };\r\n};\r\n\r\nexport default SupplementStack;","import React from 'react';\r\n\r\nconst RecoveryProtocol = () => {\r\n    const [recoveryLog, setRecoveryLog] = React.useState({});\r\n    const [todayRecovery, setTodayRecovery] = React.useState({});\r\n\r\n    const thermoTherapyProtocols = {\r\n        sauna: {\r\n            name: 'Sauna Finlandese',\r\n            temperature: '80-100°C',\r\n            humidity: '10-20%',\r\n            duration: '15-20 min',\r\n            timing: 'Immediatamente post-workout',\r\n            mechanism: 'Heat Shock Proteins → Anabolismo + Cardiovascolare',\r\n            benefits: [\r\n                '↑ Growth Hormone 24x',\r\n                '↑ Heat Shock Proteins (riparazione)',\r\n                '↑ Vasodilatazione (nutrienti muscolari)', \r\n                '↑ Eliminazione metaboliti'\r\n            ],\r\n            protocol: [\r\n                '5-10 min iniziali per adattamento',\r\n                '2-3 sessioni da 15-20 min',\r\n                'Pause 2-3 min aria fresca tra sessioni',\r\n                'Idratazione: 500ml acqua + elettroliti'\r\n            ],\r\n            precautions: [\r\n                'Mai subito dopo pasti abbondanti',\r\n                'Stop se nausea/vertigini/palpitazioni',\r\n                'Controindicato: ipertensione non controllata'\r\n            ],\r\n            scientificEvidence: 'A+ (Rhonda Patrick, Joyner studies)',\r\n            color: '#ff6b35',\r\n            icon: '🔥'\r\n        },\r\n        steamRoom: {\r\n            name: 'Bagno Turco',\r\n            temperature: '40-50°C',\r\n            humidity: '90-100%',\r\n            duration: '10-15 min',\r\n            timing: 'Giorni rest per mobilità/relax',\r\n            mechanism: 'Umidità → Idratazione tessuti + Mobilità articolare',\r\n            benefits: [\r\n                '↑ Mobilità articolare',\r\n                '↑ Idratazione tessuto connettivo',\r\n                '↓ Rigidità muscolare',\r\n                '↑ Eliminazione tossine via pelle'\r\n            ],\r\n            protocol: [\r\n                '10-15 min sessione unica',\r\n                'Respirazione profonda (vapori benefici)',\r\n                'Stretching dolce durante sessione',\r\n                'Doccia fredda finale (contrasto)'\r\n            ],\r\n            precautions: [\r\n                'Attenzione claustrofobia',\r\n                'Igiene: sempre su asciugamano',\r\n                'Idratazione pre/post obbligatoria'\r\n            ],\r\n            scientificEvidence: 'B+ (Benefici mobilità documentati)',\r\n            color: '#4ecdc4',\r\n            icon: '💨'\r\n        },\r\n        iceBath: {\r\n            name: 'Crioterapia (Ice Bath)',\r\n            temperature: '8-12°C',\r\n            humidity: 'N/A',\r\n            duration: '10-15 min',\r\n            timing: 'SOLO ≥4h post-workout (mai prima)',\r\n            mechanism: 'Vasocostrizione → Recovery neurologico + Anti-infiammatorio',\r\n            benefits: [\r\n                '↓ Infiammazione acuta',\r\n                '↑ Recovery Sistema Nervoso',\r\n                '↑ Resilienza mentale',\r\n                '↓ Percezione fatica'\r\n            ],\r\n            protocol: [\r\n                'Graduale: inizia 15°C → 10°C → 8°C',\r\n                '2-3 min prime volte → 10-15 min target',\r\n                'Respirazione controllata (Wim Hof)',\r\n                'Riscaldamento graduale post-immersione'\r\n            ],\r\n            precautions: [\r\n                'MAI nelle 4h post-workout (blocca adattamenti)',\r\n                'Controindicato: problemi cardiaci',\r\n                'Supervisione iniziale raccomandata'\r\n            ],\r\n            scientificEvidence: 'A- (Timing critico per efficacia)',\r\n            color: '#74b9ff',\r\n            icon: '🧊'\r\n        }\r\n    };\r\n\r\n    const contrastTherapy = {\r\n        name: 'Terapia Contrasto (Hot/Cold)',\r\n        protocol: [\r\n            'Sauna 15 min (80-90°C)',\r\n            'Doccia fredda 1 min (15°C)',\r\n            'Ripeti ciclo 3-4 volte',\r\n            'Termina sempre con freddo'\r\n        ],\r\n        benefits: [\r\n            'Pump vascolare (vasodilatazione/costrizione)',\r\n            'Massimo stimolo circolatorio',\r\n            'Recovery accelerata',\r\n            'Resilienza termica'\r\n        ],\r\n        timing: 'Post-workout giorni intensi',\r\n        scientificEvidence: 'A (Scandinavian protocols)',\r\n        color: '#fd79a8',\r\n        icon: '🌡️'\r\n    };\r\n\r\n    const optimalTiming = {\r\n        postWorkout: {\r\n            immediate: ['sauna'],\r\n            after2h: ['steamRoom', 'contrastTherapy'],\r\n            after4h: ['iceBath'],\r\n            nextMorning: ['sauna leggera', 'steamRoom']\r\n        },\r\n        restDays: {\r\n            morning: ['steamRoom', 'sauna leggera'],\r\n            evening: ['iceBath', 'contrastTherapy']\r\n        },\r\n        competition: {\r\n            before: 'Evitare ice bath 48h prima',\r\n            after: 'Full protocol per recovery rapido'\r\n        }\r\n    };\r\n\r\n    const biohacking = {\r\n        breathwork: {\r\n            name: 'Wim Hof Method',\r\n            protocol: '30 respiri profondi → apnea → ripeti 3 cicli',\r\n            benefits: 'Adattamento stress termico + controllo SNA',\r\n            timing: 'Pre ice bath o standalone'\r\n        },\r\n        supplements: {\r\n            preSauna: 'Magnesio 400mg (vasodilatazione)',\r\n            preIceBath: 'L-Theanina 200mg (calma mentale)',\r\n            postBoth: 'Elettroliti + Vitamina C'\r\n        },\r\n        monitoring: {\r\n            heartRate: 'HRV pre/post per valutare recovery',\r\n            bodyTemp: 'Termometro infrarossi per tracking',\r\n            subjective: 'Scale 1-10 per energia/dolori'\r\n        }\r\n    };\r\n\r\n    const markRecoverySession = (therapy, duration, temperature, notes, effectiveness) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const sessionId = `${therapy}_${Date.now()}`;\r\n\r\n        const session = {\r\n            id: sessionId,\r\n            date: today,\r\n            therapy,\r\n            duration: parseInt(duration),\r\n            temperature: parseFloat(temperature),\r\n            notes,\r\n            effectiveness: parseInt(effectiveness),\r\n            timestamp: new Date().toISOString()\r\n        };\r\n\r\n        const updatedLog = {\r\n            ...recoveryLog,\r\n            [sessionId]: session\r\n        };\r\n\r\n        setRecoveryLog(updatedLog);\r\n        localStorage.setItem('recoveryLog', JSON.stringify(updatedLog));\r\n\r\n        // Aggiorna sessioni di oggi\r\n        const todaySessions = Object.values(updatedLog).filter(s => s.date === today);\r\n        setTodayRecovery({\r\n            ...todayRecovery,\r\n            sessions: todaySessions,\r\n            totalTime: todaySessions.reduce((sum, s) => sum + s.duration, 0)\r\n        });\r\n    };\r\n\r\n    const getRecoveryRecommendation = (lastWorkout, workoutIntensity, stressLevel) => {\r\n        const recommendations = [];\r\n\r\n        // Basato su timing ultimo workout\r\n        const hoursSinceWorkout = lastWorkout ? \r\n            (new Date() - new Date(lastWorkout)) / (1000 * 60 * 60) : 24;\r\n\r\n        if (hoursSinceWorkout < 2) {\r\n            recommendations.push({\r\n                therapy: 'sauna',\r\n                priority: 'Alta',\r\n                reason: 'Finestra anabolica ottimale per heat shock proteins'\r\n            });\r\n        } else if (hoursSinceWorkout >= 4) {\r\n            recommendations.push({\r\n                therapy: 'iceBath',\r\n                priority: 'Media',\r\n                reason: 'Recovery Sistema Nervoso senza interferire adattamenti'\r\n            });\r\n        }\r\n\r\n        // Basato su intensità workout\r\n        if (workoutIntensity >= 8) {\r\n            recommendations.push({\r\n                therapy: 'contrastTherapy',\r\n                priority: 'Alta',\r\n                reason: 'Recovery accelerata per sessioni ad alta intensità'\r\n            });\r\n        }\r\n\r\n        // Basato su stress/recovery\r\n        if (stressLevel >= 7) {\r\n            recommendations.push({\r\n                therapy: 'steamRoom',\r\n                priority: 'Media',\r\n                reason: 'Relax parasimpatico per gestione stress'\r\n            });\r\n        }\r\n\r\n        return recommendations;\r\n    };\r\n\r\n    const getRecoveryStats = () => {\r\n        const last7Days = Object.values(recoveryLog).filter(session => {\r\n            const sessionDate = new Date(session.date);\r\n            const weekAgo = new Date();\r\n            weekAgo.setDate(weekAgo.getDate() - 7);\r\n            return sessionDate >= weekAgo;\r\n        });\r\n\r\n        const stats = {\r\n            totalSessions: last7Days.length,\r\n            totalTime: last7Days.reduce((sum, s) => sum + s.duration, 0),\r\n            averageEffectiveness: last7Days.length > 0 ? \r\n                Math.round(last7Days.reduce((sum, s) => sum + s.effectiveness, 0) / last7Days.length) : 0,\r\n            therapyBreakdown: {}\r\n        };\r\n\r\n        // Breakdown per terapia\r\n        Object.keys(thermoTherapyProtocols).forEach(therapy => {\r\n            const sessions = last7Days.filter(s => s.therapy === therapy);\r\n            stats.therapyBreakdown[therapy] = {\r\n                sessions: sessions.length,\r\n                time: sessions.reduce((sum, s) => sum + s.duration, 0)\r\n            };\r\n        });\r\n\r\n        return stats;\r\n    };\r\n\r\n    const loadRecoveryData = () => {\r\n        const saved = localStorage.getItem('recoveryLog');\r\n        if (saved) {\r\n            setRecoveryLog(JSON.parse(saved));\r\n        }\r\n\r\n        // Carica sessioni di oggi\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const todaySessions = Object.values(JSON.parse(saved || '{}')).filter(s => s.date === today);\r\n        setTodayRecovery({\r\n            sessions: todaySessions,\r\n            totalTime: todaySessions.reduce((sum, s) => sum + s.duration, 0)\r\n        });\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadRecoveryData();\r\n    }, []);\r\n\r\n    return {\r\n        thermoTherapyProtocols,\r\n        contrastTherapy,\r\n        optimalTiming,\r\n        biohacking,\r\n        recoveryLog,\r\n        todayRecovery,\r\n        markRecoverySession,\r\n        getRecoveryRecommendation,\r\n        getRecoveryStats\r\n    };\r\n};\r\n\r\nexport default RecoveryProtocol;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MotivationalQuotes from './MotivationalQuotes';\r\nimport CalendarStreak from './CalendarStreak';\r\nimport ExerciseTracker from './ExerciseTracker';\r\nimport SupplementStack from './SupplementStack';\r\nimport RecoveryProtocol from './RecoveryProtocol';\r\nimport { dataManager } from '../utils/dataManager';\r\n\r\nconst Dashboard = () => {\r\n    const quotesHook = MotivationalQuotes();\r\n    const calendarHook = CalendarStreak();\r\n    const exerciseHook = ExerciseTracker();\r\n    const supplementsHook = SupplementStack();\r\n    const recoveryHook = RecoveryProtocol();\r\n    \r\n    const [dashboardData, setDashboardData] = React.useState({\r\n        currentWeight: 0,\r\n        muscleGain: 0,\r\n        workoutSessions: 0,\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        daysActive: 0,\r\n        lastWorkout: null,\r\n        currentStreak: 0\r\n    });\r\n    \r\n    const [todayWorkout, setTodayWorkout] = React.useState(null);\r\n    const [goals12Week, setGoals12Week] = React.useState({\r\n        startWeight: 75,\r\n        targetWeight: 80,\r\n        targetBench: 100,\r\n        targetSquat: 140,\r\n        targetDeadlift: 160,\r\n        startDate: new Date(),\r\n        weeksCompleted: 0\r\n    });\r\n    \r\n    const getTodayWorkout = () => {\r\n        const workoutPlan = {\r\n            1: { name: 'Petto + Bicipiti', exercises: 7, focus: 'Upper Power' },\r\n            2: { name: 'Dorso + Tricipiti + Collo (A)', exercises: 10, focus: 'Pull Strength' },\r\n            3: { name: 'Gambe Complete', exercises: 7, focus: 'Lower Power' },\r\n            4: { name: 'Recupero Attivo', exercises: 3, focus: 'Recovery' },\r\n            5: { name: 'Spalle Complete + Collo (B)', exercises: 13, focus: 'Delts 3D' },\r\n            6: { name: 'Posteriori + Conditioning', exercises: 7, focus: 'Athletic' },\r\n            0: { name: 'Riposo Completo', exercises: 4, focus: 'Rest' }\r\n        };\r\n        \r\n        const today = new Date().getDay();\r\n        return workoutPlan[today];\r\n    };\r\n    \r\n    const loadDashboardData = () => {\r\n        // 🔥 SOLUZIONE DEFINITIVA: Usa SOLO dataManager come Analytics\r\n        const analyticsData = dataManager.getAnalyticsData();\r\n        const workouts = analyticsData.workouts || [];\r\n        const measurements = analyticsData.measurements || [];\r\n        const stats = analyticsData.stats || {};\r\n        const goals = JSON.parse(localStorage.getItem('goals12Week') || '{}');\r\n        \r\n        const latestMeasurement = measurements[0];\r\n        const firstMeasurement = measurements[measurements.length - 1];\r\n        \r\n        // Calcola dati settimanali dai workout reali\r\n        const today = new Date();\r\n        const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n        const weeklyWorkouts = workouts.filter(w => new Date(w.date) >= oneWeekAgo);\r\n        \r\n        // Calcola tempo totale dai workout reali\r\n        const totalWorkoutTime = workouts.reduce((sum, w) => sum + (w.duration || 0), 0);\r\n        const weeklyTime = weeklyWorkouts.reduce((sum, w) => sum + (w.duration || 0), 0);\r\n        \r\n        // Calcola volume settimanale dai workout reali  \r\n        const weeklyVolume = weeklyWorkouts.reduce((sum, w) => {\r\n            if (!w.exercises) return sum;\r\n            return sum + w.exercises.reduce((exSum, ex) => \r\n                exSum + (ex.weight || 0) * (ex.sets || 0) * (ex.reps || 0), 0\r\n            );\r\n        }, 0);\r\n        \r\n        // Calcola serie settimanali dai workout reali\r\n        const weeklySets = weeklyWorkouts.reduce((sum, w) => {\r\n            if (!w.exercises) return sum;\r\n            return sum + w.exercises.reduce((exSum, ex) => exSum + (ex.sets || 0), 0);\r\n        }, 0);\r\n        \r\n        // Calcola workout mensili\r\n        const oneMonthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\r\n        const monthlyWorkouts = workouts.filter(w => new Date(w.date) >= oneMonthAgo);\r\n        \r\n        setDashboardData({\r\n            currentWeight: latestMeasurement?.weight || goals.startWeight || 75,\r\n            muscleGain: latestMeasurement && firstMeasurement ? \r\n                (parseFloat(latestMeasurement.muscleMass) - parseFloat(firstMeasurement.muscleMass)) : 0,\r\n            workoutSessions: workouts.length,\r\n            totalWorkoutTime: totalWorkoutTime,\r\n            weeklyTime: weeklyTime,\r\n            daysActive: new Set(workouts.map(w => w.date.split('T')[0])).size,\r\n            lastWorkout: workouts[0]?.date || null,\r\n            currentStreak: stats.currentStreak || 0, // 🔥 USA SOLO dataManager streak\r\n            weeklyVolume: Math.round(weeklyVolume),\r\n            weeklySets: weeklySets,\r\n            weeklyWorkouts: weeklyWorkouts.length,\r\n            monthlyWorkouts: monthlyWorkouts.length\r\n        });\r\n        \r\n        setTodayWorkout(getTodayWorkout());\r\n        \r\n        if (goals.startDate) {\r\n            const weeksCompleted = Math.floor((today - new Date(goals.startDate)) / (7 * 24 * 60 * 60 * 1000));\r\n            setGoals12Week({...goals, weeksCompleted});\r\n        }\r\n    };\r\n    \r\n    const calculateStreak = (sessions) => {\r\n        if (sessions.length === 0) return 0;\r\n        \r\n        const today = new Date();\r\n        let streak = 0;\r\n        const sortedDates = [...new Set(sessions.map(s => s.date.split('T')[0]))].sort().reverse();\r\n        \r\n        for (let i = 0; i < sortedDates.length; i++) {\r\n            const sessionDate = new Date(sortedDates[i]);\r\n            const daysDiff = Math.floor((today - sessionDate) / (1000 * 60 * 60 * 24));\r\n            \r\n            if (daysDiff <= i + 1) {\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return streak;\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n    \r\n    // FUNZIONI PER IL CALENDARIO COMPLETO\r\n    const generateFullCalendar = () => {\r\n        const today = new Date();\r\n        const currentMonth = today.getMonth();\r\n        const currentYear = today.getFullYear();\r\n        const firstDay = new Date(currentYear, currentMonth, 1);\r\n        const lastDay = new Date(currentYear, currentMonth + 1, 0);\r\n        const daysInMonth = lastDay.getDate();\r\n        const startingDay = firstDay.getDay();\r\n        \r\n        const calendar = [];\r\n        \r\n        // Giorni vuoti all'inizio\r\n        for (let i = 0; i < startingDay; i++) {\r\n            calendar.push(null);\r\n        }\r\n        \r\n        // Giorni del mese\r\n        for (let day = 1; day <= daysInMonth; day++) {\r\n            calendar.push(day);\r\n        }\r\n        \r\n        return calendar;\r\n    };\r\n\r\n    const isToday = (day) => {\r\n        const today = new Date();\r\n        return day === today.getDate();\r\n    };\r\n\r\n    const isDayCompleted = (day) => {\r\n        if (!day) return false;\r\n        // 🔥 BUG FIX: Usa i dati REALI da dataManager\r\n        const completedWorkouts = dataManager.getWorkouts() || [];\r\n        \r\n        // 🚨 BUG FIX CRITICO: Costruisce data del MESE CORRENTE, non quello di oggi\r\n        const today = new Date();\r\n        const currentMonth = today.getMonth();\r\n        const currentYear = today.getFullYear();\r\n        const date = new Date(currentYear, currentMonth, day);\r\n        const dayString = date.toDateString();\r\n        \r\n        const hasWorkout = completedWorkouts.some(workout => \r\n            new Date(workout.date).toDateString() === dayString\r\n        );\r\n        \r\n        console.log(`🔍 Controllo giorno ${day}: ${dayString}, workout trovato: ${hasWorkout}`);\r\n        console.log(`🔍 Workouts disponibili:`, completedWorkouts.map(w => ({ date: w.date, dateString: new Date(w.date).toDateString() })));\r\n        return hasWorkout;\r\n    };\r\n    \r\n    const getNutritionStreak = () => {\r\n        const saved = localStorage.getItem('nutritionStreak');\r\n        return saved ? parseInt(saved) : 0;\r\n    };\r\n    \r\n    const todayQuote = quotesHook.getTodayQuote();\r\n    const todayProgress = exerciseHook.getTodayProgress(todayWorkout?.exercises);\r\n    const supplementProgress = supplementsHook.getSupplementProgress();\r\n    const recoveryStats = recoveryHook.getRecoveryStats();\r\n    \r\n    React.useEffect(() => {\r\n        loadDashboardData();\r\n        \r\n        // 🔥 LISTENER COMPLETI PER AGGIORNAMENTI REAL-TIME\r\n        const reload = () => loadDashboardData();\r\n        \r\n        const handleWorkoutCompleted = (event) => {\r\n            console.log('🚀 Workout completato, ricarico dashboard!', event.detail);\r\n            reload();\r\n        };\r\n        \r\n        const handleMealToggled = (event) => {\r\n            console.log('🍽️ Pasto aggiornato, ricarico dashboard!', event.detail);\r\n            reload();\r\n        };\r\n        \r\n        const handleNutritionCompleted = (event) => {\r\n            console.log('🔥 Giorno nutrizionale completato!', event.detail);\r\n            reload();\r\n        };\r\n        \r\n        const handleCheatAdded = (event) => {\r\n            console.log('🍕 Sgarro registrato!', event.detail);\r\n            reload();\r\n        };\r\n        \r\n        const handleVisibilityChange = () => {\r\n            if (document.visibilityState === 'visible') reload();\r\n        };\r\n        \r\n        // LISTENER COMPLETI\r\n        window.addEventListener('workoutCompleted', handleWorkoutCompleted);\r\n        window.addEventListener('mealToggled', handleMealToggled);\r\n        window.addEventListener('nutritionCompleted', handleNutritionCompleted);\r\n        window.addEventListener('cheatAdded', handleCheatAdded);\r\n        window.addEventListener('storage', reload); // 🔥 NUOVO: aggiornamento quando cambia localStorage\r\n        document.addEventListener('visibilitychange', handleVisibilityChange); // 🔥 NUOVO: quando torni alla tab\r\n        \r\n        return () => {\r\n            window.removeEventListener('workoutCompleted', handleWorkoutCompleted);\r\n            window.removeEventListener('mealToggled', handleMealToggled);\r\n            window.removeEventListener('nutritionCompleted', handleNutritionCompleted);\r\n            window.removeEventListener('cheatAdded', handleCheatAdded);\r\n            window.removeEventListener('storage', reload);\r\n            document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <header className=\"dashboard-header\">\r\n                <h1>🏆 FISICO DELLA MADONNA</h1>\r\n                <p className=\"tagline\">\"L'eccellenza non è un atto, ma un'abitudine\" - Aristotele</p>\r\n            </header>\r\n\r\n            {/* MOTIVATIONAL QUOTE OF THE DAY */}\r\n            <div className=\"daily-motivation\">\r\n                <div className=\"quote-card\">\r\n                    <h3>💭 Frase del Giorno</h3>\r\n                    <blockquote>\r\n                        \"{todayQuote.quote}\"\r\n                        <footer>— {todayQuote.author}</footer>\r\n                    </blockquote>\r\n                    <p className=\"quote-context\">{todayQuote.context}</p>\r\n                </div>\r\n            </div>\r\n\r\n            {/* TODAY'S WORKOUT PREVIEW */}\r\n            <div className=\"today-workout-preview\">\r\n                <h3>🎯 Oggi: {todayWorkout?.name}</h3>\r\n                <div className=\"workout-quick-stats\">\r\n                    <span className=\"workout-focus\">{todayWorkout?.focus}</span>\r\n                    <span className=\"workout-exercises\">{todayWorkout?.exercises} esercizi</span>\r\n                    <span className={`workout-progress ${todayProgress.percentage === 100 ? 'completed' : ''}`}>\r\n                        {todayProgress.completed}/{todayProgress.total} completati ({todayProgress.percentage}%)\r\n                    </span>\r\n                </div>\r\n                <div className=\"progress-bar\">\r\n                    <div \r\n                        className=\"progress-fill\" \r\n                        style={{width: `${todayProgress.percentage}%`}}\r\n                    ></div>\r\n                </div>\r\n                <Link to=\"/workout\" className=\"start-workout-btn\">\r\n                    {todayProgress.percentage === 0 ? '🚀 INIZIA WORKOUT' : \r\n                     todayProgress.percentage === 100 ? '✅ COMPLETATO' : \r\n                     '▶️ CONTINUA WORKOUT'}\r\n                </Link>\r\n            </div>\r\n\r\n            {/* CALENDARIO COMPLETO CON STREAK */}\r\n            <div style={{\r\n                background: 'linear-gradient(135deg, #2d2d2d 0%, #3d3d3d 100%)',\r\n                borderRadius: '20px',\r\n                padding: '30px',\r\n                margin: '30px 0',\r\n                boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)'\r\n            }}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '25px' }}>\r\n                    <h2 style={{ \r\n                        fontSize: '1.8rem',\r\n                        color: '#ff9500',\r\n                        margin: 0\r\n                    }}>\r\n                        📅 {new Date().toLocaleDateString('it-IT', { month: 'long', year: 'numeric' }).toUpperCase()}\r\n                    </h2>\r\n                    \r\n                    {/* STREAK COUNTER PROMINENTE */}\r\n                    <div style={{\r\n                        background: 'linear-gradient(135deg, #ff9500 0%, #ff6b35 100%)',\r\n                        padding: '20px',\r\n                        borderRadius: '20px',\r\n                        textAlign: 'center',\r\n                        boxShadow: '0 5px 15px rgba(255, 149, 0, 0.3)',\r\n                        minWidth: '120px'\r\n                    }}>\r\n                        <div style={{ fontSize: '2rem', marginBottom: '8px' }}>🔥</div>\r\n                        <div style={{ fontSize: '2rem', fontWeight: 'bold', marginBottom: '5px', color: 'white' }}>\r\n                            {dashboardData.currentStreak}\r\n                        </div>\r\n                        <div style={{ fontSize: '0.9rem', color: 'white', opacity: 0.9 }}>STREAK</div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: 'repeat(7, 1fr)',\r\n                    gap: '10px',\r\n                    marginBottom: '20px'\r\n                }}>\r\n                    {['DOM', 'LUN', 'MAR', 'MER', 'GIO', 'VEN', 'SAB'].map(day => (\r\n                        <div key={day} style={{\r\n                            padding: '10px',\r\n                            textAlign: 'center',\r\n                            fontWeight: 'bold',\r\n                            color: '#ff9500',\r\n                            fontSize: '0.9rem'\r\n                        }}>\r\n                            {day}\r\n                        </div>\r\n                    ))}\r\n                    \r\n                    {generateFullCalendar().map((day, index) => (\r\n                        <div key={index} style={{\r\n                            padding: '12px',\r\n                            textAlign: 'center',\r\n                            borderRadius: '10px',\r\n                            cursor: day ? 'pointer' : 'default',\r\n                            background: day ? (\r\n                                isToday(day) ? '#ff9500' :\r\n                                isDayCompleted(day) ? '#22c55e' : \r\n                                'rgba(255, 255, 255, 0.05)'\r\n                            ) : 'transparent',\r\n                            color: day ? (\r\n                                isToday(day) || isDayCompleted(day) ? 'white' : '#ccc'\r\n                            ) : 'transparent',\r\n                            fontWeight: isToday(day) ? 'bold' : 'normal',\r\n                            border: isToday(day) ? '2px solid white' : '1px solid transparent',\r\n                            transform: isToday(day) ? 'scale(1.1)' : 'scale(1)',\r\n                            transition: 'all 0.3s ease',\r\n                            fontSize: '0.9rem'\r\n                        }}>\r\n                            {day}\r\n                            {isDayCompleted(day) && !isToday(day) && (\r\n                                <div style={{ fontSize: '0.7rem', marginTop: '2px' }}>✅</div>\r\n                            )}\r\n                            {isToday(day) && (\r\n                                <div style={{ fontSize: '0.6rem', marginTop: '2px' }}>OGGI</div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                \r\n                <div style={{ \r\n                    display: 'flex', \r\n                    justifyContent: 'space-between', \r\n                    alignItems: 'center',\r\n                    background: 'rgba(255, 149, 0, 0.1)',\r\n                    padding: '15px 20px',\r\n                    borderRadius: '15px'\r\n                }}>\r\n                    <div style={{ color: '#aaa', fontSize: '0.9rem' }}>\r\n                        🟠 Oggi • 🟢 Giorno completato • ⚪ Da completare\r\n                    </div>\r\n                    <div style={{ color: '#ff9500', fontWeight: 'bold' }}>\r\n                        📊 {dashboardData.monthlyWorkouts || 0} workout questo mese\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PERFORMANCE DASHBOARD */}\r\n            <div className=\"performance-dashboard\">\r\n                <h3>⚡ Performance Overview</h3>\r\n                <div className=\"perf-grid\">\r\n                    <div className=\"perf-card strength\">\r\n                        <h4>💪 Forza</h4>\r\n                        <p className=\"perf-value\">{dashboardData.weeklyVolume || 0}kg</p>\r\n                        <p className=\"perf-label\">Volume Settimanale</p>\r\n                    </div>\r\n                    <div className=\"perf-card volume\">\r\n                        <h4>🏋️ Volume</h4>\r\n                        <p className=\"perf-value\">{dashboardData.weeklySets || 0}</p>\r\n                        <p className=\"perf-label\">Serie Settimanali</p>\r\n                    </div>\r\n                    <div className=\"perf-card consistency\">\r\n                        <h4>🎯 Consistenza</h4>\r\n                        <p className=\"perf-value\">{Math.round(((dashboardData.currentStreak / 30) * 100))}%</p>\r\n                        <p className=\"perf-label\">Streak Rate</p>\r\n                    </div>\r\n                    <div className=\"perf-card supplements\">\r\n                        <h4>💊 Stack</h4>\r\n                        <p className=\"perf-value\">{supplementProgress.percentage}%</p>\r\n                        <p className=\"perf-label\">Integratori Oggi</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* 12-WEEK GOALS PROGRESS */}\r\n            <div className=\"goals-progress\">\r\n                <h3>🎯 Obiettivi 12 Settimane</h3>\r\n                <div className=\"goals-grid\">\r\n                    <div className=\"goal-item\">\r\n                        <h4>Peso Target</h4>\r\n                        <div className=\"goal-bar\">\r\n                            <div className=\"goal-progress\" style={{\r\n                                width: `${Math.min(100, ((dashboardData.currentWeight - goals12Week.startWeight) / (goals12Week.targetWeight - goals12Week.startWeight)) * 100)}%`\r\n                            }}></div>\r\n                        </div>\r\n                        <p>{dashboardData.currentWeight}kg → {goals12Week.targetWeight}kg</p>\r\n                    </div>\r\n                    <div className=\"goal-item\">\r\n                        <h4>Settimane</h4>\r\n                        <div className=\"goal-bar\">\r\n                            <div className=\"goal-progress\" style={{\r\n                                width: `${Math.min(100, (goals12Week.weeksCompleted / 12) * 100)}%`\r\n                            }}></div>\r\n                        </div>\r\n                        <p>{goals12Week.weeksCompleted}/12 settimane</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK ACTIONS */}\r\n            <nav className=\"quick-actions\">\r\n                <Link to=\"/workout\" className=\"action-card workout\">\r\n                    <span className=\"action-icon\">🏋️</span>\r\n                    <h4>Workout</h4>\r\n                    <p>Inizia sessione</p>\r\n                </Link>\r\n                <Link to=\"/progress\" className=\"action-card progress\">\r\n                    <span className=\"action-icon\">📈</span>\r\n                    <h4>Progressi</h4>\r\n                    <p>Traccia misure</p>\r\n                </Link>\r\n                <Link to=\"/measurements\" className=\"action-card measurements\">\r\n                    <span className=\"action-icon\">📏</span>\r\n                    <h4>Misurazioni</h4>\r\n                    <p>Peso & corpo</p>\r\n                </Link>\r\n                <Link to=\"/nutrition\" className=\"action-card nutrition\">\r\n                    <span className=\"action-icon\">🥗</span>\r\n                    <h4>Dieta</h4>\r\n                    <p>Piano settimanale</p>\r\n                </Link>\r\n                <Link to=\"/recovery-timer\" className=\"action-card recovery-timer\">\r\n                    <span className=\"action-icon\">🔥</span>\r\n                    <h4>Recovery</h4>\r\n                    <p>Timer sauna/ice</p>\r\n                </Link>\r\n                <Link to=\"/supplements\" className=\"action-card supplements\">\r\n                    <span className=\"action-icon\">💊</span>\r\n                    <h4>Integratori</h4>\r\n                    <p>{supplementProgress.taken}/{supplementProgress.total} presi</p>\r\n                </Link>\r\n                <Link to=\"/recovery\" className=\"action-card recovery\">\r\n                    <span className=\"action-icon\">🧘</span>\r\n                    <h4>Recovery Info</h4>\r\n                    <p>{recoveryStats.totalTime || 0}min oggi</p>\r\n                </Link>\r\n                <Link to=\"/analytics\" className=\"action-card analytics\">\r\n                    <span className=\"action-icon\">📊</span>\r\n                    <h4>Analytics</h4>\r\n                    <p>Grafici avanzati</p>\r\n                </Link>\r\n            </nav>\r\n\r\n            {/* LEGEND MINDSET */}\r\n            <div className=\"legend-mindset\">\r\n                <h3>👑 Mentalità da Leggenda</h3>\r\n                <p className=\"mindset-text\">\r\n                    \"I campioni non nascono in palestra. I campioni nascono da qualcosa di più profondo: \r\n                    <strong>un desiderio, un sogno, una visione.</strong> Tu hai tutto questo. \r\n                    Oggi è il giorno per dimostrarlo.\"\r\n                </p>\r\n                <div className=\"power-stats\">\r\n                    <span>💀 Disciplina: {Math.min(100, dashboardData.currentStreak * 3)}%</span>\r\n                    <span>⚡ Intensità: {Math.min(100, dashboardData.weeklyWorkouts * 20)}%</span>\r\n                    <span>🔥 Dedizione: {Math.min(100, (goals12Week.weeksCompleted || 0) * 8)}%</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { dataManager } from '../utils/dataManager';\r\nimport CalendarStreak from './CalendarStreak';\r\n\r\nconst WorkoutSimple = () => {\r\n    const navigate = useNavigate();\r\n    const calendarHook = CalendarStreak(); // HOOK PER AGGIORNARE STREAK\r\n    const [selectedDay, setSelectedDay] = React.useState(null);\r\n    const [selectedExercise, setSelectedExercise] = React.useState(null);\r\n    const [isWorkoutActive, setIsWorkoutActive] = React.useState(false);\r\n    const [currentWorkout, setCurrentWorkout] = React.useState({\r\n        exercises: [],\r\n        startTime: null,\r\n        duration: 0,\r\n        day: null\r\n    });\r\n    const [exerciseForm, setExerciseForm] = React.useState({\r\n        sets: '',\r\n        reps: '',\r\n        weight: '',\r\n        rir: '',\r\n        notes: ''\r\n    });\r\n\r\n    const workoutPlan = {\r\n        'Lunedì': {\r\n            focus: 'Petto + Bicipiti',\r\n            subtitle: 'Focus: Petto (fascio alto + globale), Bicipiti',\r\n            exercises: [\r\n                { name: 'Panca Inclinata Bilanciere', sets: '4×6-8', rest: '2min', notes: 'RIR 1-2 | Focus forma e controllo' },\r\n                { name: 'Spinte Manubri Inclinata', sets: '3×8-10', rest: '90sec', notes: 'Angolo 30-45° | ROM completo' },\r\n                { name: 'Croci ai Cavi Alti/Inclinata', sets: '3×12-15', rest: '75sec', notes: 'Stretch massimo petto' },\r\n                { name: 'Curl Bilanciere', sets: '4×8-10', rest: '90sec', notes: 'No cheating | Controllo eccentrica' },\r\n                { name: 'Curl Manubri Inclinati', sets: '3×10-12', rest: '75sec', notes: 'Panca 45° | Stretch bicipiti' }\r\n            ]\r\n        },\r\n        'Martedì': {\r\n            focus: 'Dorso + Tricipiti + Collo (A)',\r\n            subtitle: 'Focus: Larghezza dorsale, spessore scapolare, tricipiti, collo',\r\n            exercises: [\r\n                { name: 'Trazioni Presa Ampia', sets: '4×6-8', rest: '2min', notes: 'Se necessario usa assistenza | Focus larghezza' },\r\n                { name: 'Rematore Bilanciere/Manubrio', sets: '4×8-10', rest: '2min', notes: 'Busto 45° | Squeeze scapole' },\r\n                { name: 'Lat Machine Inversa o Presa Stretta', sets: '3×10-12', rest: '90sec', notes: 'Controllo concentrica/eccentrica' },\r\n                { name: 'Panca Stretta Bilanciere', sets: '4×6-8', rest: '2min', notes: 'Presa larghezza spalle | Gomiti chiusi' },\r\n                { name: 'French Press EZ', sets: '3×8-10', rest: '90sec', notes: 'Solo avambracci si muovono' }\r\n            ]\r\n        },\r\n        'Mercoledì': {\r\n            focus: 'Gambe Complete',\r\n            subtitle: 'Focus: Quadricipiti, glutei, femorali, polpacci',\r\n            exercises: [\r\n                { name: 'Squat', sets: '4×6-8', rest: '3min', notes: 'Profondità completa | RIR 1-2' },\r\n                { name: 'Hip Thrust', sets: '4×8-10', rest: '2min', notes: 'Contrazione glutei al top | Pausa 1 sec' },\r\n                { name: 'Affondi Camminata', sets: '3×10 passi/gamba', rest: '90sec', notes: 'Ginocchio a 90° | Passo lungo' },\r\n                { name: 'Leg Press 45°', sets: '3×10-12', rest: '90sec', notes: 'Piedi larghezza spalle | ROM completo' },\r\n                { name: 'Calf Raise in Piedi', sets: '4×10-12', rest: '60sec', notes: 'Pausa 2 sec al top | Range completo' }\r\n            ]\r\n        },\r\n        'Giovedì': {\r\n            focus: 'Recupero Attivo',\r\n            subtitle: 'Focus: Cardiovascolare leggero, mobilità, recupero',\r\n            exercises: [\r\n                { name: 'LISS (Camminata/Cyclette)', sets: '30-40min', rest: 'Zona 1-2', notes: '60-70% FCMax | Mantieni conversazione' },\r\n                { name: 'Stretching/Mobilità', sets: '15-20min', rest: 'Rilassante', notes: 'Tutti i gruppi muscolari | Respiro profondo' },\r\n                { name: 'Sauna o Bagno Turco', sets: '10-15min', rest: 'Recovery', notes: 'Idratazione costante | Relax mentale' }\r\n            ]\r\n        },\r\n        'Venerdì': {\r\n            focus: 'Spalle Complete + Collo (B)',\r\n            subtitle: 'Focus: Deltoidi laterali/posteriori, trapezio, richiamo braccia, collo',\r\n            exercises: [\r\n                { name: 'Military Press Manubri', sets: '4×6-8', rest: '2min', notes: 'Seduto con schienale | Core attivo' },\r\n                { name: 'Alzate Laterali Cavi/Manubri', sets: '4×12-15', rest: '75sec', notes: 'Controllo eccentrica | No cheating' },\r\n                { name: 'Rear Delt Fly (Pec Deck Inversa o Manubri)', sets: '3×12-15', rest: '75sec', notes: 'Squeeze scapole | Focus deltoidi posteriori' },\r\n                { name: 'Face Pull', sets: '3×12-15', rest: '60sec', notes: 'Corda ai cavi | Gomiti alti' },\r\n                { name: 'Scrollate Manubri/Bilanciere', sets: '3×10-12', rest: '90sec', notes: 'Solo spalle | No rotazione' }\r\n            ]\r\n        },\r\n        'Sabato': {\r\n            focus: 'Posteriori + Conditioning',\r\n            subtitle: 'Focus: Femorali, glutei, polpacci + condizionamento',\r\n            exercises: [\r\n                { name: 'Stacco Rumeno (RDL)', sets: '4×6-8', rest: '2min', notes: 'Focus femorali | Bilanciere vicino corpo' },\r\n                { name: 'Hip Thrust (Variante Mono)', sets: '3×10-12', rest: '2min', notes: 'Una gamba | Controllo stabilità' },\r\n                { name: 'Nordic Curl o Glute Ham Raise', sets: '3×8-10', rest: '90sec', notes: 'Eccentrica lenta | Assistenza se necessaria' },\r\n                { name: 'Leg Curl Seduto', sets: '3×12-15', rest: '75sec', notes: 'Contrazione massima | Pausa 1 sec' },\r\n                { name: 'Calf Raise Multipla', sets: '3×15-20', rest: '60sec', notes: 'Variare angoli piedi | Range massimo' }\r\n            ]\r\n        },\r\n        'Domenica': {\r\n            focus: 'Riposo Completo',\r\n            subtitle: 'Focus: Recupero totale, rigenerazione',\r\n            exercises: [\r\n                { name: 'Passeggiata Tranquilla', sets: '30-60min', rest: 'Libero', notes: 'Aria aperta | Ritmo rilassante' },\r\n                { name: 'Stretching Globale', sets: '20-30min', rest: 'Flow dolce', notes: 'Focus respirazione e relax' },\r\n                { name: 'Sauna/Bagno Turco (Opzionale)', sets: '15-20min', rest: 'Recovery', notes: 'Detossificazione | Idratazione' },\r\n                { name: 'Meditazione/Visualizzazione', sets: '10-20min', rest: 'Mentale', notes: 'Preparazione settimana successiva' }\r\n            ]\r\n        }\r\n    };\r\n\r\n    const getMuscleGroup = (exerciseName) => {\r\n        const name = exerciseName.toLowerCase();\r\n        if (name.includes('panca') || name.includes('petto') || name.includes('spinte') || name.includes('croci') || name.includes('dip')) return 'Petto';\r\n        if (name.includes('curl') || name.includes('bicip')) return 'Bicipiti';\r\n        if (name.includes('trazione') || name.includes('rematore') || name.includes('dorso') || name.includes('pullover')) return 'Dorso';\r\n        if (name.includes('tricip') || name.includes('french') || name.includes('pushdown')) return 'Tricipiti';\r\n        if (name.includes('squat') || name.includes('cosce') || name.includes('quad')) return 'Quadricipiti';\r\n        if (name.includes('stacco') || name.includes('femorali')) return 'Femorali';\r\n        if (name.includes('spalla') || name.includes('shoulder') || name.includes('alzate')) return 'Spalle';\r\n        if (name.includes('polpacci') || name.includes('calf')) return 'Polpacci';\r\n        return 'Altro';\r\n    };\r\n\r\n    const startWorkout = (day) => {\r\n        setCurrentWorkout({\r\n            day: day,\r\n            exercises: [],\r\n            startTime: Date.now(),\r\n            duration: 0\r\n        });\r\n        setIsWorkoutActive(true);\r\n        setSelectedDay(day);\r\n    };\r\n\r\n    const completeExercise = (exercise) => {\r\n        if (!exerciseForm.weight || !exerciseForm.reps || !exerciseForm.sets) {\r\n            alert('Inserisci almeno peso, ripetizioni e serie!');\r\n            return;\r\n        }\r\n\r\n        const completedExercise = {\r\n            name: exercise.name,\r\n            sets: parseInt(exerciseForm.sets),\r\n            reps: parseInt(exerciseForm.reps),\r\n            weight: parseFloat(exerciseForm.weight),\r\n            rir: exerciseForm.rir ? parseInt(exerciseForm.rir) : null,\r\n            notes: exerciseForm.notes,\r\n            muscleGroup: getMuscleGroup(exercise.name),\r\n            completed: true\r\n        };\r\n\r\n        setCurrentWorkout(prev => ({\r\n            ...prev,\r\n            exercises: [...prev.exercises, completedExercise]\r\n        }));\r\n\r\n        // Reset form\r\n        setExerciseForm({\r\n            sets: '',\r\n            reps: '',\r\n            weight: '',\r\n            rir: '',\r\n            notes: ''\r\n        });\r\n        setSelectedExercise(null);\r\n        alert(`Esercizio ${exercise.name} salvato!`);\r\n    };\r\n\r\n    const finishWorkout = () => {\r\n        if (currentWorkout.exercises.length === 0) {\r\n            alert('Aggiungi almeno un esercizio prima di salvare!');\r\n            return;\r\n        }\r\n\r\n        const workoutData = {\r\n            ...currentWorkout,\r\n            date: new Date().toISOString(), // 🔥 BUG FIX: Aggiunge data esplicita\r\n            duration: Math.round((Date.now() - currentWorkout.startTime) / 1000 / 60), // minuti\r\n            type: workoutPlan[currentWorkout.day]?.focus || 'Workout Generico'\r\n        };\r\n\r\n        // Salva nel dataManager\r\n        dataManager.saveWorkout(workoutData);\r\n\r\n        // 🔥 SALVA ANCHE NEL VECCHIO SISTEMA PER RETROCOMPATIBILITÀ  \r\n        const oldWorkoutSessions = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        oldWorkoutSessions.unshift(workoutData);\r\n        localStorage.setItem('workoutSessions', JSON.stringify(oldWorkoutSessions));\r\n\r\n        // 🔥 AGGIORNA STREAK CALENDARIO (BUG FIX CRITICO!)\r\n        calendarHook.markWorkoutCompleted(new Date(), workoutData.type, workoutData.exercises);\r\n        \r\n        // 📊 AGGIORNA timeStats PER PERFORMANCE OVERVIEW\r\n        try {\r\n            const timeStats = JSON.parse(localStorage.getItem('timeStats') || '{}');\r\n            const timeLog = JSON.parse(localStorage.getItem('timeLog') || '[]');\r\n\r\n            // Aggiungi la durata della sessione corrente\r\n            const duration = workoutData.duration || 0; // in minuti\r\n            timeStats.totalWorkoutTime = (timeStats.totalWorkoutTime || 0) + duration;\r\n\r\n            // Log per calcolare la settimana\r\n            timeLog.unshift({ date: new Date().toISOString(), minutes: duration });\r\n            localStorage.setItem('timeLog', JSON.stringify(timeLog));\r\n\r\n            // Calcola i minuti ultimi 7 giorni\r\n            const oneWeekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\r\n            timeStats.weeklyTime = timeLog\r\n                .filter(e => new Date(e.date).getTime() >= oneWeekAgo)\r\n                .reduce((sum, e) => sum + (e.minutes || 0), 0);\r\n\r\n            localStorage.setItem('timeStats', JSON.stringify(timeStats));\r\n            console.log('📈 TimeStats aggiornato:', timeStats);\r\n        } catch (e) {\r\n            console.warn('TimeStats update failed:', e);\r\n        }\r\n        \r\n        // 📊 DISPATCH IMMEDIATO (SENZA TIMEOUT)\r\n        window.dispatchEvent(new CustomEvent('workoutCompleted', { detail: workoutData }));\r\n\r\n        // Reset stato\r\n        setCurrentWorkout({ exercises: [], startTime: null, duration: 0, day: null });\r\n        setIsWorkoutActive(false);\r\n        setSelectedDay(null);\r\n\r\n        console.log('🚀 WORKOUT SALVATO:', workoutData);\r\n        console.log('📊 DataManager workouts:', dataManager.getWorkouts());\r\n        console.log('📅 Old workoutSessions:', JSON.parse(localStorage.getItem('workoutSessions') || '[]'));\r\n        \r\n        alert(`🎉 Workout salvato! ${workoutData.exercises.length} esercizi completati in ${workoutData.duration} minuti.\r\n        🔥 STREAK AGGIORNATO: Ricarica la Dashboard per vedere i cambiamenti!`);\r\n    };\r\n\r\n    const isExerciseCompleted = (exerciseName) => {\r\n        return currentWorkout.exercises.some(ex => ex.name === exerciseName);\r\n    };\r\n\r\n    return (\r\n        <div className=\"workout-container\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"workout-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                    style={{\r\n                        background: '#ff9500',\r\n                        color: 'white',\r\n                        padding: '10px 15px',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        cursor: 'pointer',\r\n                        marginBottom: '20px'\r\n                    }}\r\n                >\r\n                    <span>←</span> Dashboard\r\n                </button>\r\n                \r\n                <div className=\"header-content\">\r\n                    <h1>🏋️ SCHEDA: FISICO DELLA MADONNA</h1>\r\n                    <p>Programma di allenamento avanzato per trasformazione fisica estrema</p>\r\n                    <div className=\"program-stats\">\r\n                        <span>📅 6 giorni/settimana</span>\r\n                        <span>⏱️ 75-90 min/sessione</span>\r\n                        <span>🎯 Volume: Alto</span>\r\n                        <span>🔥 Intensità: RIR 1-3</span>\r\n                    </div>\r\n                    \r\n                    {/* STATUS WORKOUT ATTIVO */}\r\n                    {isWorkoutActive && (\r\n                        <div style={{\r\n                            background: 'rgba(255, 149, 0, 0.1)',\r\n                            padding: '20px',\r\n                            borderRadius: '10px',\r\n                            margin: '20px 0',\r\n                            border: '2px solid #ff9500'\r\n                        }}>\r\n                            <h3>🔥 Workout in Corso: {currentWorkout.day}</h3>\r\n                            <p>Esercizi completati: {currentWorkout.exercises.length}</p>\r\n                            <button \r\n                                onClick={finishWorkout}\r\n                                style={{ \r\n                                    background: '#22c55e', \r\n                                    color: 'white', \r\n                                    padding: '12px 24px', \r\n                                    borderRadius: '8px',\r\n                                    border: 'none',\r\n                                    cursor: 'pointer',\r\n                                    fontSize: '16px',\r\n                                    fontWeight: 'bold'\r\n                                }}\r\n                            >\r\n                                ✅ Termina e Salva Workout\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* PIANO SETTIMANALE */}\r\n            <div className=\"workout-week\">\r\n                <h2>📅 Piano Settimanale</h2>\r\n                <div className=\"days-grid\">\r\n                    {Object.entries(workoutPlan).map(([day, workout]) => (\r\n                        <div key={day} style={{\r\n                            border: selectedDay === day ? '3px solid #ff9500' : '1px solid #333',\r\n                            borderRadius: '10px',\r\n                            padding: '20px',\r\n                            margin: '10px',\r\n                            background: selectedDay === day ? 'rgba(255, 149, 0, 0.1)' : '#1a1a1a'\r\n                        }}>\r\n                            <div \r\n                                onClick={() => setSelectedDay(selectedDay === day ? null : day)}\r\n                                style={{ cursor: 'pointer' }}\r\n                            >\r\n                                <h3>{day}</h3>\r\n                                <p style={{ color: '#ff9500', fontWeight: 'bold' }}>{workout.focus}</p>\r\n                                <p style={{ color: '#aaa' }}>{workout.subtitle}</p>\r\n                            </div>\r\n                            \r\n                            {selectedDay === day && (\r\n                                <div style={{ marginTop: '20px' }}>\r\n                                    {/* PULSANTE INIZIO WORKOUT */}\r\n                                    {!isWorkoutActive && (\r\n                                        <button \r\n                                            onClick={() => startWorkout(day)}\r\n                                            style={{ \r\n                                                background: '#ff9500', \r\n                                                color: 'white', \r\n                                                padding: '15px 30px', \r\n                                                borderRadius: '10px',\r\n                                                fontSize: '16px',\r\n                                                fontWeight: 'bold',\r\n                                                width: '100%',\r\n                                                marginBottom: '20px',\r\n                                                border: 'none',\r\n                                                cursor: 'pointer'\r\n                                            }}\r\n                                        >\r\n                                            🚀 Inizia Workout - {workout.focus}\r\n                                        </button>\r\n                                    )}\r\n\r\n                                    {/* LISTA ESERCIZI */}\r\n                                    <div className=\"exercises-list\">\r\n                                        {workout.exercises.map((exercise, index) => (\r\n                                            <div key={index} style={{\r\n                                                background: isExerciseCompleted(exercise.name) ? \r\n                                                    'rgba(34, 197, 94, 0.2)' : \r\n                                                    selectedExercise === exercise.name ? 'rgba(255, 149, 0, 0.2)' : '#2a2a2a',\r\n                                                border: selectedExercise === exercise.name ? '2px solid #ff9500' : '1px solid #444',\r\n                                                borderRadius: '8px',\r\n                                                padding: '15px',\r\n                                                margin: '10px 0',\r\n                                                cursor: 'pointer'\r\n                                            }}>\r\n                                                <div onClick={() => \r\n                                                    setSelectedExercise(selectedExercise === exercise.name ? null : exercise.name)\r\n                                                }>\r\n                                                    <h4>\r\n                                                        {isExerciseCompleted(exercise.name) && '✅ '}\r\n                                                        {exercise.name}\r\n                                                    </h4>\r\n                                                    <div style={{ color: '#aaa', fontSize: '14px' }}>\r\n                                                        <span>{exercise.sets}</span> | \r\n                                                        <span> Rest: {exercise.rest}</span>\r\n                                                    </div>\r\n                                                    <p style={{ color: '#ccc', fontSize: '12px', marginTop: '8px' }}>\r\n                                                        {exercise.notes}\r\n                                                    </p>\r\n                                                </div>\r\n                                                \r\n                                                {/* INTERFACCIA TRACKING PESO */}\r\n                                                {selectedExercise === exercise.name && isWorkoutActive && (\r\n                                                    <div style={{\r\n                                                        background: '#333',\r\n                                                        padding: '20px',\r\n                                                        borderRadius: '8px',\r\n                                                        marginTop: '15px'\r\n                                                    }}>\r\n                                                        <h5>🏋️ Inserisci Dati Allenamento</h5>\r\n                                                        \r\n                                                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '15px', marginBottom: '15px' }}>\r\n                                                            <div>\r\n                                                                <label style={{ display: 'block', marginBottom: '5px', color: '#aaa' }}>Serie:</label>\r\n                                                                <input \r\n                                                                    type=\"number\"\r\n                                                                    value={exerciseForm.sets}\r\n                                                                    onChange={(e) => setExerciseForm(prev => ({...prev, sets: e.target.value}))}\r\n                                                                    placeholder=\"es. 3\"\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '8px',\r\n                                                                        borderRadius: '5px',\r\n                                                                        border: '1px solid #555',\r\n                                                                        background: '#222',\r\n                                                                        color: 'white'\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                            <div>\r\n                                                                <label style={{ display: 'block', marginBottom: '5px', color: '#aaa' }}>Ripetizioni:</label>\r\n                                                                <input \r\n                                                                    type=\"number\"\r\n                                                                    value={exerciseForm.reps}\r\n                                                                    onChange={(e) => setExerciseForm(prev => ({...prev, reps: e.target.value}))}\r\n                                                                    placeholder=\"es. 8\"\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '8px',\r\n                                                                        borderRadius: '5px',\r\n                                                                        border: '1px solid #555',\r\n                                                                        background: '#222',\r\n                                                                        color: 'white'\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                            <div>\r\n                                                                <label style={{ display: 'block', marginBottom: '5px', color: '#aaa' }}>Peso (kg):</label>\r\n                                                                <input \r\n                                                                    type=\"number\"\r\n                                                                    step=\"0.5\"\r\n                                                                    value={exerciseForm.weight}\r\n                                                                    onChange={(e) => setExerciseForm(prev => ({...prev, weight: e.target.value}))}\r\n                                                                    placeholder=\"es. 80\"\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '8px',\r\n                                                                        borderRadius: '5px',\r\n                                                                        border: '1px solid #ff9500',\r\n                                                                        background: '#ff9500',\r\n                                                                        color: 'white',\r\n                                                                        fontWeight: 'bold'\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        \r\n                                                        <div style={{ display: 'grid', gridTemplateColumns: '150px 1fr', gap: '15px', marginBottom: '15px' }}>\r\n                                                            <div>\r\n                                                                <label style={{ display: 'block', marginBottom: '5px', color: '#aaa' }}>RIR (opz.):</label>\r\n                                                                <select \r\n                                                                    value={exerciseForm.rir}\r\n                                                                    onChange={(e) => setExerciseForm(prev => ({...prev, rir: e.target.value}))}\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '8px',\r\n                                                                        borderRadius: '5px',\r\n                                                                        border: '1px solid #555',\r\n                                                                        background: '#222',\r\n                                                                        color: 'white'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <option value=\"\">-</option>\r\n                                                                    <option value=\"0\">0 (cedimento)</option>\r\n                                                                    <option value=\"1\">1</option>\r\n                                                                    <option value=\"2\">2</option>\r\n                                                                    <option value=\"3\">3</option>\r\n                                                                </select>\r\n                                                            </div>\r\n                                                            <div>\r\n                                                                <label style={{ display: 'block', marginBottom: '5px', color: '#aaa' }}>Note:</label>\r\n                                                                <input \r\n                                                                    type=\"text\"\r\n                                                                    value={exerciseForm.notes}\r\n                                                                    onChange={(e) => setExerciseForm(prev => ({...prev, notes: e.target.value}))}\r\n                                                                    placeholder=\"Sensazioni, difficoltà, ecc.\"\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '8px',\r\n                                                                        borderRadius: '5px',\r\n                                                                        border: '1px solid #555',\r\n                                                                        background: '#222',\r\n                                                                        color: 'white'\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        \r\n                                                        <button \r\n                                                            onClick={() => completeExercise(exercise)}\r\n                                                            style={{\r\n                                                                background: '#22c55e',\r\n                                                                color: 'white',\r\n                                                                padding: '12px 24px',\r\n                                                                borderRadius: '8px',\r\n                                                                width: '100%',\r\n                                                                border: 'none',\r\n                                                                cursor: 'pointer',\r\n                                                                fontSize: '16px',\r\n                                                                fontWeight: 'bold'\r\n                                                            }}\r\n                                                        >\r\n                                                            ✅ Salva Esercizio\r\n                                                        </button>\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                    \r\n                                    {/* PROGRESSO WORKOUT CORRENTE */}\r\n                                    {isWorkoutActive && currentWorkout.day === day && (\r\n                                        <div style={{\r\n                                            background: 'rgba(34, 197, 94, 0.1)',\r\n                                            padding: '20px',\r\n                                            borderRadius: '10px',\r\n                                            marginTop: '20px',\r\n                                            border: '2px solid #22c55e'\r\n                                        }}>\r\n                                            <h4>🏆 Progresso Workout</h4>\r\n                                            <div style={{ marginBottom: '15px', color: '#aaa' }}>\r\n                                                <span>Esercizi: {currentWorkout.exercises.length}/{workout.exercises.length} | </span>\r\n                                                <span>Completamento: {Math.round((currentWorkout.exercises.length / workout.exercises.length) * 100)}%</span>\r\n                                            </div>\r\n                                            \r\n                                            {currentWorkout.exercises.length > 0 && (\r\n                                                <div>\r\n                                                    <h5 style={{ color: '#22c55e' }}>Esercizi Completati:</h5>\r\n                                                    {currentWorkout.exercises.map((ex, idx) => (\r\n                                                        <div key={idx} style={{\r\n                                                            background: '#2a2a2a',\r\n                                                            padding: '8px',\r\n                                                            borderRadius: '5px',\r\n                                                            margin: '5px 0',\r\n                                                            fontSize: '14px'\r\n                                                        }}>\r\n                                                            <span>{ex.name}: {ex.sets}x{ex.reps} @ {ex.weight}kg</span>\r\n                                                            {ex.rir && <span> (RIR {ex.rir})</span>}\r\n                                                        </div>\r\n                                                    ))}\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* INFO COLLEGAMENTO ANALYTICS */}\r\n            <div style={{\r\n                background: 'rgba(0, 255, 255, 0.1)',\r\n                padding: '20px',\r\n                borderRadius: '10px',\r\n                textAlign: 'center',\r\n                margin: '30px 0',\r\n                border: '2px solid #00ffff'\r\n            }}>\r\n                <h3 style={{ color: '#00ffff' }}>📊 I Tuoi Dati Alimentano gli Analytics!</h3>\r\n                <p>Ogni workout salvato contribuisce ai tuoi grafici di progresso reali.</p>\r\n                <button \r\n                    onClick={() => navigate('/analytics')}\r\n                    style={{\r\n                        background: '#00ffff',\r\n                        color: 'black',\r\n                        padding: '12px 24px',\r\n                        borderRadius: '8px',\r\n                        border: 'none',\r\n                        fontWeight: 'bold',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                >\r\n                    🚀 Vai agli Analytics\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WorkoutSimple;","import React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { dataManager } from '../utils/dataManager';\r\n\r\nconst NutritionBella = () => {\r\n    const navigate = useNavigate();\r\n    const [selectedDay, setSelectedDay] = useState(new Date().getDay());\r\n    const [completedMeals, setCompletedMeals] = useState(() => {\r\n        const saved = localStorage.getItem('completedMeals');\r\n        return saved ? JSON.parse(saved) : {};\r\n    });\r\n    const [currentStreak, setCurrentStreak] = useState(() => {\r\n        const saved = localStorage.getItem('nutritionStreak');\r\n        return saved ? parseInt(saved) : 0;\r\n    });\r\n    \r\n    // 🍕 SISTEMA TRACKING SGARRI\r\n    const [cheats, setCheats] = useState(() => {\r\n        const saved = localStorage.getItem('nutritionCheats');\r\n        return saved ? JSON.parse(saved) : {};\r\n    });\r\n\r\n    // TUA DIETA PERSONALIZZATA - 7 GIORNI\r\n    const weeklyDiet = {\r\n        0: { // Domenica\r\n            name: \"🔥 DOMENICA - RECOVERY DAY\",\r\n            color: \"#ff6b6b\",\r\n            meals: [\r\n                {\r\n                    id: \"dom-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"dom-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Omelette funzionale con superfood\",\r\n                    proteins: 32,\r\n                    calories: 485,\r\n                    ingredients: [\"3 uova + 3 albumi\", \"spinaci + aglio\", \"1 cucchiaio EVOO\", \"1/4 avocado\", \"porridge quinoa + latte mandorla\", \"mirtilli + semi chia\", \"GOS + inulina + cacao 6g + cannella\"]\r\n                },\r\n                {\r\n                    id: \"dom-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Tacchino curry con superfood bowl\",\r\n                    proteins: 42,\r\n                    calories: 680,\r\n                    ingredients: [\"200g tacchino al curry\", \"curcuma/pepe + zenzero\", \"100g riso integrale\", \"aceto mele prima\", \"cavolini/broccoli + EVOO\", \"semi di zucca + fermentati\", \"150g legumi\"]\r\n                },\r\n                {\r\n                    id: \"dom-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Shake vegano con cacao\",\r\n                    proteins: 28,\r\n                    calories: 350,\r\n                    ingredients: [\"shake veg + spinaci\", \"fragole + burro mandorle\", \"cacao 6g\", \"2 quadretti fondente 90%\"]\r\n                }\r\n            ]\r\n        },\r\n        1: { // Lunedì\r\n            name: \"💪 LUNEDÌ - POWER DAY\",\r\n            color: \"#ff9500\",\r\n            meals: [\r\n                {\r\n                    id: \"lun-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"lun-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Omelette funzionale completa\",\r\n                    proteins: 35,\r\n                    calories: 520,\r\n                    ingredients: [\"3 uova + 3 albumi\", \"spinaci + aglio\", \"1 cucchiaio EVOO\", \"1/4 avocado\", \"porridge quinoa + latte mandorla\", \"mirtilli + semi chia\", \"GOS + inulina + cacao 6g + cannella\"]\r\n                },\r\n                {\r\n                    id: \"lun-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Salmone anti-infiammatorio\",\r\n                    proteins: 45,\r\n                    calories: 650,\r\n                    ingredients: [\"200g salmone\", \"curcuma + pepe + zenzero\", \"3/4 tazza quinoa + patata dolce\", \"broccoli + semi zucca + EVOO\", \"insalata verde + crauti/kimchi\", \"150g ceci/lenticchie\"]\r\n                },\r\n                {\r\n                    id: \"lun-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Power shake al cacao\",\r\n                    proteins: 30,\r\n                    calories: 380,\r\n                    ingredients: [\"shake proteico + banana\", \"spinaci + burro mandorle\", \"cacao 6g\", \"2 quadretti fondente 90%\"]\r\n                }\r\n            ]\r\n        },\r\n        2: { // Martedì\r\n            name: \"🎯 MARTEDÌ - PRECISION DAY\",\r\n            color: \"#4ecdc4\",\r\n            meals: [\r\n                {\r\n                    id: \"mar-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"mar-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Pancake funzionali GF\",\r\n                    proteins: 28,\r\n                    calories: 465,\r\n                    ingredients: [\"pancake avena GF + albume + 1 uovo + cannella\", \"burro d'arachidi\", \"fragole & lamponi\", \"tè verde\", \"1 cucchiaio EVOO a crudo\"]\r\n                },\r\n                {\r\n                    id: \"mar-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Pollo speziato con prebiotici\",\r\n                    proteins: 48,\r\n                    calories: 620,\r\n                    ingredients: [\"200g petto pollo\", \"rosmarino + cumino\", \"100g riso integrale\", \"aceto mele prima\", \"cavolo nero + aglio + EVOO\", \"1/4 avocado\", \"150g legumi + fermentati\"]\r\n                },\r\n                {\r\n                    id: \"mar-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Yogurt proteico con prebiotici\",\r\n                    proteins: 25,\r\n                    calories: 280,\r\n                    ingredients: [\"yogurt vegetale + proteine\", \"noci + inulina\", \"1 mela verde\"]\r\n                }\r\n            ]\r\n        },\r\n        3: { // Mercoledì\r\n            name: \"🔋 MERCOLEDÌ - ENERGY DAY\",\r\n            color: \"#45b7d1\",\r\n            meals: [\r\n                {\r\n                    id: \"mer-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"mer-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Uova strapazzate anti-infiammatorie\",\r\n                    proteins: 30,\r\n                    calories: 480,\r\n                    ingredients: [\"3 uova + 2 albumi\", \"zucchine + curcuma/pepe\", \"EVOO\", \"1/2 tazza quinoa\", \"semi lino + mirtilli + GOS\"]\r\n                },\r\n                {\r\n                    id: \"mer-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Tacchino speziato con prebiotici\",\r\n                    proteins: 45,\r\n                    calories: 650,\r\n                    ingredients: [\"200g tacchino\", \"curcuma + limone + zenzero\", \"200g patata dolce\", \"aceto mele prima\", \"spinaci + sesamo + EVOO\", \"150g legumi + fermentati\"]\r\n                },\r\n                {\r\n                    id: \"mer-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Shake vegano al cacao\",\r\n                    proteins: 28,\r\n                    calories: 360,\r\n                    ingredients: [\"shake veg + latte mandorla\", \"fragole + burro anacardi\", \"cacao 6g\", \"2 quadretti 90%\"]\r\n                }\r\n            ]\r\n        },\r\n        4: { // Giovedì\r\n            name: \"⚡ GIOVEDÌ - THUNDER DAY\",\r\n            color: \"#96ceb4\",\r\n            meals: [\r\n                {\r\n                    id: \"gio-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"gio-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Omelette con superfood\",\r\n                    proteins: 32,\r\n                    calories: 510,\r\n                    ingredients: [\"3 uova + 3 albumi\", \"zucchine/peperoni + aglio + prezzemolo\", \"EVOO\", \"1/2 avocado\", \"porridge amaranto + lamponi\", \"semi chia + inulina + cacao 6g + cannella\"]\r\n                },\r\n                {\r\n                    id: \"gio-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Tonno con crucifere bowl\",\r\n                    proteins: 50,\r\n                    calories: 620,\r\n                    ingredients: [\"200g tonno\", \"bowl crucifere (broccoli+cauli ≥250g)\", \"150g lenticchie nere\", \"cumino + zenzero + EVOO\", \"2-4 cucchiai fermentati\"]\r\n                },\r\n                {\r\n                    id: \"gio-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Yogurt con superseeds\",\r\n                    proteins: 24,\r\n                    calories: 290,\r\n                    ingredients: [\"yogurt vegetale + proteine\", \"mirtilli + 1-2 noci brasiliane\", \"1 kiwi\"]\r\n                }\r\n            ]\r\n        },\r\n        5: { // Venerdì\r\n            name: \"🏆 VENERDÌ - VICTORY DAY\",\r\n            color: \"#feca57\",\r\n            meals: [\r\n                {\r\n                    id: \"ven-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"ven-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Uova strapazzate con prebiotici\",\r\n                    proteins: 30,\r\n                    calories: 480,\r\n                    ingredients: [\"3 uova + 2 albumi\", \"spinaci + curcuma/pepe\", \"EVOO\", \"1/2 tazza quinoa\", \"semi lino + mirtilli\", \"GOS/inulina\", \"tè verde\"]\r\n                },\r\n                {\r\n                    id: \"ven-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Manzo magro con fermentati (1x/sett)\",\r\n                    proteins: 48,\r\n                    calories: 670,\r\n                    ingredients: [\"200g manzo magro\", \"200g patata dolce\", \"aceto mele prima\", \"insalata cavolo + carote\", \"semi girasole + EVOO\", \"150g legumi + fermentati\"]\r\n                },\r\n                {\r\n                    id: \"ven-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Shake proteico al cacao\",\r\n                    proteins: 30,\r\n                    calories: 380,\r\n                    ingredients: [\"shake proteico + latte riso\", \"banana + burro arachidi\", \"cacao 6g\"]\r\n                }\r\n            ]\r\n        },\r\n        6: { // Sabato\r\n            name: \"🎉 SABATO - OMEGA DAY\",\r\n            color: \"#a55eea\",\r\n            meals: [\r\n                {\r\n                    id: \"sab-idratazione\",\r\n                    type: \"💧 Idratazione & Primer\",\r\n                    time: \"7:00\",\r\n                    food: \"Morning Detox Protocol\",\r\n                    proteins: 2,\r\n                    calories: 15,\r\n                    ingredients: [\"Acqua tiepida + limone + sale\", \"Stabilium\", \"Spremuta melograno (opz)\"]\r\n                },\r\n                {\r\n                    id: \"sab-colazione\",\r\n                    type: \"🌅 Colazione\",\r\n                    time: \"8:00\",\r\n                    food: \"Pancake proteici con antiossidanti\",\r\n                    proteins: 28,\r\n                    calories: 460,\r\n                    ingredients: [\"pancake avena GF + albume + proteine\", \"≥150g frutti di bosco\", \"burro di mandorle\", \"tè verde + EVOO\"]\r\n                },\r\n                {\r\n                    id: \"sab-pranzo\",\r\n                    type: \"🍽️ Pranzo\",\r\n                    time: \"12:30\",\r\n                    food: \"Pesce azzurro con omega-3\",\r\n                    proteins: 45,\r\n                    calories: 650,\r\n                    ingredients: [\"200g sgombro/sardine\", \"3/4 tazza quinoa\", \"aceto mele prima\", \"broccoli + spinaci\", \"semi lino + EVOO\", \"insalata rucola+pomodorini + fermentati\", \"150g legumi\"]\r\n                },\r\n                {\r\n                    id: \"sab-snack\",\r\n                    type: \"💪 Snack/Post-WO\",\r\n                    time: \"15:30\",\r\n                    food: \"Yogurt con omega seeds\",\r\n                    proteins: 26,\r\n                    calories: 320,\r\n                    ingredients: [\"yogurt vegetale + proteine\", \"semi di chia + noci\", \"1 mela\"]\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    const dayNames = ['Domenica', 'Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato'];\r\n\r\n    const toggleMeal = (mealId) => {\r\n        const today = new Date().toDateString();\r\n        const key = `${today}-${mealId}`;\r\n        \r\n        const newCompleted = {\r\n            ...completedMeals,\r\n            [key]: !completedMeals[key]\r\n        };\r\n        \r\n        setCompletedMeals(newCompleted);\r\n        localStorage.setItem('completedMeals', JSON.stringify(newCompleted));\r\n        \r\n        // 💾 SALVA ANCHE NEL DATAMANAGER PER ANALYTICS\r\n        const nutritionData = {\r\n            mealId: mealId,\r\n            completed: !completedMeals[key],\r\n            timestamp: new Date().toISOString(),\r\n            day: selectedDay,\r\n            mealData: weeklyDiet[selectedDay].meals.find(m => m.id === mealId)\r\n        };\r\n        \r\n        // Salva nel sistema centralizzato per analytics\r\n        const nutritionHistory = JSON.parse(localStorage.getItem('nutritionHistory') || '[]');\r\n        nutritionHistory.unshift(nutritionData);\r\n        localStorage.setItem('nutritionHistory', JSON.stringify(nutritionHistory));\r\n        \r\n        // Calcola streak\r\n        updateStreak(newCompleted);\r\n        \r\n        // 🔥 TRIGGER EVENTO PER AGGIORNAMENTO DASHBOARD\r\n        window.dispatchEvent(new CustomEvent('mealToggled', { \r\n            detail: nutritionData \r\n        }));\r\n    };\r\n\r\n    const updateStreak = (meals) => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[new Date().getDay()].meals;\r\n        const completedToday = todayMeals.filter(meal => meals[`${today}-${meal.id}`]).length;\r\n        \r\n        if (completedToday === todayMeals.length) {\r\n            const newStreak = currentStreak + 1;\r\n            setCurrentStreak(newStreak);\r\n            localStorage.setItem('nutritionStreak', newStreak.toString());\r\n            \r\n            // 🔥 TRIGGER AGGIORNAMENTO ANALYTICS REAL-TIME\r\n            setTimeout(() => {\r\n                window.dispatchEvent(new CustomEvent('nutritionCompleted', { \r\n                    detail: { \r\n                        streak: newStreak, \r\n                        mealsCompleted: completedToday,\r\n                        totalMeals: todayMeals.length \r\n                    } \r\n                }));\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    const isMealCompleted = (mealId) => {\r\n        const today = new Date().toDateString();\r\n        return completedMeals[`${today}-${mealId}`] || false;\r\n    };\r\n\r\n    const getDayProgress = () => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[selectedDay].meals;\r\n        const completed = todayMeals.filter(meal => completedMeals[`${today}-${meal.id}`]).length;\r\n        return Math.round((completed / todayMeals.length) * 100);\r\n    };\r\n\r\n    const getTotalProteins = () => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[selectedDay].meals;\r\n        return todayMeals\r\n            .filter(meal => completedMeals[`${today}-${meal.id}`])\r\n            .reduce((total, meal) => total + meal.proteins, 0);\r\n    };\r\n\r\n    const getTotalCalories = () => {\r\n        const today = new Date().toDateString();\r\n        const todayMeals = weeklyDiet[selectedDay].meals;\r\n        return todayMeals\r\n            .filter(meal => completedMeals[`${today}-${meal.id}`])\r\n            .reduce((total, meal) => total + meal.calories, 0);\r\n    };\r\n\r\n    // Genera calendario del mese corrente\r\n    const generateCalendar = () => {\r\n        const today = new Date();\r\n        const currentMonth = today.getMonth();\r\n        const currentYear = today.getFullYear();\r\n        const firstDay = new Date(currentYear, currentMonth, 1);\r\n        const lastDay = new Date(currentYear, currentMonth + 1, 0);\r\n        const daysInMonth = lastDay.getDate();\r\n        const startingDay = firstDay.getDay();\r\n        \r\n        const calendar = [];\r\n        \r\n        // Giorni vuoti all'inizio\r\n        for (let i = 0; i < startingDay; i++) {\r\n            calendar.push(null);\r\n        }\r\n        \r\n        // Giorni del mese\r\n        for (let day = 1; day <= daysInMonth; day++) {\r\n            calendar.push(day);\r\n        }\r\n        \r\n        return calendar;\r\n    };\r\n\r\n    const isToday = (day) => {\r\n        const today = new Date();\r\n        return day === today.getDate();\r\n    };\r\n\r\n    const isDayCompleted = (day) => {\r\n        if (!day) return false;\r\n        const date = new Date();\r\n        date.setDate(day);\r\n        const dayString = date.toDateString();\r\n        const dayOfWeek = date.getDay();\r\n        const dayMeals = weeklyDiet[dayOfWeek].meals;\r\n        \r\n        const completedMealsForDay = dayMeals.filter(meal => \r\n            completedMeals[`${dayString}-${meal.id}`]\r\n        ).length;\r\n        \r\n        return completedMealsForDay === dayMeals.length;\r\n    };\r\n\r\n    // 🍕 FUNZIONI SGARRI\r\n    const addCheat = (date = new Date()) => {\r\n        const dateString = date.toDateString();\r\n        const cheatData = {\r\n            date: dateString,\r\n            timestamp: new Date().toISOString(),\r\n            month: date.getMonth(),\r\n            year: date.getFullYear()\r\n        };\r\n        \r\n        const newCheats = {\r\n            ...cheats,\r\n            [dateString]: cheatData\r\n        };\r\n        \r\n        setCheats(newCheats);\r\n        localStorage.setItem('nutritionCheats', JSON.stringify(newCheats));\r\n        \r\n        // 🚨 TRIGGER EVENTO SGARRO\r\n        window.dispatchEvent(new CustomEvent('cheatAdded', { \r\n            detail: cheatData \r\n        }));\r\n        \r\n        alert('🍕 Sgarro registrato! Non è un fallimento, è parte del percorso!');\r\n    };\r\n    \r\n    const removeCheat = (date = new Date()) => {\r\n        const dateString = date.toDateString();\r\n        const newCheats = { ...cheats };\r\n        delete newCheats[dateString];\r\n        \r\n        setCheats(newCheats);\r\n        localStorage.setItem('nutritionCheats', JSON.stringify(newCheats));\r\n        \r\n        window.dispatchEvent(new CustomEvent('cheatRemoved', { \r\n            detail: { date: dateString } \r\n        }));\r\n    };\r\n    \r\n    const hasCheatOnDay = (day) => {\r\n        if (!day) return false;\r\n        const date = new Date();\r\n        date.setDate(day);\r\n        const dayString = date.toDateString();\r\n        return !!cheats[dayString];\r\n    };\r\n    \r\n    const getMonthlyCheatCount = () => {\r\n        const currentMonth = new Date().getMonth();\r\n        const currentYear = new Date().getFullYear();\r\n        \r\n        return Object.values(cheats).filter(cheat => \r\n            cheat.month === currentMonth && cheat.year === currentYear\r\n        ).length;\r\n    };\r\n\r\n    const calendar = generateCalendar();\r\n    const today = new Date();\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)',\r\n            color: 'white',\r\n            fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif'\r\n        }}>\r\n            {/* HEADER PROFESSIONALE */}\r\n            <div style={{\r\n                background: 'linear-gradient(135deg, #ff9500 0%, #ff6b35 100%)',\r\n                padding: '30px 20px',\r\n                boxShadow: '0 4px 20px rgba(255, 149, 0, 0.3)'\r\n            }}>\r\n                <button \r\n                    onClick={() => navigate('/')}\r\n                    style={{\r\n                        background: 'rgba(255, 255, 255, 0.2)',\r\n                        border: 'none',\r\n                        color: 'white',\r\n                        padding: '12px 20px',\r\n                        borderRadius: '25px',\r\n                        cursor: 'pointer',\r\n                        fontSize: '16px',\r\n                        fontWeight: 'bold',\r\n                        marginBottom: '20px',\r\n                        backdropFilter: 'blur(10px)'\r\n                    }}\r\n                >\r\n                    ← Dashboard\r\n                </button>\r\n                \r\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    <div>\r\n                        <h1 style={{ \r\n                            fontSize: '2.5rem', \r\n                            margin: '0 0 10px 0',\r\n                            textShadow: '2px 2px 4px rgba(0,0,0,0.3)'\r\n                        }}>\r\n                            🍽️ NUTRITION TRACKER PRO\r\n                        </h1>\r\n                        <p style={{ \r\n                            fontSize: '1.2rem', \r\n                            opacity: 0.9, \r\n                            margin: 0 \r\n                        }}>\r\n                            Piano alimentare settimanale personalizzato\r\n                        </p>\r\n                    </div>\r\n                    \r\n                    {/* STREAK COUNTER PROMINENTE */}\r\n                    <div style={{\r\n                        background: 'rgba(255, 255, 255, 0.15)',\r\n                        padding: '20px',\r\n                        borderRadius: '20px',\r\n                        textAlign: 'center',\r\n                        backdropFilter: 'blur(10px)',\r\n                        border: '2px solid rgba(255, 255, 255, 0.2)'\r\n                    }}>\r\n                        <div style={{ fontSize: '3rem', marginBottom: '10px' }}>🔥</div>\r\n                        <div style={{ fontSize: '2.5rem', fontWeight: 'bold', marginBottom: '5px' }}>\r\n                            {currentStreak}\r\n                        </div>\r\n                        <div style={{ fontSize: '1rem', opacity: 0.8 }}>GIORNI STREAK</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '30px 20px' }}>\r\n                {/* CALENDARIO DEL MESE */}\r\n                <div style={{\r\n                    background: 'linear-gradient(135deg, #2d2d2d 0%, #3d3d3d 100%)',\r\n                    borderRadius: '20px',\r\n                    padding: '30px',\r\n                    marginBottom: '30px',\r\n                    boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)'\r\n                }}>\r\n                    <h2 style={{ \r\n                        textAlign: 'center', \r\n                        marginBottom: '25px',\r\n                        fontSize: '1.8rem',\r\n                        color: '#ff9500'\r\n                    }}>\r\n                        📅 {today.toLocaleDateString('it-IT', { month: 'long', year: 'numeric' }).toUpperCase()}\r\n                    </h2>\r\n                    \r\n                    <div style={{\r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'repeat(7, 1fr)',\r\n                        gap: '10px',\r\n                        marginBottom: '20px'\r\n                    }}>\r\n                        {['DOM', 'LUN', 'MAR', 'MER', 'GIO', 'VEN', 'SAB'].map(day => (\r\n                            <div key={day} style={{\r\n                                padding: '10px',\r\n                                textAlign: 'center',\r\n                                fontWeight: 'bold',\r\n                                color: '#ff9500',\r\n                                fontSize: '0.9rem'\r\n                            }}>\r\n                                {day}\r\n                            </div>\r\n                        ))}\r\n                        \r\n                        {calendar.map((day, index) => (\r\n                            <div key={index} style={{\r\n                                padding: '12px',\r\n                                textAlign: 'center',\r\n                                borderRadius: '10px',\r\n                                cursor: day ? 'pointer' : 'default',\r\n                                background: day ? (\r\n                                    isToday(day) ? '#ff9500' :\r\n                                    hasCheatOnDay(day) ? '#ef4444' :\r\n                                    isDayCompleted(day) ? '#22c55e' : \r\n                                    'rgba(255, 255, 255, 0.05)'\r\n                                ) : 'transparent',\r\n                                color: day ? (\r\n                                    isToday(day) || isDayCompleted(day) || hasCheatOnDay(day) ? 'white' : '#ccc'\r\n                                ) : 'transparent',\r\n                                fontWeight: isToday(day) ? 'bold' : 'normal',\r\n                                border: isToday(day) ? '2px solid white' : '1px solid transparent',\r\n                                transform: isToday(day) ? 'scale(1.1)' : 'scale(1)',\r\n                                transition: 'all 0.3s ease'\r\n                            }}>\r\n                                {day}\r\n                                {hasCheatOnDay(day) && !isToday(day) && (\r\n                                    <div style={{ fontSize: '0.8rem', marginTop: '2px' }}>🍕</div>\r\n                                )}\r\n                                {isDayCompleted(day) && !isToday(day) && !hasCheatOnDay(day) && (\r\n                                    <div style={{ fontSize: '0.8rem', marginTop: '2px' }}>✅</div>\r\n                                )}\r\n                                {isToday(day) && (\r\n                                    <div style={{ fontSize: '0.7rem', marginTop: '2px' }}>OGGI</div>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    \r\n                    <div style={{ \r\n                        display: 'flex', \r\n                        justifyContent: 'space-between', \r\n                        alignItems: 'center',\r\n                        background: 'rgba(255, 149, 0, 0.1)',\r\n                        padding: '15px 20px',\r\n                        borderRadius: '15px'\r\n                    }}>\r\n                        <div style={{ color: '#aaa', fontSize: '0.9rem' }}>\r\n                            🟠 Oggi • 🟢 Completato • 🍕 Sgarro • ⚪ Da completare\r\n                        </div>\r\n                        <div style={{ color: '#ef4444', fontWeight: 'bold' }}>\r\n                            🍕 {getMonthlyCheatCount()} sgarri questo mese\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* SELECTOR GIORNI DELLA SETTIMANA */}\r\n                <div style={{\r\n                    display: 'flex',\r\n                    gap: '10px',\r\n                    marginBottom: '30px',\r\n                    overflowX: 'auto',\r\n                    padding: '10px 0'\r\n                }}>\r\n                    {dayNames.map((day, index) => (\r\n                        <button\r\n                            key={index}\r\n                            onClick={() => setSelectedDay(index)}\r\n                            style={{\r\n                                padding: '15px 25px',\r\n                                borderRadius: '25px',\r\n                                border: 'none',\r\n                                cursor: 'pointer',\r\n                                fontSize: '1rem',\r\n                                fontWeight: 'bold',\r\n                                minWidth: '140px',\r\n                                whiteSpace: 'nowrap',\r\n                                background: selectedDay === index ? weeklyDiet[index].color : 'rgba(255, 255, 255, 0.1)',\r\n                                color: selectedDay === index ? 'white' : '#ccc',\r\n                                transform: selectedDay === index ? 'scale(1.05)' : 'scale(1)',\r\n                                transition: 'all 0.3s ease',\r\n                                boxShadow: selectedDay === index ? `0 5px 15px ${weeklyDiet[index].color}40` : 'none'\r\n                            }}\r\n                        >\r\n                            {day}\r\n                            {index === new Date().getDay() && (\r\n                                <div style={{ fontSize: '0.7rem', marginTop: '3px', opacity: 0.8 }}>\r\n                                    OGGI\r\n                                </div>\r\n                            )}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* PROGRESS BAR GIORNALIERA */}\r\n                <div style={{\r\n                    background: 'linear-gradient(135deg, #2d2d2d 0%, #3d3d3d 100%)',\r\n                    borderRadius: '20px',\r\n                    padding: '25px',\r\n                    marginBottom: '30px',\r\n                    boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)'\r\n                }}>\r\n                    <h3 style={{ \r\n                        color: weeklyDiet[selectedDay].color,\r\n                        marginBottom: '20px',\r\n                        fontSize: '1.5rem'\r\n                    }}>\r\n                        {weeklyDiet[selectedDay].name}\r\n                    </h3>\r\n                    \r\n                    <div style={{\r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',\r\n                        gap: '20px',\r\n                        marginBottom: '20px'\r\n                    }}>\r\n                        <div style={{ textAlign: 'center' }}>\r\n                            <div style={{ fontSize: '2rem', fontWeight: 'bold', color: weeklyDiet[selectedDay].color }}>\r\n                                {getDayProgress()}%\r\n                            </div>\r\n                            <div style={{ color: '#aaa', fontSize: '0.9rem' }}>Completato</div>\r\n                        </div>\r\n                        <div style={{ textAlign: 'center' }}>\r\n                            <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#22c55e' }}>\r\n                                {getTotalProteins()}g\r\n                            </div>\r\n                            <div style={{ color: '#aaa', fontSize: '0.9rem' }}>Proteine</div>\r\n                        </div>\r\n                        <div style={{ textAlign: 'center' }}>\r\n                            <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#f59e0b' }}>\r\n                                {getTotalCalories()}\r\n                            </div>\r\n                            <div style={{ color: '#aaa', fontSize: '0.9rem' }}>Kcal</div>\r\n                        </div>\r\n                        <div style={{ textAlign: 'center' }}>\r\n                            <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#ef4444' }}>\r\n                                {getMonthlyCheatCount()}\r\n                            </div>\r\n                            <div style={{ color: '#aaa', fontSize: '0.9rem' }}>Sgarri Mese</div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div style={{\r\n                        background: 'rgba(255, 255, 255, 0.1)',\r\n                        borderRadius: '25px',\r\n                        height: '12px',\r\n                        overflow: 'hidden'\r\n                    }}>\r\n                        <div style={{\r\n                            background: `linear-gradient(90deg, ${weeklyDiet[selectedDay].color} 0%, ${weeklyDiet[selectedDay].color}aa 100%)`,\r\n                            height: '100%',\r\n                            width: `${getDayProgress()}%`,\r\n                            borderRadius: '25px',\r\n                            transition: 'width 0.5s ease'\r\n                        }} />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* PASTI DEL GIORNO */}\r\n                <div style={{\r\n                    display: 'grid',\r\n                    gap: '20px'\r\n                }}>\r\n                    {weeklyDiet[selectedDay].meals.map((meal, index) => (\r\n                        <div key={meal.id} style={{\r\n                            background: isMealCompleted(meal.id) ? \r\n                                'linear-gradient(135deg, #22c55e20 0%, #22c55e10 100%)' :\r\n                                'linear-gradient(135deg, #2d2d2d 0%, #3d3d3d 100%)',\r\n                            borderRadius: '20px',\r\n                            padding: '25px',\r\n                            border: isMealCompleted(meal.id) ? '2px solid #22c55e' : '1px solid rgba(255, 255, 255, 0.1)',\r\n                            boxShadow: '0 10px 30px rgba(0, 0, 0, 0.2)',\r\n                            transition: 'all 0.3s ease'\r\n                        }}>\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                justifyContent: 'space-between',\r\n                                alignItems: 'flex-start',\r\n                                marginBottom: '20px'\r\n                            }}>\r\n                                <div>\r\n                                    <div style={{\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        gap: '15px',\r\n                                        marginBottom: '10px'\r\n                                    }}>\r\n                                        <h4 style={{\r\n                                            fontSize: '1.3rem',\r\n                                            margin: 0,\r\n                                            color: weeklyDiet[selectedDay].color\r\n                                        }}>\r\n                                            {meal.type}\r\n                                        </h4>\r\n                                        <span style={{\r\n                                            background: 'rgba(255, 149, 0, 0.2)',\r\n                                            color: '#ff9500',\r\n                                            padding: '5px 12px',\r\n                                            borderRadius: '15px',\r\n                                            fontSize: '0.9rem',\r\n                                            fontWeight: 'bold'\r\n                                        }}>\r\n                                            {meal.time}\r\n                                        </span>\r\n                                    </div>\r\n                                    \r\n                                    <h5 style={{\r\n                                        fontSize: '1.1rem',\r\n                                        margin: '0 0 15px 0',\r\n                                        color: 'white'\r\n                                    }}>\r\n                                        {meal.food}\r\n                                    </h5>\r\n                                    \r\n                                    <div style={{\r\n                                        display: 'flex',\r\n                                        gap: '20px',\r\n                                        marginBottom: '15px'\r\n                                    }}>\r\n                                        <div style={{\r\n                                            background: 'rgba(34, 197, 94, 0.2)',\r\n                                            color: '#22c55e',\r\n                                            padding: '8px 15px',\r\n                                            borderRadius: '15px',\r\n                                            fontSize: '0.9rem',\r\n                                            fontWeight: 'bold'\r\n                                        }}>\r\n                                            💪 {meal.proteins}g proteine\r\n                                        </div>\r\n                                        <div style={{\r\n                                            background: 'rgba(245, 158, 11, 0.2)',\r\n                                            color: '#f59e0b',\r\n                                            padding: '8px 15px',\r\n                                            borderRadius: '15px',\r\n                                            fontSize: '0.9rem',\r\n                                            fontWeight: 'bold'\r\n                                        }}>\r\n                                            🔥 {meal.calories} kcal\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <button\r\n                                    onClick={() => toggleMeal(meal.id)}\r\n                                    style={{\r\n                                        background: isMealCompleted(meal.id) ? '#22c55e' : weeklyDiet[selectedDay].color,\r\n                                        border: 'none',\r\n                                        color: 'white',\r\n                                        padding: '15px 25px',\r\n                                        borderRadius: '25px',\r\n                                        cursor: 'pointer',\r\n                                        fontSize: '1rem',\r\n                                        fontWeight: 'bold',\r\n                                        transition: 'all 0.3s ease',\r\n                                        transform: 'scale(1)',\r\n                                        boxShadow: '0 5px 15px rgba(0, 0, 0, 0.2)'\r\n                                    }}\r\n                                    onMouseOver={(e) => e.target.style.transform = 'scale(1.05)'}\r\n                                    onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                                >\r\n                                    {isMealCompleted(meal.id) ? '✅ Completato' : '⭕ Completa'}\r\n                                </button>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <h6 style={{\r\n                                    color: '#aaa',\r\n                                    fontSize: '0.9rem',\r\n                                    marginBottom: '10px',\r\n                                    textTransform: 'uppercase',\r\n                                    letterSpacing: '1px'\r\n                                }}>\r\n                                    Ingredienti:\r\n                                </h6>\r\n                                <div style={{\r\n                                    display: 'flex',\r\n                                    flexWrap: 'wrap',\r\n                                    gap: '8px'\r\n                                }}>\r\n                                    {meal.ingredients.map((ingredient, idx) => (\r\n                                        <span key={idx} style={{\r\n                                            background: 'rgba(255, 255, 255, 0.1)',\r\n                                            color: '#ccc',\r\n                                            padding: '5px 12px',\r\n                                            borderRadius: '12px',\r\n                                            fontSize: '0.8rem'\r\n                                        }}>\r\n                                            {ingredient}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* QUICK ACTIONS */}\r\n                <div style={{\r\n                    display: 'flex',\r\n                    gap: '15px',\r\n                    marginTop: '40px',\r\n                    flexWrap: 'wrap'\r\n                }}>\r\n                    <Link to=\"/analytics\" style={{\r\n                        background: 'linear-gradient(135deg, #00ffff 0%, #0ea5e9 100%)',\r\n                        color: 'black',\r\n                        textDecoration: 'none',\r\n                        padding: '15px 25px',\r\n                        borderRadius: '25px',\r\n                        fontWeight: 'bold',\r\n                        fontSize: '1rem',\r\n                        transition: 'transform 0.3s ease',\r\n                        boxShadow: '0 5px 15px rgba(0, 255, 255, 0.3)'\r\n                    }}>\r\n                        📊 Vai agli Analytics\r\n                    </Link>\r\n                    \r\n                    <Link to=\"/supplements\" style={{\r\n                        background: 'linear-gradient(135deg, #a855f7 0%, #8b5cf6 100%)',\r\n                        color: 'white',\r\n                        textDecoration: 'none',\r\n                        padding: '15px 25px',\r\n                        borderRadius: '25px',\r\n                        fontWeight: 'bold',\r\n                        fontSize: '1rem',\r\n                        transition: 'transform 0.3s ease',\r\n                        boxShadow: '0 5px 15px rgba(168, 85, 247, 0.3)'\r\n                    }}>\r\n                        💊 Gestione Integratori\r\n                    </Link>\r\n                    \r\n                    <button \r\n                        onClick={() => addCheat()}\r\n                        style={{\r\n                            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            padding: '15px 25px',\r\n                            borderRadius: '25px',\r\n                            fontWeight: 'bold',\r\n                            fontSize: '1rem',\r\n                            cursor: 'pointer',\r\n                            transition: 'transform 0.3s ease',\r\n                            boxShadow: '0 5px 15px rgba(239, 68, 68, 0.3)'\r\n                        }}\r\n                    >\r\n                        🍕 Registra Sgarro Oggi\r\n                    </button>\r\n                    \r\n                    <button \r\n                        onClick={() => {\r\n                            setCompletedMeals({});\r\n                            setCurrentStreak(0);\r\n                            setCheats({});\r\n                            localStorage.removeItem('completedMeals');\r\n                            localStorage.removeItem('nutritionStreak');\r\n                            localStorage.removeItem('nutritionCheats');\r\n                            localStorage.removeItem('nutritionHistory');\r\n                        }}\r\n                        style={{\r\n                            background: 'linear-gradient(135deg, #6b7280 0%, #4b5563 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            padding: '15px 25px',\r\n                            borderRadius: '25px',\r\n                            fontWeight: 'bold',\r\n                            fontSize: '1rem',\r\n                            cursor: 'pointer',\r\n                            transition: 'transform 0.3s ease',\r\n                            boxShadow: '0 5px 15px rgba(107, 114, 128, 0.3)'\r\n                        }}\r\n                    >\r\n                        🔄 Reset Tutto\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NutritionBella;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Supplements = () => {\r\n    const navigate = useNavigate();\r\n    const [selectedCategory, setSelectedCategory] = useState('all');\r\n    const [takenToday, setTakenToday] = useState(() => {\r\n        const saved = localStorage.getItem('supplementsTaken');\r\n        return saved ? JSON.parse(saved) : {};\r\n    });\r\n    const [currentStack, setCurrentStack] = useState(() => {\r\n        const saved = localStorage.getItem('currentStack');\r\n        return saved ? JSON.parse(saved) : [\r\n            'whey-protein', 'creatine', 'multivitamin', 'omega3', 'vitamin-d'\r\n        ];\r\n    });\r\n\r\n    // SUPPLEMENTI COMPLETI CON TIMING E DOSAGGI\r\n    const supplements = {\r\n        'whey-protein': {\r\n            name: 'Whey Protein',\r\n            category: 'protein',\r\n            icon: '💪',\r\n            dosage: '25-30g',\r\n            timing: ['post-workout', 'snack'],\r\n            benefits: ['Crescita muscolare', 'Recovery', 'Sintesi proteica'],\r\n            priority: 'essential',\r\n            cost: '€35/mese',\r\n            description: 'Proteine del siero ad alto valore biologico per massimizzare la crescita muscolare',\r\n            instructions: 'Assumere 1 scoop (25g) in 250ml acqua/latte entro 30min dal workout'\r\n        },\r\n        'creatine': {\r\n            name: 'Creatina Monoidrata',\r\n            category: 'performance',\r\n            icon: '⚡',\r\n            dosage: '3-5g',\r\n            timing: ['pre-workout', 'post-workout'],\r\n            benefits: ['Forza', 'Potenza', 'Volume muscolare'],\r\n            priority: 'essential',\r\n            cost: '€15/mese',\r\n            description: 'Aumenta ATP per performance esplosive e volume cellulare',\r\n            instructions: '5g al giorno, possibile loading di 20g per 5 giorni iniziali'\r\n        },\r\n        'multivitamin': {\r\n            name: 'Multivitaminico Premium',\r\n            category: 'health',\r\n            icon: '🌟',\r\n            dosage: '1 tablet',\r\n            timing: ['breakfast'],\r\n            benefits: ['Salute generale', 'Sistema immunitario', 'Energia'],\r\n            priority: 'important',\r\n            cost: '€25/mese',\r\n            description: 'Formula completa di vitamine e minerali per atleti',\r\n            instructions: '1 compressa al mattino a stomaco pieno'\r\n        },\r\n        'omega3': {\r\n            name: 'Omega-3 EPA/DHA',\r\n            category: 'health',\r\n            icon: '🐟',\r\n            dosage: '1-2g',\r\n            timing: ['meals'],\r\n            benefits: ['Antinfiammatorio', 'Salute cuore', 'Recovery'],\r\n            priority: 'important',\r\n            cost: '€20/mese',\r\n            description: 'Acidi grassi essenziali per ridurre infiammazione e supportare il recovery',\r\n            instructions: '1-2 capsule ai pasti principali'\r\n        },\r\n        'vitamin-d': {\r\n            name: 'Vitamina D3',\r\n            category: 'health',\r\n            icon: '☀️',\r\n            dosage: '2000-4000 IU',\r\n            timing: ['breakfast'],\r\n            benefits: ['Salute ossa', 'Sistema immunitario', 'Testosterone'],\r\n            priority: 'important',\r\n            cost: '€12/mese',\r\n            description: 'Supporta salute ossea, sistema immunitario e produzione ormonale',\r\n            instructions: '2000 IU al mattino con grassi per migliore assorbimento'\r\n        },\r\n        'bcaa': {\r\n            name: 'BCAA 2:1:1',\r\n            category: 'recovery',\r\n            icon: '🔄',\r\n            dosage: '10-15g',\r\n            timing: ['intra-workout', 'between-meals'],\r\n            benefits: ['Riduce catabolismo', 'Energia durante workout', 'Recovery'],\r\n            priority: 'optional',\r\n            cost: '€30/mese',\r\n            description: 'Aminoacidi ramificati per preservare massa muscolare durante workout',\r\n            instructions: '10g durante workout lunghi o tra i pasti'\r\n        },\r\n        'beta-alanine': {\r\n            name: 'Beta-Alanina',\r\n            category: 'performance',\r\n            icon: '🔥',\r\n            dosage: '3-5g',\r\n            timing: ['pre-workout'],\r\n            benefits: ['Resistenza muscolare', 'Riduce fatica', 'Performance'],\r\n            priority: 'optional',\r\n            cost: '€18/mese',\r\n            description: 'Aumenta capacità di buffer muscolare per allenamenti intensi',\r\n            instructions: '3g 30min pre-workout, possibile formicolio normale'\r\n        },\r\n        'magnesium': {\r\n            name: 'Magnesio Glicinato',\r\n            category: 'recovery',\r\n            icon: '😴',\r\n            dosage: '200-400mg',\r\n            timing: ['evening'],\r\n            benefits: ['Rilassamento muscolare', 'Sonno', 'Recovery'],\r\n            priority: 'important',\r\n            cost: '€15/mese',\r\n            description: 'Supporta rilassamento muscolare e qualità del sonno',\r\n            instructions: '200-300mg la sera prima di dormire'\r\n        },\r\n        'caffeine': {\r\n            name: 'Caffeina Anidra',\r\n            category: 'performance',\r\n            icon: '☕',\r\n            dosage: '100-200mg',\r\n            timing: ['pre-workout'],\r\n            benefits: ['Energia', 'Focus', 'Performance'],\r\n            priority: 'optional',\r\n            cost: '€10/mese',\r\n            description: 'Stimolante per energia e focus durante allenamenti intensi',\r\n            instructions: '100-200mg 30-45min pre-workout, non oltre le 16:00'\r\n        },\r\n        'zinc': {\r\n            name: 'Zinco + Rame',\r\n            category: 'health',\r\n            icon: '⚡',\r\n            dosage: '15-30mg',\r\n            timing: ['evening'],\r\n            benefits: ['Testosterone', 'Sistema immunitario', 'Recovery'],\r\n            priority: 'important',\r\n            cost: '€12/mese',\r\n            description: 'Supporta produzione ormonale e sistema immunitario',\r\n            instructions: '15mg la sera a stomaco vuoto con rame 1-2mg'\r\n        }\r\n    };\r\n\r\n    const categories = {\r\n        all: { name: 'Tutti', icon: '🔮', color: '#00ffff' },\r\n        protein: { name: 'Proteine', icon: '💪', color: '#ff9500' },\r\n        performance: { name: 'Performance', icon: '⚡', color: '#ff6b6b' },\r\n        health: { name: 'Salute', icon: '🌟', color: '#4ecdc4' },\r\n        recovery: { name: 'Recovery', icon: '😴', color: '#a8e6cf' }\r\n    };\r\n\r\n    const timingLabels = {\r\n        'breakfast': '🌅 Colazione',\r\n        'pre-workout': '🏋️ Pre-Workout',\r\n        'intra-workout': '💪 Intra-Workout',\r\n        'post-workout': '🔥 Post-Workout',\r\n        'meals': '🍽️ Ai pasti',\r\n        'snack': '🥤 Snack',\r\n        'evening': '🌙 Sera',\r\n        'between-meals': '⏰ Tra pasti'\r\n    };\r\n\r\n    const toggleSupplement = (suppId) => {\r\n        const today = new Date().toDateString();\r\n        const key = `${today}-${suppId}`;\r\n        \r\n        const newTaken = {\r\n            ...takenToday,\r\n            [key]: !takenToday[key]\r\n        };\r\n        \r\n        setTakenToday(newTaken);\r\n        localStorage.setItem('supplementsTaken', JSON.stringify(newTaken));\r\n    };\r\n\r\n    const isSupplementTaken = (suppId) => {\r\n        const today = new Date().toDateString();\r\n        return takenToday[`${today}-${suppId}`] || false;\r\n    };\r\n\r\n    const addToStack = (suppId) => {\r\n        if (!currentStack.includes(suppId)) {\r\n            const newStack = [...currentStack, suppId];\r\n            setCurrentStack(newStack);\r\n            localStorage.setItem('currentStack', JSON.stringify(newStack));\r\n        }\r\n    };\r\n\r\n    const removeFromStack = (suppId) => {\r\n        const newStack = currentStack.filter(id => id !== suppId);\r\n        setCurrentStack(newStack);\r\n        localStorage.setItem('currentStack', JSON.stringify(newStack));\r\n    };\r\n\r\n    const getCompletionRate = () => {\r\n        const today = new Date().toDateString();\r\n        const stackSupplements = currentStack.length;\r\n        const takenCount = currentStack.filter(suppId => \r\n            takenToday[`${today}-${suppId}`]\r\n        ).length;\r\n        return stackSupplements > 0 ? Math.round((takenCount / stackSupplements) * 100) : 0;\r\n    };\r\n\r\n    const getFilteredSupplements = () => {\r\n        return Object.entries(supplements).filter(([id, supp]) => \r\n            selectedCategory === 'all' || supp.category === selectedCategory\r\n        );\r\n    };\r\n\r\n    const getTotalMonthlyCost = () => {\r\n        return currentStack.reduce((total, suppId) => {\r\n            const cost = supplements[suppId]?.cost || '€0/mese';\r\n            const amount = parseInt(cost.replace('€', '').replace('/mese', ''));\r\n            return total + amount;\r\n        }, 0);\r\n    };\r\n\r\n    return (\r\n        <div className=\"supplements-premium\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"supplements-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-title\">\r\n                    <h1>💊 SUPPLEMENT STACK PRO</h1>\r\n                    <p className=\"subtitle\">Gestione intelligente degli integratori</p>\r\n                </div>\r\n\r\n                <div className=\"completion-badge\">\r\n                    <div className=\"completion-circle\">\r\n                        <span className=\"completion-percentage\">{getCompletionRate()}%</span>\r\n                    </div>\r\n                    <div className=\"completion-label\">Oggi</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK STATS */}\r\n            <div className=\"stack-overview\">\r\n                <div className=\"overview-card\">\r\n                    <div className=\"card-icon\">📦</div>\r\n                    <div className=\"card-data\">\r\n                        <span className=\"card-value\">{currentStack.length}</span>\r\n                        <span className=\"card-label\">Nel tuo stack</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"overview-card\">\r\n                    <div className=\"card-icon\">✅</div>\r\n                    <div className=\"card-data\">\r\n                        <span className=\"card-value\">{currentStack.filter(id => isSupplementTaken(id)).length}</span>\r\n                        <span className=\"card-label\">Assunti oggi</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"overview-card\">\r\n                    <div className=\"card-icon\">💰</div>\r\n                    <div className=\"card-data\">\r\n                        <span className=\"card-value\">€{getTotalMonthlyCost()}</span>\r\n                        <span className=\"card-label\">Costo mensile</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* CURRENT STACK */}\r\n            <div className=\"current-stack-section\">\r\n                <h2>🔥 IL TUO STACK ATTUALE</h2>\r\n                <div className=\"stack-grid\">\r\n                    {currentStack.map(suppId => {\r\n                        const supplement = supplements[suppId];\r\n                        if (!supplement) return null;\r\n                        \r\n                        return (\r\n                            <div \r\n                                key={suppId}\r\n                                className={`stack-card ${isSupplementTaken(suppId) ? 'taken' : ''}`}\r\n                            >\r\n                                <div className=\"stack-card-header\">\r\n                                    <div className=\"stack-info\">\r\n                                        <span className=\"stack-icon\">{supplement.icon}</span>\r\n                                        <div className=\"stack-details\">\r\n                                            <h4>{supplement.name}</h4>\r\n                                            <span className=\"stack-dosage\">{supplement.dosage}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <button\r\n                                        className={`take-button ${isSupplementTaken(suppId) ? 'taken' : ''}`}\r\n                                        onClick={() => toggleSupplement(suppId)}\r\n                                    >\r\n                                        {isSupplementTaken(suppId) ? '✅' : '⭕'}\r\n                                    </button>\r\n                                </div>\r\n                                \r\n                                <div className=\"stack-timing\">\r\n                                    {supplement.timing.map(time => (\r\n                                        <span key={time} className=\"timing-tag\">\r\n                                            {timingLabels[time]}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                                \r\n                                <div className=\"stack-actions\">\r\n                                    <span className=\"stack-cost\">{supplement.cost}</span>\r\n                                    <button\r\n                                        className=\"remove-button\"\r\n                                        onClick={() => removeFromStack(suppId)}\r\n                                        title=\"Rimuovi dallo stack\"\r\n                                    >\r\n                                        🗑️\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            {/* CATEGORY FILTER */}\r\n            <div className=\"category-filter\">\r\n                <h2>🔍 ESPLORA SUPPLEMENTI</h2>\r\n                <div className=\"filter-buttons\">\r\n                    {Object.entries(categories).map(([key, category]) => (\r\n                        <button\r\n                            key={key}\r\n                            className={`filter-btn ${selectedCategory === key ? 'active' : ''}`}\r\n                            onClick={() => setSelectedCategory(key)}\r\n                            style={{ '--category-color': category.color }}\r\n                        >\r\n                            <span className=\"filter-icon\">{category.icon}</span>\r\n                            <span className=\"filter-name\">{category.name}</span>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* SUPPLEMENTS CATALOG */}\r\n            <div className=\"supplements-catalog\">\r\n                <div className=\"catalog-grid\">\r\n                    {getFilteredSupplements().map(([suppId, supplement]) => {\r\n                        const inStack = currentStack.includes(suppId);\r\n                        \r\n                        return (\r\n                            <div key={suppId} className={`supplement-card ${supplement.priority}`}>\r\n                                <div className=\"supplement-header\">\r\n                                    <div className=\"supplement-main\">\r\n                                        <span className=\"supplement-icon\">{supplement.icon}</span>\r\n                                        <div className=\"supplement-info\">\r\n                                            <h3>{supplement.name}</h3>\r\n                                            <span className=\"supplement-category\">\r\n                                                {categories[supplement.category].name}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"supplement-priority\">\r\n                                        {supplement.priority === 'essential' && <span className=\"priority-badge essential\">Essential</span>}\r\n                                        {supplement.priority === 'important' && <span className=\"priority-badge important\">Important</span>}\r\n                                        {supplement.priority === 'optional' && <span className=\"priority-badge optional\">Optional</span>}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-description\">\r\n                                    <p>{supplement.description}</p>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-details\">\r\n                                    <div className=\"detail-row\">\r\n                                        <span className=\"detail-label\">💊 Dosaggio:</span>\r\n                                        <span className=\"detail-value\">{supplement.dosage}</span>\r\n                                    </div>\r\n                                    <div className=\"detail-row\">\r\n                                        <span className=\"detail-label\">💰 Costo:</span>\r\n                                        <span className=\"detail-value\">{supplement.cost}</span>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-benefits\">\r\n                                    <h4>Benefici:</h4>\r\n                                    <div className=\"benefits-tags\">\r\n                                        {supplement.benefits.map((benefit, index) => (\r\n                                            <span key={index} className=\"benefit-tag\">\r\n                                                {benefit}\r\n                                            </span>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-timing\">\r\n                                    <h4>Quando assumere:</h4>\r\n                                    <div className=\"timing-tags\">\r\n                                        {supplement.timing.map(time => (\r\n                                            <span key={time} className=\"timing-tag\">\r\n                                                {timingLabels[time]}\r\n                                            </span>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-instructions\">\r\n                                    <p><strong>Istruzioni:</strong> {supplement.instructions}</p>\r\n                                </div>\r\n\r\n                                <div className=\"supplement-actions\">\r\n                                    {inStack ? (\r\n                                        <button\r\n                                            className=\"action-button remove\"\r\n                                            onClick={() => removeFromStack(suppId)}\r\n                                        >\r\n                                            ❌ Rimuovi dal Stack\r\n                                        </button>\r\n                                    ) : (\r\n                                        <button\r\n                                            className=\"action-button add\"\r\n                                            onClick={() => addToStack(suppId)}\r\n                                        >\r\n                                            ➕ Aggiungi al Stack\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            {/* TIMING GUIDE */}\r\n            <div className=\"timing-guide\">\r\n                <h2>⏰ GUIDA AI TIMING</h2>\r\n                <div className=\"timing-schedule\">\r\n                    <div className=\"time-slot\">\r\n                        <h3>🌅 Mattino (7:00-9:00)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('breakfast'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"time-slot\">\r\n                        <h3>🏋️ Pre-Workout (30-45min prima)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('pre-workout'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"time-slot\">\r\n                        <h3>🔥 Post-Workout (0-30min dopo)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('post-workout'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"time-slot\">\r\n                        <h3>🌙 Sera (prima di dormire)</h3>\r\n                        <div className=\"time-supplements\">\r\n                            {Object.entries(supplements)\r\n                                .filter(([id, supp]) => currentStack.includes(id) && supp.timing.includes('evening'))\r\n                                .map(([id, supp]) => (\r\n                                    <span key={id} className=\"time-supp\">{supp.icon} {supp.name}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK ACTIONS */}\r\n            <div className=\"supplements-actions\">\r\n                <button \r\n                    className=\"action-button reset\"\r\n                    onClick={() => {\r\n                        setTakenToday({});\r\n                        localStorage.removeItem('supplementsTaken');\r\n                    }}\r\n                >\r\n                    🔄 Reset Giorno\r\n                </button>\r\n                <button \r\n                    className=\"action-button clear\"\r\n                    onClick={() => {\r\n                        setCurrentStack([]);\r\n                        localStorage.removeItem('currentStack');\r\n                    }}\r\n                >\r\n                    🗑️ Svuota Stack\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Supplements;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Recovery = () => {\r\n    const navigate = useNavigate();\r\n    const [activeSession, setActiveSession] = useState(null);\r\n    const [sessionHistory, setSessionHistory] = useState(() => {\r\n        const saved = localStorage.getItem('recoveryHistory');\r\n        return saved ? JSON.parse(saved) : [];\r\n    });\r\n    const [currentTimer, setCurrentTimer] = useState(0);\r\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n    const [selectedProtocol, setSelectedProtocol] = useState('sauna');\r\n\r\n    // PROTOCOLLI RECOVERY PROFESSIONALI\r\n    const recoveryProtocols = {\r\n        'sauna': {\r\n            name: 'Sauna Finlandese',\r\n            icon: '🔥',\r\n            category: 'heat',\r\n            temperature: '80-90°C',\r\n            duration: '15-20 min',\r\n            benefits: ['Vasodilatazione', 'Rilascio endorfine', 'Detox', 'Riduce stress'],\r\n            difficulty: 'facile',\r\n            equipment: 'Sauna',\r\n            calories: 150,\r\n            description: 'Terapia del calore per rilassamento profondo e recupero muscolare',\r\n            instructions: [\r\n                'Riscalda la sauna a 80-90°C',\r\n                'Entra con asciugamano pulito',\r\n                'Siediti rilassato per 15-20 minuti',\r\n                'Bevi acqua frequentemente',\r\n                'Doccia fredda finale per shock termico'\r\n            ],\r\n            contraindications: ['Problemi cardiaci', 'Pressione alta', 'Gravidanza']\r\n        },\r\n        'ice-bath': {\r\n            name: 'Ice Bath (Crioterapia)',\r\n            icon: '🧊',\r\n            category: 'cold',\r\n            temperature: '10-15°C',\r\n            duration: '3-5 min',\r\n            benefits: ['Riduce infiammazione', 'Accelera recovery', 'Migliora circolazione'],\r\n            difficulty: 'difficile',\r\n            equipment: 'Vasca + ghiaccio',\r\n            calories: 50,\r\n            description: 'Immersione in acqua fredda per ridurre infiammazione e accelerare il recupero',\r\n            instructions: [\r\n                'Riempie vasca con acqua 10-15°C',\r\n                'Respirazione controllata prima di entrare',\r\n                'Immersione graduale fino al petto',\r\n                'Rimani calmo per 3-5 minuti',\r\n                'Uscita graduale e riscaldamento naturale'\r\n            ],\r\n            contraindications: ['Problemi circolatori', 'Ipotermia', 'Ferite aperte']\r\n        },\r\n        'contrast-shower': {\r\n            name: 'Doccia Contrastante',\r\n            icon: '🚿',\r\n            category: 'contrast',\r\n            temperature: '40°C / 15°C',\r\n            duration: '10-15 min',\r\n            benefits: ['Migliora circolazione', 'Energizza', 'Recovery veloce'],\r\n            difficulty: 'medio',\r\n            equipment: 'Doccia',\r\n            calories: 30,\r\n            description: 'Alternanza di acqua calda e fredda per stimolare la circolazione',\r\n            instructions: [\r\n                '3 min acqua calda (40°C)',\r\n                '30 sec acqua fredda (15°C)',\r\n                'Ripeti il ciclo 3-4 volte',\r\n                'Termina sempre con acqua fredda',\r\n                'Asciugatura energica con asciugamano'\r\n            ],\r\n            contraindications: ['Pressione alta instabile']\r\n        },\r\n        'massage': {\r\n            name: 'Massaggio Sportivo',\r\n            icon: '🙌',\r\n            category: 'manual',\r\n            temperature: 'Ambiente',\r\n            duration: '30-60 min',\r\n            benefits: ['Riduce tensione', 'Migliora flessibilità', 'Rilassamento profondo'],\r\n            difficulty: 'facile',\r\n            equipment: 'Olio da massaggio',\r\n            calories: 0,\r\n            description: 'Manipolazione manuale dei tessuti molli per rilassamento muscolare',\r\n            instructions: [\r\n                'Usa olio da massaggio di qualità',\r\n                'Movimenti lenti e profondi',\r\n                'Concentrati su aree tense',\r\n                'Pressione gradualmente crescente',\r\n                'Termina con movimenti rilassanti'\r\n            ],\r\n            contraindications: ['Lesioni acute', 'Infiammazioni acute']\r\n        },\r\n        'stretching': {\r\n            name: 'Stretching Profondo',\r\n            icon: '🤸',\r\n            category: 'movement',\r\n            temperature: 'Ambiente',\r\n            duration: '20-30 min',\r\n            benefits: ['Aumenta flessibilità', 'Riduce tensione', 'Migliora mobilità'],\r\n            difficulty: 'facile',\r\n            equipment: 'Tappetino yoga',\r\n            calories: 80,\r\n            description: 'Allungamento muscolare per migliorare flessibilità e ridurre tensioni',\r\n            instructions: [\r\n                'Riscaldamento leggero 5 minuti',\r\n                'Stretching statico 30 sec per gruppo muscolare',\r\n                'Respirazione profonda durante allungamento',\r\n                'Non forzare mai il movimento',\r\n                'Rilassamento finale 5 minuti'\r\n            ],\r\n            contraindications: ['Lesioni muscolari acute']\r\n        },\r\n        'meditation': {\r\n            name: 'Meditazione Mindfulness',\r\n            icon: '🧘',\r\n            category: 'mental',\r\n            temperature: 'Ambiente',\r\n            duration: '10-20 min',\r\n            benefits: ['Riduce stress', 'Migliora focus', 'Equilibrio mentale'],\r\n            difficulty: 'medio',\r\n            equipment: 'Silenzio',\r\n            calories: 0,\r\n            description: 'Pratica di consapevolezza per recupero mentale e riduzione dello stress',\r\n            instructions: [\r\n                'Trova posizione comoda e silenziosa',\r\n                'Chiudi gli occhi e respira naturalmente',\r\n                'Concentrati sul respiro',\r\n                'Osserva pensieri senza giudicare',\r\n                'Ritorna al respiro quando ti distrai'\r\n            ],\r\n            contraindications: ['Disturbi psichiatrici gravi']\r\n        },\r\n        'foam-rolling': {\r\n            name: 'Foam Rolling',\r\n            icon: '🌊',\r\n            category: 'self-massage',\r\n            temperature: 'Ambiente',\r\n            duration: '15-25 min',\r\n            benefits: ['Rilascia trigger points', 'Migliora mobilità', 'Self-massage'],\r\n            difficulty: 'facile',\r\n            equipment: 'Foam roller',\r\n            calories: 60,\r\n            description: 'Auto-massaggio con rullo per rilasciare tensioni e trigger points',\r\n            instructions: [\r\n                'Inizia con pressione leggera',\r\n                'Rotola lentamente ogni gruppo muscolare',\r\n                'Fermati sui punti dolorosi 30-60 sec',\r\n                'Mantieni respirazione regolare',\r\n                'Termina con movimenti rilassanti'\r\n            ],\r\n            contraindications: ['Lesioni acute', 'Osteoporosi severa']\r\n        },\r\n        'yoga': {\r\n            name: 'Yoga Restorative',\r\n            icon: '🕉️',\r\n            category: 'movement',\r\n            temperature: 'Ambiente',\r\n            duration: '30-45 min',\r\n            benefits: ['Flessibilità', 'Equilibrio', 'Rilassamento profondo'],\r\n            difficulty: 'medio',\r\n            equipment: 'Tappetino yoga',\r\n            calories: 120,\r\n            description: 'Pratica yoga dolce focalizzata sul recupero e rilassamento',\r\n            instructions: [\r\n                'Inizia con respirazione profonda',\r\n                'Posizioni dolci e sostenute',\r\n                'Mantieni ogni asana 1-3 minuti',\r\n                'Focus sul rilascio delle tensioni',\r\n                'Chiudi con Savasana 10 minuti'\r\n            ],\r\n            contraindications: ['Lesioni spinali acute']\r\n        }\r\n    };\r\n\r\n    // TIMER LOGIC\r\n    useEffect(() => {\r\n        let interval;\r\n        if (isTimerRunning) {\r\n            interval = setInterval(() => {\r\n                setCurrentTimer(prev => prev + 1);\r\n            }, 1000);\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isTimerRunning]);\r\n\r\n    const startSession = (protocolId) => {\r\n        setActiveSession(protocolId);\r\n        setSelectedProtocol(protocolId);\r\n        setCurrentTimer(0);\r\n        setIsTimerRunning(true);\r\n    };\r\n\r\n    const endSession = () => {\r\n        if (activeSession) {\r\n            const session = {\r\n                id: Date.now().toString(),\r\n                protocol: activeSession,\r\n                duration: currentTimer,\r\n                date: new Date().toISOString(),\r\n                quality: null // Verrà impostato dopo\r\n            };\r\n            \r\n            const newHistory = [session, ...sessionHistory.slice(0, 19)]; // Max 20 sessioni\r\n            setSessionHistory(newHistory);\r\n            localStorage.setItem('recoveryHistory', JSON.stringify(newHistory));\r\n        }\r\n        \r\n        setActiveSession(null);\r\n        setIsTimerRunning(false);\r\n        setCurrentTimer(0);\r\n    };\r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    const getSessionStats = () => {\r\n        const thisWeek = sessionHistory.filter(session => {\r\n            const sessionDate = new Date(session.date);\r\n            const weekAgo = new Date();\r\n            weekAgo.setDate(weekAgo.getDate() - 7);\r\n            return sessionDate >= weekAgo;\r\n        });\r\n\r\n        const totalDuration = sessionHistory.reduce((sum, session) => sum + session.duration, 0);\r\n        const avgDuration = sessionHistory.length > 0 ? Math.round(totalDuration / sessionHistory.length) : 0;\r\n\r\n        return {\r\n            totalSessions: sessionHistory.length,\r\n            thisWeek: thisWeek.length,\r\n            avgDuration: Math.floor(avgDuration / 60),\r\n            totalHours: Math.floor(totalDuration / 3600)\r\n        };\r\n    };\r\n\r\n    const stats = getSessionStats();\r\n\r\n    const categories = {\r\n        heat: { name: 'Calore', icon: '🔥', color: '#ff6b6b' },\r\n        cold: { name: 'Freddo', icon: '🧊', color: '#4ecdc4' },\r\n        contrast: { name: 'Contrasto', icon: '🌊', color: '#45b7d1' },\r\n        manual: { name: 'Manuale', icon: '🙌', color: '#f7b267' },\r\n        movement: { name: 'Movimento', icon: '🤸', color: '#a8e6cf' },\r\n        mental: { name: 'Mentale', icon: '🧘', color: '#dcc7e8' },\r\n        'self-massage': { name: 'Auto-massaggio', icon: '🌊', color: '#ffd93d' }\r\n    };\r\n\r\n    return (\r\n        <div className=\"recovery-luxury\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"recovery-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-title\">\r\n                    <h1>🛌 RECOVERY CENTER PRO</h1>\r\n                    <p className=\"subtitle\">Centro benessere digitale per il recupero ottimale</p>\r\n                </div>\r\n\r\n                <div className=\"recovery-streak\">\r\n                    <div className=\"streak-number\">{stats.thisWeek}</div>\r\n                    <div className=\"streak-label\">Questa Settimana</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* TIMER SESSIONE ATTIVA */}\r\n            {activeSession && (\r\n                <div className=\"active-session-timer\">\r\n                    <div className=\"timer-container\">\r\n                        <div className=\"timer-protocol\">\r\n                            <span className=\"timer-icon\">{recoveryProtocols[activeSession].icon}</span>\r\n                            <div className=\"timer-info\">\r\n                                <h3>{recoveryProtocols[activeSession].name}</h3>\r\n                                <span className=\"timer-duration\">Durata consigliata: {recoveryProtocols[activeSession].duration}</span>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"timer-display\">\r\n                            <span className=\"timer-time\">{formatTime(currentTimer)}</span>\r\n                        </div>\r\n\r\n                        <div className=\"timer-controls\">\r\n                            <button \r\n                                className=\"timer-btn pause\"\r\n                                onClick={() => setIsTimerRunning(!isTimerRunning)}\r\n                            >\r\n                                {isTimerRunning ? '⏸️' : '▶️'}\r\n                            </button>\r\n                            <button \r\n                                className=\"timer-btn stop\"\r\n                                onClick={endSession}\r\n                            >\r\n                                🛑 Fine Sessione\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"session-progress\">\r\n                        <div className=\"progress-info\">\r\n                            <span>Temperatura: {recoveryProtocols[activeSession].temperature}</span>\r\n                            <span>Calorie bruciate: ~{Math.round((currentTimer / 60) * (recoveryProtocols[activeSession].calories / 60))}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* STATISTICS OVERVIEW */}\r\n            <div className=\"recovery-stats\">\r\n                <div className=\"stat-card primary\">\r\n                    <div className=\"stat-icon\">📊</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.totalSessions}</span>\r\n                        <span className=\"stat-label\">Sessioni Totali</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card success\">\r\n                    <div className=\"stat-icon\">⏱️</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.avgDuration}min</span>\r\n                        <span className=\"stat-label\">Durata Media</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card info\">\r\n                    <div className=\"stat-icon\">🕐</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.totalHours}h</span>\r\n                        <span className=\"stat-label\">Ore Totali</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-card warning\">\r\n                    <div className=\"stat-icon\">🔥</div>\r\n                    <div className=\"stat-data\">\r\n                        <span className=\"stat-value\">{stats.thisWeek}</span>\r\n                        <span className=\"stat-label\">Questa Settimana</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PROTOCOLLI RECOVERY */}\r\n            <div className=\"protocols-section\">\r\n                <h2>🎯 PROTOCOLLI PROFESSIONALI</h2>\r\n                \r\n                <div className=\"protocols-grid\">\r\n                    {Object.entries(recoveryProtocols).map(([id, protocol]) => (\r\n                        <div key={id} className={`protocol-card ${protocol.difficulty}`}>\r\n                            <div className=\"protocol-header\">\r\n                                <div className=\"protocol-main\">\r\n                                    <span className=\"protocol-icon\">{protocol.icon}</span>\r\n                                    <div className=\"protocol-info\">\r\n                                        <h3>{protocol.name}</h3>\r\n                                        <span className=\"protocol-category\">\r\n                                            {categories[protocol.category]?.name}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"protocol-difficulty\">\r\n                                    <span className={`difficulty-badge ${protocol.difficulty}`}>\r\n                                        {protocol.difficulty}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-description\">\r\n                                <p>{protocol.description}</p>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-details\">\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">🌡️ Temperatura:</span>\r\n                                    <span className=\"detail-value\">{protocol.temperature}</span>\r\n                                </div>\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">⏱️ Durata:</span>\r\n                                    <span className=\"detail-value\">{protocol.duration}</span>\r\n                                </div>\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">🔥 Calorie:</span>\r\n                                    <span className=\"detail-value\">~{protocol.calories}/sessione</span>\r\n                                </div>\r\n                                <div className=\"detail-row\">\r\n                                    <span className=\"detail-label\">🛠️ Equipment:</span>\r\n                                    <span className=\"detail-value\">{protocol.equipment}</span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-benefits\">\r\n                                <h4>💎 Benefici:</h4>\r\n                                <div className=\"benefits-tags\">\r\n                                    {protocol.benefits.map((benefit, index) => (\r\n                                        <span key={index} className=\"benefit-tag\">\r\n                                            {benefit}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"protocol-instructions\">\r\n                                <h4>📋 Istruzioni:</h4>\r\n                                <ol className=\"instructions-list\">\r\n                                    {protocol.instructions.map((instruction, index) => (\r\n                                        <li key={index}>{instruction}</li>\r\n                                    ))}\r\n                                </ol>\r\n                            </div>\r\n\r\n                            {protocol.contraindications.length > 0 && (\r\n                                <div className=\"protocol-warnings\">\r\n                                    <h4>⚠️ Controindicazioni:</h4>\r\n                                    <ul className=\"warnings-list\">\r\n                                        {protocol.contraindications.map((warning, index) => (\r\n                                            <li key={index}>{warning}</li>\r\n                                        ))}\r\n                                    </ul>\r\n                                </div>\r\n                            )}\r\n\r\n                            <div className=\"protocol-action\">\r\n                                <button\r\n                                    className={`protocol-btn ${activeSession === id ? 'active' : ''}`}\r\n                                    onClick={() => activeSession === id ? endSession() : startSession(id)}\r\n                                    disabled={activeSession && activeSession !== id}\r\n                                >\r\n                                    {activeSession === id ? '🛑 Ferma Sessione' : '▶️ Inizia Sessione'}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* HISTORY SESSIONI */}\r\n            {sessionHistory.length > 0 && (\r\n                <div className=\"recovery-history\">\r\n                    <h2>📈 CRONOLOGIA SESSIONI</h2>\r\n                    <div className=\"history-list\">\r\n                        {sessionHistory.slice(0, 10).map((session) => {\r\n                            const protocol = recoveryProtocols[session.protocol];\r\n                            const sessionDate = new Date(session.date);\r\n                            \r\n                            return (\r\n                                <div key={session.id} className=\"history-item\">\r\n                                    <div className=\"history-protocol\">\r\n                                        <span className=\"history-icon\">{protocol.icon}</span>\r\n                                        <div className=\"history-info\">\r\n                                            <h4>{protocol.name}</h4>\r\n                                            <span className=\"history-date\">\r\n                                                {sessionDate.toLocaleDateString('it-IT')} - {sessionDate.toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' })}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"history-stats\">\r\n                                        <span className=\"history-duration\">{formatTime(session.duration)}</span>\r\n                                        <span className=\"history-calories\">\r\n                                            ~{Math.round((session.duration / 60) * (protocol.calories / 60))} cal\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    \r\n                    {sessionHistory.length > 10 && (\r\n                        <button className=\"show-more-btn\">\r\n                            Mostra altre {sessionHistory.length - 10} sessioni\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            )}\r\n\r\n            {/* RECOVERY TIPS */}\r\n            <div className=\"recovery-tips\">\r\n                <h2>💡 CONSIGLI PROFESSIONALI</h2>\r\n                <div className=\"tips-grid\">\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">🌡️</div>\r\n                        <h4>Contrasto Termico</h4>\r\n                        <p>Alterna calore e freddo per massimizzare la circolazione e accelerare il recupero muscolare.</p>\r\n                    </div>\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">💧</div>\r\n                        <h4>Idratazione</h4>\r\n                        <p>Bevi acqua abbondante durante e dopo ogni sessione per mantenere l'equilibrio idro-salino.</p>\r\n                    </div>\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">⏰</div>\r\n                        <h4>Timing Ottimale</h4>\r\n                        <p>Le sessioni di recovery sono più efficaci entro 2-6 ore dopo l'allenamento intenso.</p>\r\n                    </div>\r\n                    <div className=\"tip-card\">\r\n                        <div className=\"tip-icon\">🎯</div>\r\n                        <h4>Consistenza</h4>\r\n                        <p>3-4 sessioni settimanali regolari sono più efficaci di sessioni sporadiche intense.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recovery;","import React from 'react';\r\n\r\nconst Progress = () => {\r\n    const [progressData, setProgressData] = React.useState([]);\r\n    const [newEntry, setNewEntry] = React.useState({\r\n        weight: '',\r\n        bodyFat: '',\r\n        muscleMass: '',\r\n        chest: '',\r\n        arms: '',\r\n        waist: '',\r\n        thighs: '',\r\n        notes: ''\r\n    });\r\n    const [timeStats, setTimeStats] = React.useState({\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        monthlyTime: 0,\r\n        sessionsCompleted: 0\r\n    });\r\n    \r\n    const loadProgressData = () => {\r\n        const saved = localStorage.getItem('progressData');\r\n        if (saved) {\r\n            setProgressData(JSON.parse(saved));\r\n        }\r\n        \r\n        const savedTimeStats = localStorage.getItem('timeStats');\r\n        if (savedTimeStats) {\r\n            setTimeStats(JSON.parse(savedTimeStats));\r\n        }\r\n    };\r\n    \r\n    const saveProgressData = (data) => {\r\n        localStorage.setItem('progressData', JSON.stringify(data));\r\n    };\r\n    \r\n    const addEntry = () => {\r\n        if (!newEntry.weight) return;\r\n        \r\n        const entry = {\r\n            ...newEntry,\r\n            date: new Date().toISOString().split('T')[0],\r\n            id: Date.now()\r\n        };\r\n        \r\n        const updated = [entry, ...progressData];\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n        \r\n        setNewEntry({\r\n            weight: '',\r\n            bodyFat: '',\r\n            muscleMass: '',\r\n            chest: '',\r\n            arms: '',\r\n            waist: '',\r\n            thighs: '',\r\n            notes: ''\r\n        });\r\n    };\r\n    \r\n    const deleteEntry = (id) => {\r\n        const updated = progressData.filter(entry => entry.id !== id);\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadProgressData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"progress-container\">\r\n            <h2>🎯 Progress Tracker Avanzato</h2>\r\n            \r\n            <div className=\"time-stats\">\r\n                <h3>📊 Statistiche Tempo Investito</h3>\r\n                <div className=\"stats-grid\">\r\n                    <div className=\"stat-card\">\r\n                        <h4>Tempo Totale</h4>\r\n                        <p>{formatTime(timeStats.totalWorkoutTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questa Settimana</h4>\r\n                        <p>{formatTime(timeStats.weeklyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questo Mese</h4>\r\n                        <p>{formatTime(timeStats.monthlyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Sessioni Completate</h4>\r\n                        <p>{timeStats.sessionsCompleted}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"add-entry-form\">\r\n                <h3>➕ Aggiungi Nuove Misurazioni</h3>\r\n                <div className=\"form-grid\">\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Peso (kg)\"\r\n                        value={newEntry.weight}\r\n                        onChange={(e) => setNewEntry({...newEntry, weight: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Grassa (%)\"\r\n                        value={newEntry.bodyFat}\r\n                        onChange={(e) => setNewEntry({...newEntry, bodyFat: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Muscolare (kg)\"\r\n                        value={newEntry.muscleMass}\r\n                        onChange={(e) => setNewEntry({...newEntry, muscleMass: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Petto (cm)\"\r\n                        value={newEntry.chest}\r\n                        onChange={(e) => setNewEntry({...newEntry, chest: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Braccia (cm)\"\r\n                        value={newEntry.arms}\r\n                        onChange={(e) => setNewEntry({...newEntry, arms: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Vita (cm)\"\r\n                        value={newEntry.waist}\r\n                        onChange={(e) => setNewEntry({...newEntry, waist: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Cosce (cm)\"\r\n                        value={newEntry.thighs}\r\n                        onChange={(e) => setNewEntry({...newEntry, thighs: e.target.value})}\r\n                    />\r\n                    <textarea\r\n                        placeholder=\"Note (sensazioni, obiettivi, etc.)\"\r\n                        value={newEntry.notes}\r\n                        onChange={(e) => setNewEntry({...newEntry, notes: e.target.value})}\r\n                    />\r\n                </div>\r\n                <button className=\"button\" onClick={addEntry}>Aggiungi Misurazione</button>\r\n            </div>\r\n            \r\n            <div className=\"progress-table\">\r\n                <h3>📈 Storico Progressi</h3>\r\n                {progressData.length === 0 ? (\r\n                    <p>Nessuna misurazione ancora. Inizia ad aggiungere i tuoi progressi!</p>\r\n                ) : (\r\n                    <div className=\"table-responsive\">\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Data</th>\r\n                                    <th>Peso</th>\r\n                                    <th>Grasso</th>\r\n                                    <th>Muscolo</th>\r\n                                    <th>Petto</th>\r\n                                    <th>Braccia</th>\r\n                                    <th>Vita</th>\r\n                                    <th>Cosce</th>\r\n                                    <th>Note</th>\r\n                                    <th>Azioni</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {progressData.map((entry) => (\r\n                                    <tr key={entry.id}>\r\n                                        <td>{entry.date}</td>\r\n                                        <td>{entry.weight} kg</td>\r\n                                        <td>{entry.bodyFat}%</td>\r\n                                        <td>{entry.muscleMass} kg</td>\r\n                                        <td>{entry.chest} cm</td>\r\n                                        <td>{entry.arms} cm</td>\r\n                                        <td>{entry.waist} cm</td>\r\n                                        <td>{entry.thighs} cm</td>\r\n                                        <td className=\"notes-cell\">{entry.notes}</td>\r\n                                        <td>\r\n                                            <button \r\n                                                className=\"delete-btn\"\r\n                                                onClick={() => deleteEntry(entry.id)}\r\n                                            >\r\n                                                🗑️\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Progress;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { dataManager } from '../utils/dataManager';\r\n\r\nconst Measurements = () => {\r\n    const navigate = useNavigate();\r\n    const [measurements, setMeasurements] = useState([]);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [formData, setFormData] = useState({\r\n        weight: '',\r\n        height: '',\r\n        bodyFat: '',\r\n        muscleMass: '',\r\n        waist: '',\r\n        chest: '',\r\n        arms: '',\r\n        thighs: '',\r\n        notes: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        loadMeasurements();\r\n    }, []);\r\n\r\n    const loadMeasurements = () => {\r\n        const savedMeasurements = dataManager.getMeasurements();\r\n        setMeasurements(savedMeasurements);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (!formData.weight) {\r\n            alert('Inserisci almeno il peso!');\r\n            return;\r\n        }\r\n\r\n        const measurementData = {\r\n            weight: parseFloat(formData.weight),\r\n            height: formData.height ? parseFloat(formData.height) : null,\r\n            bodyFat: formData.bodyFat ? parseFloat(formData.bodyFat) : null,\r\n            muscleMass: formData.muscleMass ? parseFloat(formData.muscleMass) : null,\r\n            waist: formData.waist ? parseFloat(formData.waist) : null,\r\n            chest: formData.chest ? parseFloat(formData.chest) : null,\r\n            arms: formData.arms ? parseFloat(formData.arms) : null,\r\n            thighs: formData.thighs ? parseFloat(formData.thighs) : null,\r\n            notes: formData.notes\r\n        };\r\n\r\n        dataManager.saveMeasurement(measurementData);\r\n        \r\n        // Reset form\r\n        setFormData({\r\n            weight: '',\r\n            height: '',\r\n            bodyFat: '',\r\n            muscleMass: '',\r\n            waist: '',\r\n            chest: '',\r\n            arms: '',\r\n            thighs: '',\r\n            notes: ''\r\n        });\r\n        \r\n        setShowForm(false);\r\n        loadMeasurements();\r\n        \r\n        alert('Misurazione salvata con successo!');\r\n    };\r\n\r\n    const getProgressChange = (current, previous, unit = 'kg') => {\r\n        if (!previous) return { change: 0, trend: 'stable' };\r\n        const change = current - previous;\r\n        const trend = change > 0 ? 'up' : change < 0 ? 'down' : 'stable';\r\n        return { change: Math.abs(change).toFixed(1) + unit, trend };\r\n    };\r\n\r\n    const getLatestMeasurement = () => measurements[0] || null;\r\n    const getPreviousMeasurement = () => measurements[1] || null;\r\n\r\n    const latest = getLatestMeasurement();\r\n    const previous = getPreviousMeasurement();\r\n\r\n    return (\r\n        <div className=\"measurements-container\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"measurements-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-content\">\r\n                    <h1>📏 MISURAZIONI CORPOREE</h1>\r\n                    <p className=\"subtitle\">Traccia i tuoi progressi fisici nel tempo</p>\r\n                </div>\r\n\r\n                <button \r\n                    className=\"add-measurement-btn\"\r\n                    onClick={() => setShowForm(true)}\r\n                    style={{\r\n                        background: '#ff9500',\r\n                        color: 'white',\r\n                        padding: '12px 24px',\r\n                        borderRadius: '8px',\r\n                        border: 'none',\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    ➕ Nuova Misurazione\r\n                </button>\r\n            </div>\r\n\r\n            {/* FORM NUOVA MISURAZIONE */}\r\n            {showForm && (\r\n                <div className=\"measurement-form-overlay\">\r\n                    <div className=\"measurement-form\">\r\n                        <div className=\"form-header\">\r\n                            <h3>📊 Nuova Misurazione</h3>\r\n                            <button onClick={() => setShowForm(false)}>✕</button>\r\n                        </div>\r\n                        \r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"form-grid\">\r\n                                <div className=\"form-group\">\r\n                                    <label>🏋️ Peso (kg) *</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.1\"\r\n                                        value={formData.weight}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, weight: e.target.value}))}\r\n                                        placeholder=\"es. 75.5\"\r\n                                        required\r\n                                        style={{ background: '#ff9500', color: 'white' }}\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>📏 Altezza (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        value={formData.height}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, height: e.target.value}))}\r\n                                        placeholder=\"es. 175\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>📊 Grasso Corporeo (%)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.1\"\r\n                                        value={formData.bodyFat}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, bodyFat: e.target.value}))}\r\n                                        placeholder=\"es. 12.5\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>💪 Massa Muscolare (kg)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.1\"\r\n                                        value={formData.muscleMass}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, muscleMass: e.target.value}))}\r\n                                        placeholder=\"es. 35.2\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>⚖️ Girovita (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        value={formData.waist}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, waist: e.target.value}))}\r\n                                        placeholder=\"es. 82\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>🫁 Petto (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        value={formData.chest}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, chest: e.target.value}))}\r\n                                        placeholder=\"es. 105\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>💪 Braccia (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        value={formData.arms}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, arms: e.target.value}))}\r\n                                        placeholder=\"es. 38\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <label>🦵 Cosce (cm)</label>\r\n                                    <input \r\n                                        type=\"number\"\r\n                                        step=\"0.5\"\r\n                                        value={formData.thighs}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, thighs: e.target.value}))}\r\n                                        placeholder=\"es. 58\"\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group full-width\">\r\n                                    <label>📝 Note</label>\r\n                                    <textarea \r\n                                        value={formData.notes}\r\n                                        onChange={(e) => setFormData(prev => ({...prev, notes: e.target.value}))}\r\n                                        placeholder=\"Condizioni, sensazioni, obiettivi...\"\r\n                                        rows=\"3\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"form-actions\">\r\n                                <button type=\"button\" onClick={() => setShowForm(false)}>\r\n                                    Annulla\r\n                                </button>\r\n                                <button type=\"submit\" style={{ background: '#22c55e', color: 'white' }}>\r\n                                    ✅ Salva Misurazione\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* STATISTICHE CURRENT */}\r\n            {latest && (\r\n                <div className=\"current-stats\">\r\n                    <h3>📊 Stato Attuale</h3>\r\n                    <div className=\"stats-grid\">\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-icon\">🏋️</div>\r\n                            <div className=\"stat-info\">\r\n                                <span className=\"stat-value\">{latest.weight}kg</span>\r\n                                <span className=\"stat-label\">Peso</span>\r\n                                {previous && (\r\n                                    <span className={`stat-change ${getProgressChange(latest.weight, previous.weight).trend}`}>\r\n                                        {getProgressChange(latest.weight, previous.weight).trend === 'up' ? '↗' : \r\n                                         getProgressChange(latest.weight, previous.weight).trend === 'down' ? '↘' : '→'} \r\n                                        {getProgressChange(latest.weight, previous.weight).change}\r\n                                    </span>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {latest.bodyFat && (\r\n                            <div className=\"stat-card\">\r\n                                <div className=\"stat-icon\">📊</div>\r\n                                <div className=\"stat-info\">\r\n                                    <span className=\"stat-value\">{latest.bodyFat}%</span>\r\n                                    <span className=\"stat-label\">Grasso</span>\r\n                                    {previous?.bodyFat && (\r\n                                        <span className={`stat-change ${getProgressChange(latest.bodyFat, previous.bodyFat, '%').trend}`}>\r\n                                            {getProgressChange(latest.bodyFat, previous.bodyFat, '%').trend === 'down' ? '↘' : '↗'} \r\n                                            {getProgressChange(latest.bodyFat, previous.bodyFat, '%').change}\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {latest.muscleMass && (\r\n                            <div className=\"stat-card\">\r\n                                <div className=\"stat-icon\">💪</div>\r\n                                <div className=\"stat-info\">\r\n                                    <span className=\"stat-value\">{latest.muscleMass}kg</span>\r\n                                    <span className=\"stat-label\">Muscoli</span>\r\n                                    {previous?.muscleMass && (\r\n                                        <span className={`stat-change ${getProgressChange(latest.muscleMass, previous.muscleMass).trend}`}>\r\n                                            {getProgressChange(latest.muscleMass, previous.muscleMass).trend === 'up' ? '↗' : '↘'} \r\n                                            {getProgressChange(latest.muscleMass, previous.muscleMass).change}\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {latest.waist && (\r\n                            <div className=\"stat-card\">\r\n                                <div className=\"stat-icon\">⚖️</div>\r\n                                <div className=\"stat-info\">\r\n                                    <span className=\"stat-value\">{latest.waist}cm</span>\r\n                                    <span className=\"stat-label\">Girovita</span>\r\n                                    {previous?.waist && (\r\n                                        <span className={`stat-change ${getProgressChange(latest.waist, previous.waist, 'cm').trend}`}>\r\n                                            {getProgressChange(latest.waist, previous.waist, 'cm').trend === 'down' ? '↘' : '↗'} \r\n                                            {getProgressChange(latest.waist, previous.waist, 'cm').change}\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* STORICO MISURAZIONI */}\r\n            <div className=\"measurements-history\">\r\n                <h3>📈 Storico Misurazioni</h3>\r\n                {measurements.length > 0 ? (\r\n                    <div className=\"measurements-list\">\r\n                        {measurements.map((measurement, index) => (\r\n                            <div key={measurement.id} className=\"measurement-item\">\r\n                                <div className=\"measurement-date\">\r\n                                    {new Date(measurement.date).toLocaleDateString('it-IT', {\r\n                                        day: 'numeric',\r\n                                        month: 'long',\r\n                                        year: 'numeric'\r\n                                    })}\r\n                                </div>\r\n                                \r\n                                <div className=\"measurement-data\">\r\n                                    <div className=\"data-group\">\r\n                                        <span className=\"data-label\">Peso:</span>\r\n                                        <span className=\"data-value\">{measurement.weight}kg</span>\r\n                                    </div>\r\n                                    \r\n                                    {measurement.bodyFat && (\r\n                                        <div className=\"data-group\">\r\n                                            <span className=\"data-label\">Grasso:</span>\r\n                                            <span className=\"data-value\">{measurement.bodyFat}%</span>\r\n                                        </div>\r\n                                    )}\r\n                                    \r\n                                    {measurement.muscleMass && (\r\n                                        <div className=\"data-group\">\r\n                                            <span className=\"data-label\">Muscoli:</span>\r\n                                            <span className=\"data-value\">{measurement.muscleMass}kg</span>\r\n                                        </div>\r\n                                    )}\r\n                                    \r\n                                    {measurement.waist && (\r\n                                        <div className=\"data-group\">\r\n                                            <span className=\"data-label\">Girovita:</span>\r\n                                            <span className=\"data-value\">{measurement.waist}cm</span>\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    {measurement.notes && (\r\n                                        <div className=\"measurement-notes\">\r\n                                            <strong>Note:</strong> {measurement.notes}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"no-measurements\">\r\n                        <h4>📏 Nessuna Misurazione</h4>\r\n                        <p>Inizia a tracciare i tuoi progressi fisici!</p>\r\n                        <button \r\n                            onClick={() => setShowForm(true)}\r\n                            className=\"start-measuring-btn\"\r\n                        >\r\n                            📊 Inizia a Misurare\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* COLLEGAMENTO AD ANALYTICS */}\r\n            <div className=\"analytics-link\" style={{\r\n                padding: '20px',\r\n                background: 'rgba(0, 255, 255, 0.1)',\r\n                borderRadius: '10px',\r\n                textAlign: 'center',\r\n                marginTop: '20px'\r\n            }}>\r\n                <h3 style={{ color: '#00ffff' }}>📊 Visualizza i Progressi</h3>\r\n                <p>Le tue misurazioni alimentano gli analytics in tempo reale!</p>\r\n                <button \r\n                    onClick={() => navigate('/analytics')}\r\n                    style={{\r\n                        background: '#00ffff',\r\n                        color: 'black',\r\n                        padding: '12px 24px',\r\n                        borderRadius: '8px',\r\n                        border: 'none',\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    🚀 Vai agli Analytics\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Measurements;","// Firebase Configuration - GitHub Pages Compatible\r\n// Configurazione inline per GitHub Pages (non supporta variabili .env a runtime)\r\n\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, connectAuthEmulator } from 'firebase/auth';\r\nimport { getFirestore, connectFirestoreEmulator, enableNetwork, disableNetwork } from 'firebase/firestore';\r\nimport { getStorage, connectStorageEmulator } from 'firebase/storage';\r\nimport { getAnalytics, isSupported } from 'firebase/analytics';\r\n\r\n// Configurazione Firebase - DEMO/LOCALE\r\nconst firebaseConfig = {\r\n    apiKey: \"demo-key\",\r\n    authDomain: \"demo-project.firebaseapp.com\",\r\n    projectId: \"demo-project\",\r\n    storageBucket: \"demo-project.appspot.com\",\r\n    messagingSenderId: \"123456789\",\r\n    appId: \"1:123456789:web:demo\",\r\n    measurementId: \"G-DEMO\"\r\n};\r\n\r\n\r\n// Inizializzazione app\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Inizializzazione servizi Firebase\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\nexport const storage = getStorage(app);\r\n\r\n// Inizializzazione Analytics condizionale\r\nlet analytics = null;\r\nisSupported().then(supported => {\r\n    if (supported) {\r\n        analytics = getAnalytics(app);\r\n        console.log('📊 Firebase Analytics inizializzato');\r\n    } else {\r\n        console.log('📊 Firebase Analytics non supportato in questo ambiente');\r\n    }\r\n});\r\n\r\nexport { analytics };\r\n\r\n// Configurazione ambiente sviluppo\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\nconst useEmulators = process.env.REACT_APP_USE_FIREBASE_EMULATORS === 'true';\r\n\r\nif (isDevelopment && useEmulators) {\r\n    console.log('🔧 Connessione agli emulatori Firebase...');\r\n    \r\n    // Connessione agli emulatori solo se non già connessi\r\n    if (!auth._delegate._config?.emulator) {\r\n        connectAuthEmulator(auth, 'http://localhost:9099');\r\n    }\r\n    \r\n    if (!db._delegate._databaseId?.database.includes('localhost')) {\r\n        connectFirestoreEmulator(db, 'localhost', 8080);\r\n    }\r\n    \r\n    if (!storage._delegate._host.includes('localhost')) {\r\n        connectStorageEmulator(storage, 'localhost', 9199);\r\n    }\r\n    \r\n    console.log('✅ Emulatori Firebase connessi');\r\n}\r\n\r\n// Utility per gestione connessione\r\nexport const connectionManager = {\r\n    enable: () => enableNetwork(db),\r\n    disable: () => disableNetwork(db),\r\n    \r\n    // Controlla stato connessione\r\n    checkConnection: async () => {\r\n        try {\r\n            await enableNetwork(db);\r\n            return true;\r\n        } catch (error) {\r\n            console.error('❌ Errore connessione Firebase:', error);\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\n// Configurazioni ottimizzate per performance\r\nexport const firestoreSettings = {\r\n    cacheSizeBytes: 50 * 1024 * 1024, // 50MB cache\r\n    experimentalForceLongPolling: false, // Usa WebSocket quando possibile\r\n    merge: true, // Abilita merge automatico\r\n    ignoreUndefinedProperties: true // Ignora proprietà undefined\r\n};\r\n\r\n// Helper per logging strutturato\r\nexport const logger = {\r\n    info: (message, data = null) => {\r\n        console.log(`ℹ️ [Firebase] ${message}`, data || '');\r\n    },\r\n    \r\n    error: (message, error = null) => {\r\n        console.error(`❌ [Firebase] ${message}`, error || '');\r\n    },\r\n    \r\n    warn: (message, data = null) => {\r\n        console.warn(`⚠️ [Firebase] ${message}`, data || '');\r\n    },\r\n    \r\n    success: (message, data = null) => {\r\n        console.log(`✅ [Firebase] ${message}`, data || '');\r\n    }\r\n};\r\n\r\n// Export dell'app per usi avanzati\r\nexport default app;\r\n\r\nlogger.success('Firebase configurato con successo');","// Firebase Authentication Service - Enterprise Grade\r\n// Gestione completa autenticazione con error handling avanzato\r\n\r\nimport { \r\n    signInWithEmailAndPassword,\r\n    createUserWithEmailAndPassword,\r\n    signInWithPopup,\r\n    GoogleAuthProvider,\r\n    signOut,\r\n    onAuthStateChanged,\r\n    sendPasswordResetEmail,\r\n    updateProfile,\r\n    updatePassword,\r\n    deleteUser,\r\n    reauthenticateWithCredential,\r\n    EmailAuthProvider\r\n} from 'firebase/auth';\r\n\r\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { auth, db, logger } from './config';\r\n\r\n// Provider Google configurato\r\nconst googleProvider = new GoogleAuthProvider();\r\ngoogleProvider.addScope('profile');\r\ngoogleProvider.addScope('email');\r\n\r\n// Classe per gestire l'autenticazione\r\nclass AuthService {\r\n    constructor() {\r\n        this.currentUser = null;\r\n        this.authStateListeners = [];\r\n        this.initializeAuthListener();\r\n    }\r\n\r\n    // Inizializza listener per cambio stato auth\r\n    initializeAuthListener() {\r\n        onAuthStateChanged(auth, (user) => {\r\n            this.currentUser = user;\r\n            this.notifyAuthStateListeners(user);\r\n            \r\n            if (user) {\r\n                logger.success('Utente autenticato', { \r\n                    uid: user.uid, \r\n                    email: user.email,\r\n                    displayName: user.displayName \r\n                });\r\n                this.updateUserLastSeen(user);\r\n            } else {\r\n                logger.info('Utente disconnesso');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Registra listener per cambio stato\r\n    onAuthStateChange(callback) {\r\n        this.authStateListeners.push(callback);\r\n        \r\n        // Rimuovi listener\r\n        return () => {\r\n            this.authStateListeners = this.authStateListeners.filter(cb => cb !== callback);\r\n        };\r\n    }\r\n\r\n    // Notifica tutti i listener del cambio stato\r\n    notifyAuthStateListeners(user) {\r\n        this.authStateListeners.forEach(callback => {\r\n            try {\r\n                callback(user);\r\n            } catch (error) {\r\n                logger.error('Errore nel listener auth state', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Login con email e password\r\n    async signInWithEmail(email, password) {\r\n        try {\r\n            logger.info('Tentativo login con email...');\r\n            \r\n            const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n            \r\n            await this.updateUserLastSeen(user);\r\n            logger.success('Login completato', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore login email', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Registrazione con email e password\r\n    async signUpWithEmail(email, password, displayName = null) {\r\n        try {\r\n            logger.info('Tentativo registrazione con email...');\r\n            \r\n            const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n            \r\n            // Aggiorna profilo se fornito displayName\r\n            if (displayName) {\r\n                await updateProfile(user, { displayName });\r\n            }\r\n            \r\n            // Crea documento utente in Firestore\r\n            await this.createUserDocument(user, { displayName });\r\n            \r\n            logger.success('Registrazione completata', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore registrazione email', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Login con Google\r\n    async signInWithGoogle() {\r\n        try {\r\n            logger.info('Tentativo login con Google...');\r\n            \r\n            const userCredential = await signInWithPopup(auth, googleProvider);\r\n            const user = userCredential.user;\r\n            \r\n            // Crea o aggiorna documento utente\r\n            await this.createUserDocument(user, {\r\n                displayName: user.displayName,\r\n                photoURL: user.photoURL,\r\n                provider: 'google'\r\n            });\r\n            \r\n            logger.success('Login Google completato', { uid: user.uid });\r\n            \r\n            return { success: true, user, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore login Google', error);\r\n            return { \r\n                success: false, \r\n                user: null, \r\n                error: this.handleAuthError(error) \r\n            };\r\n        }\r\n    }\r\n\r\n    // Logout\r\n    async signOutUser() {\r\n        try {\r\n            logger.info('Logout utente...');\r\n            await signOut(auth);\r\n            logger.success('Logout completato');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore logout', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Reset password\r\n    async resetPassword(email) {\r\n        try {\r\n            logger.info('Invio reset password...');\r\n            await sendPasswordResetEmail(auth, email);\r\n            logger.success('Email reset password inviata');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore reset password', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Aggiorna password (richiede riautenticazione recente)\r\n    async updateUserPassword(currentPassword, newPassword) {\r\n        try {\r\n            if (!this.currentUser) {\r\n                throw new Error('Nessun utente autenticato');\r\n            }\r\n\r\n            logger.info('Aggiornamento password...');\r\n            \r\n            // Riautentica utente\r\n            const credential = EmailAuthProvider.credential(\r\n                this.currentUser.email,\r\n                currentPassword\r\n            );\r\n            await reauthenticateWithCredential(this.currentUser, credential);\r\n            \r\n            // Aggiorna password\r\n            await updatePassword(this.currentUser, newPassword);\r\n            \r\n            logger.success('Password aggiornata');\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore aggiornamento password', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n\r\n    // Crea documento utente in Firestore\r\n    async createUserDocument(user, additionalData = {}) {\r\n        if (!user) return;\r\n        \r\n        try {\r\n            const userRef = doc(db, 'users', user.uid);\r\n            const userDoc = await getDoc(userRef);\r\n            \r\n            if (!userDoc.exists()) {\r\n                const userData = {\r\n                    uid: user.uid,\r\n                    email: user.email,\r\n                    displayName: user.displayName || additionalData.displayName || 'Utente',\r\n                    photoURL: user.photoURL || additionalData.photoURL || null,\r\n                    provider: additionalData.provider || 'email',\r\n                    createdAt: serverTimestamp(),\r\n                    lastSeen: serverTimestamp(),\r\n                    settings: {\r\n                        units: 'metric', // metric/imperial\r\n                        language: 'it',\r\n                        notifications: true,\r\n                        darkMode: false\r\n                    },\r\n                    profile: {\r\n                        age: null,\r\n                        height: null,\r\n                        activityLevel: 'moderate',\r\n                        goals: [],\r\n                        experience: 'beginner'\r\n                    },\r\n                    ...additionalData\r\n                };\r\n                \r\n                await setDoc(userRef, userData);\r\n                logger.success('Documento utente creato');\r\n            } else {\r\n                // Aggiorna solo lastSeen se utente esiste\r\n                await setDoc(userRef, { lastSeen: serverTimestamp() }, { merge: true });\r\n                logger.info('LastSeen aggiornato');\r\n            }\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore creazione documento utente', error);\r\n        }\r\n    }\r\n\r\n    // Aggiorna ultimo accesso\r\n    async updateUserLastSeen(user) {\r\n        if (!user) return;\r\n        \r\n        try {\r\n            const userRef = doc(db, 'users', user.uid);\r\n            await setDoc(userRef, { \r\n                lastSeen: serverTimestamp(),\r\n                isOnline: true \r\n            }, { merge: true });\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore aggiornamento lastSeen', error);\r\n        }\r\n    }\r\n\r\n    // Gestione errori Firebase Auth\r\n    handleAuthError(error) {\r\n        const errorMessages = {\r\n            'auth/user-not-found': 'Utente non trovato. Verifica l\\'email inserita.',\r\n            'auth/wrong-password': 'Password non corretta. Riprova.',\r\n            'auth/email-already-in-use': 'Email già registrata. Prova ad effettuare il login.',\r\n            'auth/weak-password': 'Password troppo debole. Usa almeno 6 caratteri.',\r\n            'auth/invalid-email': 'Email non valida. Verifica il formato.',\r\n            'auth/user-disabled': 'Account disabilitato. Contatta l\\'assistenza.',\r\n            'auth/too-many-requests': 'Troppi tentativi. Riprova più tardi.',\r\n            'auth/network-request-failed': 'Errore di connessione. Verifica la rete.',\r\n            'auth/popup-closed-by-user': 'Login annullato dall\\'utente.',\r\n            'auth/cancelled-popup-request': 'Popup già aperto. Completa il login.',\r\n            'auth/popup-blocked': 'Popup bloccato dal browser. Abilita i popup.',\r\n            'auth/requires-recent-login': 'Operazione sensibile. Effettua nuovamente il login.'\r\n        };\r\n\r\n        return {\r\n            code: error.code,\r\n            message: errorMessages[error.code] || error.message || 'Errore sconosciuto',\r\n            originalError: error\r\n        };\r\n    }\r\n\r\n    // Utility per controllo stato\r\n    isAuthenticated() {\r\n        return !!this.currentUser;\r\n    }\r\n\r\n    getCurrentUser() {\r\n        return this.currentUser;\r\n    }\r\n\r\n    // Elimina account (operazione irreversibile)\r\n    async deleteAccount(password = null) {\r\n        try {\r\n            if (!this.currentUser) {\r\n                throw new Error('Nessun utente autenticato');\r\n            }\r\n\r\n            logger.warn('Tentativo eliminazione account...');\r\n            \r\n            // Riautentica se password fornita\r\n            if (password) {\r\n                const credential = EmailAuthProvider.credential(\r\n                    this.currentUser.email,\r\n                    password\r\n                );\r\n                await reauthenticateWithCredential(this.currentUser, credential);\r\n            }\r\n            \r\n            const uid = this.currentUser.uid;\r\n            \r\n            // Elimina account\r\n            await deleteUser(this.currentUser);\r\n            \r\n            logger.warn('Account eliminato', { uid });\r\n            return { success: true, error: null };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore eliminazione account', error);\r\n            return { success: false, error: this.handleAuthError(error) };\r\n        }\r\n    }\r\n}\r\n\r\n// Instanza singleton del servizio\r\nconst authService = new AuthService();\r\n\r\nexport default authService;\r\n\r\n// Export delle funzioni principali per retrocompatibilità\r\nexport {\r\n    authService,\r\n    auth,\r\n    GoogleAuthProvider\r\n};","// Firestore Database Service - Enterprise Architecture\r\n// Gestione dati fitness con pattern Repository e caching intelligente\r\n\r\nimport {\r\n    collection,\r\n    doc,\r\n    getDocs,\r\n    getDoc,\r\n    setDoc,\r\n    addDoc,\r\n    updateDoc,\r\n    deleteDoc,\r\n    query,\r\n    where,\r\n    orderBy,\r\n    limit,\r\n    startAfter,\r\n    onSnapshot,\r\n    serverTimestamp,\r\n    increment,\r\n    arrayUnion,\r\n    arrayRemove,\r\n    writeBatch,\r\n    runTransaction\r\n} from 'firebase/firestore';\r\n\r\nimport { db, logger } from './config';\r\nimport authService from './auth';\r\n\r\n// Base Repository Class per operazioni CRUD standardizzate\r\nclass BaseRepository {\r\n    constructor(collectionName) {\r\n        this.collectionName = collectionName;\r\n        this.collectionRef = collection(db, collectionName);\r\n        this.cache = new Map(); // Cache locale per performance\r\n        this.listeners = new Map(); // Gestione listener real-time\r\n    }\r\n\r\n    // Ottieni documento per ID\r\n    async getById(id, useCache = true) {\r\n        try {\r\n            // Controlla cache prima\r\n            if (useCache && this.cache.has(id)) {\r\n                const cached = this.cache.get(id);\r\n                // Cache valida per 5 minuti\r\n                if (Date.now() - cached.timestamp < 5 * 60 * 1000) {\r\n                    logger.info(`Cache hit per ${this.collectionName}/${id}`);\r\n                    return { success: true, data: cached.data, fromCache: true };\r\n                }\r\n            }\r\n\r\n            const docRef = doc(db, this.collectionName, id);\r\n            const docSnap = await getDoc(docRef);\r\n            \r\n            if (docSnap.exists()) {\r\n                const data = { id: docSnap.id, ...docSnap.data() };\r\n                \r\n                // Aggiorna cache\r\n                if (useCache) {\r\n                    this.cache.set(id, { data, timestamp: Date.now() });\r\n                }\r\n                \r\n                return { success: true, data, fromCache: false };\r\n            } else {\r\n                return { success: false, error: 'Documento non trovato', data: null };\r\n            }\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore getById ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, data: null };\r\n        }\r\n    }\r\n\r\n    // Crea nuovo documento\r\n    async create(data, customId = null) {\r\n        try {\r\n            const userId = authService.getCurrentUser()?.uid;\r\n            if (!userId) {\r\n                throw new Error('Utente non autenticato');\r\n            }\r\n\r\n            const docData = {\r\n                ...data,\r\n                userId,\r\n                createdAt: serverTimestamp(),\r\n                updatedAt: serverTimestamp()\r\n            };\r\n\r\n            let docRef;\r\n            if (customId) {\r\n                docRef = doc(db, this.collectionName, customId);\r\n                await setDoc(docRef, docData);\r\n            } else {\r\n                docRef = await addDoc(this.collectionRef, docData);\r\n            }\r\n\r\n            const newId = customId || docRef.id;\r\n            \r\n            // Invalida cache\r\n            this.invalidateCache();\r\n            \r\n            logger.success(`Documento creato in ${this.collectionName}`, { id: newId });\r\n            return { success: true, id: newId, data: { id: newId, ...docData } };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore create ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, id: null };\r\n        }\r\n    }\r\n\r\n    // Aggiorna documento\r\n    async update(id, data, merge = true) {\r\n        try {\r\n            const docRef = doc(db, this.collectionName, id);\r\n            const updateData = {\r\n                ...data,\r\n                updatedAt: serverTimestamp()\r\n            };\r\n\r\n            if (merge) {\r\n                await updateDoc(docRef, updateData);\r\n            } else {\r\n                await setDoc(docRef, updateData);\r\n            }\r\n\r\n            // Invalida cache per questo documento\r\n            this.cache.delete(id);\r\n            \r\n            logger.success(`Documento aggiornato in ${this.collectionName}`, { id });\r\n            return { success: true, id };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore update ${this.collectionName}`, error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Elimina documento\r\n    async delete(id) {\r\n        try {\r\n            const docRef = doc(db, this.collectionName, id);\r\n            await deleteDoc(docRef);\r\n            \r\n            // Rimuovi da cache\r\n            this.cache.delete(id);\r\n            \r\n            logger.success(`Documento eliminato da ${this.collectionName}`, { id });\r\n            return { success: true };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore delete ${this.collectionName}`, error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Query personalizzata\r\n    async getWithQuery(queryConstraints = [], useCache = false) {\r\n        try {\r\n            const q = query(this.collectionRef, ...queryConstraints);\r\n            const querySnapshot = await getDocs(q);\r\n            \r\n            const docs = [];\r\n            querySnapshot.forEach((doc) => {\r\n                docs.push({ id: doc.id, ...doc.data() });\r\n            });\r\n            \r\n            return { success: true, data: docs, count: docs.length };\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore query ${this.collectionName}`, error);\r\n            return { success: false, error: error.message, data: [], count: 0 };\r\n        }\r\n    }\r\n\r\n    // Listener real-time\r\n    subscribeToChanges(queryConstraints = [], callback = () => {}) {\r\n        try {\r\n            const q = query(this.collectionRef, ...queryConstraints);\r\n            const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n                const docs = [];\r\n                querySnapshot.forEach((doc) => {\r\n                    docs.push({ id: doc.id, ...doc.data() });\r\n                });\r\n                callback(docs);\r\n            });\r\n\r\n            return unsubscribe;\r\n            \r\n        } catch (error) {\r\n            logger.error(`Errore subscription ${this.collectionName}`, error);\r\n            return () => {};\r\n        }\r\n    }\r\n\r\n    // Invalidazione cache\r\n    invalidateCache() {\r\n        this.cache.clear();\r\n        logger.info(`Cache invalidata per ${this.collectionName}`);\r\n    }\r\n}\r\n\r\n// Repository specializzato per Progress Data\r\nclass ProgressRepository extends BaseRepository {\r\n    constructor() {\r\n        super('progress');\r\n    }\r\n\r\n    // Ottieni progressi utente corrente\r\n    async getUserProgress(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Aggiungi misurazione\r\n    async addMeasurement(measurementData) {\r\n        const data = {\r\n            ...measurementData,\r\n            date: measurementData.date || new Date().toISOString().split('T')[0],\r\n            type: 'measurement'\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Ottieni statistiche periodo\r\n    async getPeriodStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserProgress(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (result.success && result.data.length > 0) {\r\n            const data = result.data;\r\n            const latest = data[0];\r\n            const oldest = data[data.length - 1];\r\n\r\n            return {\r\n                success: true,\r\n                stats: {\r\n                    totalEntries: data.length,\r\n                    weightChange: latest.weight - oldest.weight,\r\n                    muscleMassChange: latest.muscleMass - oldest.muscleMass,\r\n                    bodyFatChange: latest.bodyFat - oldest.bodyFat,\r\n                    averageWeight: data.reduce((sum, entry) => sum + (entry.weight || 0), 0) / data.length,\r\n                    period: { startDate, endDate, days }\r\n                }\r\n            };\r\n        }\r\n\r\n        return { success: false, error: 'Dati insufficienti per calcolare statistiche' };\r\n    }\r\n}\r\n\r\n// Repository per Workout Sessions\r\nclass WorkoutRepository extends BaseRepository {\r\n    constructor() {\r\n        super('workouts');\r\n    }\r\n\r\n    // Inizio sessione workout\r\n    async startSession(workoutData) {\r\n        const sessionData = {\r\n            ...workoutData,\r\n            status: 'in_progress',\r\n            startTime: serverTimestamp(),\r\n            exercises: workoutData.exercises || [],\r\n            totalDuration: 0\r\n        };\r\n        \r\n        return this.create(sessionData);\r\n    }\r\n\r\n    // Completa sessione\r\n    async completeSession(sessionId, completionData) {\r\n        const updateData = {\r\n            ...completionData,\r\n            status: 'completed',\r\n            endTime: serverTimestamp(),\r\n            completedAt: serverTimestamp()\r\n        };\r\n        \r\n        return this.update(sessionId, updateData);\r\n    }\r\n\r\n    // Ottieni sessioni utente\r\n    async getUserSessions(limit = 50) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            orderBy('createdAt', 'desc'),\r\n            limit(limit)\r\n        ]);\r\n    }\r\n\r\n    // Statistiche workout\r\n    async getWorkoutStats(days = 7) {\r\n        const sessions = await this.getUserSessions(100);\r\n        \r\n        if (!sessions.success) return sessions;\r\n\r\n        const now = new Date();\r\n        const weekAgo = new Date(now.getTime() - (days * 24 * 60 * 60 * 1000));\r\n        \r\n        const recentSessions = sessions.data.filter(session => {\r\n            const sessionDate = session.createdAt?.toDate?.() || new Date(session.createdAt);\r\n            return sessionDate >= weekAgo && session.status === 'completed';\r\n        });\r\n\r\n        const totalSessions = recentSessions.length;\r\n        const totalDuration = recentSessions.reduce((sum, session) => sum + (session.totalDuration || 0), 0);\r\n        const averageDuration = totalSessions > 0 ? totalDuration / totalSessions : 0;\r\n        \r\n        const exerciseStats = {};\r\n        recentSessions.forEach(session => {\r\n            session.exercises?.forEach(exercise => {\r\n                if (!exerciseStats[exercise.name]) {\r\n                    exerciseStats[exercise.name] = { count: 0, totalVolume: 0 };\r\n                }\r\n                exerciseStats[exercise.name].count++;\r\n                exerciseStats[exercise.name].totalVolume += (exercise.sets * exercise.reps * exercise.weight) || 0;\r\n            });\r\n        });\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalSessions,\r\n                totalDuration,\r\n                averageDuration,\r\n                exerciseStats,\r\n                period: { days, startDate: weekAgo, endDate: now }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Repository per Exercise Tracking\r\nclass ExerciseRepository extends BaseRepository {\r\n    constructor() {\r\n        super('exercises');\r\n    }\r\n\r\n    // Aggiungi esercizio completato\r\n    async logExercise(exerciseData) {\r\n        const data = {\r\n            ...exerciseData,\r\n            date: exerciseData.date || new Date().toISOString().split('T')[0],\r\n            volume: (exerciseData.sets * exerciseData.reps * exerciseData.weight) || 0,\r\n            oneRepMax: this.calculateOneRepMax(exerciseData.weight, exerciseData.reps)\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Calcola 1RM stimato (formula Epley)\r\n    calculateOneRepMax(weight, reps) {\r\n        if (!weight || !reps || reps <= 0) return 0;\r\n        if (reps === 1) return weight;\r\n        return Math.round(weight * (1 + reps / 30));\r\n    }\r\n\r\n    // Ottieni PR per esercizio\r\n    async getPersonalRecords(exerciseName = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('weight', 'desc')\r\n        ];\r\n\r\n        if (exerciseName) {\r\n            constraints.unshift(where('exerciseName', '==', exerciseName));\r\n        }\r\n\r\n        const result = await this.getWithQuery(constraints);\r\n        \r\n        if (result.success) {\r\n            // Raggruppa per esercizio e prendi il massimo\r\n            const prs = {};\r\n            result.data.forEach(exercise => {\r\n                const name = exercise.exerciseName;\r\n                if (!prs[name] || exercise.weight > prs[name].weight) {\r\n                    prs[name] = exercise;\r\n                }\r\n            });\r\n            \r\n            return { success: true, data: Object.values(prs) };\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n\r\n// Repository per User Settings\r\nclass UserRepository extends BaseRepository {\r\n    constructor() {\r\n        super('users');\r\n    }\r\n\r\n    // Ottieni profilo utente corrente\r\n    async getCurrentUserProfile() {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.getById(userId);\r\n    }\r\n\r\n    // Aggiorna impostazioni utente\r\n    async updateSettings(settings) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.update(userId, { settings }, true);\r\n    }\r\n\r\n    // Aggiorna profilo utente\r\n    async updateProfile(profileData) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n        \r\n        return this.update(userId, { profile: profileData }, true);\r\n    }\r\n}\r\n\r\n// Repository per Nutrition Tracking\r\nclass NutritionRepository extends BaseRepository {\r\n    constructor() {\r\n        super('nutrition');\r\n    }\r\n\r\n    // Registra pasto completato/saltato\r\n    async logMeal(mealData) {\r\n        const data = {\r\n            ...mealData,\r\n            date: mealData.date || new Date().toISOString().split('T')[0],\r\n            completedAt: mealData.status === 'completed' ? new Date() : null\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Aggiorna stato pasto\r\n    async updateMealStatus(mealId, status, notes = null) {\r\n        const updateData = {\r\n            status,\r\n            notes,\r\n            completedAt: status === 'completed' ? new Date() : null\r\n        };\r\n        \r\n        return this.update(mealId, updateData);\r\n    }\r\n\r\n    // Ottieni pasti utente per data/range\r\n    async getUserMeals(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Ottieni pasti per giorno specifico\r\n    async getDayMeals(date) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            where('date', '==', date),\r\n            orderBy('mealType', 'asc')\r\n        ]);\r\n    }\r\n\r\n    // Statistiche nutrizionali periodo\r\n    async getNutritionStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserMeals(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (!result.success) return result;\r\n\r\n        const meals = result.data;\r\n        const completedMeals = meals.filter(m => m.status === 'completed');\r\n        const totalMeals = meals.length;\r\n        const adherenceRate = totalMeals > 0 ? (completedMeals.length / totalMeals) * 100 : 0;\r\n\r\n        // Calcola proteine totali (se tracked)\r\n        const totalProteins = completedMeals.reduce((sum, meal) => sum + (meal.proteins || 0), 0);\r\n        const avgProteinsPerDay = days > 0 ? totalProteins / days : 0;\r\n\r\n        // Calcola streak\r\n        const streak = this.calculateNutritionStreak(meals);\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalMeals,\r\n                completedMeals: completedMeals.length,\r\n                adherenceRate: Math.round(adherenceRate),\r\n                totalProteins,\r\n                avgProteinsPerDay: Math.round(avgProteinsPerDay),\r\n                currentStreak: streak,\r\n                period: { startDate, endDate, days }\r\n            }\r\n        };\r\n    }\r\n\r\n    // Calcola streak nutrizionale\r\n    calculateNutritionStreak(meals) {\r\n        if (!meals.length) return 0;\r\n\r\n        // Raggruppa pasti per giorno\r\n        const mealsByDay = {};\r\n        meals.forEach(meal => {\r\n            if (!mealsByDay[meal.date]) {\r\n                mealsByDay[meal.date] = [];\r\n            }\r\n            mealsByDay[meal.date].push(meal);\r\n        });\r\n\r\n        // Calcola streak giorni consecutivi con adherence > 66%\r\n        let streak = 0;\r\n        const sortedDates = Object.keys(mealsByDay).sort().reverse();\r\n\r\n        for (const date of sortedDates) {\r\n            const dayMeals = mealsByDay[date];\r\n            const completedMeals = dayMeals.filter(m => m.status === 'completed');\r\n            const adherence = completedMeals.length / dayMeals.length;\r\n\r\n            if (adherence >= 0.66) { // Almeno 2/3 dei pasti completati\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return streak;\r\n    }\r\n}\r\n\r\n// Repository per Recovery Tracking\r\nclass RecoveryRepository extends BaseRepository {\r\n    constructor() {\r\n        super('recovery');\r\n    }\r\n\r\n    // Registra sessione recovery\r\n    async logRecoverySession(recoveryData) {\r\n        const data = {\r\n            ...recoveryData,\r\n            date: recoveryData.date || new Date().toISOString().split('T')[0],\r\n            completedAt: new Date()\r\n        };\r\n        \r\n        return this.create(data);\r\n    }\r\n\r\n    // Ottieni sessioni recovery utente\r\n    async getUserRecoverySessions(startDate = null, endDate = null) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        const constraints = [\r\n            where('userId', '==', userId),\r\n            orderBy('date', 'desc')\r\n        ];\r\n\r\n        if (startDate) {\r\n            constraints.push(where('date', '>=', startDate));\r\n        }\r\n\r\n        if (endDate) {\r\n            constraints.push(where('date', '<=', endDate));\r\n        }\r\n\r\n        return this.getWithQuery(constraints);\r\n    }\r\n\r\n    // Ottieni sessioni per giorno\r\n    async getDayRecoverySessions(date) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato', data: [] };\r\n\r\n        return this.getWithQuery([\r\n            where('userId', '==', userId),\r\n            where('date', '==', date),\r\n            orderBy('createdAt', 'desc')\r\n        ]);\r\n    }\r\n\r\n    // Statistiche recovery\r\n    async getRecoveryStats(days = 30) {\r\n        const userId = authService.getCurrentUser()?.uid;\r\n        if (!userId) return { success: false, error: 'Utente non autenticato' };\r\n\r\n        const endDate = new Date();\r\n        const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));\r\n\r\n        const result = await this.getUserRecoverySessions(\r\n            startDate.toISOString().split('T')[0],\r\n            endDate.toISOString().split('T')[0]\r\n        );\r\n\r\n        if (!result.success) return result;\r\n\r\n        const sessions = result.data;\r\n        const totalSessions = sessions.length;\r\n        const totalDuration = sessions.reduce((sum, s) => sum + (s.duration || 0), 0);\r\n        const avgDuration = totalSessions > 0 ? totalDuration / totalSessions : 0;\r\n\r\n        // Breakdown per tipo attività\r\n        const activityBreakdown = {};\r\n        sessions.forEach(session => {\r\n            const type = session.activityType;\r\n            if (!activityBreakdown[type]) {\r\n                activityBreakdown[type] = { count: 0, totalDuration: 0 };\r\n            }\r\n            activityBreakdown[type].count++;\r\n            activityBreakdown[type].totalDuration += session.duration || 0;\r\n        });\r\n\r\n        // Calcola frequenza settimanale\r\n        const weeksInPeriod = Math.ceil(days / 7);\r\n        const weeklyFrequency = totalSessions / weeksInPeriod;\r\n\r\n        return {\r\n            success: true,\r\n            stats: {\r\n                totalSessions,\r\n                totalDuration,\r\n                avgDuration: Math.round(avgDuration),\r\n                weeklyFrequency: Math.round(weeklyFrequency * 10) / 10,\r\n                activityBreakdown,\r\n                period: { startDate, endDate, days }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Istanze singleton dei repository\r\nexport const progressRepo = new ProgressRepository();\r\nexport const workoutRepo = new WorkoutRepository();\r\nexport const exerciseRepo = new ExerciseRepository();\r\nexport const userRepo = new UserRepository();\r\nexport const nutritionRepo = new NutritionRepository();\r\nexport const recoveryRepo = new RecoveryRepository();\r\n\r\n// Utility per operazioni batch\r\nexport const batchOperations = {\r\n    // Esegui multiple operazioni in una transazione\r\n    async executeTransaction(operations) {\r\n        try {\r\n            const result = await runTransaction(db, async (transaction) => {\r\n                const results = [];\r\n                \r\n                for (const operation of operations) {\r\n                    const { type, ref, data } = operation;\r\n                    \r\n                    switch (type) {\r\n                        case 'set':\r\n                            transaction.set(ref, data);\r\n                            break;\r\n                        case 'update':\r\n                            transaction.update(ref, data);\r\n                            break;\r\n                        case 'delete':\r\n                            transaction.delete(ref);\r\n                            break;\r\n                        default:\r\n                            throw new Error(`Operazione non supportata: ${type}`);\r\n                    }\r\n                    \r\n                    results.push({ success: true, operation: type });\r\n                }\r\n                \r\n                return results;\r\n            });\r\n            \r\n            logger.success('Transazione completata', { operations: result.length });\r\n            return { success: true, results: result };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore transazione batch', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    // Operazioni batch (fino a 500 operazioni)\r\n    async executeBatch(operations) {\r\n        try {\r\n            const batch = writeBatch(db);\r\n            \r\n            operations.forEach(operation => {\r\n                const { type, ref, data } = operation;\r\n                \r\n                switch (type) {\r\n                    case 'set':\r\n                        batch.set(ref, data);\r\n                        break;\r\n                    case 'update':\r\n                        batch.update(ref, data);\r\n                        break;\r\n                    case 'delete':\r\n                        batch.delete(ref);\r\n                        break;\r\n                    default:\r\n                        throw new Error(`Operazione non supportata: ${type}`);\r\n                }\r\n            });\r\n            \r\n            await batch.commit();\r\n            \r\n            logger.success('Batch completato', { operations: operations.length });\r\n            return { success: true, count: operations.length };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore batch operations', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n};\r\n\r\n// Export per retrocompatibilità\r\nexport default {\r\n    progressRepo,\r\n    workoutRepo,\r\n    exerciseRepo,\r\n    userRepo,\r\n    nutritionRepo,\r\n    recoveryRepo,\r\n    batchOperations\r\n};","// Data Migration Service - localStorage to Firestore\r\n// Sistema di migrazione intelligente con backup e rollback\r\n\r\nimport { progressRepo, workoutRepo, exerciseRepo, userRepo, batchOperations } from './firestore';\r\nimport authService from './auth';\r\nimport { logger } from './config';\r\n\r\nclass MigrationService {\r\n    constructor() {\r\n        this.migrationKey = 'firebase_migration_status';\r\n        this.backupKey = 'firebase_migration_backup';\r\n    }\r\n\r\n    // Controlla se la migrazione è già stata eseguita\r\n    isMigrationCompleted() {\r\n        try {\r\n            const status = localStorage.getItem(this.migrationKey);\r\n            return status === 'completed';\r\n        } catch (error) {\r\n            logger.error('Errore verifica migrazione', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Segna migrazione come completata\r\n    markMigrationCompleted() {\r\n        try {\r\n            const migrationData = {\r\n                status: 'completed',\r\n                timestamp: new Date().toISOString(),\r\n                version: '1.0.0'\r\n            };\r\n            localStorage.setItem(this.migrationKey, 'completed');\r\n            localStorage.setItem(`${this.migrationKey}_details`, JSON.stringify(migrationData));\r\n            logger.success('Migrazione marcata come completata');\r\n        } catch (error) {\r\n            logger.error('Errore marcamento migrazione', error);\r\n        }\r\n    }\r\n\r\n    // Crea backup completo dei dati localStorage\r\n    createBackup() {\r\n        try {\r\n            const backupData = {\r\n                timestamp: new Date().toISOString(),\r\n                data: {\r\n                    progressData: this.safeGetLocalStorage('progressData'),\r\n                    workoutSessions: this.safeGetLocalStorage('workoutSessions'),\r\n                    exerciseData: this.safeGetLocalStorage('exerciseData'),\r\n                    timeStats: this.safeGetLocalStorage('timeStats'),\r\n                    streakData: this.safeGetLocalStorage('streakData'),\r\n                    personalRecords: this.safeGetLocalStorage('personalRecords'),\r\n                    goals12Week: this.safeGetLocalStorage('goals12Week'),\r\n                    userSettings: this.safeGetLocalStorage('userSettings')\r\n                }\r\n            };\r\n\r\n            // Comprimi backup se troppo grande\r\n            const backupString = JSON.stringify(backupData);\r\n            if (backupString.length > 2 * 1024 * 1024) { // 2MB\r\n                logger.warn('Backup molto grande, compressione necessaria');\r\n                // In un'implementazione reale, potresti voler comprimere i dati\r\n            }\r\n\r\n            localStorage.setItem(this.backupKey, backupString);\r\n            logger.success('Backup creato', { size: `${Math.round(backupString.length / 1024)}KB` });\r\n            \r\n            return { success: true, backup: backupData };\r\n            \r\n        } catch (error) {\r\n            logger.error('Errore creazione backup', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Sicuro get da localStorage con fallback\r\n    safeGetLocalStorage(key) {\r\n        try {\r\n            const data = localStorage.getItem(key);\r\n            return data ? JSON.parse(data) : null;\r\n        } catch (error) {\r\n            logger.warn(`Errore parsing ${key}`, error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Migrazione completa con controlli e validazioni\r\n    async migrateAllData() {\r\n        if (!authService.isAuthenticated()) {\r\n            return { success: false, error: 'Utente non autenticato' };\r\n        }\r\n\r\n        if (this.isMigrationCompleted()) {\r\n            logger.info('Migrazione già completata');\r\n            return { success: true, message: 'Migrazione già completata' };\r\n        }\r\n\r\n        const migrationReport = {\r\n            startTime: new Date().toISOString(),\r\n            steps: [],\r\n            errors: [],\r\n            totalItems: 0,\r\n            migratedItems: 0\r\n        };\r\n\r\n        try {\r\n            logger.info('🚀 Inizio migrazione dati localStorage → Firestore');\r\n\r\n            // STEP 1: Crea backup\r\n            migrationReport.steps.push('Creazione backup...');\r\n            const backupResult = this.createBackup();\r\n            if (!backupResult.success) {\r\n                throw new Error(`Backup fallito: ${backupResult.error}`);\r\n            }\r\n\r\n            // STEP 2: Migra dati progress\r\n            migrationReport.steps.push('Migrazione dati progress...');\r\n            const progressResult = await this.migrateProgressData();\r\n            migrationReport.totalItems += progressResult.totalItems;\r\n            migrationReport.migratedItems += progressResult.migratedItems;\r\n            if (progressResult.errors.length > 0) {\r\n                migrationReport.errors.push(...progressResult.errors);\r\n            }\r\n\r\n            // STEP 3: Migra sessioni workout\r\n            migrationReport.steps.push('Migrazione sessioni workout...');\r\n            const workoutResult = await this.migrateWorkoutSessions();\r\n            migrationReport.totalItems += workoutResult.totalItems;\r\n            migrationReport.migratedItems += workoutResult.migratedItems;\r\n            if (workoutResult.errors.length > 0) {\r\n                migrationReport.errors.push(...workoutResult.errors);\r\n            }\r\n\r\n            // STEP 4: Migra dati esercizi\r\n            migrationReport.steps.push('Migrazione dati esercizi...');\r\n            const exerciseResult = await this.migrateExerciseData();\r\n            migrationReport.totalItems += exerciseResult.totalItems;\r\n            migrationReport.migratedItems += exerciseResult.migratedItems;\r\n            if (exerciseResult.errors.length > 0) {\r\n                migrationReport.errors.push(...exerciseResult.errors);\r\n            }\r\n\r\n            // STEP 5: Migra impostazioni utente\r\n            migrationReport.steps.push('Migrazione impostazioni utente...');\r\n            const userResult = await this.migrateUserSettings();\r\n            if (!userResult.success) {\r\n                migrationReport.errors.push(`Errore migrazione utente: ${userResult.error}`);\r\n            }\r\n\r\n            // STEP 6: Verifica integrità\r\n            migrationReport.steps.push('Verifica integrità dati...');\r\n            const verificationResult = await this.verifyMigration();\r\n            migrationReport.verificationPassed = verificationResult.success;\r\n\r\n            // STEP 7: Completa migrazione se tutto ok\r\n            if (migrationReport.errors.length === 0 && verificationResult.success) {\r\n                this.markMigrationCompleted();\r\n                migrationReport.steps.push('Migrazione completata con successo');\r\n                logger.success('✅ Migrazione completata', {\r\n                    totalItems: migrationReport.totalItems,\r\n                    migratedItems: migrationReport.migratedItems,\r\n                    duration: `${Date.now() - new Date(migrationReport.startTime).getTime()}ms`\r\n                });\r\n            } else {\r\n                logger.warn('⚠️ Migrazione completata con errori', {\r\n                    errors: migrationReport.errors.length,\r\n                    details: migrationReport.errors\r\n                });\r\n            }\r\n\r\n            migrationReport.endTime = new Date().toISOString();\r\n            migrationReport.success = migrationReport.errors.length === 0;\r\n\r\n            return { success: true, report: migrationReport };\r\n\r\n        } catch (error) {\r\n            migrationReport.endTime = new Date().toISOString();\r\n            migrationReport.success = false;\r\n            migrationReport.errors.push(`Errore fatale: ${error.message}`);\r\n            \r\n            logger.error('❌ Migrazione fallita', error);\r\n            return { success: false, error: error.message, report: migrationReport };\r\n        }\r\n    }\r\n\r\n    // Migrazione dati progress\r\n    async migrateProgressData() {\r\n        const progressData = this.safeGetLocalStorage('progressData') || [];\r\n        const result = { totalItems: progressData.length, migratedItems: 0, errors: [] };\r\n\r\n        if (progressData.length === 0) {\r\n            logger.info('Nessun dato progress da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${progressData.length} record progress...`);\r\n\r\n        for (const item of progressData) {\r\n            try {\r\n                // Validazione e pulizia dati\r\n                const cleanedData = this.cleanProgressData(item);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Dato progress non valido: ${JSON.stringify(item)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await progressRepo.addMeasurement(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Progress migrato: ${cleanedData.date}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione progress: ${createResult.error}`);\r\n                }\r\n\r\n                // Throttling per non sovraccaricare Firestore\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore progress item: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Progress migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione sessioni workout\r\n    async migrateWorkoutSessions() {\r\n        const workoutSessions = this.safeGetLocalStorage('workoutSessions') || [];\r\n        const result = { totalItems: workoutSessions.length, migratedItems: 0, errors: [] };\r\n\r\n        if (workoutSessions.length === 0) {\r\n            logger.info('Nessuna sessione workout da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${workoutSessions.length} sessioni workout...`);\r\n\r\n        for (const session of workoutSessions) {\r\n            try {\r\n                const cleanedData = this.cleanWorkoutSession(session);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Sessione workout non valida: ${JSON.stringify(session)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await workoutRepo.create(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Workout migrato: ${cleanedData.date}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione workout: ${createResult.error}`);\r\n                }\r\n\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore workout session: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Workout migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione dati esercizi\r\n    async migrateExerciseData() {\r\n        const exerciseData = this.safeGetLocalStorage('exerciseData') || {};\r\n        const exercises = Object.values(exerciseData);\r\n        const result = { totalItems: exercises.length, migratedItems: 0, errors: [] };\r\n\r\n        if (exercises.length === 0) {\r\n            logger.info('Nessun dato esercizio da migrare');\r\n            return result;\r\n        }\r\n\r\n        logger.info(`Migrazione ${exercises.length} record esercizi...`);\r\n\r\n        for (const exercise of exercises) {\r\n            try {\r\n                const cleanedData = this.cleanExerciseData(exercise);\r\n                if (!cleanedData) {\r\n                    result.errors.push(`Dato esercizio non valido: ${JSON.stringify(exercise)}`);\r\n                    continue;\r\n                }\r\n\r\n                const createResult = await exerciseRepo.logExercise(cleanedData);\r\n                if (createResult.success) {\r\n                    result.migratedItems++;\r\n                    logger.info(`Esercizio migrato: ${cleanedData.exerciseName}`);\r\n                } else {\r\n                    result.errors.push(`Errore migrazione esercizio: ${createResult.error}`);\r\n                }\r\n\r\n                await this.sleep(50);\r\n\r\n            } catch (error) {\r\n                result.errors.push(`Errore exercise item: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        logger.success(`Exercise migration: ${result.migratedItems}/${result.totalItems}`);\r\n        return result;\r\n    }\r\n\r\n    // Migrazione impostazioni utente\r\n    async migrateUserSettings() {\r\n        try {\r\n            const timeStats = this.safeGetLocalStorage('timeStats') || {};\r\n            const goals12Week = this.safeGetLocalStorage('goals12Week') || {};\r\n            const userSettings = this.safeGetLocalStorage('userSettings') || {};\r\n\r\n            const profileData = {\r\n                fitnessStats: timeStats,\r\n                goals: goals12Week,\r\n                preferences: userSettings,\r\n                migratedFrom: 'localStorage',\r\n                migrationDate: new Date().toISOString()\r\n            };\r\n\r\n            const updateResult = await userRepo.updateProfile(profileData);\r\n            if (updateResult.success) {\r\n                logger.success('Impostazioni utente migrate');\r\n                return { success: true };\r\n            } else {\r\n                return { success: false, error: updateResult.error };\r\n            }\r\n\r\n        } catch (error) {\r\n            logger.error('Errore migrazione impostazioni utente', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Pulizia e validazione dati progress\r\n    cleanProgressData(data) {\r\n        if (!data || typeof data !== 'object') return null;\r\n\r\n        const cleaned = {\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            weight: this.validateNumber(data.weight, 30, 300),\r\n            bodyFat: this.validateNumber(data.bodyFat, 1, 50),\r\n            muscleMass: this.validateNumber(data.muscleMass, 10, 150),\r\n            chest: this.validateNumber(data.chest, 50, 200),\r\n            arms: this.validateNumber(data.arms, 20, 100),\r\n            waist: this.validateNumber(data.waist, 50, 150),\r\n            thighs: this.validateNumber(data.thighs, 30, 100),\r\n            notes: this.validateString(data.notes, 1000)\r\n        };\r\n\r\n        // Rimuovi campi null/undefined\r\n        Object.keys(cleaned).forEach(key => {\r\n            if (cleaned[key] === null || cleaned[key] === undefined) {\r\n                delete cleaned[key];\r\n            }\r\n        });\r\n\r\n        // Deve avere almeno peso o data\r\n        return (cleaned.weight || cleaned.date) ? cleaned : null;\r\n    }\r\n\r\n    // Pulizia dati workout session\r\n    cleanWorkoutSession(data) {\r\n        if (!data || typeof data !== 'object') return null;\r\n\r\n        return {\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            name: this.validateString(data.name || data.workoutName, 100),\r\n            status: ['planned', 'in_progress', 'completed'].includes(data.status) ? data.status : 'completed',\r\n            totalDuration: this.validateNumber(data.totalDuration || data.duration, 0, 480),\r\n            exercises: Array.isArray(data.exercises) ? data.exercises : [],\r\n            notes: this.validateString(data.notes, 1000)\r\n        };\r\n    }\r\n\r\n    // Pulizia dati esercizio\r\n    cleanExerciseData(data) {\r\n        if (!data || typeof data !== 'object' || !data.exerciseName) return null;\r\n\r\n        return {\r\n            exerciseName: this.validateString(data.exerciseName, 100),\r\n            date: data.date || new Date().toISOString().split('T')[0],\r\n            sets: this.validateNumber(data.sets, 1, 20),\r\n            reps: this.validateNumber(data.reps, 1, 100),\r\n            weight: this.validateNumber(data.weight, 0, 1000),\r\n            rir: this.validateNumber(data.rir, 0, 10),\r\n            notes: this.validateString(data.notes, 500)\r\n        };\r\n    }\r\n\r\n    // Validazione numeri con range\r\n    validateNumber(value, min = 0, max = Number.MAX_SAFE_INTEGER) {\r\n        const num = parseFloat(value);\r\n        return (!isNaN(num) && num >= min && num <= max) ? num : null;\r\n    }\r\n\r\n    // Validazione stringhe con lunghezza massima\r\n    validateString(value, maxLength = 1000) {\r\n        if (typeof value !== 'string') return null;\r\n        return value.length <= maxLength ? value.trim() : value.substring(0, maxLength).trim();\r\n    }\r\n\r\n    // Verifica integrità post-migrazione\r\n    async verifyMigration() {\r\n        try {\r\n            logger.info('Verifica integrità dati migrati...');\r\n\r\n            // Controlla se i dati sono stati creati correttamente\r\n            const progressCheck = await progressRepo.getUserProgress();\r\n            const workoutCheck = await workoutRepo.getUserSessions(10);\r\n            const userCheck = await userRepo.getCurrentUserProfile();\r\n\r\n            const checks = {\r\n                progress: progressCheck.success,\r\n                workouts: workoutCheck.success,\r\n                userProfile: userCheck.success\r\n            };\r\n\r\n            const allPassed = Object.values(checks).every(check => check === true);\r\n\r\n            logger.info('Risultati verifica', checks);\r\n            \r\n            return { \r\n                success: allPassed, \r\n                checks,\r\n                details: {\r\n                    progressCount: progressCheck.data?.length || 0,\r\n                    workoutCount: workoutCheck.data?.length || 0,\r\n                    hasUserProfile: !!userCheck.data\r\n                }\r\n            };\r\n\r\n        } catch (error) {\r\n            logger.error('Errore verifica migrazione', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Rollback migrazione (ripristina da backup)\r\n    async rollbackMigration() {\r\n        try {\r\n            logger.warn('🔄 Inizio rollback migrazione...');\r\n\r\n            const backupData = localStorage.getItem(this.backupKey);\r\n            if (!backupData) {\r\n                throw new Error('Nessun backup disponibile per il rollback');\r\n            }\r\n\r\n            const backup = JSON.parse(backupData);\r\n            \r\n            // Ripristina tutti i dati localStorage dal backup\r\n            Object.keys(backup.data).forEach(key => {\r\n                if (backup.data[key] !== null) {\r\n                    localStorage.setItem(key, JSON.stringify(backup.data[key]));\r\n                }\r\n            });\r\n\r\n            // Rimuovi flag migrazione completata\r\n            localStorage.removeItem(this.migrationKey);\r\n            localStorage.removeItem(`${this.migrationKey}_details`);\r\n\r\n            logger.success('✅ Rollback completato');\r\n            return { success: true, message: 'Dati ripristinati da backup' };\r\n\r\n        } catch (error) {\r\n            logger.error('❌ Errore rollback', error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Utility per throttling\r\n    sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    // Ottieni stato migrazione dettagliato\r\n    getMigrationStatus() {\r\n        try {\r\n            const status = localStorage.getItem(this.migrationKey);\r\n            const details = localStorage.getItem(`${this.migrationKey}_details`);\r\n            \r\n            return {\r\n                isCompleted: status === 'completed',\r\n                status,\r\n                details: details ? JSON.parse(details) : null,\r\n                hasBackup: !!localStorage.getItem(this.backupKey)\r\n            };\r\n\r\n        } catch (error) {\r\n            logger.error('Errore stato migrazione', error);\r\n            return {\r\n                isCompleted: false,\r\n                status: 'unknown',\r\n                details: null,\r\n                hasBackup: false,\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n// Istanza singleton del servizio migrazione\r\nconst migrationService = new MigrationService();\r\n\r\nexport default migrationService;\r\nexport { MigrationService };","// AuthProvider - Context Provider per gestione autenticazione\r\n// Wrapper completo per gestire stato auth in tutta l'applicazione\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport authService from '../firebase/auth';\r\nimport migrationService from '../firebase/migration';\r\nimport { logger } from '../firebase/config';\r\n\r\n// Context per l'autenticazione\r\nconst AuthContext = createContext({});\r\n\r\n// Hook per utilizzare il context auth\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth deve essere utilizzato all\\'interno di AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\n// Provider componente principale\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [migrationStatus, setMigrationStatus] = useState({\r\n        isRequired: false,\r\n        inProgress: false,\r\n        completed: false\r\n    });\r\n\r\n    // Inizializza listener auth state\r\n    useEffect(() => {\r\n        logger.info('Inizializzazione AuthProvider...');\r\n\r\n        const unsubscribe = authService.onAuthStateChange(async (firebaseUser) => {\r\n            setLoading(true);\r\n            setError(null);\r\n\r\n            try {\r\n                if (firebaseUser) {\r\n                    logger.success('Utente autenticato', { \r\n                        uid: firebaseUser.uid, \r\n                        email: firebaseUser.email \r\n                    });\r\n                    \r\n                    setUser({\r\n                        uid: firebaseUser.uid,\r\n                        email: firebaseUser.email,\r\n                        displayName: firebaseUser.displayName,\r\n                        photoURL: firebaseUser.photoURL,\r\n                        emailVerified: firebaseUser.emailVerified,\r\n                        isAnonymous: firebaseUser.isAnonymous,\r\n                        createdAt: firebaseUser.metadata.creationTime,\r\n                        lastLoginAt: firebaseUser.metadata.lastSignInTime\r\n                    });\r\n\r\n                    // Controlla se serve migrazione dati\r\n                    await checkMigrationRequired();\r\n\r\n                } else {\r\n                    logger.info('Utente non autenticato');\r\n                    setUser(null);\r\n                    setMigrationStatus({\r\n                        isRequired: false,\r\n                        inProgress: false,\r\n                        completed: false\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                logger.error('Errore gestione auth state', error);\r\n                setError('Errore durante l\\'autenticazione. Riprova.');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        });\r\n\r\n        return unsubscribe;\r\n    }, []);\r\n\r\n    // Controlla se è necessaria la migrazione\r\n    const checkMigrationRequired = async () => {\r\n        try {\r\n            const migrationStatusData = migrationService.getMigrationStatus();\r\n            \r\n            // Controlla se ci sono dati localStorage da migrare\r\n            const hasLocalData = (\r\n                localStorage.getItem('progressData') ||\r\n                localStorage.getItem('workoutSessions') ||\r\n                localStorage.getItem('exerciseData')\r\n            );\r\n\r\n            const isRequired = hasLocalData && !migrationStatusData.isCompleted;\r\n\r\n            setMigrationStatus({\r\n                isRequired,\r\n                inProgress: false,\r\n                completed: migrationStatusData.isCompleted,\r\n                details: migrationStatusData\r\n            });\r\n\r\n            logger.info('Status migrazione controllato', { \r\n                isRequired, \r\n                hasLocalData,\r\n                completed: migrationStatusData.isCompleted \r\n            });\r\n\r\n        } catch (error) {\r\n            logger.error('Errore controllo migrazione', error);\r\n        }\r\n    };\r\n\r\n    // Funzioni di autenticazione con error handling\r\n\r\n    const login = async (email, password) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signInWithEmail(email, password);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Login completato');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il login. Riprova.';\r\n            logger.error('Errore login wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const register = async (email, password, displayName = null) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signUpWithEmail(email, password, displayName);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Registrazione completata');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante la registrazione. Riprova.';\r\n            logger.error('Errore registrazione wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const loginWithGoogle = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signInWithGoogle();\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Login Google completato');\r\n            return { success: true, user: result.user };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il login con Google. Riprova.';\r\n            logger.error('Errore Google login wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.signOutUser();\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Logout completato');\r\n            return { success: true };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore durante il logout. Riprova.';\r\n            logger.error('Errore logout wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const resetPassword = async (email) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const result = await authService.resetPassword(email);\r\n            \r\n            if (!result.success) {\r\n                setError(result.error.message);\r\n                return { success: false, error: result.error };\r\n            }\r\n\r\n            logger.success('Email reset password inviata');\r\n            return { success: true };\r\n\r\n        } catch (error) {\r\n            const errorMessage = 'Errore invio email reset. Riprova.';\r\n            logger.error('Errore reset password wrapper', error);\r\n            setError(errorMessage);\r\n            return { success: false, error: { message: errorMessage } };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Gestione migrazione dati\r\n    const startMigration = async () => {\r\n        if (!user || migrationStatus.inProgress) {\r\n            return { success: false, error: 'Migrazione non possibile al momento' };\r\n        }\r\n\r\n        setMigrationStatus(prev => ({ ...prev, inProgress: true }));\r\n\r\n        try {\r\n            logger.info('Avvio migrazione dati...');\r\n            const result = await migrationService.migrateAllData();\r\n\r\n            if (result.success) {\r\n                setMigrationStatus({\r\n                    isRequired: false,\r\n                    inProgress: false,\r\n                    completed: true,\r\n                    report: result.report\r\n                });\r\n                logger.success('Migrazione completata con successo');\r\n                return { success: true, report: result.report };\r\n            } else {\r\n                setMigrationStatus(prev => ({ ...prev, inProgress: false }));\r\n                setError('Errore durante la migrazione dati');\r\n                return { success: false, error: result.error, report: result.report };\r\n            }\r\n\r\n        } catch (error) {\r\n            logger.error('Errore migrazione wrapper', error);\r\n            setMigrationStatus(prev => ({ ...prev, inProgress: false }));\r\n            setError('Errore imprevisto durante la migrazione');\r\n            return { success: false, error: error.message };\r\n        }\r\n    };\r\n\r\n    const skipMigration = () => {\r\n        setMigrationStatus({\r\n            isRequired: false,\r\n            inProgress: false,\r\n            completed: false,\r\n            skipped: true\r\n        });\r\n        logger.info('Migrazione saltata dall\\'utente');\r\n    };\r\n\r\n    // Utility functions\r\n    const isAuthenticated = () => !!user;\r\n    \r\n    const hasRole = (role) => {\r\n        // Implementazione futura per ruoli utente\r\n        return user?.customClaims?.[role] || false;\r\n    };\r\n\r\n    const clearError = () => setError(null);\r\n\r\n    // Context value\r\n    const contextValue = {\r\n        // Stato auth\r\n        user,\r\n        loading,\r\n        error,\r\n        migrationStatus,\r\n\r\n        // Funzioni auth\r\n        login,\r\n        register,\r\n        loginWithGoogle,\r\n        logout,\r\n        resetPassword,\r\n\r\n        // Migrazione\r\n        startMigration,\r\n        skipMigration,\r\n\r\n        // Utility\r\n        isAuthenticated,\r\n        hasRole,\r\n        clearError,\r\n        \r\n        // Servizi diretti (per casi avanzati)\r\n        authService,\r\n        migrationService\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Hook specializzati per casi d'uso comuni\r\n\r\n// Hook per proteggere componenti (richiede autenticazione)\r\nexport const useRequireAuth = (redirectTo = '/login') => {\r\n    const { user, loading } = useAuth();\r\n    \r\n    useEffect(() => {\r\n        if (!loading && !user && window.location.pathname !== redirectTo) {\r\n            window.location.href = redirectTo;\r\n        }\r\n    }, [user, loading, redirectTo]);\r\n\r\n    return { user, loading, isAuthenticated: !!user };\r\n};\r\n\r\n// Hook per redirect dopo login\r\nexport const useAuthRedirect = (redirectTo = '/') => {\r\n    const { user, loading } = useAuth();\r\n    \r\n    useEffect(() => {\r\n        if (!loading && user && window.location.pathname === '/login') {\r\n            window.location.href = redirectTo;\r\n        }\r\n    }, [user, loading, redirectTo]);\r\n\r\n    return { user, loading };\r\n};\r\n\r\n// HOC per proteggere componenti\r\nexport const withAuth = (Component, requireAuth = true) => {\r\n    return function AuthenticatedComponent(props) {\r\n        const { user, loading } = useAuth();\r\n        \r\n        if (loading) {\r\n            return (\r\n                <div className=\"auth-loading\">\r\n                    <div className=\"loading-spinner\">Caricamento...</div>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n        if (requireAuth && !user) {\r\n            return (\r\n                <div className=\"auth-required\">\r\n                    <h2>Accesso Richiesto</h2>\r\n                    <p>Devi effettuare il login per accedere a questa sezione.</p>\r\n                    <button onClick={() => window.location.href = '/login'}>\r\n                        Vai al Login\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n        return <Component {...props} />;\r\n    };\r\n};\r\n\r\nexport default AuthProvider;","// Validation Schemas - Enterprise Grade\r\n// Schema di validazione completi per tutti i form dell'applicazione\r\n\r\nimport * as yup from 'yup';\r\n\r\n// ========== CONFIGURAZIONE BASE ==========\r\n\r\n// Messaggi di errore personalizzati in italiano\r\nyup.setLocale({\r\n    mixed: {\r\n        default: 'Campo non valido',\r\n        required: 'Campo obbligatorio',\r\n        notType: 'Tipo di dato non valido'\r\n    },\r\n    string: {\r\n        min: 'Minimo ${min} caratteri',\r\n        max: 'Massimo ${max} caratteri',\r\n        email: 'Email non valida'\r\n    },\r\n    number: {\r\n        min: 'Valore minimo: ${min}',\r\n        max: 'Valore massimo: ${max}',\r\n        positive: 'Deve essere un numero positivo',\r\n        integer: 'Deve essere un numero intero'\r\n    },\r\n    date: {\r\n        min: 'Data non può essere precedente al ${min}',\r\n        max: 'Data non può essere successiva al ${max}'\r\n    }\r\n});\r\n\r\n// ========== UTILITY VALIDATIONS ==========\r\n\r\n// Validazione peso realistico (30-300 kg)\r\nconst weightValidation = yup.number()\r\n    .typeError('Peso deve essere un numero')\r\n    .min(30, 'Peso minimo 30kg')\r\n    .max(300, 'Peso massimo 300kg');\r\n\r\n// Validazione percentuale (0-100%)\r\nconst percentageValidation = yup.number()\r\n    .typeError('Percentuale deve essere un numero')\r\n    .min(0, 'Percentuale minima 0%')\r\n    .max(100, 'Percentuale massima 100%');\r\n\r\n// Validazione circonferenze corporee (10-200 cm)\r\nconst measurementValidation = yup.number()\r\n    .typeError('Misurazione deve essere un numero')\r\n    .min(10, 'Misurazione minima 10cm')\r\n    .max(200, 'Misurazione massima 200cm');\r\n\r\n// Validazione data (non futura)\r\nconst dateValidation = yup.date()\r\n    .typeError('Data non valida')\r\n    .max(new Date(), 'Data non può essere futura');\r\n\r\n// Validazione password sicura\r\nconst passwordValidation = yup.string()\r\n    .min(8, 'Password minimo 8 caratteri')\r\n    .matches(/[a-z]/, 'Deve contenere almeno una lettera minuscola')\r\n    .matches(/[A-Z]/, 'Deve contenere almeno una lettera maiuscola')\r\n    .matches(/[0-9]/, 'Deve contenere almeno un numero')\r\n    .matches(/[^a-zA-Z0-9]/, 'Deve contenere almeno un carattere speciale');\r\n\r\n// ========== AUTHENTICATION SCHEMAS ==========\r\n\r\n// Schema registrazione\r\nexport const registrationSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido')\r\n        .max(254, 'Email troppo lunga'),\r\n    \r\n    password: passwordValidation.required('Password è obbligatoria'),\r\n    \r\n    confirmPassword: yup\r\n        .string()\r\n        .required('Conferma password è obbligatoria')\r\n        .oneOf([yup.ref('password')], 'Le password non corrispondono'),\r\n    \r\n    displayName: yup\r\n        .string()\r\n        .min(2, 'Nome minimo 2 caratteri')\r\n        .max(50, 'Nome massimo 50 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ\\s]+$/, 'Nome può contenere solo lettere e spazi')\r\n        .nullable(),\r\n    \r\n    acceptTerms: yup\r\n        .boolean()\r\n        .oneOf([true], 'Devi accettare i termini e condizioni')\r\n});\r\n\r\n// Schema login\r\nexport const loginSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido'),\r\n    \r\n    password: yup\r\n        .string()\r\n        .required('Password è obbligatoria')\r\n        .min(1, 'Password non può essere vuota'),\r\n    \r\n    rememberMe: yup.boolean().default(false)\r\n});\r\n\r\n// Schema reset password\r\nexport const resetPasswordSchema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .required('Email è obbligatoria')\r\n        .email('Formato email non valido')\r\n});\r\n\r\n// Schema cambio password\r\nexport const changePasswordSchema = yup.object({\r\n    currentPassword: yup\r\n        .string()\r\n        .required('Password attuale è obbligatoria'),\r\n    \r\n    newPassword: passwordValidation.required('Nuova password è obbligatoria'),\r\n    \r\n    confirmNewPassword: yup\r\n        .string()\r\n        .required('Conferma nuova password è obbligatoria')\r\n        .oneOf([yup.ref('newPassword')], 'Le password non corrispondono')\r\n});\r\n\r\n// ========== PROGRESS TRACKING SCHEMAS ==========\r\n\r\n// Schema misurazione progress\r\nexport const progressMeasurementSchema = yup.object({\r\n    weight: weightValidation.nullable(),\r\n    \r\n    bodyFat: percentageValidation\r\n        .min(3, 'Massa grassa minima 3%')\r\n        .max(50, 'Massa grassa massima 50%')\r\n        .nullable(),\r\n    \r\n    muscleMass: yup.number()\r\n        .typeError('Massa muscolare deve essere un numero')\r\n        .min(10, 'Massa muscolare minima 10kg')\r\n        .max(150, 'Massa muscolare massima 150kg')\r\n        .nullable(),\r\n    \r\n    chest: measurementValidation\r\n        .min(50, 'Circonferenza petto minima 50cm')\r\n        .max(200, 'Circonferenza petto massima 200cm')\r\n        .nullable(),\r\n    \r\n    arms: measurementValidation\r\n        .min(20, 'Circonferenza braccia minima 20cm')\r\n        .max(100, 'Circonferenza braccia massima 100cm')\r\n        .nullable(),\r\n    \r\n    waist: measurementValidation\r\n        .min(50, 'Circonferenza vita minima 50cm')\r\n        .max(150, 'Circonferenza vita massima 150cm')\r\n        .nullable(),\r\n    \r\n    thighs: measurementValidation\r\n        .min(30, 'Circonferenza cosce minima 30cm')\r\n        .max(100, 'Circonferenza cosce massima 100cm')\r\n        .nullable(),\r\n    \r\n    date: dateValidation.default(() => new Date()),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(1000, 'Note massimo 1000 caratteri')\r\n        .nullable()\r\n})\r\n.test('at-least-one-measurement', 'Inserisci almeno una misurazione', function(value) {\r\n    const { weight, bodyFat, muscleMass, chest, arms, waist, thighs } = value || {};\r\n    return !!(weight || bodyFat || muscleMass || chest || arms || waist || thighs);\r\n});\r\n\r\n// ========== WORKOUT SCHEMAS ==========\r\n\r\n// Schema esercizio singolo\r\nexport const exerciseSchema = yup.object({\r\n    exerciseName: yup\r\n        .string()\r\n        .required('Nome esercizio è obbligatorio')\r\n        .min(2, 'Nome esercizio minimo 2 caratteri')\r\n        .max(100, 'Nome esercizio massimo 100 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ0-9\\s\\-().]+$/, 'Nome esercizio contiene caratteri non validi'),\r\n    \r\n    sets: yup\r\n        .number()\r\n        .required('Numero serie è obbligatorio')\r\n        .integer('Serie deve essere un numero intero')\r\n        .min(1, 'Minimo 1 serie')\r\n        .max(20, 'Massimo 20 serie'),\r\n    \r\n    reps: yup\r\n        .number()\r\n        .required('Numero ripetizioni è obbligatorio')\r\n        .integer('Ripetizioni deve essere un numero intero')\r\n        .min(1, 'Minimo 1 ripetizione')\r\n        .max(100, 'Massimo 100 ripetizioni'),\r\n    \r\n    weight: yup\r\n        .number()\r\n        .typeError('Peso deve essere un numero')\r\n        .min(0, 'Peso non può essere negativo')\r\n        .max(1000, 'Peso massimo 1000kg')\r\n        .nullable(),\r\n    \r\n    rir: yup\r\n        .number()\r\n        .typeError('RIR deve essere un numero')\r\n        .integer('RIR deve essere un numero intero')\r\n        .min(0, 'RIR minimo 0')\r\n        .max(10, 'RIR massimo 10')\r\n        .nullable(),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(500, 'Note esercizio massimo 500 caratteri')\r\n        .nullable()\r\n});\r\n\r\n// Schema sessione workout\r\nexport const workoutSessionSchema = yup.object({\r\n    name: yup\r\n        .string()\r\n        .required('Nome workout è obbligatorio')\r\n        .min(3, 'Nome workout minimo 3 caratteri')\r\n        .max(100, 'Nome workout massimo 100 caratteri'),\r\n    \r\n    date: dateValidation.required('Data è obbligatoria'),\r\n    \r\n    startTime: yup\r\n        .date()\r\n        .typeError('Orario inizio non valido')\r\n        .nullable(),\r\n    \r\n    endTime: yup\r\n        .date()\r\n        .typeError('Orario fine non valido')\r\n        .min(yup.ref('startTime'), 'Orario fine deve essere dopo l\\'inizio')\r\n        .nullable(),\r\n    \r\n    totalDuration: yup\r\n        .number()\r\n        .typeError('Durata deve essere un numero')\r\n        .min(1, 'Durata minima 1 minuto')\r\n        .max(480, 'Durata massima 8 ore (480 minuti)')\r\n        .nullable(),\r\n    \r\n    exercises: yup\r\n        .array()\r\n        .of(exerciseSchema)\r\n        .min(1, 'Almeno un esercizio è obbligatorio'),\r\n    \r\n    notes: yup\r\n        .string()\r\n        .max(1000, 'Note workout massimo 1000 caratteri')\r\n        .nullable(),\r\n    \r\n    intensity: yup\r\n        .number()\r\n        .integer('Intensità deve essere un numero intero')\r\n        .min(1, 'Intensità minima 1')\r\n        .max(10, 'Intensità massima 10')\r\n        .nullable()\r\n});\r\n\r\n// ========== USER PROFILE SCHEMAS ==========\r\n\r\n// Schema profilo utente\r\nexport const userProfileSchema = yup.object({\r\n    displayName: yup\r\n        .string()\r\n        .min(2, 'Nome minimo 2 caratteri')\r\n        .max(50, 'Nome massimo 50 caratteri')\r\n        .matches(/^[a-zA-ZÀ-ÿ\\s]+$/, 'Nome può contenere solo lettere e spazi')\r\n        .nullable(),\r\n    \r\n    age: yup\r\n        .number()\r\n        .integer('Età deve essere un numero intero')\r\n        .min(13, 'Età minima 13 anni')\r\n        .max(120, 'Età massima 120 anni')\r\n        .nullable(),\r\n    \r\n    height: yup\r\n        .number()\r\n        .typeError('Altezza deve essere un numero')\r\n        .min(100, 'Altezza minima 100cm')\r\n        .max(250, 'Altezza massima 250cm')\r\n        .nullable(),\r\n    \r\n    activityLevel: yup\r\n        .string()\r\n        .oneOf(['sedentary', 'light', 'moderate', 'active', 'very_active'], 'Livello attività non valido')\r\n        .default('moderate'),\r\n    \r\n    fitnessGoals: yup\r\n        .array()\r\n        .of(yup.string().oneOf([\r\n            'weight_loss', 'muscle_gain', 'strength', 'endurance', \r\n            'flexibility', 'general_health', 'athletic_performance'\r\n        ]))\r\n        .max(5, 'Massimo 5 obiettivi'),\r\n    \r\n    experience: yup\r\n        .string()\r\n        .oneOf(['beginner', 'intermediate', 'advanced', 'expert'], 'Livello esperienza non valido')\r\n        .default('beginner'),\r\n    \r\n    preferences: yup.object({\r\n        units: yup.string().oneOf(['metric', 'imperial']).default('metric'),\r\n        language: yup.string().oneOf(['it', 'en']).default('it'),\r\n        notifications: yup.boolean().default(true),\r\n        darkMode: yup.boolean().default(false),\r\n        publicProfile: yup.boolean().default(false)\r\n    })\r\n});\r\n\r\n// ========== GOALS SCHEMAS ==========\r\n\r\n// Schema obiettivi 12 settimane\r\nexport const goals12WeekSchema = yup.object({\r\n    startWeight: weightValidation.required('Peso iniziale è obbligatorio'),\r\n    \r\n    targetWeight: weightValidation\r\n        .required('Peso target è obbligatorio')\r\n        .test('weight-difference', 'Differenza peso deve essere ragionevole (±30kg)', function(value) {\r\n            const { startWeight } = this.parent;\r\n            if (!startWeight || !value) return true;\r\n            return Math.abs(value - startWeight) <= 30;\r\n        }),\r\n    \r\n    targetBench: yup\r\n        .number()\r\n        .typeError('Target panca deve essere un numero')\r\n        .min(20, 'Target panca minimo 20kg')\r\n        .max(300, 'Target panca massimo 300kg')\r\n        .nullable(),\r\n    \r\n    targetSquat: yup\r\n        .number()\r\n        .typeError('Target squat deve essere un numero')\r\n        .min(30, 'Target squat minimo 30kg')\r\n        .max(500, 'Target squat massimo 500kg')\r\n        .nullable(),\r\n    \r\n    targetDeadlift: yup\r\n        .number()\r\n        .typeError('Target deadlift deve essere un numero')\r\n        .min(40, 'Target deadlift minimo 40kg')\r\n        .max(600, 'Target deadlift massimo 600kg')\r\n        .nullable(),\r\n    \r\n    startDate: yup\r\n        .date()\r\n        .required('Data inizio è obbligatoria')\r\n        .max(new Date(), 'Data inizio non può essere futura'),\r\n    \r\n    targetDate: yup\r\n        .date()\r\n        .required('Data target è obbligatoria')\r\n        .min(yup.ref('startDate'), 'Data target deve essere dopo data inizio')\r\n        .test('12-weeks-max', 'Periodo massimo 16 settimane', function(value) {\r\n            const { startDate } = this.parent;\r\n            if (!startDate || !value) return true;\r\n            const diffWeeks = (value - startDate) / (7 * 24 * 60 * 60 * 1000);\r\n            return diffWeeks <= 16;\r\n        })\r\n});\r\n\r\n// ========== SETTINGS SCHEMAS ==========\r\n\r\n// Schema impostazioni app\r\nexport const appSettingsSchema = yup.object({\r\n    notifications: yup.object({\r\n        workoutReminders: yup.boolean().default(true),\r\n        progressReminders: yup.boolean().default(true),\r\n        achievementAlerts: yup.boolean().default(true),\r\n        emailNotifications: yup.boolean().default(false),\r\n        pushNotifications: yup.boolean().default(true)\r\n    }),\r\n    \r\n    privacy: yup.object({\r\n        profileVisibility: yup.string().oneOf(['private', 'friends', 'public']).default('private'),\r\n        shareProgress: yup.boolean().default(false),\r\n        shareWorkouts: yup.boolean().default(false),\r\n        allowFriendRequests: yup.boolean().default(true)\r\n    }),\r\n    \r\n    display: yup.object({\r\n        theme: yup.string().oneOf(['light', 'dark', 'auto']).default('light'),\r\n        language: yup.string().oneOf(['it', 'en']).default('it'),\r\n        dateFormat: yup.string().oneOf(['DD/MM/YYYY', 'MM/DD/YYYY', 'YYYY-MM-DD']).default('DD/MM/YYYY'),\r\n        timeFormat: yup.string().oneOf(['24h', '12h']).default('24h')\r\n    }),\r\n    \r\n    units: yup.object({\r\n        weight: yup.string().oneOf(['kg', 'lb']).default('kg'),\r\n        distance: yup.string().oneOf(['km', 'mi']).default('km'),\r\n        height: yup.string().oneOf(['cm', 'ft']).default('cm')\r\n    })\r\n});\r\n\r\n// ========== VALIDATION HELPERS ==========\r\n\r\n// Helper per validazione condizionale\r\nexport const conditionalSchema = (condition, schema, fallback = yup.mixed().nullable()) => {\r\n    return yup.mixed().when(condition, {\r\n        is: true,\r\n        then: schema,\r\n        otherwise: fallback\r\n    });\r\n};\r\n\r\n// Helper per validazione campi dinamici\r\nexport const dynamicFieldSchema = (fieldType) => {\r\n    const schemas = {\r\n        text: yup.string().max(100),\r\n        number: yup.number(),\r\n        email: yup.string().email(),\r\n        date: dateValidation,\r\n        boolean: yup.boolean()\r\n    };\r\n    \r\n    return schemas[fieldType] || yup.mixed();\r\n};\r\n\r\n// Validazione personalizzata per form complessi\r\nexport const validateWithSchema = async (schema, data, options = {}) => {\r\n    try {\r\n        const validatedData = await schema.validate(data, {\r\n            abortEarly: false,\r\n            stripUnknown: true,\r\n            ...options\r\n        });\r\n        \r\n        return { isValid: true, data: validatedData, errors: {} };\r\n        \r\n    } catch (error) {\r\n        const errors = {};\r\n        \r\n        if (error.inner) {\r\n            error.inner.forEach(err => {\r\n                if (err.path) {\r\n                    errors[err.path] = err.message;\r\n                }\r\n            });\r\n        } else {\r\n            errors.general = error.message;\r\n        }\r\n        \r\n        return { isValid: false, data: null, errors };\r\n    }\r\n};\r\n\r\n// Export di tutti gli schemi per uso modulare\r\nexport default {\r\n    registrationSchema,\r\n    loginSchema,\r\n    resetPasswordSchema,\r\n    changePasswordSchema,\r\n    progressMeasurementSchema,\r\n    exerciseSchema,\r\n    workoutSessionSchema,\r\n    userProfileSchema,\r\n    goals12WeekSchema,\r\n    appSettingsSchema,\r\n    validateWithSchema\r\n};","import React, { Suspense, lazy } from 'react';\r\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\r\n// import { AuthProvider, useAuth } from './components/AuthProvider';\r\nimport Dashboard from './components/Dashboard';\r\nimport WorkoutSimple from './components/WorkoutSimple';\r\nimport NutritionBella from './components/NutritionBella';\r\nimport Supplements from './components/Supplements';\r\nimport Recovery from './components/Recovery';\r\nimport Progress from './components/Progress';\r\nimport Measurements from './components/Measurements';\r\nimport AuthModal from './components/AuthModal';\r\nimport MigrationModal from './components/MigrationModal';\r\nimport './styles/main.css';\r\n\r\n// Lazy loading per componenti pesanti\r\nconst LazyAnalytics = lazy(() => import('./components/AdvancedAnalytics'));\r\nconst LazyNutritionTracker = lazy(() => import('./components/SimpleNutritionTracker'));\r\nconst LazyRecoveryTimer = lazy(() => import('./components/SimpleRecoveryTimer'));\r\n\r\n// Componente principale senza autenticazione\r\nfunction AppContent() {\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                {/* Autenticazione disabilitata per uso locale */}\r\n                \r\n                {/* Routing principale */}\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Dashboard />} />\r\n                    <Route path=\"/workout\" element={<WorkoutSimple />} />\r\n                    <Route path=\"/nutrition\" element={<NutritionBella />} />\r\n                    <Route path=\"/supplements\" element={<Supplements />} />\r\n                    <Route path=\"/recovery\" element={<Recovery />} />\r\n                    <Route path=\"/progress\" element={<Progress />} />\r\n                    <Route path=\"/measurements\" element={<Measurements />} />\r\n                    <Route path=\"/analytics\" element={\r\n                        <Suspense fallback={<div className=\"loading-analytics\">Caricamento Analytics...</div>}>\r\n                            <LazyAnalytics />\r\n                        </Suspense>\r\n                    } />\r\n                    <Route path=\"/nutrition-tracker\" element={\r\n                        <Suspense fallback={<div className=\"loading-nutrition\">Caricamento Nutrition Tracker...</div>}>\r\n                            <LazyNutritionTracker />\r\n                        </Suspense>\r\n                    } />\r\n                    <Route path=\"/recovery-timer\" element={\r\n                        <Suspense fallback={<div className=\"loading-recovery\">Caricamento Recovery Timer...</div>}>\r\n                            <LazyRecoveryTimer />\r\n                        </Suspense>\r\n                    } />\r\n                </Routes>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\n// App wrapper senza autenticazione\r\nfunction App() {\r\n    return <AppContent />;\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/main.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}