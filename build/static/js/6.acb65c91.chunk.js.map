{"version":3,"sources":["../../../../../../mnt/c/Users/Franc/Desktop/APP SPORT/extraordinary-growth-app/src/components/SimpleRecoveryTimer.js"],"names":["SimpleRecoveryTimer","selectedActivity","setSelectedActivity","useState","isRunning","setIsRunning","time","setTime","targetDuration","setTargetDuration","ACTIVITIES","sauna","name","temp","duration","ice_bath","cold_shower","meditation","stretching","steam_bath","useEffect","interval","setInterval","prev","clearInterval","getProgressPercentage","targetSeconds","Math","min","_jsxs","className","children","_jsx","Object","keys","map","key","concat","onClick","disabled","split","type","value","onChange","e","max","parseInt","target","seconds","mins","floor","secs","toString","padStart","formatTime","style","background","round","padding","textAlign","marginTop","borderRadius","color"],"mappings":"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","file":"static/js/6.acb65c91.chunk.js","sourcesContent":["// Simplified Recovery Timer - Debug version\r\nimport React, { useState, useEffect } from 'react';\r\n// import { useAuth } from './AuthProvider';\r\n\r\nconst SimpleRecoveryTimer = () => {\r\n    // const { user } = useAuth();\r\n    const [selectedActivity, setSelectedActivity] = useState('sauna');\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [time, setTime] = useState(0);\r\n    const [targetDuration, setTargetDuration] = useState(15);\r\n\r\n    const ACTIVITIES = {\r\n        sauna: { name: 'üî• Sauna', temp: '80¬∞C', duration: '15 min' },\r\n        ice_bath: { name: 'üßä Ice Bath', temp: '12¬∞C', duration: '3 min' },\r\n        cold_shower: { name: 'üöø Doccia Fredda', temp: '15¬∞C', duration: '2 min' },\r\n        meditation: { name: 'üßò Meditazione', temp: 'Ambiente', duration: '10 min' },\r\n        stretching: { name: 'ü§∏ Stretching', temp: 'Ambiente', duration: '20 min' },\r\n        steam_bath: { name: 'üí® Bagno Turco', temp: '45¬∞C', duration: '20 min' }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let interval;\r\n        if (isRunning) {\r\n            interval = setInterval(() => {\r\n                setTime(prev => prev + 1);\r\n            }, 1000);\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isRunning]);\r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    const getProgressPercentage = () => {\r\n        const targetSeconds = targetDuration * 60;\r\n        return Math.min((time / targetSeconds) * 100, 100);\r\n    };\r\n\r\n    // Autenticazione disabilitata\r\n\r\n    return (\r\n        <div className=\"recovery-timer\">\r\n            <div className=\"recovery-header\">\r\n                <h2>üî• Recovery Timer</h2>\r\n                <p>Timer professionale per pratiche di recupero</p>\r\n            </div>\r\n\r\n            {/* Selezione attivit√† */}\r\n            <div className=\"activity-selection\">\r\n                <h3>üéØ Seleziona Pratica</h3>\r\n                <div className=\"activity-grid\">\r\n                    {Object.keys(ACTIVITIES).map(key => (\r\n                        <button\r\n                            key={key}\r\n                            className={`activity-btn ${selectedActivity === key ? 'active' : ''}`}\r\n                            onClick={() => setSelectedActivity(key)}\r\n                            disabled={isRunning}\r\n                        >\r\n                            <span className=\"activity-icon\">{ACTIVITIES[key].name.split(' ')[0]}</span>\r\n                            <span className=\"activity-name\">{ACTIVITIES[key].name}</span>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Info attivit√† */}\r\n            <div className=\"activity-info\">\r\n                <h3>{ACTIVITIES[selectedActivity].name}</h3>\r\n                <div className=\"activity-specs\">\r\n                    <span>üå°Ô∏è <strong>Temperatura:</strong> {ACTIVITIES[selectedActivity].temp}</span>\r\n                    <span>‚è∞ <strong>Durata:</strong> {ACTIVITIES[selectedActivity].duration}</span>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Configurazione */}\r\n            <div className=\"session-config\">\r\n                <div className=\"config-row\">\r\n                    <div className=\"config-item\">\r\n                        <label>‚è∞ Durata Target (minuti)</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={targetDuration}\r\n                            onChange={(e) => setTargetDuration(Math.max(1, parseInt(e.target.value) || 1))}\r\n                            min=\"1\"\r\n                            max=\"60\"\r\n                            disabled={isRunning}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Timer */}\r\n            <div className=\"main-timer\">\r\n                <div className=\"timer-display\">\r\n                    <div className=\"time-text\">{formatTime(time)}</div>\r\n                    <div className=\"target-time\">Target: {targetDuration}:00</div>\r\n                </div>\r\n                \r\n                <div className=\"progress-ring\">\r\n                    <div \r\n                        className=\"progress-fill\"\r\n                        style={{ \r\n                            background: `conic-gradient(#ef4444 ${getProgressPercentage() * 3.6}deg, rgba(255,255,255,0.1) 0deg)`\r\n                        }}\r\n                    >\r\n                        <div className=\"progress-percentage\">\r\n                            {Math.round(getProgressPercentage())}%\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"timer-controls\">\r\n                    <button \r\n                        className={`timer-btn ${isRunning ? 'pause' : 'start'}`}\r\n                        onClick={() => setIsRunning(!isRunning)}\r\n                    >\r\n                        {isRunning ? '‚è∏Ô∏è Pausa' : '‚ñ∂Ô∏è Inizia'}\r\n                    </button>\r\n                    \r\n                    <button \r\n                        className=\"timer-btn reset\"\r\n                        onClick={() => {\r\n                            setIsRunning(false);\r\n                            setTime(0);\r\n                        }}\r\n                    >\r\n                        üîÑ Reset\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{padding: '20px', textAlign: 'center', marginTop: '20px', background: 'rgba(239, 68, 68, 0.1)', borderRadius: '10px'}}>\r\n                <p style={{color: '#ef4444'}}>\r\n                    ‚úÖ <strong>Recovery Timer Funzionale!</strong><br/>\r\n                    Seleziona pratica e usa il timer.<br/>\r\n                    Questa √® la versione semplificata di debug.\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SimpleRecoveryTimer;"],"sourceRoot":""}