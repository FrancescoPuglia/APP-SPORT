{"version":3,"sources":["components/AdvancedAnalytics.js"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","Filler","ArcElement","AdvancedAnalytics","_realData$nutrition","_realData$nutrition2","_realData$nutrition3","navigate","useNavigate","selectedPeriod","setSelectedPeriod","useState","selectedMetric","setSelectedMetric","loading","setLoading","realData","setRealData","useEffect","loadRealData","data","dataManager","getAnalyticsData","console","log","handleWorkoutCompleted","event","detail","handleMealToggled","handleNutritionCompleted","handleCheatAdded","handleCheatRemoved","window","addEventListener","interval","setInterval","removeEventListener","clearInterval","chartOptions","responsive","maintainAspectRatio","plugins","legend","position","labels","color","font","size","weight","tooltip","backgroundColor","titleColor","bodyColor","borderColor","borderWidth","scales","x","grid","ticks","y","chartData","getChartData","measurements","length","slice","map","m","format","Date","date","weightData","muscleMassData","muscleMass","weightChartData","datasets","label","fill","tension","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","workoutData","getWorkoutChartData","workouts","w","i","concat","volumeData","exercises","reduce","total","ex","reps","sets","durationData","duration","workoutChartData","yAxisID","workoutChartOptions","_objectSpread","y1","type","display","drawOnChartArea","muscleData","getMuscleChartData","muscleGroups","totalVolume","forEach","workout","exercise","volume","muscle","muscleGroup","Object","keys","Math","round","muscleChartData","stats","totalWorkouts","currentStreak","sum","vol","avgWorkoutDuration","dur","weightGain","weightProgress","change","muscleGain","toFixed","bodyFatLoss","nutritionAdherence","supplementCompliance","recoveryFrequency","bestLift","strengthProgress","max","values","currentWeight","dynamicInsights","generateInsights","icon","title","message","insights","push","improvements","parseFloat","improvement","filter","imp","avgImprovement","_jsxs","className","children","onClick","_jsx","value","onChange","e","target","Line","options","Bar","Doughnut","entries","_ref","index","exerciseName","style","width","min","initialWeight","nutrition","weeklyAdherence","day","mealsCompleted","monthlyCheats","recovery","session","repeat","floor","quality","insight","padding","background","borderRadius","textAlign","marginTop","border"],"mappings":"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","file":"static/js/4.580e9ad7.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    Filler,\r\n    ArcElement\r\n} from 'chart.js';\r\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\r\nimport { format, subDays, startOfWeek, endOfWeek, eachDayOfInterval } from 'date-fns';\r\nimport { it } from 'date-fns/locale';\r\nimport { dataManager } from '../utils/dataManager';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    Filler,\r\n    ArcElement\r\n);\r\n\r\nconst AdvancedAnalytics = () => {\r\n    const navigate = useNavigate();\r\n    const [selectedPeriod, setSelectedPeriod] = useState('3months');\r\n    const [selectedMetric, setSelectedMetric] = useState('weight');\r\n    const [loading, setLoading] = useState(false);\r\n    const [realData, setRealData] = useState(null);\r\n\r\n    // Carica dati reali dell'utente\r\n    useEffect(() => {\r\n        const loadRealData = () => {\r\n            const data = dataManager.getAnalyticsData();\r\n            setRealData(data);\r\n            console.log('📊 Analytics aggiornati:', data);\r\n        };\r\n        \r\n        loadRealData();\r\n        \r\n        // 🔥 LISTENER PER AGGIORNAMENTI ISTANTANEI\r\n        const handleWorkoutCompleted = (event) => {\r\n            console.log('🚀 Nuovo workout, aggiorno analytics!', event.detail);\r\n            loadRealData(); // Ricarica SUBITO i dati\r\n        };\r\n        \r\n        const handleMealToggled = (event) => {\r\n            console.log('🍽️ Pasto aggiornato, aggiorno analytics!', event.detail);\r\n            loadRealData(); // Ricarica SUBITO i dati\r\n        };\r\n        \r\n        const handleNutritionCompleted = (event) => {\r\n            console.log('🔥 Giorno nutrizionale completato, aggiorno analytics!', event.detail);\r\n            loadRealData(); // Ricarica SUBITO i dati\r\n        };\r\n        \r\n        const handleCheatAdded = (event) => {\r\n            console.log('🍕 Sgarro registrato, aggiorno analytics!', event.detail);\r\n            loadRealData(); // Ricarica SUBITO i dati\r\n        };\r\n        \r\n        const handleCheatRemoved = (event) => {\r\n            console.log('🚫 Sgarro rimosso, aggiorno analytics!', event.detail);\r\n            loadRealData(); // Ricarica SUBITO i dati\r\n        };\r\n        \r\n        window.addEventListener('workoutCompleted', handleWorkoutCompleted);\r\n        window.addEventListener('mealToggled', handleMealToggled);\r\n        window.addEventListener('nutritionCompleted', handleNutritionCompleted);\r\n        window.addEventListener('cheatAdded', handleCheatAdded);\r\n        window.addEventListener('cheatRemoved', handleCheatRemoved);\r\n        \r\n        // Ricarica ogni 30 secondi per dati aggiornati\r\n        const interval = setInterval(loadRealData, 30000);\r\n        \r\n        return () => {\r\n            window.removeEventListener('workoutCompleted', handleWorkoutCompleted);\r\n            window.removeEventListener('mealToggled', handleMealToggled);\r\n            window.removeEventListener('nutritionCompleted', handleNutritionCompleted);\r\n            window.removeEventListener('cheatAdded', handleCheatAdded);\r\n            window.removeEventListener('cheatRemoved', handleCheatRemoved);\r\n            clearInterval(interval);\r\n        };\r\n    }, []);\r\n\r\n    // DATI MOCK COME FALLBACK (QUANDO NON CI SONO DATI REALI)\r\n    const mockData = {\r\n        // Dati peso corporeo ultimi 3 mesi\r\n        weightProgress: [\r\n            { date: '2024-06-01', weight: 75.2, bodyFat: 15.5, muscleMass: 34.2 },\r\n            { date: '2024-06-15', weight: 76.1, bodyFat: 15.2, muscleMass: 34.8 },\r\n            { date: '2024-07-01', weight: 76.8, bodyFat: 14.8, muscleMass: 35.4 },\r\n            { date: '2024-07-15', weight: 77.5, bodyFat: 14.5, muscleMass: 36.1 },\r\n            { date: '2024-08-01', weight: 78.2, bodyFat: 14.1, muscleMass: 36.8 },\r\n            { date: '2024-08-15', weight: 79.1, bodyFat: 13.8, muscleMass: 37.5 },\r\n            { date: '2024-09-01', weight: 79.8, bodyFat: 13.5, muscleMass: 38.2 }\r\n        ],\r\n        \r\n        // Dati allenamenti settimanali\r\n        workoutData: [\r\n            { week: 'Set 1', sessions: 5, volume: 12500, duration: 360 },\r\n            { week: 'Set 2', sessions: 4, volume: 11800, duration: 280 },\r\n            { week: 'Set 3', sessions: 6, volume: 14200, duration: 420 },\r\n            { week: 'Set 4', sessions: 5, volume: 13600, duration: 380 },\r\n            { week: 'Ago 1', sessions: 5, volume: 13200, duration: 350 },\r\n            { week: 'Ago 2', sessions: 4, volume: 12100, duration: 300 },\r\n            { week: 'Ago 3', sessions: 6, volume: 15800, duration: 450 },\r\n            { week: 'Ago 4', sessions: 5, volume: 14400, duration: 400 }\r\n        ],\r\n\r\n        // Distribuzione gruppi muscolari\r\n        muscleGroups: [\r\n            { name: 'Petto', sessions: 24, percentage: 20 },\r\n            { name: 'Dorso', sessions: 22, percentage: 18 },\r\n            { name: 'Gambe', sessions: 18, percentage: 15 },\r\n            { name: 'Spalle', sessions: 16, percentage: 13 },\r\n            { name: 'Braccia', sessions: 20, percentage: 17 },\r\n            { name: 'Core', sessions: 12, percentage: 10 },\r\n            { name: 'Cardio', sessions: 8, percentage: 7 }\r\n        ],\r\n\r\n        // Performance principali esercizi\r\n        exerciseProgress: [\r\n            { exercise: 'Panca Piana', current: 95, start: 75, improvement: 26.7 },\r\n            { exercise: 'Squat', current: 125, start: 100, improvement: 25.0 },\r\n            { exercise: 'Deadlift', current: 155, start: 120, improvement: 29.2 },\r\n            { exercise: 'Military Press', current: 65, start: 50, improvement: 30.0 },\r\n            { exercise: 'Trazioni', current: 15, start: 8, improvement: 87.5 }\r\n        ],\r\n\r\n        // Dati nutrition\r\n        nutritionStats: {\r\n            avgProteinDaily: 145,\r\n            avgCaloriesDaily: 2850,\r\n            adherenceRate: 87,\r\n            mealsPrepared: 156,\r\n            cheatsThisMonth: 4\r\n        },\r\n\r\n        // Dati recovery\r\n        recoveryData: [\r\n            { date: '2024-08-01', type: 'Sauna', duration: 20, quality: 9 },\r\n            { date: '2024-08-03', type: 'Ice Bath', duration: 5, quality: 8 },\r\n            { date: '2024-08-05', type: 'Massage', duration: 60, quality: 10 },\r\n            { date: '2024-08-08', type: 'Stretching', duration: 30, quality: 7 },\r\n            { date: '2024-08-10', type: 'Sauna', duration: 25, quality: 9 },\r\n            { date: '2024-08-12', type: 'Ice Bath', duration: 4, quality: 8 },\r\n            { date: '2024-08-15', type: 'Yoga', duration: 45, quality: 8 }\r\n        ]\r\n    };\r\n\r\n    // CONFIGURAZIONE GRAFICI\r\n    const chartOptions = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n            legend: {\r\n                position: 'top',\r\n                labels: {\r\n                    color: '#00ffff',\r\n                    font: { size: 12, weight: 'bold' }\r\n                }\r\n            },\r\n            tooltip: {\r\n                backgroundColor: 'rgba(0, 255, 255, 0.9)',\r\n                titleColor: '#000',\r\n                bodyColor: '#000',\r\n                borderColor: '#00ffff',\r\n                borderWidth: 2\r\n            }\r\n        },\r\n        scales: {\r\n            x: {\r\n                grid: { color: 'rgba(0, 255, 255, 0.1)' },\r\n                ticks: { color: '#00ffff', font: { weight: 'bold' } }\r\n            },\r\n            y: {\r\n                grid: { color: 'rgba(0, 255, 255, 0.1)' },\r\n                ticks: { color: '#00ffff', font: { weight: 'bold' } }\r\n            }\r\n        }\r\n    };\r\n\r\n    // FUNZIONE PER GENERARE DATI REALI O FALLBACK\r\n    const getChartData = () => {\r\n        if (realData && realData.measurements && realData.measurements.length > 0) {\r\n            // USA DATI REALI DELL'UTENTE\r\n            const measurements = realData.measurements.slice(-30); // Ultimi 30 rilevamenti\r\n            return {\r\n                labels: measurements.map(m => format(new Date(m.date), 'dd/MM')),\r\n                weightData: measurements.map(m => m.weight || 0),\r\n                muscleMassData: measurements.map(m => m.muscleMass || 0)\r\n            };\r\n        } else {\r\n            // FALLBACK: LINEE PIATTE QUANDO NON CI SONO DATI\r\n            const emptyLabels = ['No Data', 'Inserisci', 'Misurazioni', 'Reali'];\r\n            return {\r\n                labels: emptyLabels,\r\n                weightData: [0, 0, 0, 0],\r\n                muscleMassData: [0, 0, 0, 0]\r\n            };\r\n        }\r\n    };\r\n\r\n    const chartData = getChartData();\r\n\r\n    // GRAFICO PROGRESSO PESO (DATI REALI)\r\n    const weightChartData = {\r\n        labels: chartData.labels,\r\n        datasets: [\r\n            {\r\n                label: 'Peso (kg)',\r\n                data: chartData.weightData,\r\n                borderColor: '#00ffff',\r\n                backgroundColor: 'rgba(0, 255, 255, 0.1)',\r\n                borderWidth: 3,\r\n                fill: true,\r\n                tension: 0.4,\r\n                pointBackgroundColor: '#ff9500',\r\n                pointBorderColor: '#00ffff',\r\n                pointBorderWidth: 2,\r\n                pointRadius: 6\r\n            },\r\n            {\r\n                label: 'Massa Muscolare (kg)',\r\n                data: chartData.muscleMassData,\r\n                borderColor: '#ff9500',\r\n                backgroundColor: 'rgba(255, 149, 0, 0.1)',\r\n                borderWidth: 3,\r\n                fill: true,\r\n                tension: 0.4,\r\n                pointBackgroundColor: '#00ffff',\r\n                pointBorderColor: '#ff9500',\r\n                pointBorderWidth: 2,\r\n                pointRadius: 6\r\n            }\r\n        ]\r\n    };\r\n\r\n    // FUNZIONE PER DATI WORKOUT REALI\r\n    const getWorkoutChartData = () => {\r\n        if (realData && realData.workouts && realData.workouts.length > 0) {\r\n            // USA DATI REALI DEGLI ALLENAMENTI\r\n            const workouts = realData.workouts.slice(-10); // Ultimi 10 workout\r\n            return {\r\n                labels: workouts.map((w, i) => `Workout ${i + 1}`),\r\n                volumeData: workouts.map(w => {\r\n                    if (w.exercises && w.exercises.length > 0) {\r\n                        return w.exercises.reduce((total, ex) => \r\n                            total + (ex.weight * ex.reps * ex.sets), 0\r\n                        );\r\n                    }\r\n                    return 0;\r\n                }),\r\n                durationData: workouts.map(w => w.duration || 0)\r\n            };\r\n        } else {\r\n            // FALLBACK: LINEE COSTANTI\r\n            return {\r\n                labels: ['Nessun Workout', 'Inserisci', 'Dati', 'Reali'],\r\n                volumeData: [0, 0, 0, 0],\r\n                durationData: [0, 0, 0, 0]\r\n            };\r\n        }\r\n    };\r\n\r\n    const workoutData = getWorkoutChartData();\r\n\r\n    // GRAFICO VOLUME ALLENAMENTI (DATI REALI)\r\n    const workoutChartData = {\r\n        labels: workoutData.labels,\r\n        datasets: [\r\n            {\r\n                label: 'Volume (kg)',\r\n                data: workoutData.volumeData,\r\n                backgroundColor: 'rgba(0, 255, 255, 0.8)',\r\n                borderColor: '#00ffff',\r\n                borderWidth: 2\r\n            },\r\n            {\r\n                label: 'Durata (min)',\r\n                data: workoutData.durationData,\r\n                backgroundColor: 'rgba(255, 149, 0, 0.8)',\r\n                borderColor: '#ff9500',\r\n                borderWidth: 2,\r\n                yAxisID: 'y1'\r\n            }\r\n        ]\r\n    };\r\n\r\n    const workoutChartOptions = {\r\n        ...chartOptions,\r\n        scales: {\r\n            ...chartOptions.scales,\r\n            y1: {\r\n                type: 'linear',\r\n                display: true,\r\n                position: 'right',\r\n                grid: { drawOnChartArea: false },\r\n                ticks: { color: '#ff9500', font: { weight: 'bold' } }\r\n            }\r\n        }\r\n    };\r\n\r\n    // FUNZIONE PER DISTRIBUZIONE MUSCOLI REALE\r\n    const getMuscleChartData = () => {\r\n        if (realData && realData.workouts && realData.workouts.length > 0) {\r\n            // CALCOLA DISTRIBUZIONE REALE DAI WORKOUT\r\n            const muscleGroups = {};\r\n            let totalVolume = 0;\r\n\r\n            realData.workouts.forEach(workout => {\r\n                if (workout.exercises) {\r\n                    workout.exercises.forEach(exercise => {\r\n                        const volume = exercise.weight * exercise.reps * exercise.sets;\r\n                        const muscle = exercise.muscleGroup || 'Altro';\r\n                        muscleGroups[muscle] = (muscleGroups[muscle] || 0) + volume;\r\n                        totalVolume += volume;\r\n                    });\r\n                }\r\n            });\r\n\r\n            if (totalVolume > 0) {\r\n                const labels = Object.keys(muscleGroups);\r\n                const data = labels.map(muscle => \r\n                    Math.round((muscleGroups[muscle] / totalVolume) * 100)\r\n                );\r\n                return { labels, data };\r\n            }\r\n        }\r\n        \r\n        // FALLBACK: NESSUN DATO\r\n        return {\r\n            labels: ['Nessun Dato', 'Inserisci Workout'],\r\n            data: [50, 50]\r\n        };\r\n    };\r\n\r\n    const muscleData = getMuscleChartData();\r\n\r\n    // GRAFICO DISTRIBUZIONE MUSCOLI (DATI REALI)\r\n    const muscleChartData = {\r\n        labels: muscleData.labels,\r\n        datasets: [\r\n            {\r\n                data: muscleData.data,\r\n                backgroundColor: [\r\n                    '#00ffff', '#ff9500', '#ff6b6b', '#4ecdc4', \r\n                    '#45b7d1', '#96ceb4', '#feca57'\r\n                ],\r\n                borderColor: '#000',\r\n                borderWidth: 2\r\n            }\r\n        ]\r\n    };\r\n\r\n    // STATISTICHE CALCOLATE (DATI REALI)\r\n    const stats = realData ? {\r\n        totalWorkouts: realData.stats.totalWorkouts || 0,\r\n        currentStreak: realData.stats.currentStreak || 0,\r\n        totalVolume: workoutData.volumeData.reduce((sum, vol) => sum + vol, 0),\r\n        avgWorkoutDuration: workoutData.durationData.length > 0 ? \r\n            Math.round(workoutData.durationData.reduce((sum, dur) => sum + dur, 0) / workoutData.durationData.length) : 0,\r\n        weightGain: realData.stats.weightProgress ? realData.stats.weightProgress.change : '0.0',\r\n        muscleGain: chartData.muscleMassData.length > 1 ? \r\n            (chartData.muscleMassData[chartData.muscleMassData.length - 1] - chartData.muscleMassData[0]).toFixed(1) : '0.0',\r\n        bodyFatLoss: '0.0',\r\n        nutritionAdherence: Math.round(realData.stats.nutritionAdherence || 0),\r\n        supplementCompliance: realData.stats.supplementCompliance || 0,\r\n        recoveryFrequency: realData.stats.recoveryFrequency || 0,\r\n        bestLift: realData.stats.strengthProgress ? \r\n            Math.max(...Object.values(realData.stats.strengthProgress).map(ex => ex.currentWeight || 0)) : 0\r\n    } : {\r\n        // FALLBACK QUANDO NON CI SONO DATI\r\n        totalWorkouts: 0,\r\n        currentStreak: 0,\r\n        totalVolume: 0,\r\n        avgWorkoutDuration: 0,\r\n        weightGain: '0.0',\r\n        muscleGain: '0.0',\r\n        bodyFatLoss: '0.0',\r\n        nutritionAdherence: 0,\r\n        supplementCompliance: 0,\r\n        recoveryFrequency: 0,\r\n        bestLift: 0\r\n    };\r\n\r\n    // GENERA INSIGHTS DINAMICI BASATI SUI DATI REALI\r\n    const generateInsights = () => {\r\n        if (!realData) {\r\n            return [{\r\n                type: 'info',\r\n                icon: '📊',\r\n                title: 'Inizia il Tracking',\r\n                message: 'Aggiungi dati ai tuoi allenamenti per ricevere insights personalizzati!'\r\n            }];\r\n        }\r\n\r\n        const insights = [];\r\n\r\n        // Insight su workout streak\r\n        if (stats.currentStreak >= 7) {\r\n            insights.push({\r\n                type: 'success',\r\n                icon: '🔥',\r\n                title: 'Streak Fantastico!',\r\n                message: `${stats.currentStreak} giorni consecutivi! La costanza è la chiave del successo.`\r\n            });\r\n        } else if (stats.totalWorkouts > 0) {\r\n            insights.push({\r\n                type: 'warning',\r\n                icon: '⚡',\r\n                title: 'Mantieni la Costanza',\r\n                message: 'Cerca di allenarti regolarmente per massimizzare i risultati.'\r\n            });\r\n        }\r\n\r\n        // Insight su nutrizione\r\n        if (stats.nutritionAdherence >= 80) {\r\n            insights.push({\r\n                type: 'success',\r\n                icon: '🥗',\r\n                title: 'Nutrizione Eccellente',\r\n                message: `${stats.nutritionAdherence}% di aderenza alla dieta. Ottimo lavoro!`\r\n            });\r\n        } else if (stats.nutritionAdherence > 0) {\r\n            insights.push({\r\n                type: 'warning',\r\n                icon: '🍽️',\r\n                title: 'Migliora la Nutrizione',\r\n                message: 'Completa più pasti per raggiungere i tuoi obiettivi più velocemente.'\r\n            });\r\n        }\r\n\r\n        // Insight su progressi forza\r\n        if (realData.stats.strengthProgress && Object.keys(realData.stats.strengthProgress).length > 0) {\r\n            const improvements = Object.values(realData.stats.strengthProgress)\r\n                .map(ex => parseFloat(ex.improvement || 0))\r\n                .filter(imp => imp > 0);\r\n            \r\n            if (improvements.length > 0) {\r\n                const avgImprovement = improvements.reduce((sum, imp) => sum + imp, 0) / improvements.length;\r\n                insights.push({\r\n                    type: 'success',\r\n                    icon: '💪',\r\n                    title: 'Progressi di Forza',\r\n                    message: `Miglioramento medio del ${avgImprovement.toFixed(1)}% sui tuoi esercizi!`\r\n                });\r\n            }\r\n        }\r\n\r\n        // Fallback se non ci sono insights specifici\r\n        if (insights.length === 0) {\r\n            insights.push({\r\n                type: 'info',\r\n                icon: '🚀',\r\n                title: 'Continua Così',\r\n                message: 'Mantieni la disciplina e i risultati arriveranno!'\r\n            });\r\n        }\r\n\r\n        return insights.slice(0, 3); // Massimo 3 insights\r\n    };\r\n\r\n    const dynamicInsights = generateInsights();\r\n\r\n    return (\r\n        <div className=\"analytics-premium\">\r\n            {/* HEADER CON BACK BUTTON */}\r\n            <div className=\"analytics-header\">\r\n                <button \r\n                    className=\"back-button\"\r\n                    onClick={() => navigate('/')}\r\n                    title=\"Torna alla Dashboard\"\r\n                >\r\n                    <span className=\"back-icon\">←</span>\r\n                    <span className=\"back-text\">Dashboard</span>\r\n                </button>\r\n                \r\n                <div className=\"header-title\">\r\n                    <h1>📊 ANALYTICS ENTERPRISE</h1>\r\n                    <p className=\"subtitle\">Dashboard avanzata per il monitoraggio dei progressi</p>\r\n                </div>\r\n\r\n                <div className=\"period-selector\">\r\n                    <select \r\n                        value={selectedPeriod} \r\n                        onChange={(e) => setSelectedPeriod(e.target.value)}\r\n                        className=\"period-select\"\r\n                    >\r\n                        <option value=\"1month\">1 Mese</option>\r\n                        <option value=\"3months\">3 Mesi</option>\r\n                        <option value=\"6months\">6 Mesi</option>\r\n                        <option value=\"1year\">1 Anno</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            {/* KPI CARDS */}\r\n            <div className=\"kpi-grid\">\r\n                <div className=\"kpi-card primary\">\r\n                    <div className=\"kpi-icon\">💪</div>\r\n                    <div className=\"kpi-data\">\r\n                        <span className=\"kpi-value\">+{stats.weightGain}kg</span>\r\n                        <span className=\"kpi-label\">Peso Totale</span>\r\n                    </div>\r\n                    <div className=\"kpi-trend up\">↗ +15%</div>\r\n                </div>\r\n\r\n                <div className=\"kpi-card success\">\r\n                    <div className=\"kpi-icon\">🔥</div>\r\n                    <div className=\"kpi-data\">\r\n                        <span className=\"kpi-value\">+{stats.muscleGain}kg</span>\r\n                        <span className=\"kpi-label\">Massa Muscolare</span>\r\n                    </div>\r\n                    <div className=\"kpi-trend up\">↗ +12%</div>\r\n                </div>\r\n\r\n                <div className=\"kpi-card warning\">\r\n                    <div className=\"kpi-icon\">⚖️</div>\r\n                    <div className=\"kpi-data\">\r\n                        <span className=\"kpi-value\">-{stats.bodyFatLoss}%</span>\r\n                        <span className=\"kpi-label\">Grasso Corporeo</span>\r\n                    </div>\r\n                    <div className=\"kpi-trend down\">↘ -13%</div>\r\n                </div>\r\n\r\n                <div className=\"kpi-card info\">\r\n                    <div className=\"kpi-icon\">🏆</div>\r\n                    <div className=\"kpi-data\">\r\n                        <span className=\"kpi-value\">{stats.currentStreak}</span>\r\n                        <span className=\"kpi-label\">Giorni Consecutivi</span>\r\n                    </div>\r\n                    <div className=\"kpi-trend up\">🔥 Streak!</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* GRAFICI PRINCIPALI */}\r\n            <div className=\"charts-grid\">\r\n                {/* Grafico Progresso Peso */}\r\n                <div className=\"chart-container\">\r\n                    <div className=\"chart-header\">\r\n                        <h3>📈 PROGRESSO COMPOSIZIONE CORPOREA</h3>\r\n                        <div className=\"chart-controls\">\r\n                            <button \r\n                                className={`control-btn ${selectedMetric === 'weight' ? 'active' : ''}`}\r\n                                onClick={() => setSelectedMetric('weight')}\r\n                            >\r\n                                Peso\r\n                            </button>\r\n                            <button \r\n                                className={`control-btn ${selectedMetric === 'muscle' ? 'active' : ''}`}\r\n                                onClick={() => setSelectedMetric('muscle')}\r\n                            >\r\n                                Muscoli\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"chart-wrapper\">\r\n                        <Line data={weightChartData} options={chartOptions} />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Grafico Volume Allenamenti */}\r\n                <div className=\"chart-container\">\r\n                    <div className=\"chart-header\">\r\n                        <h3>🏋️ VOLUME & DURATA ALLENAMENTI</h3>\r\n                        <div className=\"chart-stats\">\r\n                            <span>Volume Medio: {workoutData.volumeData.length > 0 ? Math.round(stats.totalVolume / workoutData.volumeData.length) : 0}kg</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"chart-wrapper\">\r\n                        <Bar data={workoutChartData} options={workoutChartOptions} />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Grafico Distribuzione Muscoli */}\r\n                <div className=\"chart-container\">\r\n                    <div className=\"chart-header\">\r\n                        <h3>🎯 DISTRIBUZIONE GRUPPI MUSCOLARI</h3>\r\n                        <div className=\"chart-stats\">\r\n                            <span>Sessioni Totali: {stats.totalWorkouts}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"chart-wrapper\">\r\n                        <Doughnut data={muscleChartData} options={chartOptions} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PERFORMANCE ESERCIZI (DATI REALI) */}\r\n            <div className=\"exercises-performance\">\r\n                <h3>🏆 TOP PERFORMANCE ESERCIZI</h3>\r\n                <div className=\"exercises-grid\">\r\n                    {realData && realData.stats.strengthProgress ? \r\n                        Object.entries(realData.stats.strengthProgress).map(([exerciseName, data], index) => (\r\n                            <div key={index} className=\"exercise-card\">\r\n                                <div className=\"exercise-header\">\r\n                                    <h4>{exerciseName}</h4>\r\n                                    <span className=\"improvement\">+{data.improvement || 0}%</span>\r\n                                </div>\r\n                                <div className=\"exercise-progress\">\r\n                                    <div className=\"progress-bar\">\r\n                                        <div \r\n                                            className=\"progress-fill\"\r\n                                            style={{ width: `${Math.min((data.currentWeight / 200) * 100, 100)}%` }}\r\n                                        ></div>\r\n                                    </div>\r\n                                    <div className=\"exercise-stats\">\r\n                                        <span>Attuale: <strong>{data.currentWeight || 0}kg</strong></span>\r\n                                        <span>Inizio: {data.initialWeight || 0}kg</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                        : \r\n                        <div className=\"no-data-message\">\r\n                            <h4>🏋️ Nessun Dato Disponibile</h4>\r\n                            <p>Aggiungi workout con pesi per vedere i progressi di forza</p>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n            {/* NUTRITION & RECOVERY STATS */}\r\n            <div className=\"secondary-stats\">\r\n                <div className=\"stat-section\">\r\n                    <h3>🥗 NUTRITION INSIGHTS (DATI REALI)</h3>\r\n                    <div className=\"stat-cards\">\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-icon\">💪</div>\r\n                            <div className=\"stat-info\">\r\n                                <span className=\"stat-value\">{realData?.nutrition?.weeklyAdherence ? \r\n                                    Math.round(realData.nutrition.weeklyAdherence.reduce((sum, day) => sum + (day.mealsCompleted * 25), 0) / 7) \r\n                                    : 0}g</span>\r\n                                <span className=\"stat-label\">Proteine/Giorno</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-icon\">🔥</div>\r\n                            <div className=\"stat-info\">\r\n                                <span className=\"stat-value\">{realData?.nutrition?.weeklyAdherence ? \r\n                                    Math.round(realData.nutrition.weeklyAdherence.reduce((sum, day) => sum + (day.mealsCompleted * 500), 0) / 7)\r\n                                    : 0}</span>\r\n                                <span className=\"stat-label\">Calorie/Giorno</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-icon\">📊</div>\r\n                            <div className=\"stat-info\">\r\n                                <span className=\"stat-value\">{stats.nutritionAdherence}%</span>\r\n                                <span className=\"stat-label\">Aderenza Dieta</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"stat-icon\">🍕</div>\r\n                            <div className=\"stat-info\">\r\n                                <span className=\"stat-value\">{realData?.nutrition?.monthlyCheats || 0}</span>\r\n                                <span className=\"stat-label\">Sgarri Mese</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-section\">\r\n                    <h3>🛁 RECOVERY INSIGHTS (DATI REALI)</h3>\r\n                    <div className=\"recovery-list\">\r\n                        {realData && realData.recovery && realData.recovery.length > 0 ? \r\n                            realData.recovery.slice(0, 4).map((session, index) => (\r\n                                <div key={index} className=\"recovery-item\">\r\n                                    <div className=\"recovery-type\">{session.type || 'Sessione'}</div>\r\n                                    <div className=\"recovery-duration\">{session.duration || 0}min</div>\r\n                                    <div className=\"recovery-quality\">\r\n                                        {'★'.repeat(Math.floor((session.quality || 5) / 2))}\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                            :\r\n                            <div className=\"no-recovery-data\">\r\n                                <p>🛁 Nessuna sessione recovery registrata</p>\r\n                                <small>Usa la sezione Recovery per tracciare le tue sessioni</small>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* INSIGHTS AI DINAMICI */}\r\n            <div className=\"ai-insights\">\r\n                <h3>🤖 AI INSIGHTS & RACCOMANDAZIONI (BASATE SUI TUOI DATI)</h3>\r\n                <div className=\"insights-grid\">\r\n                    {dynamicInsights.map((insight, index) => (\r\n                        <div key={index} className={`insight-card ${insight.type}`}>\r\n                            <div className=\"insight-icon\">{insight.icon}</div>\r\n                            <div className=\"insight-content\">\r\n                                <h4>{insight.title}</h4>\r\n                                <p>{insight.message}</p>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* MESSAGGIO DATI REALI */}\r\n            <div className=\"data-status\" style={{\r\n                padding: '20px',\r\n                background: realData ? 'rgba(34, 197, 94, 0.1)' : 'rgba(239, 68, 68, 0.1)',\r\n                borderRadius: '10px',\r\n                textAlign: 'center',\r\n                marginTop: '20px',\r\n                border: `2px solid ${realData ? '#22c55e' : '#ef4444'}`\r\n            }}>\r\n                <h3 style={{ color: realData ? '#22c55e' : '#ef4444' }}>\r\n                    {realData ? '✅ ANALYTICS REALI ATTIVI' : '⚠️ NESSUN DATO DISPONIBILE'}\r\n                </h3>\r\n                <p style={{ color: realData ? '#22c55e' : '#ef4444' }}>\r\n                    {realData ? \r\n                        'Tutti i grafici e le statistiche sono basati sui tuoi dati reali!' :\r\n                        'Aggiungi workout, misurazioni e completa pasti per vedere analytics reali.'\r\n                    }\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdvancedAnalytics;"],"sourceRoot":""}