{"version":3,"sources":["components/MotivationalQuotes.js","components/CalendarStreak.js","components/ExerciseTracker.js","components/SupplementStack.js","components/RecoveryProtocol.js","components/Dashboard.js","components/WorkoutTimer.js","components/TechniqueGuides.js","components/Workout.js","components/Nutrition.js","components/Supplements.js","components/Recovery.js","components/Progress.js","App.js","index.js"],"names":["MotivationalQuotes","legendaryQuotes","day","quote","author","context","additionalQuotes","getTodayQuote","today","Date","getDay","find","q","getRandomAdditionalQuote","Math","floor","random","length","CalendarStreak","currentDate","setCurrentDate","React","useState","streakData","setStreakData","monthlyStats","setMonthlyStats","calculateMonthlyStats","data","arguments","undefined","currentMonth","getMonth","currentYear","getFullYear","monthlyWorkouts","Object","keys","filter","dateKey","date","completed","currentStreak","calculateCurrentStreak","longestStreak","calculateLongestStreak","weeklyAverage","calculateWeeklyAverage","lastUpdated","streak","checkDate","toISOString","split","setDate","getDate","toDateString","maxStreak","sortedDates","key","sort","i","prevDate","max","fourWeeksAgo","toFixed","useEffect","loadStreakData","saved","localStorage","getItem","JSON","parse","markWorkoutCompleted","workoutType","exercises","updated","_objectSpread","timestamp","setItem","stringify","getDaysInMonth","year","month","firstDay","daysInMonth","startingDayOfWeek","days","push","currentDay","isCompleted","isToday","navigateMonth","direction","newDate","setMonth","getStreakColor","getWorkoutTypeEmoji","type","monthNames","dayNames","ExerciseTracker","exerciseData","setExerciseData","sessionProgress","setSessionProgress","personalRecords","setPersonalRecords","updatePersonalRecord","exerciseName","weight","reps","oneRepMax","calculateOneRepMax","currentPR","updatedPR","parseFloat","parseInt","previousRecord","round","updateSessionProgress","todayExercises","values","ex","prev","totalCompleted","getExerciseHistory","limit","a","b","slice","isExerciseCompletedToday","some","loadExerciseData","savedPR","markExerciseCompleted","sets","notes","rir","exerciseId","concat","exerciseEntry","id","getTodayProgress","workoutExercises","total","percentage","remaining","getWeeklyStats","oneWeekAgo","weeklyExercises","totalSets","reduce","sum","totalReps","totalVolume","uniqueExercises","Set","map","size","sessions","averageWeight","getMonthlyProgress","oneMonthAgo","monthlyExercises","workoutDays","totalExercises","averageVolume","getExerciseProgressColor","_history$","history","lastWeight","avgWeight","SupplementStack","supplementSchedule","setSupplementSchedule","takenToday","setTakenToday","evidenceBasedSupplements","creatine","name","dosage","timing","evidence","benefits","mechanism","color","icon","citrulline","betaAlanine","omega3","caffeine","vitaminD","isSupplementTakenToday","supplementKey","entryKey","taken","loadTodaysSupplements","todayData","forEach","includes","removedSupplements","hmb","forskolin","rAla","bcaa","glutamine","markSupplementTaken","supplement","getSupplementProgress","totalSupplements","takenCount","getWeeklySupplementStats","weeklyEntries","entry","consistency","supplementEntries","getOptimalTiming","currentTime","hour","getHours","recommendations","reason","workoutHour","createSupplementPlan","workoutSchedule","goals","core","performance","endurance","morning","preWorkout","postWorkout","evening","RecoveryProtocol","recoveryLog","setRecoveryLog","todayRecovery","setTodayRecovery","thermoTherapyProtocols","sauna","temperature","humidity","duration","protocol","precautions","scientificEvidence","steamRoom","iceBath","loadRecoveryData","todaySessions","s","totalTime","contrastTherapy","optimalTiming","immediate","after2h","after4h","nextMorning","restDays","competition","before","after","biohacking","breathwork","supplements","preSauna","preIceBath","postBoth","monitoring","heartRate","bodyTemp","subjective","markRecoverySession","therapy","effectiveness","sessionId","now","session","updatedLog","getRecoveryRecommendation","lastWorkout","workoutIntensity","stressLevel","hoursSinceWorkout","priority","getRecoveryStats","last7Days","sessionDate","weekAgo","stats","totalSessions","averageEffectiveness","therapyBreakdown","time","Dashboard","quotesHook","calendarHook","exerciseHook","supplementsHook","recoveryHook","dashboardData","setDashboardData","currentWeight","muscleGain","workoutSessions","totalWorkoutTime","weeklyTime","daysActive","todayWorkout","setTodayWorkout","goals12Week","setGoals12Week","startWeight","targetWeight","targetBench","targetSquat","targetDeadlift","startDate","weeksCompleted","loadDashboardData","_workoutSessions$","progressData","timeStats","latestProgress","firstProgress","getTime","muscleMass","focus","todayQuote","todayProgress","supplementProgress","weeklyStats","recoveryStats","_jsxs","className","children","_jsx","style","width","Link","to","index","min","WorkoutTimer","_ref","onSessionComplete","isActive","setIsActive","currentExercise","setCurrentExercise","sessionTime","setSessionTime","exerciseTime","setExerciseTime","setExercises","currentExerciseIndex","setCurrentExerciseIndex","interval","setInterval","clearInterval","nextExercise","calculateWeeklyTime","calculateMonthlyTime","formatTime","seconds","mins","secs","toString","padStart","placeholder","value","onChange","e","target","disabled","onClick","pauseSession","completeSession","sessionData","updatedSessions","updatedTimeStats","monthlyTime","sessionsCompleted","startSession","exercise","TechniqueGuides","masterTechniques","category","difficulty","muscles","setup","execution","breathing","commonMistakes","progressionTips","safetyNotes","getTechniqueCue","phase","getProgressionLevel","userLevel","beginner","approach","volume","intermediate","advanced","getInjuryPrevention","prevention","warmup","cooldown","redFlags","alternatives","getMindMuscleCues","getExerciseRating","safety","transferability","overall","Workout","selectedDay","setSelectedDay","completedWorkouts","setCompletedWorkouts","selectedExercise","setSelectedExercise","exerciseForm","setExerciseForm","showTechnique","setShowTechnique","workoutPlan","subtitle","rest","isWorkoutCompletedToday","workout","loadCompletedWorkouts","console","log","entries","_ref2","Nutrition","Supplements","Recovery","Progress","setProgressData","newEntry","setNewEntry","bodyFat","chest","arms","waist","thighs","setTimeStats","saveProgressData","minutes","hours","loadProgressData","savedTimeStats","addEntry","deleteEntry","App","Router","Routes","Route","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c79352cb.chunk.js","sourcesContent":["import React from 'react';\n\nconst MotivationalQuotes = () => {\n    const legendaryQuotes = [\n        {\n            day: 1, // Lunedì\n            quote: \"Champions aren't made in the gyms. Champions are made from something deep inside them: a desire, a dream, a vision.\",\n            author: \"Muhammad Ali\",\n            context: \"Petto + Bicipiti - Inizia la settimana con la forza del campione\"\n        },\n        {\n            day: 2, // Martedì  \n            quote: \"The cave you fear to enter holds the treasure you seek.\",\n            author: \"Arnold Schwarzenegger\",\n            context: \"Dorso + Tricipiti - Affronta la paura, trova la forza\"\n        },\n        {\n            day: 3, // Mercoledì\n            quote: \"Strength does not come from physical capacity. It comes from an indomitable will.\",\n            author: \"Mahatma Gandhi (adattato da Kobe Bryant)\",\n            context: \"Gambe Complete - La vera forza viene dalla mente\"\n        },\n        {\n            day: 4, // Giovedì\n            quote: \"Recovery is not a sign of weakness, it's a strategy of champions.\",\n            author: \"LeBron James\",\n            context: \"Recupero Attivo - Il riposo è parte della vittoria\"\n        },\n        {\n            day: 5, // Venerdì\n            quote: \"Excellence is not a skill, it's an attitude.\",\n            author: \"Ralph Marston (filosofia Michael Jordan)\",\n            context: \"Spalle + Core - L'eccellenza è una scelta quotidiana\"\n        },\n        {\n            day: 6, // Sabato\n            quote: \"The body achieves what the mind believes.\",\n            author: \"Napoleon Hill (ispirato da Serena Williams)\",\n            context: \"Posteriori + Conditioning - Credi e raggiungerai\"\n        },\n        {\n            day: 0, // Domenica\n            quote: \"Rest when you're weary. Refresh and renew yourself, your body, your mind, your spirit. Then get back to work.\",\n            author: \"Ralph Marston\",\n            context: \"Riposo Completo - Rigenera per dominare\"\n        }\n    ];\n\n    const additionalQuotes = [\n        {\n            quote: \"I don't measure a man's success by how high he climbs but how high he bounces when he hits bottom.\",\n            author: \"George S. Patton\",\n            context: \"Per i giorni difficili\"\n        },\n        {\n            quote: \"The will to win, the desire to succeed, the urge to reach your full potential... these are the keys that will unlock the door to personal excellence.\",\n            author: \"Confucio (filosofia Kobe Bryant)\",\n            context: \"Quando manca la motivazione\"\n        },\n        {\n            quote: \"Pain is temporary. Quitting lasts forever.\",\n            author: \"Lance Armstrong\",\n            context: \"Durante l'allenamento intenso\"\n        },\n        {\n            quote: \"You have power over your mind - not outside events. Realize this, and you will find strength.\",\n            author: \"Marcus Aurelius (filosofia Tom Brady)\",\n            context: \"Controllo mentale\"\n        },\n        {\n            quote: \"The brick walls are there for a reason. The brick walls are not there to keep us out. The brick walls are there to give us a chance to show how badly we want something.\",\n            author: \"Randy Pausch (mentalità Cristiano Ronaldo)\",\n            context: \"Superare gli ostacoli\"\n        }\n    ];\n\n    const getTodayQuote = () => {\n        const today = new Date().getDay(); // 0 = Domenica, 1 = Lunedì, etc.\n        return legendaryQuotes.find(q => q.day === today) || legendaryQuotes[0];\n    };\n\n    const getRandomAdditionalQuote = () => {\n        return additionalQuotes[Math.floor(Math.random() * additionalQuotes.length)];\n    };\n\n    return {\n        getTodayQuote,\n        getRandomAdditionalQuote,\n        legendaryQuotes,\n        additionalQuotes\n    };\n};\n\nexport default MotivationalQuotes;","import React from 'react';\n\nconst CalendarStreak = () => {\n    const [currentDate, setCurrentDate] = React.useState(new Date());\n    const [streakData, setStreakData] = React.useState({});\n    const [monthlyStats, setMonthlyStats] = React.useState({});\n\n    const loadStreakData = () => {\n        const saved = localStorage.getItem('streakData');\n        if (saved) {\n            setStreakData(JSON.parse(saved));\n        }\n    };\n\n    const saveStreakData = (data) => {\n        localStorage.setItem('streakData', JSON.stringify(data));\n        setStreakData(data);\n    };\n\n    const markWorkoutCompleted = (date, workoutType, exercises = []) => {\n        const dateKey = date.toISOString().split('T')[0];\n        const updated = {\n            ...streakData,\n            [dateKey]: {\n                completed: true,\n                workoutType,\n                exercises,\n                timestamp: new Date().toISOString()\n            }\n        };\n        saveStreakData(updated);\n        calculateMonthlyStats(updated);\n    };\n\n    const calculateMonthlyStats = (data = streakData) => {\n        const currentMonth = currentDate.getMonth();\n        const currentYear = currentDate.getFullYear();\n        \n        const monthlyWorkouts = Object.keys(data).filter(dateKey => {\n            const date = new Date(dateKey);\n            return date.getMonth() === currentMonth && \n                   date.getFullYear() === currentYear &&\n                   data[dateKey].completed;\n        }).length;\n\n        const currentStreak = calculateCurrentStreak(data);\n        const longestStreak = calculateLongestStreak(data);\n        const weeklyAverage = calculateWeeklyAverage(data);\n\n        setMonthlyStats({\n            monthlyWorkouts,\n            currentStreak,\n            longestStreak,\n            weeklyAverage,\n            lastUpdated: new Date()\n        });\n    };\n\n    const calculateCurrentStreak = (data) => {\n        const today = new Date();\n        let streak = 0;\n        let checkDate = new Date(today);\n\n        while (checkDate) {\n            const dateKey = checkDate.toISOString().split('T')[0];\n            if (data[dateKey] && data[dateKey].completed) {\n                streak++;\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else if (streak === 0 && checkDate.toDateString() === today.toDateString()) {\n                // Se oggi non è completato, controlla ieri\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else {\n                break;\n            }\n            \n            // Evita loop infiniti\n            if (streak > 365) break;\n        }\n        \n        return streak;\n    };\n\n    const calculateLongestStreak = (data) => {\n        let maxStreak = 0;\n        let currentStreak = 0;\n        \n        const sortedDates = Object.keys(data)\n            .filter(key => data[key].completed)\n            .sort();\n        \n        for (let i = 0; i < sortedDates.length; i++) {\n            if (i === 0) {\n                currentStreak = 1;\n            } else {\n                const prevDate = new Date(sortedDates[i - 1]);\n                const currDate = new Date(sortedDates[i]);\n                const daysDiff = (currDate - prevDate) / (1000 * 60 * 60 * 24);\n                \n                if (daysDiff === 1) {\n                    currentStreak++;\n                } else {\n                    maxStreak = Math.max(maxStreak, currentStreak);\n                    currentStreak = 1;\n                }\n            }\n        }\n        \n        return Math.max(maxStreak, currentStreak);\n    };\n\n    const calculateWeeklyAverage = (data) => {\n        const fourWeeksAgo = new Date();\n        fourWeeksAgo.setDate(fourWeeksAgo.getDate() - 28);\n        \n        const recentWorkouts = Object.keys(data).filter(dateKey => {\n            const date = new Date(dateKey);\n            return date >= fourWeeksAgo && data[dateKey].completed;\n        }).length;\n        \n        return (recentWorkouts / 4).toFixed(1);\n    };\n\n    const getDaysInMonth = (date) => {\n        const year = date.getFullYear();\n        const month = date.getMonth();\n        const firstDay = new Date(year, month, 1);\n        const lastDay = new Date(year, month + 1, 0);\n        const daysInMonth = lastDay.getDate();\n        const startingDayOfWeek = firstDay.getDay();\n\n        const days = [];\n        \n        // Aggiungi giorni vuoti per allineare il calendario\n        for (let i = 0; i < startingDayOfWeek; i++) {\n            days.push(null);\n        }\n        \n        // Aggiungi tutti i giorni del mese\n        for (let day = 1; day <= daysInMonth; day++) {\n            const currentDay = new Date(year, month, day);\n            const dateKey = currentDay.toISOString().split('T')[0];\n            days.push({\n                date: currentDay,\n                day,\n                isCompleted: streakData[dateKey] && streakData[dateKey].completed,\n                workoutType: streakData[dateKey] ? streakData[dateKey].workoutType : null,\n                isToday: currentDay.toDateString() === new Date().toDateString()\n            });\n        }\n        \n        return days;\n    };\n\n    const navigateMonth = (direction) => {\n        const newDate = new Date(currentDate);\n        newDate.setMonth(newDate.getMonth() + direction);\n        setCurrentDate(newDate);\n    };\n\n    const getStreakColor = (streak) => {\n        if (streak >= 30) return '#ff006e'; // Rosa intenso\n        if (streak >= 21) return '#ff9500'; // Arancione \n        if (streak >= 14) return '#00ff88'; // Verde\n        if (streak >= 7) return '#00ffff';  // Cyan\n        return '#ffffff'; // Bianco\n    };\n\n    const getWorkoutTypeEmoji = (type) => {\n        const emojiMap = {\n            'Petto + Bicipiti': '💪',\n            'Dorso + Tricipiti + Collo (A)': '🏋️',\n            'Gambe Complete': '🦵',\n            'Recupero Attivo': '🧘',\n            'Spalle Complete + Collo (B)': '💫',\n            'Posteriori + Conditioning': '🔥',\n            'Riposo Completo': '😴'\n        };\n        return emojiMap[type] || '💪';\n    };\n\n    React.useEffect(() => {\n        loadStreakData();\n    }, []);\n\n    React.useEffect(() => {\n        calculateMonthlyStats();\n    }, [streakData, currentDate]);\n\n    const monthNames = [\n        'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n        'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n    ];\n\n    const dayNames = ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab'];\n\n    return {\n        currentDate,\n        streakData,\n        monthlyStats,\n        markWorkoutCompleted,\n        getDaysInMonth,\n        navigateMonth,\n        getStreakColor,\n        getWorkoutTypeEmoji,\n        monthNames,\n        dayNames,\n        calculateCurrentStreak: () => calculateCurrentStreak(streakData)\n    };\n};\n\nexport default CalendarStreak;","import React from 'react';\n\nconst ExerciseTracker = () => {\n    const [exerciseData, setExerciseData] = React.useState({});\n    const [sessionProgress, setSessionProgress] = React.useState({});\n    const [personalRecords, setPersonalRecords] = React.useState({});\n\n    const loadExerciseData = () => {\n        const saved = localStorage.getItem('exerciseData');\n        if (saved) {\n            setExerciseData(JSON.parse(saved));\n        }\n        \n        const savedPR = localStorage.getItem('personalRecords');\n        if (savedPR) {\n            setPersonalRecords(JSON.parse(savedPR));\n        }\n    };\n\n    const saveExerciseData = (data) => {\n        localStorage.setItem('exerciseData', JSON.stringify(data));\n        setExerciseData(data);\n    };\n\n    const savePersonalRecords = (data) => {\n        localStorage.setItem('personalRecords', JSON.stringify(data));\n        setPersonalRecords(data);\n    };\n\n    const markExerciseCompleted = (exerciseName, sets, reps, weight, notes = '', rir = null) => {\n        const today = new Date().toISOString().split('T')[0];\n        const exerciseId = `${exerciseName}_${today}`;\n        \n        const exerciseEntry = {\n            id: exerciseId,\n            exerciseName,\n            date: today,\n            sets: parseInt(sets),\n            reps: parseInt(reps),\n            weight: parseFloat(weight),\n            notes,\n            rir,\n            timestamp: new Date().toISOString(),\n            completed: true\n        };\n\n        const updated = {\n            ...exerciseData,\n            [exerciseId]: exerciseEntry\n        };\n        \n        saveExerciseData(updated);\n        \n        // Aggiorna record personali se necessario\n        updatePersonalRecord(exerciseName, weight, reps);\n        \n        // Aggiorna progresso sessione\n        updateSessionProgress(exerciseName);\n        \n        return exerciseEntry;\n    };\n\n    const updatePersonalRecord = (exerciseName, weight, reps) => {\n        const oneRepMax = calculateOneRepMax(weight, reps);\n        const currentPR = personalRecords[exerciseName] || { weight: 0, reps: 0, oneRepMax: 0, date: null };\n        \n        if (oneRepMax > currentPR.oneRepMax || \n            (weight > currentPR.weight && reps >= currentPR.reps)) {\n            \n            const updatedPR = {\n                ...personalRecords,\n                [exerciseName]: {\n                    weight: parseFloat(weight),\n                    reps: parseInt(reps),\n                    oneRepMax,\n                    date: new Date().toISOString(),\n                    previousRecord: currentPR.oneRepMax\n                }\n            };\n            \n            savePersonalRecords(updatedPR);\n            \n            // Notifica nuovo record\n            return true;\n        }\n        \n        return false;\n    };\n\n    const calculateOneRepMax = (weight, reps) => {\n        // Formula Epley: 1RM = w * (1 + r/30)\n        return Math.round(weight * (1 + reps / 30));\n    };\n\n    const updateSessionProgress = (exerciseName) => {\n        const today = new Date().toISOString().split('T')[0];\n        const todayExercises = Object.values(exerciseData).filter(ex => \n            ex.date === today && ex.completed\n        );\n        \n        setSessionProgress(prev => ({\n            ...prev,\n            [exerciseName]: true,\n            totalCompleted: todayExercises.length + 1\n        }));\n    };\n\n    const getExerciseHistory = (exerciseName, limit = 10) => {\n        return Object.values(exerciseData)\n            .filter(ex => ex.exerciseName === exerciseName)\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .slice(0, limit);\n    };\n\n    const getTodayProgress = (workoutExercises) => {\n        const today = new Date().toISOString().split('T')[0];\n        const completedToday = Object.values(exerciseData).filter(ex => \n            ex.date === today && ex.completed\n        );\n        \n        const completed = completedToday.length;\n        const total = workoutExercises ? workoutExercises.length : 0;\n        const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;\n        \n        return {\n            completed,\n            total,\n            percentage,\n            remaining: Math.max(0, total - completed)\n        };\n    };\n\n    const getWeeklyStats = () => {\n        const oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n        \n        const weeklyExercises = Object.values(exerciseData).filter(ex => \n            new Date(ex.date) >= oneWeekAgo && ex.completed\n        );\n        \n        const totalSets = weeklyExercises.reduce((sum, ex) => sum + ex.sets, 0);\n        const totalReps = weeklyExercises.reduce((sum, ex) => sum + (ex.sets * ex.reps), 0);\n        const totalVolume = weeklyExercises.reduce((sum, ex) => sum + (ex.weight * ex.sets * ex.reps), 0);\n        const uniqueExercises = new Set(weeklyExercises.map(ex => ex.exerciseName)).size;\n        \n        return {\n            sessions: weeklyExercises.length,\n            totalSets,\n            totalReps,\n            totalVolume: Math.round(totalVolume),\n            uniqueExercises,\n            averageWeight: weeklyExercises.length > 0 ? \n                Math.round(weeklyExercises.reduce((sum, ex) => sum + ex.weight, 0) / weeklyExercises.length) : 0\n        };\n    };\n\n    const getMonthlyProgress = () => {\n        const oneMonthAgo = new Date();\n        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\n        \n        const monthlyExercises = Object.values(exerciseData).filter(ex => \n            new Date(ex.date) >= oneMonthAgo && ex.completed\n        );\n        \n        const workoutDays = new Set(monthlyExercises.map(ex => ex.date)).size;\n        const totalVolume = monthlyExercises.reduce((sum, ex) => \n            sum + (ex.weight * ex.sets * ex.reps), 0\n        );\n        \n        return {\n            workoutDays,\n            totalExercises: monthlyExercises.length,\n            totalVolume: Math.round(totalVolume),\n            averageVolume: workoutDays > 0 ? Math.round(totalVolume / workoutDays) : 0\n        };\n    };\n\n    const isExerciseCompletedToday = (exerciseName) => {\n        const today = new Date().toISOString().split('T')[0];\n        return Object.values(exerciseData).some(ex => \n            ex.exerciseName === exerciseName && \n            ex.date === today && \n            ex.completed\n        );\n    };\n\n    const getExerciseProgressColor = (exerciseName) => {\n        if (isExerciseCompletedToday(exerciseName)) {\n            return '#00ff88'; // Verde completato\n        }\n        \n        const history = getExerciseHistory(exerciseName, 3);\n        if (history.length === 0) {\n            return '#ffffff'; // Bianco nuovo esercizio\n        }\n        \n        // Analisi progressione\n        const lastWeight = history[0]?.weight || 0;\n        const avgWeight = history.reduce((sum, ex) => sum + ex.weight, 0) / history.length;\n        \n        if (lastWeight > avgWeight * 1.05) {\n            return '#ff9500'; // Arancione in progressione\n        } else if (lastWeight < avgWeight * 0.95) {\n            return '#ff006e'; // Rosa in calo\n        }\n        \n        return '#00ffff'; // Cyan stabile\n    };\n\n    React.useEffect(() => {\n        loadExerciseData();\n    }, []);\n\n    return {\n        exerciseData,\n        sessionProgress,\n        personalRecords,\n        markExerciseCompleted,\n        getExerciseHistory,\n        getTodayProgress,\n        getWeeklyStats,\n        getMonthlyProgress,\n        isExerciseCompletedToday,\n        getExerciseProgressColor,\n        updatePersonalRecord,\n        calculateOneRepMax\n    };\n};\n\nexport default ExerciseTracker;","import React from 'react';\n\nconst SupplementStack = () => {\n    const [supplementSchedule, setSupplementSchedule] = React.useState({});\n    const [takenToday, setTakenToday] = React.useState({});\n\n    const evidenceBasedSupplements = {\n        creatine: {\n            name: 'Creatina Monoidrato',\n            dosage: '3-5g',\n            timing: 'Post-workout o qualsiasi momento',\n            evidence: 'A+ (Oltre 500 studi)',\n            benefits: ['↑ Forza 5-15%', '↑ Potenza esplosiva', '↑ Volume allenamento', '↑ Massa muscolare'],\n            mechanism: 'Rigenera ATP per contrazioni muscolari ad alta intensità',\n            notes: 'Loading non necessario. Consistenza > timing. Funziona meglio con carboidrati.',\n            color: '#00ff88',\n            icon: '💪'\n        },\n        citrulline: {\n            name: 'L-Citrullina Malato',\n            dosage: '6-8g',\n            timing: '30-45min pre-workout',\n            evidence: 'A (Multipli RCT)',\n            benefits: ['↑ Pump muscolare', '↑ Resistenza', '↓ DOMS', '↑ Ossido nitrico'],\n            mechanism: 'Precursore arginina → NO → vasodilatazione',\n            notes: 'Più efficace della L-Arginina. Sinergia con caffeina.',\n            color: '#ff9500',\n            icon: '🔥'\n        },\n        betaAlanine: {\n            name: 'Beta-Alanina',\n            dosage: '3-5g',\n            timing: 'Divisa in 2-3 dosi giornaliere',\n            evidence: 'A (Evidenza consolidata)',\n            benefits: ['↑ Resistenza muscolare', '↓ Fatica 1-4 min sforzo', '↑ Volume alto-rep'],\n            mechanism: 'Aumenta carnosina muscolare → buffer acido lattico',\n            notes: 'Loading 2-4 settimane. Possibile parestesia (innocua).',\n            color: '#00ffff',\n            icon: '⚡'\n        },\n        omega3: {\n            name: 'Omega-3 EPA/DHA',\n            dosage: '2-3g EPA+DHA',\n            timing: 'Con pasti contenenti grassi',\n            evidence: 'A+ (Migliaia di studi)',\n            benefits: ['↓ Infiammazione', '↑ Recupero', '↑ Sintesi proteica', '↑ Salute cardiovascolare'],\n            mechanism: 'Modulazione cascata infiammatoria e membrane cellulari',\n            notes: 'Ratio EPA:DHA 2:1 ottimale. Qualità > quantità.',\n            color: '#0099ff',\n            icon: '🐟'\n        },\n        caffeine: {\n            name: 'Caffeina',\n            dosage: '200-400mg',\n            timing: '30-45min pre-workout',\n            evidence: 'A+ (Gold standard)',\n            benefits: ['↑ Focus', '↑ Energia', '↑ Performance', '↑ Metabolismo grassi'],\n            mechanism: 'Antagonista adenosina → vigilanza + mobilizzazione grassi',\n            notes: 'Tolleranza sviluppa rapidamente. Ciclare 1-2 settimane ogni mese.',\n            color: '#8B4513',\n            icon: '☕'\n        },\n        vitaminD: {\n            name: 'Vitamina D3',\n            dosage: '2000-4000 IU',\n            timing: 'Con pasto contenente grassi',\n            evidence: 'A (Critico se carente)',\n            benefits: ['↑ Testosterone', '↑ Forza', '↑ Salute ossea', '↑ Sistema immunitario'],\n            mechanism: 'Regolazione ormonale e assorbimento calcio',\n            notes: 'Test ematico raccomandato. Target: 30-50 ng/mL.',\n            color: '#FFD700',\n            icon: '☀️'\n        }\n    };\n\n    const removedSupplements = {\n        hmb: 'Scarsa evidenza per atleti allenati. Solo utile per anziani/principianti.',\n        forskolin: 'Studi inconsistenti. Nessun beneficio provato su composizione corporea.',\n        rAla: 'Evidenza limitata. Costo-beneficio sfavorevole vs omega-3.',\n        bcaa: 'Inutili se assumi proteine complete. Whey protein superiore.',\n        glutamine: 'Non ergogenica in soggetti sani. Solo utile in immunodepressione.'\n    };\n\n    const getOptimalTiming = (currentTime) => {\n        const hour = currentTime.getHours();\n        const recommendations = [];\n\n        // Mattino (6-10)\n        if (hour >= 6 && hour <= 10) {\n            recommendations.push({\n                supplement: 'vitaminD',\n                reason: 'Assorbimento ottimale con prima colazione'\n            });\n            recommendations.push({\n                supplement: 'omega3',\n                reason: 'Con grassi della colazione per biodisponibilità'\n            });\n        }\n\n        // Pre-workout (dipende dall'orario allenamento)\n        const workoutHour = 18; // Assumiamo allenamento serale\n        if (hour === workoutHour - 1) {\n            recommendations.push({\n                supplement: 'caffeine',\n                reason: '30-45min prima allenamento per picco energetico'\n            });\n            recommendations.push({\n                supplement: 'citrulline',\n                reason: 'Pre-workout per pump e resistenza'\n            });\n        }\n\n        // Post-workout\n        if (hour === workoutHour + 1) {\n            recommendations.push({\n                supplement: 'creatine',\n                reason: 'Post-workout con carboidrati per uptake'\n            });\n        }\n\n        // Sera\n        if (hour >= 20) {\n            recommendations.push({\n                supplement: 'betaAlanine',\n                reason: 'Loading serale per evitare parestesia diurna'\n            });\n        }\n\n        return recommendations;\n    };\n\n    const markSupplementTaken = (supplementKey, dosage, timing) => {\n        const today = new Date().toISOString().split('T')[0];\n        const entryKey = `${supplementKey}_${today}`;\n\n        const taken = {\n            ...takenToday,\n            [entryKey]: {\n                supplement: supplementKey,\n                dosage,\n                timing,\n                timestamp: new Date().toISOString(),\n                taken: true\n            }\n        };\n\n        setTakenToday(taken);\n        localStorage.setItem('supplementsTakenToday', JSON.stringify(taken));\n\n        // Salva nello storico\n        const history = JSON.parse(localStorage.getItem('supplementsHistory') || '{}');\n        history[entryKey] = taken[entryKey];\n        localStorage.setItem('supplementsHistory', JSON.stringify(history));\n    };\n\n    const isSupplementTakenToday = (supplementKey) => {\n        const today = new Date().toISOString().split('T')[0];\n        const entryKey = `${supplementKey}_${today}`;\n        return takenToday[entryKey] && takenToday[entryKey].taken;\n    };\n\n    const getSupplementProgress = () => {\n        const totalSupplements = Object.keys(evidenceBasedSupplements).length;\n        const takenCount = Object.keys(evidenceBasedSupplements).filter(key => \n            isSupplementTakenToday(key)\n        ).length;\n        \n        return {\n            taken: takenCount,\n            total: totalSupplements,\n            percentage: Math.round((takenCount / totalSupplements) * 100)\n        };\n    };\n\n    const getWeeklySupplementStats = () => {\n        const history = JSON.parse(localStorage.getItem('supplementsHistory') || '{}');\n        const oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n        const weeklyEntries = Object.values(history).filter(entry => \n            new Date(entry.timestamp) >= oneWeekAgo\n        );\n\n        const consistency = {};\n        Object.keys(evidenceBasedSupplements).forEach(key => {\n            const supplementEntries = weeklyEntries.filter(entry => entry.supplement === key);\n            consistency[key] = {\n                taken: supplementEntries.length,\n                percentage: Math.round((supplementEntries.length / 7) * 100)\n            };\n        });\n\n        return consistency;\n    };\n\n    const createSupplementPlan = (workoutSchedule, goals) => {\n        const plan = {\n            core: ['creatine', 'omega3', 'vitaminD'], // Sempre consigliati\n            performance: ['caffeine', 'citrulline'], // Per performance\n            endurance: ['betaAlanine'], // Per resistenza\n            timing: {\n                morning: ['vitaminD', 'omega3'],\n                preWorkout: ['caffeine', 'citrulline'],\n                postWorkout: ['creatine'],\n                evening: ['betaAlanine']\n            }\n        };\n\n        return plan;\n    };\n\n    const loadTodaysSupplements = () => {\n        const today = new Date().toISOString().split('T')[0];\n        const saved = localStorage.getItem('supplementsTakenToday');\n        if (saved) {\n            const data = JSON.parse(saved);\n            // Filtra solo quelli di oggi\n            const todayData = {};\n            Object.keys(data).forEach(key => {\n                if (key.includes(today)) {\n                    todayData[key] = data[key];\n                }\n            });\n            setTakenToday(todayData);\n        }\n    };\n\n    React.useEffect(() => {\n        loadTodaysSupplements();\n    }, []);\n\n    return {\n        evidenceBasedSupplements,\n        removedSupplements,\n        takenToday,\n        markSupplementTaken,\n        isSupplementTakenToday,\n        getSupplementProgress,\n        getWeeklySupplementStats,\n        getOptimalTiming,\n        createSupplementPlan\n    };\n};\n\nexport default SupplementStack;","import React from 'react';\n\nconst RecoveryProtocol = () => {\n    const [recoveryLog, setRecoveryLog] = React.useState({});\n    const [todayRecovery, setTodayRecovery] = React.useState({});\n\n    const thermoTherapyProtocols = {\n        sauna: {\n            name: 'Sauna Finlandese',\n            temperature: '80-100°C',\n            humidity: '10-20%',\n            duration: '15-20 min',\n            timing: 'Immediatamente post-workout',\n            mechanism: 'Heat Shock Proteins → Anabolismo + Cardiovascolare',\n            benefits: [\n                '↑ Growth Hormone 24x',\n                '↑ Heat Shock Proteins (riparazione)',\n                '↑ Vasodilatazione (nutrienti muscolari)', \n                '↑ Eliminazione metaboliti'\n            ],\n            protocol: [\n                '5-10 min iniziali per adattamento',\n                '2-3 sessioni da 15-20 min',\n                'Pause 2-3 min aria fresca tra sessioni',\n                'Idratazione: 500ml acqua + elettroliti'\n            ],\n            precautions: [\n                'Mai subito dopo pasti abbondanti',\n                'Stop se nausea/vertigini/palpitazioni',\n                'Controindicato: ipertensione non controllata'\n            ],\n            scientificEvidence: 'A+ (Rhonda Patrick, Joyner studies)',\n            color: '#ff6b35',\n            icon: '🔥'\n        },\n        steamRoom: {\n            name: 'Bagno Turco',\n            temperature: '40-50°C',\n            humidity: '90-100%',\n            duration: '10-15 min',\n            timing: 'Giorni rest per mobilità/relax',\n            mechanism: 'Umidità → Idratazione tessuti + Mobilità articolare',\n            benefits: [\n                '↑ Mobilità articolare',\n                '↑ Idratazione tessuto connettivo',\n                '↓ Rigidità muscolare',\n                '↑ Eliminazione tossine via pelle'\n            ],\n            protocol: [\n                '10-15 min sessione unica',\n                'Respirazione profonda (vapori benefici)',\n                'Stretching dolce durante sessione',\n                'Doccia fredda finale (contrasto)'\n            ],\n            precautions: [\n                'Attenzione claustrofobia',\n                'Igiene: sempre su asciugamano',\n                'Idratazione pre/post obbligatoria'\n            ],\n            scientificEvidence: 'B+ (Benefici mobilità documentati)',\n            color: '#4ecdc4',\n            icon: '💨'\n        },\n        iceBath: {\n            name: 'Crioterapia (Ice Bath)',\n            temperature: '8-12°C',\n            humidity: 'N/A',\n            duration: '10-15 min',\n            timing: 'SOLO ≥4h post-workout (mai prima)',\n            mechanism: 'Vasocostrizione → Recovery neurologico + Anti-infiammatorio',\n            benefits: [\n                '↓ Infiammazione acuta',\n                '↑ Recovery Sistema Nervoso',\n                '↑ Resilienza mentale',\n                '↓ Percezione fatica'\n            ],\n            protocol: [\n                'Graduale: inizia 15°C → 10°C → 8°C',\n                '2-3 min prime volte → 10-15 min target',\n                'Respirazione controllata (Wim Hof)',\n                'Riscaldamento graduale post-immersione'\n            ],\n            precautions: [\n                'MAI nelle 4h post-workout (blocca adattamenti)',\n                'Controindicato: problemi cardiaci',\n                'Supervisione iniziale raccomandata'\n            ],\n            scientificEvidence: 'A- (Timing critico per efficacia)',\n            color: '#74b9ff',\n            icon: '🧊'\n        }\n    };\n\n    const contrastTherapy = {\n        name: 'Terapia Contrasto (Hot/Cold)',\n        protocol: [\n            'Sauna 15 min (80-90°C)',\n            'Doccia fredda 1 min (15°C)',\n            'Ripeti ciclo 3-4 volte',\n            'Termina sempre con freddo'\n        ],\n        benefits: [\n            'Pump vascolare (vasodilatazione/costrizione)',\n            'Massimo stimolo circolatorio',\n            'Recovery accelerata',\n            'Resilienza termica'\n        ],\n        timing: 'Post-workout giorni intensi',\n        scientificEvidence: 'A (Scandinavian protocols)',\n        color: '#fd79a8',\n        icon: '🌡️'\n    };\n\n    const optimalTiming = {\n        postWorkout: {\n            immediate: ['sauna'],\n            after2h: ['steamRoom', 'contrastTherapy'],\n            after4h: ['iceBath'],\n            nextMorning: ['sauna leggera', 'steamRoom']\n        },\n        restDays: {\n            morning: ['steamRoom', 'sauna leggera'],\n            evening: ['iceBath', 'contrastTherapy']\n        },\n        competition: {\n            before: 'Evitare ice bath 48h prima',\n            after: 'Full protocol per recovery rapido'\n        }\n    };\n\n    const biohacking = {\n        breathwork: {\n            name: 'Wim Hof Method',\n            protocol: '30 respiri profondi → apnea → ripeti 3 cicli',\n            benefits: 'Adattamento stress termico + controllo SNA',\n            timing: 'Pre ice bath o standalone'\n        },\n        supplements: {\n            preSauna: 'Magnesio 400mg (vasodilatazione)',\n            preIceBath: 'L-Theanina 200mg (calma mentale)',\n            postBoth: 'Elettroliti + Vitamina C'\n        },\n        monitoring: {\n            heartRate: 'HRV pre/post per valutare recovery',\n            bodyTemp: 'Termometro infrarossi per tracking',\n            subjective: 'Scale 1-10 per energia/dolori'\n        }\n    };\n\n    const markRecoverySession = (therapy, duration, temperature, notes, effectiveness) => {\n        const today = new Date().toISOString().split('T')[0];\n        const sessionId = `${therapy}_${Date.now()}`;\n\n        const session = {\n            id: sessionId,\n            date: today,\n            therapy,\n            duration: parseInt(duration),\n            temperature: parseFloat(temperature),\n            notes,\n            effectiveness: parseInt(effectiveness),\n            timestamp: new Date().toISOString()\n        };\n\n        const updatedLog = {\n            ...recoveryLog,\n            [sessionId]: session\n        };\n\n        setRecoveryLog(updatedLog);\n        localStorage.setItem('recoveryLog', JSON.stringify(updatedLog));\n\n        // Aggiorna sessioni di oggi\n        const todaySessions = Object.values(updatedLog).filter(s => s.date === today);\n        setTodayRecovery({\n            ...todayRecovery,\n            sessions: todaySessions,\n            totalTime: todaySessions.reduce((sum, s) => sum + s.duration, 0)\n        });\n    };\n\n    const getRecoveryRecommendation = (lastWorkout, workoutIntensity, stressLevel) => {\n        const recommendations = [];\n\n        // Basato su timing ultimo workout\n        const hoursSinceWorkout = lastWorkout ? \n            (new Date() - new Date(lastWorkout)) / (1000 * 60 * 60) : 24;\n\n        if (hoursSinceWorkout < 2) {\n            recommendations.push({\n                therapy: 'sauna',\n                priority: 'Alta',\n                reason: 'Finestra anabolica ottimale per heat shock proteins'\n            });\n        } else if (hoursSinceWorkout >= 4) {\n            recommendations.push({\n                therapy: 'iceBath',\n                priority: 'Media',\n                reason: 'Recovery Sistema Nervoso senza interferire adattamenti'\n            });\n        }\n\n        // Basato su intensità workout\n        if (workoutIntensity >= 8) {\n            recommendations.push({\n                therapy: 'contrastTherapy',\n                priority: 'Alta',\n                reason: 'Recovery accelerata per sessioni ad alta intensità'\n            });\n        }\n\n        // Basato su stress/recovery\n        if (stressLevel >= 7) {\n            recommendations.push({\n                therapy: 'steamRoom',\n                priority: 'Media',\n                reason: 'Relax parasimpatico per gestione stress'\n            });\n        }\n\n        return recommendations;\n    };\n\n    const getRecoveryStats = () => {\n        const last7Days = Object.values(recoveryLog).filter(session => {\n            const sessionDate = new Date(session.date);\n            const weekAgo = new Date();\n            weekAgo.setDate(weekAgo.getDate() - 7);\n            return sessionDate >= weekAgo;\n        });\n\n        const stats = {\n            totalSessions: last7Days.length,\n            totalTime: last7Days.reduce((sum, s) => sum + s.duration, 0),\n            averageEffectiveness: last7Days.length > 0 ? \n                Math.round(last7Days.reduce((sum, s) => sum + s.effectiveness, 0) / last7Days.length) : 0,\n            therapyBreakdown: {}\n        };\n\n        // Breakdown per terapia\n        Object.keys(thermoTherapyProtocols).forEach(therapy => {\n            const sessions = last7Days.filter(s => s.therapy === therapy);\n            stats.therapyBreakdown[therapy] = {\n                sessions: sessions.length,\n                time: sessions.reduce((sum, s) => sum + s.duration, 0)\n            };\n        });\n\n        return stats;\n    };\n\n    const loadRecoveryData = () => {\n        const saved = localStorage.getItem('recoveryLog');\n        if (saved) {\n            setRecoveryLog(JSON.parse(saved));\n        }\n\n        // Carica sessioni di oggi\n        const today = new Date().toISOString().split('T')[0];\n        const todaySessions = Object.values(JSON.parse(saved || '{}')).filter(s => s.date === today);\n        setTodayRecovery({\n            sessions: todaySessions,\n            totalTime: todaySessions.reduce((sum, s) => sum + s.duration, 0)\n        });\n    };\n\n    React.useEffect(() => {\n        loadRecoveryData();\n    }, []);\n\n    return {\n        thermoTherapyProtocols,\n        contrastTherapy,\n        optimalTiming,\n        biohacking,\n        recoveryLog,\n        todayRecovery,\n        markRecoverySession,\n        getRecoveryRecommendation,\n        getRecoveryStats\n    };\n};\n\nexport default RecoveryProtocol;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MotivationalQuotes from './MotivationalQuotes';\r\nimport CalendarStreak from './CalendarStreak';\r\nimport ExerciseTracker from './ExerciseTracker';\r\nimport SupplementStack from './SupplementStack';\r\nimport RecoveryProtocol from './RecoveryProtocol';\r\n\r\nconst Dashboard = () => {\r\n    const quotesHook = MotivationalQuotes();\r\n    const calendarHook = CalendarStreak();\r\n    const exerciseHook = ExerciseTracker();\r\n    const supplementsHook = SupplementStack();\r\n    const recoveryHook = RecoveryProtocol();\r\n    \r\n    const [dashboardData, setDashboardData] = React.useState({\r\n        currentWeight: 0,\r\n        muscleGain: 0,\r\n        workoutSessions: 0,\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        daysActive: 0,\r\n        lastWorkout: null,\r\n        currentStreak: 0\r\n    });\r\n    \r\n    const [todayWorkout, setTodayWorkout] = React.useState(null);\r\n    const [goals12Week, setGoals12Week] = React.useState({\r\n        startWeight: 75,\r\n        targetWeight: 80,\r\n        targetBench: 100,\r\n        targetSquat: 140,\r\n        targetDeadlift: 160,\r\n        startDate: new Date(),\r\n        weeksCompleted: 0\r\n    });\r\n    \r\n    const getTodayWorkout = () => {\r\n        const workoutPlan = {\r\n            1: { name: 'Petto + Bicipiti', exercises: 7, focus: 'Upper Power' },\r\n            2: { name: 'Dorso + Tricipiti + Collo (A)', exercises: 10, focus: 'Pull Strength' },\r\n            3: { name: 'Gambe Complete', exercises: 7, focus: 'Lower Power' },\r\n            4: { name: 'Recupero Attivo', exercises: 3, focus: 'Recovery' },\r\n            5: { name: 'Spalle Complete + Collo (B)', exercises: 13, focus: 'Delts 3D' },\r\n            6: { name: 'Posteriori + Conditioning', exercises: 7, focus: 'Athletic' },\r\n            0: { name: 'Riposo Completo', exercises: 4, focus: 'Rest' }\r\n        };\r\n        \r\n        const today = new Date().getDay();\r\n        return workoutPlan[today];\r\n    };\r\n    \r\n    const loadDashboardData = () => {\r\n        const progressData = JSON.parse(localStorage.getItem('progressData') || '[]');\r\n        const timeStats = JSON.parse(localStorage.getItem('timeStats') || '{}');\r\n        const workoutSessions = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        const goals = JSON.parse(localStorage.getItem('goals12Week') || '{}');\r\n        \r\n        const latestProgress = progressData[0];\r\n        const firstProgress = progressData[progressData.length - 1];\r\n        \r\n        const today = new Date();\r\n        const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n        const recentSessions = workoutSessions.filter(session => \r\n            new Date(session.date) >= oneWeekAgo\r\n        );\r\n        \r\n        setDashboardData({\r\n            currentWeight: latestProgress?.weight || goals.startWeight || 75,\r\n            muscleGain: latestProgress && firstProgress ? \r\n                (parseFloat(latestProgress.muscleMass) - parseFloat(firstProgress.muscleMass)) : 0,\r\n            workoutSessions: workoutSessions.length,\r\n            totalWorkoutTime: timeStats.totalWorkoutTime || 0,\r\n            weeklyTime: timeStats.weeklyTime || 0,\r\n            daysActive: new Set(workoutSessions.map(s => s.date.split('T')[0])).size,\r\n            lastWorkout: workoutSessions[0]?.date || null,\r\n            currentStreak: calendarHook.calculateCurrentStreak()\r\n        });\r\n        \r\n        setTodayWorkout(getTodayWorkout());\r\n        \r\n        if (goals.startDate) {\r\n            const weeksCompleted = Math.floor((today - new Date(goals.startDate)) / (7 * 24 * 60 * 60 * 1000));\r\n            setGoals12Week({...goals, weeksCompleted});\r\n        }\r\n    };\r\n    \r\n    const calculateStreak = (sessions) => {\r\n        if (sessions.length === 0) return 0;\r\n        \r\n        const today = new Date();\r\n        let streak = 0;\r\n        const sortedDates = [...new Set(sessions.map(s => s.date.split('T')[0]))].sort().reverse();\r\n        \r\n        for (let i = 0; i < sortedDates.length; i++) {\r\n            const sessionDate = new Date(sortedDates[i]);\r\n            const daysDiff = Math.floor((today - sessionDate) / (1000 * 60 * 60 * 24));\r\n            \r\n            if (daysDiff <= i + 1) {\r\n                streak++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return streak;\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n    \r\n    const todayQuote = quotesHook.getTodayQuote();\r\n    const todayProgress = exerciseHook.getTodayProgress(todayWorkout?.exercises);\r\n    const supplementProgress = supplementsHook.getSupplementProgress();\r\n    const weeklyStats = exerciseHook.getWeeklyStats();\r\n    const recoveryStats = recoveryHook.getRecoveryStats();\r\n    \r\n    React.useEffect(() => {\r\n        loadDashboardData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <header className=\"dashboard-header\">\r\n                <h1>🏆 FISICO DELLA MADONNA</h1>\r\n                <p className=\"tagline\">\"L'eccellenza non è un atto, ma un'abitudine\" - Aristotele</p>\r\n            </header>\r\n\r\n            {/* MOTIVATIONAL QUOTE OF THE DAY */}\r\n            <div className=\"daily-motivation\">\r\n                <div className=\"quote-card\">\r\n                    <h3>💭 Frase del Giorno</h3>\r\n                    <blockquote>\r\n                        \"{todayQuote.quote}\"\r\n                        <footer>— {todayQuote.author}</footer>\r\n                    </blockquote>\r\n                    <p className=\"quote-context\">{todayQuote.context}</p>\r\n                </div>\r\n            </div>\r\n\r\n            {/* TODAY'S WORKOUT PREVIEW */}\r\n            <div className=\"today-workout-preview\">\r\n                <h3>🎯 Oggi: {todayWorkout?.name}</h3>\r\n                <div className=\"workout-quick-stats\">\r\n                    <span className=\"workout-focus\">{todayWorkout?.focus}</span>\r\n                    <span className=\"workout-exercises\">{todayWorkout?.exercises} esercizi</span>\r\n                    <span className={`workout-progress ${todayProgress.percentage === 100 ? 'completed' : ''}`}>\r\n                        {todayProgress.completed}/{todayProgress.total} completati ({todayProgress.percentage}%)\r\n                    </span>\r\n                </div>\r\n                <div className=\"progress-bar\">\r\n                    <div \r\n                        className=\"progress-fill\" \r\n                        style={{width: `${todayProgress.percentage}%`}}\r\n                    ></div>\r\n                </div>\r\n                <Link to=\"/workout\" className=\"start-workout-btn\">\r\n                    {todayProgress.percentage === 0 ? '🚀 INIZIA WORKOUT' : \r\n                     todayProgress.percentage === 100 ? '✅ COMPLETATO' : \r\n                     '▶️ CONTINUA WORKOUT'}\r\n                </Link>\r\n            </div>\r\n\r\n            {/* STREAK CALENDAR */}\r\n            <div className=\"streak-calendar-mini\">\r\n                <h3>📅 Calendario Streak</h3>\r\n                <div className=\"calendar-grid\">\r\n                    {calendarHook.getDaysInMonth(calendarHook.currentDate).slice(-7).map((day, index) => (\r\n                        <div key={index} className={`calendar-day-mini ${\r\n                            day?.isCompleted ? 'completed' : day?.isToday ? 'today' : ''\r\n                        }`}>\r\n                            <span className=\"day-number\">{day?.day || ''}</span>\r\n                            {day?.isCompleted && <span className=\"workout-emoji\">{calendarHook.getWorkoutTypeEmoji(day.workoutType)}</span>}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"streak-stats\">\r\n                    <span className=\"current-streak\" style={{color: calendarHook.getStreakColor(dashboardData.currentStreak)}}>\r\n                        🔥 {dashboardData.currentStreak} giorni\r\n                    </span>\r\n                    <span className=\"monthly-total\">\r\n                        📊 {calendarHook.monthlyStats.monthlyWorkouts || 0} questo mese\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PERFORMANCE DASHBOARD */}\r\n            <div className=\"performance-dashboard\">\r\n                <h3>⚡ Performance Overview</h3>\r\n                <div className=\"perf-grid\">\r\n                    <div className=\"perf-card strength\">\r\n                        <h4>💪 Forza</h4>\r\n                        <p className=\"perf-value\">{weeklyStats.totalVolume || 0}kg</p>\r\n                        <p className=\"perf-label\">Volume Settimanale</p>\r\n                    </div>\r\n                    <div className=\"perf-card volume\">\r\n                        <h4>🏋️ Volume</h4>\r\n                        <p className=\"perf-value\">{weeklyStats.totalSets || 0}</p>\r\n                        <p className=\"perf-label\">Serie Settimanali</p>\r\n                    </div>\r\n                    <div className=\"perf-card consistency\">\r\n                        <h4>🎯 Consistenza</h4>\r\n                        <p className=\"perf-value\">{Math.round(((dashboardData.currentStreak / 30) * 100))}%</p>\r\n                        <p className=\"perf-label\">Streak Rate</p>\r\n                    </div>\r\n                    <div className=\"perf-card supplements\">\r\n                        <h4>💊 Stack</h4>\r\n                        <p className=\"perf-value\">{supplementProgress.percentage}%</p>\r\n                        <p className=\"perf-label\">Integratori Oggi</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* 12-WEEK GOALS PROGRESS */}\r\n            <div className=\"goals-progress\">\r\n                <h3>🎯 Obiettivi 12 Settimane</h3>\r\n                <div className=\"goals-grid\">\r\n                    <div className=\"goal-item\">\r\n                        <h4>Peso Target</h4>\r\n                        <div className=\"goal-bar\">\r\n                            <div className=\"goal-progress\" style={{\r\n                                width: `${Math.min(100, ((dashboardData.currentWeight - goals12Week.startWeight) / (goals12Week.targetWeight - goals12Week.startWeight)) * 100)}%`\r\n                            }}></div>\r\n                        </div>\r\n                        <p>{dashboardData.currentWeight}kg → {goals12Week.targetWeight}kg</p>\r\n                    </div>\r\n                    <div className=\"goal-item\">\r\n                        <h4>Settimane</h4>\r\n                        <div className=\"goal-bar\">\r\n                            <div className=\"goal-progress\" style={{\r\n                                width: `${Math.min(100, (goals12Week.weeksCompleted / 12) * 100)}%`\r\n                            }}></div>\r\n                        </div>\r\n                        <p>{goals12Week.weeksCompleted}/12 settimane</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* QUICK ACTIONS */}\r\n            <nav className=\"quick-actions\">\r\n                <Link to=\"/workout\" className=\"action-card workout\">\r\n                    <span className=\"action-icon\">🏋️</span>\r\n                    <h4>Workout</h4>\r\n                    <p>Inizia sessione</p>\r\n                </Link>\r\n                <Link to=\"/progress\" className=\"action-card progress\">\r\n                    <span className=\"action-icon\">📈</span>\r\n                    <h4>Progressi</h4>\r\n                    <p>Traccia misure</p>\r\n                </Link>\r\n                <Link to=\"/supplements\" className=\"action-card supplements\">\r\n                    <span className=\"action-icon\">💊</span>\r\n                    <h4>Integratori</h4>\r\n                    <p>{supplementProgress.taken}/{supplementProgress.total} presi</p>\r\n                </Link>\r\n                <Link to=\"/recovery\" className=\"action-card recovery\">\r\n                    <span className=\"action-icon\">🔥</span>\r\n                    <h4>Recovery</h4>\r\n                    <p>{recoveryStats.totalTime || 0}min oggi</p>\r\n                </Link>\r\n            </nav>\r\n\r\n            {/* LEGEND MINDSET */}\r\n            <div className=\"legend-mindset\">\r\n                <h3>👑 Mentalità da Leggenda</h3>\r\n                <p className=\"mindset-text\">\r\n                    \"I campioni non nascono in palestra. I campioni nascono da qualcosa di più profondo: \r\n                    <strong>un desiderio, un sogno, una visione.</strong> Tu hai tutto questo. \r\n                    Oggi è il giorno per dimostrarlo.\"\r\n                </p>\r\n                <div className=\"power-stats\">\r\n                    <span>💀 Disciplina: {Math.min(100, dashboardData.currentStreak * 3)}%</span>\r\n                    <span>⚡ Intensità: {Math.min(100, (weeklyStats.sessions || 0) * 20)}%</span>\r\n                    <span>🔥 Dedizione: {Math.min(100, (goals12Week.weeksCompleted || 0) * 8)}%</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nconst WorkoutTimer = ({ onSessionComplete }) => {\r\n    const [isActive, setIsActive] = React.useState(false);\r\n    const [currentExercise, setCurrentExercise] = React.useState('');\r\n    const [sessionTime, setSessionTime] = React.useState(0);\r\n    const [exerciseTime, setExerciseTime] = React.useState(0);\r\n    const [exercises, setExercises] = React.useState([]);\r\n    const [currentExerciseIndex, setCurrentExerciseIndex] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        let interval = null;\r\n        if (isActive) {\r\n            interval = setInterval(() => {\r\n                setSessionTime(time => time + 1);\r\n                setExerciseTime(time => time + 1);\r\n            }, 1000);\r\n        } else if (!isActive && sessionTime !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive, sessionTime]);\r\n\r\n    const startSession = () => {\r\n        setIsActive(true);\r\n        setSessionTime(0);\r\n        setExercises([]);\r\n    };\r\n\r\n    const pauseSession = () => {\r\n        setIsActive(false);\r\n    };\r\n\r\n    const nextExercise = () => {\r\n        if (currentExercise && exerciseTime > 0) {\r\n            const exerciseData = {\r\n                name: currentExercise,\r\n                duration: exerciseTime,\r\n                timestamp: new Date().toISOString()\r\n            };\r\n            setExercises([...exercises, exerciseData]);\r\n        }\r\n        \r\n        setCurrentExercise('');\r\n        setExerciseTime(0);\r\n        setCurrentExerciseIndex(prev => prev + 1);\r\n    };\r\n\r\n    const completeSession = () => {\r\n        if (currentExercise && exerciseTime > 0) {\r\n            nextExercise();\r\n        }\r\n        \r\n        const sessionData = {\r\n            date: new Date().toISOString(),\r\n            duration: sessionTime,\r\n            exercises: exercises,\r\n            id: Date.now()\r\n        };\r\n        \r\n        // Salva la sessione\r\n        const savedSessions = JSON.parse(localStorage.getItem('workoutSessions') || '[]');\r\n        const updatedSessions = [sessionData, ...savedSessions];\r\n        localStorage.setItem('workoutSessions', JSON.stringify(updatedSessions));\r\n        \r\n        // Aggiorna le statistiche del tempo\r\n        const timeStats = JSON.parse(localStorage.getItem('timeStats') || '{}');\r\n        const updatedTimeStats = {\r\n            totalWorkoutTime: (timeStats.totalWorkoutTime || 0) + Math.floor(sessionTime / 60),\r\n            weeklyTime: calculateWeeklyTime(updatedSessions),\r\n            monthlyTime: calculateMonthlyTime(updatedSessions),\r\n            sessionsCompleted: (timeStats.sessionsCompleted || 0) + 1\r\n        };\r\n        localStorage.setItem('timeStats', JSON.stringify(updatedTimeStats));\r\n        \r\n        // Reset\r\n        setIsActive(false);\r\n        setSessionTime(0);\r\n        setExerciseTime(0);\r\n        setCurrentExercise('');\r\n        setExercises([]);\r\n        setCurrentExerciseIndex(0);\r\n        \r\n        if (onSessionComplete) {\r\n            onSessionComplete(sessionData);\r\n        }\r\n    };\r\n\r\n    const calculateWeeklyTime = (sessions) => {\r\n        const oneWeekAgo = new Date();\r\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n        \r\n        return sessions\r\n            .filter(session => new Date(session.date) >= oneWeekAgo)\r\n            .reduce((total, session) => total + Math.floor(session.duration / 60), 0);\r\n    };\r\n\r\n    const calculateMonthlyTime = (sessions) => {\r\n        const oneMonthAgo = new Date();\r\n        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\r\n        \r\n        return sessions\r\n            .filter(session => new Date(session.date) >= oneMonthAgo)\r\n            .reduce((total, session) => total + Math.floor(session.duration / 60), 0);\r\n    };\r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"workout-timer\">\r\n            <div className=\"timer-header\">\r\n                <h3>⏱️ Timer Sessione</h3>\r\n                <div className=\"session-time\">\r\n                    <span>Tempo Totale: {formatTime(sessionTime)}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"current-exercise\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Nome esercizio attuale...\"\r\n                    value={currentExercise}\r\n                    onChange={(e) => setCurrentExercise(e.target.value)}\r\n                    disabled={!isActive}\r\n                />\r\n                <div className=\"exercise-time\">\r\n                    Tempo Esercizio: {formatTime(exerciseTime)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"timer-controls\">\r\n                {!isActive && sessionTime === 0 ? (\r\n                    <button className=\"button start-btn\" onClick={startSession}>\r\n                        🚀 Inizia Sessione\r\n                    </button>\r\n                ) : (\r\n                    <div className=\"control-buttons\">\r\n                        <button \r\n                            className=\"button\" \r\n                            onClick={isActive ? pauseSession : () => setIsActive(true)}\r\n                        >\r\n                            {isActive ? '⏸️ Pausa' : '▶️ Riprendi'}\r\n                        </button>\r\n                        <button \r\n                            className=\"button next-btn\" \r\n                            onClick={nextExercise}\r\n                            disabled={!currentExercise}\r\n                        >\r\n                            ➡️ Prossimo Esercizio\r\n                        </button>\r\n                        <button \r\n                            className=\"button complete-btn\" \r\n                            onClick={completeSession}\r\n                        >\r\n                            ✅ Completa Sessione\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {exercises.length > 0 && (\r\n                <div className=\"completed-exercises\">\r\n                    <h4>Esercizi Completati:</h4>\r\n                    <ul>\r\n                        {exercises.map((exercise, index) => (\r\n                            <li key={index}>\r\n                                {exercise.name} - {formatTime(exercise.duration)}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WorkoutTimer;","import React from 'react';\n\nconst TechniqueGuides = () => {\n    const masterTechniques = {\n        'Panca Inclinata Bilanciere': {\n            category: 'Petto',\n            difficulty: 'Avanzato',\n            muscles: ['Petto (fascio superiore)', 'Deltoidi anteriori', 'Tricipiti'],\n            setup: [\n                'Panca inclinata 30-45° (mai oltre 45°)',\n                'Presa larghezza 1.5x spalle, pollice sopra barra',\n                'Scapole retratte e depresse, arco naturale',\n                'Piedi saldi a terra, core contratto'\n            ],\n            execution: [\n                'Discesa: 2-3 sec, barra al petto alto/clavicole',\n                'Pausa 1 sec al petto, mantenendo tensione',\n                'Spinta esplosiva, gomiti 45° dal busto',\n                'Lock-out completo, scapole sempre retratte'\n            ],\n            breathing: 'Inspira in discesa, espira durante spinta (dopo punto di stallo)',\n            commonMistakes: [\n                '❌ Angolo eccessivo (>45°) = stress spalle',\n                '❌ Gomiti troppo larghi = impingement',\n                '❌ Rebound al petto = perdita tensione',\n                '❌ Arch eccessivo = compenso lombare'\n            ],\n            progressionTips: [\n                'Master tecnica a corpo libero prima',\n                'Aumenta peso solo con form perfetto',\n                'Paused bench per controllo',\n                'Varianti: manubri, presa stretta'\n            ],\n            safetyNotes: [\n                'Sempre con spotter per carichi massimali',\n                'Stop se dolore spalle/polsi',\n                'Warm-up specifico: band pull-apart'\n            ]\n        },\n        'Trazioni Presa Ampia': {\n            category: 'Dorso',\n            difficulty: 'Intermedio-Avanzato',\n            muscles: ['Gran dorsale', 'Romboidi', 'Posteriori deltoidi', 'Bicipiti'],\n            setup: [\n                'Presa prona, 1.5x larghezza spalle',\n                'Appeso completo, scapole neutre',\n                'Core attivo, gambe leggermente avanti',\n                'Sguardo leggermente verso alto'\n            ],\n            execution: [\n                'Inizia movimento da scapole (depressione)',\n                'Tira gomiti verso basso e indietro',\n                'Petto verso sbarra, focus squeeze dorsali',\n                'Discesa controllata, stop prima rilascio completo'\n            ],\n            breathing: 'Inspira in partenza, espira durante trazione',\n            commonMistakes: [\n                '❌ Kipping/slancio = perdita target muscolare',\n                '❌ Solo braccia = manca attivazione dorsali',\n                '❌ Range parziale = crescita sub-ottimale',\n                '❌ Velocità eccessiva = momentum'\n            ],\n            progressionTips: [\n                'Principianti: lat pulldown + negative',\n                'Intermedi: band assist → bodyweight',\n                'Avanzati: weighted, pause, L-sit',\n                'Focus: mind-muscle connection dorsali'\n            ],\n            safetyNotes: [\n                'Shoulder health check pre-sessione',\n                'Progressione graduale volume',\n                'Stretching bicipiti/petto post-workout'\n            ]\n        },\n        'Squat': {\n            category: 'Gambe',\n            difficulty: 'Fondamentale',\n            muscles: ['Quadricipiti', 'Glutei', 'Femorali', 'Core'],\n            setup: [\n                'Barra alta su trapezi (non collo)',\n                'Presa 1.2x larghezza spalle, gomiti bassi',\n                'Piedi larghezza anche, punte 15-30°',\n                'Respirazione diaframmatica pre-discesa'\n            ],\n            execution: [\n                'Hip hinge + knee flexion simultanei',\n                'Discesa fino coscie parallele (minimo)',\n                'Ginocchia tracking con punte piedi',\n                'Drive dai talloni, petto alto in risalita'\n            ],\n            breathing: 'Valsalva: inspira in alto, trattieni, espira post-risalita',\n            commonMistakes: [\n                '❌ Knee valgus (ginocchia dentro) = infortunio',\n                '❌ Talloni si alzano = mobilità caviglie',\n                '❌ Busto troppo avanti = carico schiena',\n                '❌ Range parziale = perdita benefici'\n            ],\n            progressionTips: [\n                'Master bodyweight squat perfetto',\n                'Goblet squat per apprendimento pattern',\n                'Box squat per profondità e controllo',\n                'Front squat per postura e core'\n            ],\n            safetyNotes: [\n                'Sempre con safety bars altezza corretta',\n                'Warm-up mobilità anche/caviglie',\n                'Progressive overload: forma > peso'\n            ]\n        },\n        'Stacco Rumeno (RDL)': {\n            category: 'Posteriori',\n            difficulty: 'Intermedio',\n            muscles: ['Femorali', 'Glutei', 'Erettori spinale', 'Core'],\n            setup: [\n                'Partenza in piedi, barra a contatto cosce',\n                'Presa prona/mista, larghezza spalle',\n                'Spalle sopra barra, petto alto',\n                'Leggera flessione ginocchia (15-20°)'\n            ],\n            execution: [\n                'Hip hinge puro: anche indietro',\n                'Barra scorre lungo gambe (contatto costante)',\n                'Discesa fino stretch femorali (mid-shin)',\n                'Reverse: drive anche avanti, squeeze glutei'\n            ],\n            breathing: 'Inspira in alto, trattieni in discesa, espira in risalita',\n            commonMistakes: [\n                '❌ Schiena curva = shear stress vertebrale',\n                '❌ Troppa flessione ginocchia = squat variation',\n                '❌ Barra lontana corpo = momento aumentato',\n                '❌ Range eccessivo senza mobilità = compensi'\n            ],\n            progressionTips: [\n                'Prima mobilità femorali e anche',\n                'Deadlift con deficit per ROM',\n                'Single-leg RDL per stabilità',\n                'Varianti: manubri, kettlebell'\n            ],\n            safetyNotes: [\n                'Neutral spine sempre mantenuta',\n                'Start con carichi moderati',\n                'Stretching post-workout essenziale'\n            ]\n        },\n        'Military Press Manubri': {\n            category: 'Spalle',\n            difficulty: 'Intermedio',\n            muscles: ['Deltoidi (tutti fasci)', 'Tricipiti', 'Core', 'Stabilizzatori'],\n            setup: [\n                'Seduto con schienale 85-90°',\n                'Manubri altezza spalle, palmi avanti',\n                'Core contratto, schiena neutra',\n                'Piedi saldi, grip saldo ma non eccessivo'\n            ],\n            execution: [\n                'Spinta verticale, traiettoria rettilinea',\n                'Rotazione esterna spalle durante movimento',\n                'Lock-out senza hyperextension gomiti',\n                'Discesa controllata, stop all\\'altezza orecchie'\n            ],\n            breathing: 'Inspira in basso, espira durante spinta',\n            commonMistakes: [\n                '❌ Arch lombare eccessivo = compenso',\n                '❌ Spinta troppo avanti = impingement',\n                '❌ Gomiti troppo larghi = stress AC joint',\n                '❌ Range parziale = sviluppo incompleto'\n            ],\n            progressionTips: [\n                'Pike push-ups per pattern movimento',\n                'Press seduto prima di standing',\n                'Unilaterale per core e stabilità',\n                'Progressione: 2.5kg incrementi max'\n            ],\n            safetyNotes: [\n                'Warm-up spalle obbligatorio',\n                'Range dentro comfort zone',\n                'Stop al primo segno dolore'\n            ]\n        }\n    };\n\n    const getTechniqueCue = (exerciseName, phase) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        const cues = {\n            setup: exercise.setup,\n            execution: exercise.execution,\n            breathing: exercise.breathing\n        };\n\n        return cues[phase] || null;\n    };\n\n    const getProgressionLevel = (exerciseName, userLevel) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        const progressions = {\n            beginner: {\n                focus: 'Pattern Movement + Stabilità',\n                approach: 'Carichi leggeri, focus forma',\n                volume: 'Basso volume, alta frequenza'\n            },\n            intermediate: {\n                focus: 'Progressione Carico + Volume',\n                approach: 'Balance intensità/volume',\n                volume: 'Volume moderato-alto'\n            },\n            advanced: {\n                focus: 'Specializzazione + Varianti',\n                approach: 'Periodizzazione strutturata',\n                volume: 'Volume alto, intensità ciclica'\n            }\n        };\n\n        return progressions[userLevel];\n    };\n\n    const getInjuryPrevention = (exerciseName) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        const prevention = {\n            warmup: [],\n            cooldown: [],\n            redFlags: [],\n            alternatives: []\n        };\n\n        // Warm-up specifico per categoria\n        switch (exercise.category) {\n            case 'Petto':\n                prevention.warmup = ['Band pull-apart', 'Scap wall slides', 'Arm circles', 'Push-up progression'];\n                break;\n            case 'Dorso':\n                prevention.warmup = ['Cat-cow', 'Band face-pull', 'Scap pull-ups', 'Dead hang'];\n                break;\n            case 'Gambe':\n                prevention.warmup = ['Leg swings', 'Hip circles', 'Bodyweight squat', 'Ankle circles'];\n                break;\n            case 'Spalle':\n                prevention.warmup = ['Arm circles', 'Band external rotation', 'Wall slides', 'YTW raises'];\n                break;\n        }\n\n        // Red flags comuni\n        prevention.redFlags = [\n            'Dolore acuto durante movimento',\n            'Dolore che persiste post-workout',\n            'Limitazione ROM significativa',\n            'Instabilità articolare'\n        ];\n\n        return prevention;\n    };\n\n    const getMindMuscleCues = (exerciseName) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return [];\n\n        const mentalCues = {\n            'Panca Inclinata Bilanciere': [\n                'Visualizza petto che si \"apre\" in discesa',\n                'Spinta: \"schiaccia il mondo via da te\"',\n                'Immagina di \"avvicinare il petto alla barra\"',\n                'Focus: fibre muscolari che si contraggono'\n            ],\n            'Trazioni Presa Ampia': [\n                'Inizia tirando scapole verso \"tasche posteriori\"',\n                'Immagina di \"tirare sbarra verso petto\"',\n                'Visualizza dorsali come \"ali che si aprono\"',\n                'Senti l\\'ampiezza della schiena'\n            ],\n            'Squat': [\n                'Immagina di \"sederti su sedia invisibile\"',\n                'Spingi terra via con i piedi',\n                'Visualizza radici dai piedi al centro terra',\n                'Core come \"cintura di forza naturale\"'\n            ],\n            'Stacco Rumeno (RDL)': [\n                'Anche come \"cerniere che si aprono\"',\n                'Senti stretch intenso nei femorali',\n                'Immagina \"corda che tira anche indietro\"',\n                'Glutei come \"motori della risalita\"'\n            ],\n            'Military Press Manubri': [\n                'Spalle come \"fondamenta stabili\"',\n                'Spinta \"verso le stelle\"',\n                'Immagina di \"sostenere il cielo\"',\n                'Core come \"pilastro di marmo\"'\n            ]\n        };\n\n        return mentalCues[exerciseName] || [\n            'Connessione mente-muscolo',\n            'Controllo ogni millimetro',\n            'Qualità sopra quantità',\n            'Senti il muscolo lavorare'\n        ];\n    };\n\n    const getExerciseRating = (exerciseName) => {\n        const exercise = masterTechniques[exerciseName];\n        if (!exercise) return null;\n\n        // Rating sistema basato su efficacia, sicurezza, trasferibilità\n        const ratings = {\n            'Panca Inclinata Bilanciere': {\n                effectiveness: 9,\n                safety: 7,\n                transferability: 8,\n                overall: 8.5,\n                notes: 'Re degli esercizi petto superiore'\n            },\n            'Trazioni Presa Ampia': {\n                effectiveness: 10,\n                safety: 8,\n                transferability: 9,\n                overall: 9.5,\n                notes: 'Miglior esercizio dorsali in assoluto'\n            },\n            'Squat': {\n                effectiveness: 10,\n                safety: 8,\n                transferability: 10,\n                overall: 9.5,\n                notes: 'Re di tutti gli esercizi'\n            },\n            'Stacco Rumeno (RDL)': {\n                effectiveness: 9,\n                safety: 7,\n                transferability: 9,\n                overall: 8.5,\n                notes: 'Insuperabile per posteriori'\n            },\n            'Military Press Manubri': {\n                effectiveness: 8,\n                safety: 8,\n                transferability: 7,\n                overall: 8.0,\n                notes: 'Eccellente per spalle 3D'\n            }\n        };\n\n        return ratings[exerciseName];\n    };\n\n    return {\n        masterTechniques,\n        getTechniqueCue,\n        getProgressionLevel,\n        getInjuryPrevention,\n        getMindMuscleCues,\n        getExerciseRating\n    };\n};\n\nexport default TechniqueGuides;","import React from 'react';\r\nimport WorkoutTimer from './WorkoutTimer';\r\nimport ExerciseTracker from './ExerciseTracker';\r\nimport TechniqueGuides from './TechniqueGuides';\r\nimport MotivationalQuotes from './MotivationalQuotes';\r\nimport CalendarStreak from './CalendarStreak';\r\n\r\nconst Workout = () => {\r\n    const exerciseHook = ExerciseTracker();\r\n    const techniqueHook = TechniqueGuides();\r\n    const quotesHook = MotivationalQuotes();\r\n    const calendarHook = CalendarStreak();\r\n    \r\n    const [selectedDay, setSelectedDay] = React.useState(null);\r\n    const [completedWorkouts, setCompletedWorkouts] = React.useState([]);\r\n    const [selectedExercise, setSelectedExercise] = React.useState(null);\r\n    const [exerciseForm, setExerciseForm] = React.useState({\r\n        sets: '',\r\n        reps: '',\r\n        weight: '',\r\n        rir: '',\r\n        notes: ''\r\n    });\r\n    const [showTechnique, setShowTechnique] = React.useState(false);\r\n    \r\n    const workoutPlan = {\r\n        'Lunedì': {\r\n            focus: 'Petto + Bicipiti',\r\n            subtitle: 'Focus: Petto (fascio alto + globale), Bicipiti',\r\n            exercises: [\r\n                { name: 'Panca Inclinata Bilanciere', sets: '4×6-8', rest: '2min', notes: 'RIR 1-2 | Focus forma e controllo' },\r\n                { name: 'Spinte Manubri Inclinata', sets: '3×8-10', rest: '90sec', notes: 'Angolo 30-45° | ROM completo' },\r\n                { name: 'Croci ai Cavi Alti/Inclinata', sets: '3×12-15', rest: '75sec', notes: 'Stretch massimo petto' },\r\n                { name: 'Dip alle Parallele (petto) o Panca Piana Manubri', sets: '3×8-10', rest: '90sec', notes: 'Inclinazione avanti per petto' },\r\n                { name: 'Curl Bilanciere', sets: '4×8-10', rest: '90sec', notes: 'No cheating | Controllo eccentrica' },\r\n                { name: 'Curl Manubri Inclinati', sets: '3×10-12', rest: '75sec', notes: 'Panca 45° | Stretch bicipiti' },\r\n                { name: 'Hammer Curl Manubri o Cavi', sets: '3×12-15', rest: '60sec', notes: 'Presa neutra | Focus brachiale' }\r\n            ]\r\n        },\r\n        'Martedì': {\r\n            focus: 'Dorso + Tricipiti + Collo (A)',\r\n            subtitle: 'Focus: Larghezza dorsale, spessore scapolare, tricipiti, collo',\r\n            exercises: [\r\n                { name: 'Trazioni Presa Ampia', sets: '4×6-8', rest: '2min', notes: 'Se necessario usa assistenza | Focus larghezza' },\r\n                { name: 'Rematore Bilanciere/Manubrio', sets: '4×8-10', rest: '2min', notes: 'Busto 45° | Squeeze scapole' },\r\n                { name: 'Lat Machine Inversa o Presa Stretta', sets: '3×10-12', rest: '90sec', notes: 'Controllo concentrica/eccentrica' },\r\n                { name: 'Pullover ai Cavi', sets: '3×12-15', rest: '75sec', notes: 'ROM ampio | Focus gran dorsale' },\r\n                { name: 'Panca Stretta Bilanciere', sets: '4×6-8', rest: '2min', notes: 'Presa larghezza spalle | Gomiti chiusi' },\r\n                { name: 'French Press EZ', sets: '3×8-10', rest: '90sec', notes: 'Solo avambracci si muovono' },\r\n                { name: 'Pushdown Cavo', sets: '3×12-15', rest: '60sec', notes: 'Contrazione massima in basso' },\r\n                { name: 'Collo - Flessione', sets: '2×15-20', rest: '30sec', notes: 'Lento e controllato' },\r\n                { name: 'Collo - Estensione', sets: '2×15-20', rest: '30sec', notes: 'Range completo sicuro' },\r\n                { name: 'Collo - Laterale dx/sx', sets: '2×12-15', rest: '30sec', notes: 'Ogni lato separatamente' }\r\n            ]\r\n        },\r\n        'Mercoledì': {\r\n            focus: 'Gambe Complete',\r\n            subtitle: 'Focus: Quadricipiti, glutei, femorali, polpacci',\r\n            exercises: [\r\n                { name: 'Squat', sets: '4×6-8', rest: '3min', notes: 'Profondità completa | RIR 1-2' },\r\n                { name: 'Hip Thrust', sets: '4×8-10', rest: '2min', notes: 'Contrazione glutei al top | Pausa 1 sec' },\r\n                { name: 'Affondi Camminata', sets: '3×10 passi/gamba', rest: '90sec', notes: 'Ginocchio a 90° | Passo lungo' },\r\n                { name: 'Leg Press 45°', sets: '3×10-12', rest: '90sec', notes: 'Piedi larghezza spalle | ROM completo' },\r\n                { name: 'Leg Curl Sdraiato', sets: '3×10-12', rest: '90sec', notes: 'Rest-pause ultimo set | Contrazione massima' },\r\n                { name: 'Calf Raise in Piedi', sets: '4×10-12', rest: '60sec', notes: 'Pausa 2 sec al top | Range completo' },\r\n                { name: 'Calf Raise Seduto', sets: '3×15-20', rest: '60sec', notes: 'Focus soleo | Controllo movimento' }\r\n            ]\r\n        },\r\n        'Giovedì': {\r\n            focus: 'Recupero Attivo',\r\n            subtitle: 'Focus: Cardiovascolare leggero, mobilità, recupero',\r\n            exercises: [\r\n                { name: 'LISS (Camminata/Cyclette)', sets: '30-40min', rest: 'Zona 1-2', notes: '60-70% FCMax | Mantieni conversazione' },\r\n                { name: 'Stretching/Mobilità', sets: '15-20min', rest: 'Rilassante', notes: 'Tutti i gruppi muscolari | Respiro profondo' },\r\n                { name: 'Sauna o Bagno Turco', sets: '10-15min', rest: 'Recovery', notes: 'Idratazione costante | Relax mentale' }\r\n            ]\r\n        },\r\n        'Venerdì': {\r\n            focus: 'Spalle Complete + Collo (B)',\r\n            subtitle: 'Focus: Deltoidi laterali/posteriori, trapezio, richiamo braccia, collo',\r\n            exercises: [\r\n                { name: 'Military Press Manubri', sets: '4×6-8', rest: '2min', notes: 'Seduto con schienale | Core attivo' },\r\n                { name: 'Alzate Laterali Cavi/Manubri', sets: '4×12-15', rest: '75sec', notes: 'Controllo eccentrica | No cheating' },\r\n                { name: 'Rear Delt Fly (Pec Deck Inversa o Manubri)', sets: '3×12-15', rest: '75sec', notes: 'Squeeze scapole | Focus deltoidi posteriori' },\r\n                { name: 'Face Pull', sets: '3×12-15', rest: '60sec', notes: 'Corda ai cavi | Gomiti alti' },\r\n                { name: 'Scrollate Manubri/Bilanciere', sets: '3×10-12', rest: '90sec', notes: 'Solo spalle | No rotazione' },\r\n                { name: 'Curl Manubri (Richiamo leggero)', sets: '2×12-15', rest: '60sec', notes: 'Pompaggio | Non a cedimento' },\r\n                { name: 'Pushdown Corda (Richiamo leggero)', sets: '2×12-15', rest: '60sec', notes: 'Focus connessione mente-muscolo' },\r\n                { name: 'Collo B - Flessione', sets: '2×15-20', rest: '30sec', notes: 'Progressione graduale resistenza' },\r\n                { name: 'Collo B - Estensione', sets: '2×15-20', rest: '30sec', notes: 'Mai forzare movimento' },\r\n                { name: 'Collo B - Laterale dx/sx', sets: '2×12-15', rest: '30sec', notes: 'Simmetrico entrambi lati' },\r\n                { name: 'Isometrie Multidirezionali Collo', sets: '3×20sec', rest: '30sec', notes: 'Resistenza manuale | 4 direzioni' },\r\n                { name: 'Stomach Vacuum', sets: '3×20sec', rest: '45sec', notes: 'Addome verso colonna | Respiro normale' },\r\n                { name: 'Plank', sets: '3×45sec', rest: '60sec', notes: 'Corpo dritto | Core attivo' }\r\n            ]\r\n        },\r\n        'Sabato': {\r\n            focus: 'Posteriori + Conditioning',\r\n            subtitle: 'Focus: Femorali, glutei, polpacci + condizionamento',\r\n            exercises: [\r\n                { name: 'Stacco Rumeno (RDL)', sets: '4×6-8', rest: '2min', notes: 'Focus femorali | Bilanciere vicino corpo' },\r\n                { name: 'Hip Thrust (Variante Mono)', sets: '3×10-12', rest: '2min', notes: 'Una gamba | Controllo stabilità' },\r\n                { name: 'Nordic Curl o Glute Ham Raise', sets: '3×8-10', rest: '90sec', notes: 'Eccentrica lenta | Assistenza se necessaria' },\r\n                { name: 'Leg Curl Seduto', sets: '3×12-15', rest: '75sec', notes: 'Contrazione massima | Pausa 1 sec' },\r\n                { name: 'Calf Raise Multipla', sets: '3×15-20', rest: '60sec', notes: 'Variare angoli piedi | Range massimo' },\r\n                { name: \"Farmer's Walk\", sets: '3×40m', rest: '90sec', notes: 'Carico pesante | Core + trapezio | Passo normale' },\r\n                { name: 'HIIT Finisher', sets: '8×30sec sprint / 60sec camminata', rest: 'Totale 10min', notes: 'Intensità massima sprint | Recupero attivo' }\r\n            ]\r\n        },\r\n        'Domenica': {\r\n            focus: 'Riposo Completo',\r\n            subtitle: 'Focus: Recupero totale, rigenerazione',\r\n            exercises: [\r\n                { name: 'Passeggiata Tranquilla', sets: '30-60min', rest: 'Libero', notes: 'Aria aperta | Ritmo rilassante' },\r\n                { name: 'Stretching Globale', sets: '20-30min', rest: 'Flow dolce', notes: 'Focus respirazione e relax' },\r\n                { name: 'Sauna/Bagno Turco (Opzionale)', sets: '15-20min', rest: 'Recovery', notes: 'Detossificazione | Idratazione' },\r\n                { name: 'Meditazione/Visualizzazione', sets: '10-20min', rest: 'Mentale', notes: 'Preparazione settimana successiva' }\r\n            ]\r\n        }\r\n    };\r\n    \r\n    const loadCompletedWorkouts = () => {\r\n        const saved = localStorage.getItem('completedWorkouts');\r\n        if (saved) {\r\n            setCompletedWorkouts(JSON.parse(saved));\r\n        }\r\n    };\r\n    \r\n    const handleExerciseComplete = () => {\r\n        if (!selectedExercise || !exerciseForm.sets || !exerciseForm.reps || !exerciseForm.weight) {\r\n            alert('Compila tutti i campi obbligatori!');\r\n            return;\r\n        }\r\n        \r\n        const isNewPR = exerciseHook.markExerciseCompleted(\r\n            selectedExercise.name,\r\n            exerciseForm.sets,\r\n            exerciseForm.reps,\r\n            exerciseForm.weight,\r\n            exerciseForm.notes,\r\n            exerciseForm.rir\r\n        );\r\n        \r\n        if (isNewPR) {\r\n            alert('🏆 NUOVO PERSONAL RECORD! Incredibile!');\r\n        }\r\n        \r\n        // Reset form\r\n        setExerciseForm({ sets: '', reps: '', weight: '', rir: '', notes: '' });\r\n        setSelectedExercise(null);\r\n    };\r\n    \r\n    const markWorkoutCompleted = (day) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const workoutData = {\r\n            day,\r\n            date: today,\r\n            id: Date.now()\r\n        };\r\n        \r\n        const updated = [workoutData, ...completedWorkouts];\r\n        setCompletedWorkouts(updated);\r\n        localStorage.setItem('completedWorkouts', JSON.stringify(updated));\r\n        \r\n        // Marca anche nel calendario streak\r\n        const todayWorkout = workoutPlan[day];\r\n        if (todayWorkout) {\r\n            calendarHook.markWorkoutCompleted(new Date(), todayWorkout.focus, todayWorkout.exercises);\r\n        }\r\n    };\r\n    \r\n    const isWorkoutCompletedToday = (day) => {\r\n        const today = new Date().toISOString().split('T')[0];\r\n        return completedWorkouts.some(workout => \r\n            workout.day === day && workout.date === today\r\n        );\r\n    };\r\n    \r\n    const getExerciseCompletionStatus = (exercises) => {\r\n        const completedCount = exercises.filter(ex => \r\n            exerciseHook.isExerciseCompletedToday(ex.name)\r\n        ).length;\r\n        \r\n        return {\r\n            completed: completedCount,\r\n            total: exercises.length,\r\n            percentage: Math.round((completedCount / exercises.length) * 100)\r\n        };\r\n    };\r\n    \r\n    const getTodayWorkout = () => {\r\n        const today = new Date().getDay();\r\n        const todayWorkout = Object.entries(workoutPlan).find(([key]) => {\r\n            const dayMap = {\r\n                'Lunedì': 1, 'Martedì': 2, 'Mercoledì': 3, 'Giovedì': 4,\r\n                'Venerdì': 5, 'Sabato': 6, 'Domenica': 0\r\n            };\r\n            return dayMap[key] === today;\r\n        });\r\n        \r\n        return todayWorkout ? { day: todayWorkout[0], ...todayWorkout[1] } : null;\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        loadCompletedWorkouts();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"workout-container\">\r\n            <div className=\"workout-header\">\r\n                <h2>🏋️ Scheda: Fisico della Madonna (6 Mesi)</h2>\r\n                <p className=\"program-description\">Programma di allenamento avanzato per trasformazione fisica estrema. \r\n                   <strong>Split Push/Pull/Legs + Specializzazione</strong> ottimizzato per ipertrofia muscolare.</p>\r\n                <div className=\"program-stats\">\r\n                    <span className=\"stat\">📅 6 giorni/settimana</span>\r\n                    <span className=\"stat\">⏱️ 75-90 min/sessione</span>\r\n                    <span className=\"stat\">🎯 Volume: Alto</span>\r\n                    <span className=\"stat\">🔥 Intensità: RIR 1-3</span>\r\n                </div>\r\n            </div>\r\n            \r\n            <WorkoutTimer onSessionComplete={(sessionData) => {\r\n                console.log('Sessione completata:', sessionData);\r\n            }} />\r\n            \r\n            <div className=\"workout-week\">\r\n                <h3>📅 Piano Settimanale</h3>\r\n                <div className=\"days-grid\">\r\n                    {Object.entries(workoutPlan).map(([day, workout]) => (\r\n                        <div key={day} className={`day-card ${selectedDay === day ? 'selected' : ''}`}>\r\n                            <div className=\"day-header\" onClick={() => setSelectedDay(selectedDay === day ? null : day)}>\r\n                                <h4>{day}</h4>\r\n                                <p className=\"focus-title\">{workout.focus}</p>\r\n                                <p className=\"focus-subtitle\">{workout.subtitle}</p>\r\n                                {isWorkoutCompletedToday(day) && (\r\n                                    <span className=\"completed-badge\">✅ Completato</span>\r\n                                )}\r\n                            </div>\r\n                            \r\n                            {selectedDay === day && (\r\n                                <div className=\"day-details\">\r\n                                    <div className=\"exercises-list\">\r\n                                        {workout.exercises.map((exercise, index) => (\r\n                                            <div key={index} className=\"exercise-item\">\r\n                                                <h5>{exercise.name}</h5>\r\n                                                <div className=\"exercise-details\">\r\n                                                    <span className=\"sets\">{exercise.sets}</span>\r\n                                                    <span className=\"rest\">Rest: {exercise.rest}</span>\r\n                                                </div>\r\n                                                <p className=\"notes\">{exercise.notes}</p>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"day-actions\">\r\n                                        {!isWorkoutCompletedToday(day) ? (\r\n                                            <button \r\n                                                className=\"button complete-workout-btn\"\r\n                                                onClick={() => markWorkoutCompleted(day)}\r\n                                            >\r\n                                                ✅ Segna come Completato\r\n                                            </button>\r\n                                        ) : (\r\n                                            <p className=\"completed-message\">💪 Ottimo lavoro! Workout completato oggi.</p>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"workout-tips\">\r\n                <h3>💡 Principi Fondamentali - Fisico della Madonna</h3>\r\n                <ul>\r\n                    <li>🔥 <strong>RIR (Reps in Reserve):</strong> Mantieni sempre 1-2 ripetizioni di riserva per ottimizzare volume e recupero</li>\r\n                    <li>⏱️ <strong>Tempi di Recupero:</strong> Rispetta rigorosamente i tempi indicati - sono calcolati per massimizzare l'effetto allenante</li>\r\n                    <li>💪 <strong>Progressione:</strong> Aumenta il carico quando riesci a completare tutte le serie nel range alto delle ripetizioni</li>\r\n                    <li>🎯 <strong>Forma Tecnica:</strong> La qualità del movimento è prioritaria rispetto al peso utilizzato</li>\r\n                    <li>😴 <strong>Recupero:</strong> Il giovedì è sacro - recupero attivo essenziale per la crescita</li>\r\n                    <li>🍽️ <strong>Nutrizione:</strong> Surplus calorico di 300-500 kcal/die + 2.2g proteine/kg corporeo</li>\r\n                    <li>💧 <strong>Idratazione:</strong> Minimo 35ml/kg corporeo + 500ml extra nei giorni di allenamento</li>\r\n                    <li>📈 <strong>Tracking:</strong> Tieni traccia di carichi, ripetizioni e sensazioni per ogni esercizio</li>\r\n                    <li>🧘 <strong>Mente-Muscolo:</strong> Focus mentale sul muscolo target durante ogni ripetizione</li>\r\n                    <li>🔄 <strong>Periodizzazione:</strong> Ogni 6-8 settimane rivaluta e modifica il programma</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Workout;","import React from 'react';\r\n\r\nconst Nutrition = () => {\r\n    return (\r\n        <div className=\"nutrition-container\">\r\n            <h2>Piano Nutrizionale</h2>\r\n            <p>Scopri i piani nutrizionali e le linee guida per supportare la tua crescita fisica straordinaria.</p>\r\n            <h3>Linee Guida Nutrizionali</h3>\r\n            <ul>\r\n                <li>Consuma una varietà di alimenti per garantire un apporto nutrizionale completo.</li>\r\n                <li>Includi proteine magre in ogni pasto per supportare la crescita muscolare.</li>\r\n                <li>Assicurati di idratarti adeguatamente durante il giorno.</li>\r\n                <li>Limita il consumo di zuccheri aggiunti e cibi altamente processati.</li>\r\n                <li>Considera l'uso di integratori se necessario, in consultazione con un professionista della salute.</li>\r\n            </ul>\r\n            <h3>Esempio di Piano Alimentare</h3>\r\n            <p>Colazione: Uova strapazzate con spinaci e pane integrale.</p>\r\n            <p>Pranzo: Petto di pollo grigliato con quinoa e verdure al vapore.</p>\r\n            <p>Cena: Salmone al forno con patate dolci e broccoli.</p>\r\n            <p>Snack: Yogurt greco con frutta e noci.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nutrition;","import React from 'react';\r\n\r\nconst Supplements = () => {\r\n    return (\r\n        <div className=\"supplements-container\">\r\n            <h2>Recommended Supplements for Extraordinary Growth</h2>\r\n            <ul>\r\n                <li>\r\n                    <strong>Protein Powder:</strong> Supports muscle recovery and growth.\r\n                </li>\r\n                <li>\r\n                    <strong>Creatine:</strong> Enhances strength and performance during workouts.\r\n                </li>\r\n                <li>\r\n                    <strong>BCAAs:</strong> Helps reduce muscle soreness and fatigue.\r\n                </li>\r\n                <li>\r\n                    <strong>Omega-3 Fatty Acids:</strong> Supports overall health and reduces inflammation.\r\n                </li>\r\n                <li>\r\n                    <strong>Multivitamins:</strong> Ensures adequate intake of essential vitamins and minerals.\r\n                </li>\r\n            </ul>\r\n            <p>Always consult with a healthcare professional before starting any supplement regimen.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Supplements;","import React from 'react';\r\n\r\nconst Recovery = () => {\r\n    return (\r\n        <div className=\"recovery-container\">\r\n            <h2>Recovery Strategies for Extraordinary Growth</h2>\r\n            <p>Recovery is a crucial aspect of any training program, especially for those aiming for extraordinary physical growth. Here are some effective recovery strategies:</p>\r\n            <ul>\r\n                <li><strong>Rest Days:</strong> Incorporate regular rest days into your training schedule to allow your muscles to repair and grow.</li>\r\n                <li><strong>Active Recovery:</strong> Engage in low-intensity activities such as walking, yoga, or light cycling to promote blood flow and recovery.</li>\r\n                <li><strong>Hydration:</strong> Ensure adequate hydration before, during, and after workouts to support recovery and performance.</li>\r\n                <li><strong>Nutrition:</strong> Consume a balanced diet rich in protein, healthy fats, and carbohydrates to fuel recovery.</li>\r\n                <li><strong>Sleep:</strong> Aim for 7-9 hours of quality sleep each night to optimize recovery and hormonal balance.</li>\r\n                <li><strong>Stretching and Mobility:</strong> Incorporate stretching and mobility exercises to improve flexibility and reduce muscle soreness.</li>\r\n                <li><strong>Foam Rolling:</strong> Use foam rollers to alleviate muscle tightness and improve circulation.</li>\r\n            </ul>\r\n            <p>Implementing these recovery strategies will help you maximize your training efforts and achieve your physical growth goals.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recovery;","import React from 'react';\r\n\r\nconst Progress = () => {\r\n    const [progressData, setProgressData] = React.useState([]);\r\n    const [newEntry, setNewEntry] = React.useState({\r\n        weight: '',\r\n        bodyFat: '',\r\n        muscleMass: '',\r\n        chest: '',\r\n        arms: '',\r\n        waist: '',\r\n        thighs: '',\r\n        notes: ''\r\n    });\r\n    const [timeStats, setTimeStats] = React.useState({\r\n        totalWorkoutTime: 0,\r\n        weeklyTime: 0,\r\n        monthlyTime: 0,\r\n        sessionsCompleted: 0\r\n    });\r\n    \r\n    const loadProgressData = () => {\r\n        const saved = localStorage.getItem('progressData');\r\n        if (saved) {\r\n            setProgressData(JSON.parse(saved));\r\n        }\r\n        \r\n        const savedTimeStats = localStorage.getItem('timeStats');\r\n        if (savedTimeStats) {\r\n            setTimeStats(JSON.parse(savedTimeStats));\r\n        }\r\n    };\r\n    \r\n    const saveProgressData = (data) => {\r\n        localStorage.setItem('progressData', JSON.stringify(data));\r\n    };\r\n    \r\n    const addEntry = () => {\r\n        if (!newEntry.weight) return;\r\n        \r\n        const entry = {\r\n            ...newEntry,\r\n            date: new Date().toISOString().split('T')[0],\r\n            id: Date.now()\r\n        };\r\n        \r\n        const updated = [entry, ...progressData];\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n        \r\n        setNewEntry({\r\n            weight: '',\r\n            bodyFat: '',\r\n            muscleMass: '',\r\n            chest: '',\r\n            arms: '',\r\n            waist: '',\r\n            thighs: '',\r\n            notes: ''\r\n        });\r\n    };\r\n    \r\n    const deleteEntry = (id) => {\r\n        const updated = progressData.filter(entry => entry.id !== id);\r\n        setProgressData(updated);\r\n        saveProgressData(updated);\r\n    };\r\n    \r\n    const formatTime = (minutes) => {\r\n        const hours = Math.floor(minutes / 60);\r\n        const mins = minutes % 60;\r\n        return `${hours}h ${mins}m`;\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadProgressData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"progress-container\">\r\n            <h2>🎯 Progress Tracker Avanzato</h2>\r\n            \r\n            <div className=\"time-stats\">\r\n                <h3>📊 Statistiche Tempo Investito</h3>\r\n                <div className=\"stats-grid\">\r\n                    <div className=\"stat-card\">\r\n                        <h4>Tempo Totale</h4>\r\n                        <p>{formatTime(timeStats.totalWorkoutTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questa Settimana</h4>\r\n                        <p>{formatTime(timeStats.weeklyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Questo Mese</h4>\r\n                        <p>{formatTime(timeStats.monthlyTime)}</p>\r\n                    </div>\r\n                    <div className=\"stat-card\">\r\n                        <h4>Sessioni Completate</h4>\r\n                        <p>{timeStats.sessionsCompleted}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"add-entry-form\">\r\n                <h3>➕ Aggiungi Nuove Misurazioni</h3>\r\n                <div className=\"form-grid\">\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Peso (kg)\"\r\n                        value={newEntry.weight}\r\n                        onChange={(e) => setNewEntry({...newEntry, weight: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Grassa (%)\"\r\n                        value={newEntry.bodyFat}\r\n                        onChange={(e) => setNewEntry({...newEntry, bodyFat: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Massa Muscolare (kg)\"\r\n                        value={newEntry.muscleMass}\r\n                        onChange={(e) => setNewEntry({...newEntry, muscleMass: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Petto (cm)\"\r\n                        value={newEntry.chest}\r\n                        onChange={(e) => setNewEntry({...newEntry, chest: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Braccia (cm)\"\r\n                        value={newEntry.arms}\r\n                        onChange={(e) => setNewEntry({...newEntry, arms: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Vita (cm)\"\r\n                        value={newEntry.waist}\r\n                        onChange={(e) => setNewEntry({...newEntry, waist: e.target.value})}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Cosce (cm)\"\r\n                        value={newEntry.thighs}\r\n                        onChange={(e) => setNewEntry({...newEntry, thighs: e.target.value})}\r\n                    />\r\n                    <textarea\r\n                        placeholder=\"Note (sensazioni, obiettivi, etc.)\"\r\n                        value={newEntry.notes}\r\n                        onChange={(e) => setNewEntry({...newEntry, notes: e.target.value})}\r\n                    />\r\n                </div>\r\n                <button className=\"button\" onClick={addEntry}>Aggiungi Misurazione</button>\r\n            </div>\r\n            \r\n            <div className=\"progress-table\">\r\n                <h3>📈 Storico Progressi</h3>\r\n                {progressData.length === 0 ? (\r\n                    <p>Nessuna misurazione ancora. Inizia ad aggiungere i tuoi progressi!</p>\r\n                ) : (\r\n                    <div className=\"table-responsive\">\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Data</th>\r\n                                    <th>Peso</th>\r\n                                    <th>Grasso</th>\r\n                                    <th>Muscolo</th>\r\n                                    <th>Petto</th>\r\n                                    <th>Braccia</th>\r\n                                    <th>Vita</th>\r\n                                    <th>Cosce</th>\r\n                                    <th>Note</th>\r\n                                    <th>Azioni</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {progressData.map((entry) => (\r\n                                    <tr key={entry.id}>\r\n                                        <td>{entry.date}</td>\r\n                                        <td>{entry.weight} kg</td>\r\n                                        <td>{entry.bodyFat}%</td>\r\n                                        <td>{entry.muscleMass} kg</td>\r\n                                        <td>{entry.chest} cm</td>\r\n                                        <td>{entry.arms} cm</td>\r\n                                        <td>{entry.waist} cm</td>\r\n                                        <td>{entry.thighs} cm</td>\r\n                                        <td className=\"notes-cell\">{entry.notes}</td>\r\n                                        <td>\r\n                                            <button \r\n                                                className=\"delete-btn\"\r\n                                                onClick={() => deleteEntry(entry.id)}\r\n                                            >\r\n                                                🗑️\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Progress;","import React from 'react';\r\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport Dashboard from './components/Dashboard';\r\nimport Workout from './components/Workout';\r\nimport Nutrition from './components/Nutrition';\r\nimport Supplements from './components/Supplements';\r\nimport Recovery from './components/Recovery';\r\nimport Progress from './components/Progress';\r\nimport './styles/main.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Dashboard />} />\r\n                    <Route path=\"/workout\" element={<Workout />} />\r\n                    <Route path=\"/nutrition\" element={<Nutrition />} />\r\n                    <Route path=\"/supplements\" element={<Supplements />} />\r\n                    <Route path=\"/recovery\" element={<Recovery />} />\r\n                    <Route path=\"/progress\" element={<Progress />} />\r\n                </Routes>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/main.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}